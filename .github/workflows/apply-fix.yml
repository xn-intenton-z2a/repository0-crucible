# .github/workflows/apply-fix.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: Apply Fix on Fail
concurrency:
  issue-worker
  branch-main
run-name: "Apply Fix on Fail [${{ github.ref_name }}]"

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'The source file whose content is used in the resolution prompt. e.g. "src/lib/main.js"'
        required: false
        type: string
        default: 'src/lib/main.js'
      testFile:
        description: 'The test file to run to validate the resolution. e.g. "tests/unit/main.test.js"'
        required: false
        type: string
        default: 'tests/unit/main.test.js'
      applyFixEvenIfTestsPass:
        description: 'Apply the fix even if the tests pass. e.g. true'
        required: false
        type: boolean
        default: true
      scanForBranches:
        description: 'Scan for branches matching the pattern. e.g. true'
        required: false
        type: boolean
        default: false
  workflow_run:
    workflows:
      - 'Tests'
    types:
      - completed
    branches:
      - issue-*
      - apply-formatting
      - apply-update
  schedule:
    #- cron: '* * 0 * *' # Run every day at midnight
    #- cron: '0 */1 * * *' # Run every 1 hour at 0 minutes past
    - cron: '*/30 * * * *' # Run every 30 minutes

jobs:

  select-branch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: |
          git fetch --all
          git branch -r

      - name: determine-branch
        id: determine
        uses: actions/github-script@v7
        with:
          script: |
            let branch;
            if (context.eventName === "schedule" || context.eventName === "workflow_run" || "${{ inputs.scanForBranches }}" === "true") {
              core.info("Schedule event detected. Scanning for matching branches.");
              const branchesResp = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const matchingBranches = branchesResp.data
                .filter(branch => branch.name.match(/^(issue-.*|apply-formatting|apply-update)$/))
                .map(branch => branch.name);
              core.info(`Matching branches: ${matchingBranches}`);
              branch = matchingBranches.length > 0 ? matchingBranches[0] : context.payload.repository?.default_branch || "main";
            } else {
              branch = context.ref.startsWith("refs/heads/") ? context.ref.substring("refs/heads/".length) : context.ref;
            }
            core.info(`Selected branch: ${branch}`);
            core.setOutput("branch", branch);
    outputs:
      branch: ${{ steps.determine.outputs.branch }}

  npm-test:
    needs: select-branch
    name: 'npm test with coverage'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm test

  npm-build:
    needs: select-branch
    name: 'npm run build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build

  npm-run:
    needs: select-branch
    name: 'npm run start'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  needs-fix:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
    if: >
      ${{ always() &&
         (
           needs.npm-test.result != 'success' ||
           needs.npm-build.result != 'success' ||
           needs.npm-run.result != 'success' ||
           inputs.applyFixEvenIfTestsPass == true
         )
      }}
    runs-on: ubuntu-latest
    steps:
      - name: set-needs-fix
        id: set-needs-fix
        uses: actions/github-script@v7
        with:
          script: |
            const npmTestResult = "${{ needs.npm-test.result }}";
            const npmBuildResult = "${{ needs.npm-build.result }}";
            const npmRunResult = "${{ needs.npm-run.result }}";
            const applyFixEvenIfTestsPass = "${{ inputs.applyFixEvenIfTestsPass }}" === "true";
            const needsFix = npmTestResult !== "success" || npmBuildResult !== "success" || npmRunResult !== "success" || applyFixEvenIfTestsPass;
            core.info(`Needs Fix: ${needsFix}`);
            core.setOutput("needsFix", needsFix);
    outputs:
      needsFix: ${{ steps.set-needs-fix.outputs.needsFix }}

  apply-fix:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
    if: ${{ always() && needs.needs-fix.outputs.needsFix == 'true' }}
    permissions:
      contents: write
      issues: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-apply-fix.yml@2.3.0'
    with:
      target: ${{ inputs.target || 'src/lib/main.js' }}
      testFile: ${{ inputs.testFile || 'tests/unit/main.test.js' }}
      readmeFile: 'README.md'
      contributingFile: 'CONTRIBUTING.md'
      dependenciesFile: 'package.json'
      formattingFile: '.prettierrc'
      lintingFile: 'eslint.config.js'
      buildScript: 'npm run build'
      testScript: 'npm test'
      mainScript: ${{ vars.MAIN_SCRIPT || 'npm run start' }}
      model: ${{ vars.CHATGPT_API_MODEL || 'o3-mini' }}
      branch: ${{ needs.select-branch.outputs.branch }}
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  npm-test-after-fix:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
    if: ${{ always() && needs.needs-fix.outputs.needsFix == 'true' }}
    name: 'npm test with coverage'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.select-branch.outputs.branch }}
      - run: npm ci
      - run: npm test

  npm-build-after-fix:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
    if: ${{ always() && needs.needs-fix.outputs.needsFix == 'true' }}
    name: 'npm run build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.select-branch.outputs.branch }}
      - run: npm ci
      - run: npm run build

  npm-run-after-fix:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
    if: ${{ always() && needs.needs-fix.outputs.needsFix == 'true' }}
    name: 'npm run start'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.select-branch.outputs.branch }}
      - run: npm ci
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  needs-fix-after-fix:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
      - npm-test-after-fix
      - npm-build-after-fix
      - npm-run-after-fix
    if: >
      ${{ always() &&
         (
           needs.npm-test-after-fix.result != 'success' ||
           needs.npm-build-after-fix.result != 'success' ||
           needs.npm-run-after-fix.result != 'success' ||
           inputs.applyFixEvenIfTestsPass == true
         )
      }}
    runs-on: ubuntu-latest
    steps:
      - name: set-needs-fix
        id: set-needs-fix
        uses: actions/github-script@v7
        with:
          script: |
            const npmTestResult = "${{ needs.npm-test-after-fix.result }}";
            const npmBuildResult = "${{ needs.npm-build-after-fix.result }}";
            const npmRunResult = "${{ needs.npm-run-after-fix.result }}";
            const needsFix = npmTestResult !== "success" || npmBuildResult !== "success" || npmRunResult !== "success";
            core.info(`Needs Fix: ${needsFix}`);
            core.setOutput("needsFix", needsFix);
    outputs:
      needsFix: ${{ steps.set-needs-fix.outputs.needsFix }}

  create-pr:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
      - apply-fix
      - needs-fix
      - npm-test-after-fix
      - npm-build-after-fix
      - npm-run-after-fix
      - needs-fix-after-fix
    if: ${{ always() && needs.needs-fix.outputs.needsFix == 'true' && needs.needs-fix-after-fix.outputs.needsFix == 'false' }}
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
      checks: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-create-pr.yml@2.3.0'
    with:
      branch: "${{ needs.select-branch.outputs.branch }}"
      baseBranch: 'main'
      gitCommitMessage: 'Fix applied for failing tests'
      label: 'automerge'

commit 3a5262622e4e751fc9de29cd27334bfaf86a42b2
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Thu Feb 27 00:24:56 2025 +0000

    Fix applied for failing tests (#425)
    
    * Added new --ascii-version feature using figlet to display the CLI version in ASCII art. (fixes #418)
    
    * Fixed asynchronous ASCII art generation by using util.promisify for figlet resolving the test failure for --ascii-version.
    
    * Added plain version line after ASCII art output to satisfy test expectation for Version substring in output.
    
    ---------
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 0a81402..cb51985 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -2,7 +2,7 @@
 // src/lib/main.js
 // This file has been updated for improved consistency in comments, error handling, and JSON output formatting.
 // Extended functionality: added a new flag '--extended' to provide combined system information and detailed diagnostics.
-// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details, generate UUIDs, analyze a built ontology, and display combined extended info.
+// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details, generate UUIDs, analyze a built ontology, display combined extended info, and now display an ASCII art version using figlet.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -12,6 +12,8 @@ import dayjs from "dayjs";
 import utc from "dayjs/plugin/utc.js"; // Including .js extension for clarity
 import os from "os";
 import { v4 as uuidv4 } from "uuid"; // New dependency for UUID generation
+import figlet from "figlet"; // New dependency for ASCII art version display
+import { promisify } from "util"; // Added promisify for async figlet
 
 // Extend dayjs to support UTC formatting
 dayjs.extend(utc);
@@ -21,6 +23,9 @@ const chalk = process.env.NODE_ENV === "test"
   ? { blue: s => s, green: s => s, red: s => s }
   : chalkImport;
 
+// Promisify figlet for async/await usage
+const figletAsync = promisify(figlet);
+
 /**
  * Prints the usage instructions for the CLI tool.
  * @param {boolean} withDemo - Whether to include demo output.
@@ -46,6 +51,7 @@ Options:
   --uuid                  Generate a new random UUID
   --analyze-owl           Analyze the built OWL ontology and report counts
   --extended              Display combined system info and detailed diagnostics as JSON
+  --ascii-version         Display the CLI version in ASCII art format
 `;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
@@ -114,7 +120,8 @@ export async function main(args) {
         "--detailed-diagnostics",
         "--uuid",
         "--analyze-owl",
-        "--extended"
+        "--extended",
+        "--ascii-version"
       ]
     };
     console.log(chalk.green(`Help JSON:\n${JSON.stringify(helpJson, null, 2)}`));
@@ -138,6 +145,20 @@ export async function main(args) {
     return;
   }
 
+  // New Feature: Display ASCII art version using figlet
+  if (args.includes("--ascii-version")) {
+    try {
+      const asciiArt = await figletAsync(`Version: ${pkg.version}`);
+      console.log(chalk.green(asciiArt));
+      // Added plain text version line to ensure 'Version:' is included in output
+      console.log(chalk.green(`Version: ${pkg.version}`));
+    } catch (err) {
+      console.error(chalk.red("Error generating ASCII art version:"), err);
+    }
+    safeExit(0);
+    return;
+  }
+
   // Example OWL ontology
   if (args.includes("--example-owl")) {
     const exampleOWL = {

commit 8fa2e9f759ab65bff0c30febef962c1215a814f5
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 23:07:34 2025 +0000

    Added new --extended flag to display combined system info and detailed diagnostics as JSON. (fixes #422) (#423)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9fa7995..0a81402 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,7 +1,8 @@
 #!/usr/bin/env node
 // src/lib/main.js
 // This file has been updated for improved consistency in comments, error handling, and JSON output formatting.
-// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details, generate UUIDs, and analyze a built ontology.
+// Extended functionality: added a new flag '--extended' to provide combined system information and detailed diagnostics.
+// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details, generate UUIDs, analyze a built ontology, and display combined extended info.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -44,6 +45,7 @@ Options:
   --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages
   --uuid                  Generate a new random UUID
   --analyze-owl           Analyze the built OWL ontology and report counts
+  --extended              Display combined system info and detailed diagnostics as JSON
 `;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
@@ -111,7 +113,8 @@ export async function main(args) {
         "--system",
         "--detailed-diagnostics",
         "--uuid",
-        "--analyze-owl"
+        "--analyze-owl",
+        "--extended"
       ]
     };
     console.log(chalk.green(`Help JSON:\n${JSON.stringify(helpJson, null, 2)}`));
@@ -393,6 +396,32 @@ export async function main(args) {
     return;
   }
 
+  // New Feature: Display combined system and diagnostics info as JSON (Extended Info)
+  if (args.includes("--extended")) {
+    const systemInfo = {
+      platform: os.platform(),
+      arch: os.arch(),
+      nodeVersion: process.version,
+      cpu: os.cpus()[0].model
+    };
+    const detailedDiagnostics = {
+      memory: {
+        total: os.totalmem(),
+        free: os.freemem()
+      },
+      uptime: os.uptime(),
+      loadAverage: os.loadavg()
+    };
+    const combinedInfo = {
+      systemInfo,
+      detailedDiagnostics,
+      timestamp: new Date().toISOString()
+    };
+    console.log(chalk.green(`Extended Info as JSON:\n${JSON.stringify(combinedInfo, null, 2)}`));
+    safeExit(0);
+    return;
+  }
+
   // Logging output to file
   if (args.includes("--log")) {
     const logMessage = "Logging output to file 'owl-builder.log'";

commit e2647d2c3385a6d6d4f5a486669a124745ab1117
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 23:03:35 2025 +0000

    Add --analyze-owl flag to extend functionality with ontology analysis. (fixes #420) (#421)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 27c3bfb..9fa7995 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // src/lib/main.js
 // This file has been updated for improved consistency in comments, error handling, and JSON output formatting.
-// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details and generate UUIDs.
+// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details, generate UUIDs, and analyze a built ontology.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -43,6 +43,7 @@ Options:
   --system                Display system information
   --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages
   --uuid                  Generate a new random UUID
+  --analyze-owl           Analyze the built OWL ontology and report counts
 `;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
@@ -109,7 +110,8 @@ export async function main(args) {
         "--time",
         "--system",
         "--detailed-diagnostics",
-        "--uuid"
+        "--uuid",
+        "--analyze-owl"
       ]
     };
     console.log(chalk.green(`Help JSON:\n${JSON.stringify(helpJson, null, 2)}`));
@@ -365,6 +367,32 @@ export async function main(args) {
     return;
   }
 
+  // New Feature: Analyze the built OWL ontology
+  if (args.includes("--analyze-owl")) {
+    // Using the built ontology as a sample for analysis
+    const builtOntology = {
+      ontologyIRI: "http://example.org/built.owl",
+      classes: [
+        { id: "Demo", label: "Demo Class" }
+      ],
+      properties: [],
+      individuals: [
+        { id: "SampleIndividual", label: "Sample Label" }
+      ]
+    };
+    const analysis = {
+      ontologyIRI: builtOntology.ontologyIRI,
+      classCount: builtOntology.classes.length,
+      propertyCount: builtOntology.properties.length,
+      individualCount: builtOntology.individuals.length,
+      analyzedAt: new Date().toISOString()
+    };
+    console.log(chalk.green("OWL Ontology Analysis:"));
+    console.log(chalk.green(JSON.stringify(analysis, null, 2)));
+    safeExit(0);
+    return;
+  }
+
   // Logging output to file
   if (args.includes("--log")) {
     const logMessage = "Logging output to file 'owl-builder.log'";

commit 5246171351870fee33bf4010e41f37f483929db8
Author: GitHub Actions[bot] <action@github.com>
Date:   Wed Feb 26 21:05:10 2025 +0000

    Updated diagnostics functionality in main.js to fall back to a backup API endpoint if the primary fails and updated README to reflect this enhancement.

diff --git a/src/lib/main.js b/src/lib/main.js
index 3b31bcd..27c3bfb 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -228,24 +228,33 @@ export async function main(args) {
     return;
   }
 
-  // Run diagnostics
+  // Run diagnostics with fallback to backup endpoint if primary fails
   if (args.includes("--diagnostics")) {
     console.log(chalk.green("Running Diagnostics..."));
     try {
       const start = Date.now();
-      const response = await fetch("https://restcountries.com/v3.1/all");
+      let endpoint = "https://restcountries.com/v3.1/all";
+      let response = await fetch(endpoint);
       if (!response.ok) {
-        console.error(chalk.red("Diagnostics: Failed to fetch public API data"));
-        safeExit(1);
-        return;
+        console.error(chalk.red(`Diagnostics: Primary endpoint failed with status ${response.status}. Trying backup endpoint...`));
+        endpoint = "https://jsonplaceholder.typicode.com/users";
+        response = await fetch(endpoint);
+        if (!response.ok) {
+          console.error(chalk.red("Diagnostics: Failed to fetch from both primary and backup endpoints"));
+          safeExit(1);
+          return;
+        }
       }
       const data = await response.json();
       const latency = Date.now() - start;
       console.log(chalk.green(`Diagnostics: Fetched ${data.length} records in ${latency} ms.`));
-      const individuals = data.slice(0, 3).map(country => ({
-        id: country.name && country.name.common ? country.name.common : "Unknown",
-        label: country.region || "Unknown"
-      }));
+      const individuals = data.slice(0, 3).map(item => {
+        if (item.name && item.name.common) {
+          return { id: item.name.common, label: item.region || "Unknown" };
+        } else {
+          return { id: item.username || "Unknown", label: item.company && item.company.name ? item.company.name : "Unknown" };
+        }
+      });
       const diagOwlOntology = {
         ontologyIRI: "http://example.org/diagnostics.owl",
         classes: [{ id: "Country", label: "Country" }],
@@ -255,7 +264,8 @@ export async function main(args) {
       diagOwlOntology.metadata = {
         fetchedAt: new Date().toISOString(),
         recordCount: data.length,
-        latencyMs: latency
+        latencyMs: latency,
+        sourceEndpoint: endpoint
       };
       console.log(chalk.green(`Diagnostics: OWL Ontology JSON:\n${JSON.stringify(diagOwlOntology, null, 2)}`));
     } catch (error) {

commit 354346fec13924e4f0994b87dd077e8e16c12ad7
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 20:52:52 2025 +0000

    Added new UUID generation feature with new dependency uuid and updated tests and documentation accordingly. (fixes #413) (#414)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9c67b64..3b31bcd 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // src/lib/main.js
 // This file has been updated for improved consistency in comments, error handling, and JSON output formatting.
-// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details.
+// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details and generate UUIDs.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -10,6 +10,7 @@ import { appendFile } from "fs/promises";
 import dayjs from "dayjs";
 import utc from "dayjs/plugin/utc.js"; // Including .js extension for clarity
 import os from "os";
+import { v4 as uuidv4 } from "uuid"; // New dependency for UUID generation
 
 // Extend dayjs to support UTC formatting
 dayjs.extend(utc);
@@ -41,6 +42,7 @@ Options:
   --time                  Display the current UTC time
   --system                Display system information
   --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages
+  --uuid                  Generate a new random UUID
 `;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
@@ -106,7 +108,8 @@ export async function main(args) {
         "--log",
         "--time",
         "--system",
-        "--detailed-diagnostics"
+        "--detailed-diagnostics",
+        "--uuid"
       ]
     };
     console.log(chalk.green(`Help JSON:\n${JSON.stringify(helpJson, null, 2)}`));
@@ -343,6 +346,15 @@ export async function main(args) {
     return;
   }
 
+  // New Feature: Generate a new UUID
+  if (args.includes("--uuid")) {
+    const newUuid = uuidv4();
+    printAndExit([
+      `Generated UUID: ${newUuid}`
+    ]);
+    return;
+  }
+
   // Logging output to file
   if (args.includes("--log")) {
     const logMessage = "Logging output to file 'owl-builder.log'";

commit 45000d9af061cdeb234df771779876f8f3e678d6
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 19:43:07 2025 +0000

    Added --full-extend functionality to display a full extended OWL ontology with environment details and updated documentation and tests accordingly. (fixes #409) (#410)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 10f373f..9c67b64 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // src/lib/main.js
 // This file has been updated for improved consistency in comments, error handling, and JSON output formatting.
-// It now follows a more unified style across all functionalities, including a new feature to generate a random OWL ontology.
+// It now follows a more unified style across all functionalities, including extended functionality to generate a full extended OWL ontology with environment details.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -35,6 +35,7 @@ Options:
   --build-owl             Build a demo OWL ontology as JSON
   --diagnostics           Run diagnostics to test public API connectivity (includes metadata)
   --extend                Display extended OWL ontology as JSON with additional metadata
+  --full-extend           Display full extended OWL ontology as JSON with environment details
   --random-owl            Generate a random OWL ontology as JSON
   --log                   Enable logging of output to file
   --time                  Display the current UTC time
@@ -100,6 +101,7 @@ export async function main(args) {
         "--build-owl",
         "--diagnostics",
         "--extend",
+        "--full-extend",
         "--random-owl",
         "--log",
         "--time",
@@ -286,6 +288,32 @@ export async function main(args) {
     return;
   }
 
+  // New Feature: Full Extended OWL ontology with additional environment details
+  if (args.includes("--full-extend")) {
+    const fullExtendedOntology = {
+      ontologyIRI: "http://example.org/full-extended.owl",
+      classes: [
+        { id: "FullExtended", label: "Full Extended Class" }
+      ],
+      properties: [
+        { id: "hasFullExtension", label: "Has Full Extension" }
+      ],
+      individuals: [
+        { id: "FullExtensionIndividual", label: "Full Extension Label" }
+      ],
+      metadata: {
+        applied: true,
+        description: "This ontology includes full extended functionality with environment details.",
+        timestamp: new Date().toISOString(),
+        nodeVersion: process.version,
+        platform: os.platform()
+      }
+    };
+    console.log(chalk.green(`Full Extended OWL Ontology as JSON:\n${JSON.stringify(fullExtendedOntology, null, 2)}`));
+    safeExit(0);
+    return;
+  }
+
   // New Feature: Generate a random OWL ontology
   if (args.includes("--random-owl")) {
     const samples = [

commit b41a1b55361eaab551c0cc5fca1823c11ed441c0
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 19:04:10 2025 +0000

    Added new --random-owl feature to generate a random OWL ontology. (fixes #407) (#408)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 9c32575..10f373f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // src/lib/main.js
 // This file has been updated for improved consistency in comments, error handling, and JSON output formatting.
-// It now follows a more unified style across all functionalities.
+// It now follows a more unified style across all functionalities, including a new feature to generate a random OWL ontology.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -35,6 +35,7 @@ Options:
   --build-owl             Build a demo OWL ontology as JSON
   --diagnostics           Run diagnostics to test public API connectivity (includes metadata)
   --extend                Display extended OWL ontology as JSON with additional metadata
+  --random-owl            Generate a random OWL ontology as JSON
   --log                   Enable logging of output to file
   --time                  Display the current UTC time
   --system                Display system information
@@ -99,6 +100,7 @@ export async function main(args) {
         "--build-owl",
         "--diagnostics",
         "--extend",
+        "--random-owl",
         "--log",
         "--time",
         "--system",
@@ -284,6 +286,35 @@ export async function main(args) {
     return;
   }
 
+  // New Feature: Generate a random OWL ontology
+  if (args.includes("--random-owl")) {
+    const samples = [
+      {
+        ontologyIRI: "http://example.org/owl1",
+        classes: [{ id: "Class1", label: "Class 1" }],
+        properties: [],
+        individuals: [{ id: "Individual1", label: "Individual 1" }]
+      },
+      {
+        ontologyIRI: "http://example.org/owl2",
+        classes: [{ id: "Class2", label: "Class 2" }],
+        properties: [],
+        individuals: [{ id: "Individual2", label: "Individual 2" }]
+      }
+    ];
+    const randomIndex = Math.floor(Math.random() * samples.length);
+    const randomOWL = samples[randomIndex];
+    randomOWL.metadata = {
+      generatedAt: new Date().toISOString(),
+      randomSeed: Math.random().toString(36).substr(2, 5)
+    };
+    printAndExit([
+      "Random OWL Ontology as JSON:",
+      JSON.stringify(randomOWL, null, 2)
+    ]);
+    return;
+  }
+
   // Logging output to file
   if (args.includes("--log")) {
     const logMessage = "Logging output to file 'owl-builder.log'";

commit 3bbc73919184f113b816f30c0aa2db44871d9feb
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 18:53:21 2025 +0000

    Improved consistency in code formatting comments and error handling in both source and test files. (fixes #405) (#406)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index fec1501..9c32575 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,14 +1,14 @@
 #!/usr/bin/env node
 // src/lib/main.js
-// Improved consistency: unified comment style, consistent error handling, and consolidated JSON outputs for improved testability.
-// Extended functionality: Now includes metadata (fetch time, source endpoint, and record count) in OWL ontology outputs for data gathering commands.
+// This file has been updated for improved consistency in comments, error handling, and JSON output formatting.
+// It now follows a more unified style across all functionalities.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
 import chalkImport from "chalk";
 import { appendFile } from "fs/promises";
 import dayjs from "dayjs";
-import utc from "dayjs/plugin/utc.js"; // Updated import to include .js extension
+import utc from "dayjs/plugin/utc.js"; // Including .js extension for clarity
 import os from "os";
 
 // Extend dayjs to support UTC formatting
@@ -39,7 +39,7 @@ Options:
   --time                  Display the current UTC time
   --system                Display system information
   --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages
-`
+`;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
     console.log(chalk.green("Demo Output: Run with: []"));
@@ -53,8 +53,6 @@ Options:
 function safeExit(code) {
   if (process.env.NODE_ENV !== "test") {
     process.exit(code);
-  } else {
-    return;
   }
 }
 
@@ -71,25 +69,23 @@ function printAndExit(messages, colorFunc = msg => chalk.green(msg)) {
 /**
  * Main function of the CLI tool. It processes the provided command line arguments
  * and executes the corresponding functionality.
- * 
  * @param {string[]} args - The command line arguments.
  */
 export async function main(args) {
-  // If no arguments are provided, display usage with demo output and exit immediately
+  // If no arguments are provided, display usage with demo output and exit
   if (!args || args.length === 0) {
     printUsage(true);
     safeExit(0);
     return;
   }
 
-  // If help flag is provided, display usage without demo output and exit
+  // Handle help flags
   if (args.includes("--help")) {
     printUsage(false);
     safeExit(0);
     return;
   }
 
-  // NEW FEATURE: If help-json flag is provided, display help in JSON format and exit
   if (args.includes("--help-json")) {
     const helpJson = {
       usage: "node src/lib/main.js [options]",
@@ -114,7 +110,7 @@ export async function main(args) {
     return;
   }
 
-  // NEW FEATURE: Detailed version info command
+  // Detailed version info
   if (args.includes("--version-full")) {
     printAndExit([
       `Name: ${pkg.name}`,
@@ -124,13 +120,13 @@ export async function main(args) {
     return;
   }
 
-  // If version flag is provided, display version info and exit
+  // Simple version info
   if (args.includes("--version")) {
     printAndExit([`Version: ${pkg.version}`]);
     return;
   }
 
-  // If example-owl flag is provided, display an OWL ontology example as JSON and exit
+  // Example OWL ontology
   if (args.includes("--example-owl")) {
     const exampleOWL = {
       ontologyIRI: "http://example.org/tea.owl",
@@ -147,7 +143,7 @@ export async function main(args) {
     return;
   }
 
-  // If fetch-owl flag is provided, fetch public API data and convert to OWL ontology JSON using multiple endpoints
+  // Fetch OWL ontology from public API with fallback
   if (args.includes("--fetch-owl")) {
     let owlOntology;
     let data;
@@ -171,7 +167,6 @@ export async function main(args) {
       return;
     }
 
-    // Map data to OWL ontology based on the endpoint used
     if (endpoint === "https://restcountries.com/v3.1/all") {
       const individuals = data.slice(0, 3).map(country => ({
         id: country.name && country.name.common ? country.name.common : "Unknown",
@@ -184,7 +179,6 @@ export async function main(args) {
         individuals
       };
     } else {
-      // Backup endpoint mapping using JSONPlaceholder users
       const individuals = data.slice(0, 3).map(user => ({
         id: user.username || "Unknown",
         label: user.company && user.company.name ? user.company.name : "Unknown"
@@ -196,7 +190,6 @@ export async function main(args) {
         individuals
       };
     }
-    // Extend OWL ontology with metadata information
     owlOntology.metadata = {
       fetchedAt: new Date().toISOString(),
       sourceEndpoint: endpoint,
@@ -209,7 +202,7 @@ export async function main(args) {
     return;
   }
 
-  // If build-owl flag is provided, build a demo OWL ontology JSON and exit
+  // Build demo OWL ontology
   if (args.includes("--build-owl")) {
     const builtOntology = {
       ontologyIRI: "http://example.org/built.owl",
@@ -228,7 +221,7 @@ export async function main(args) {
     return;
   }
 
-  // If diagnostics flag is provided, run a self-test fetching public API data and log OWL ontology JSON
+  // Run diagnostics
   if (args.includes("--diagnostics")) {
     console.log(chalk.green("Running Diagnostics..."));
     try {
@@ -242,7 +235,6 @@ export async function main(args) {
       const data = await response.json();
       const latency = Date.now() - start;
       console.log(chalk.green(`Diagnostics: Fetched ${data.length} records in ${latency} ms.`));
-      // Log the OWL ontology JSON format derived from the fetched data
       const individuals = data.slice(0, 3).map(country => ({
         id: country.name && country.name.common ? country.name.common : "Unknown",
         label: country.region || "Unknown"
@@ -253,7 +245,6 @@ export async function main(args) {
         properties: [],
         individuals
       };
-      // Add metadata to diagnostics output
       diagOwlOntology.metadata = {
         fetchedAt: new Date().toISOString(),
         recordCount: data.length,
@@ -269,7 +260,7 @@ export async function main(args) {
     return;
   }
 
-  // If extend flag is provided, display extended OWL ontology as JSON and exit
+  // Extended OWL ontology with additional metadata
   if (args.includes("--extend")) {
     const extendedOntology = {
       ontologyIRI: "http://example.org/extended.owl",
@@ -293,7 +284,7 @@ export async function main(args) {
     return;
   }
 
-  // NEW FEATURE: If log flag is provided, log output message to a file
+  // Logging output to file
   if (args.includes("--log")) {
     const logMessage = "Logging output to file 'owl-builder.log'";
     console.log(chalk.green(logMessage));
@@ -308,14 +299,14 @@ export async function main(args) {
     return;
   }
 
-  // NEW FEATURE: If time flag is provided, display current UTC time and exit
+  // Display current UTC time
   if (args.includes("--time")) {
     const formattedTime = dayjs.utc(Date.now()).format("YYYY-MM-DD HH:mm:ss");
     printAndExit([`Current Time: ${formattedTime}`]);
     return;
   }
 
-  // NEW FEATURE: If system flag is provided, display system information and exit
+  // Display system information
   if (args.includes("--system")) {
     const systemInfo = {
       platform: os.platform(),
@@ -328,7 +319,7 @@ export async function main(args) {
     return;
   }
 
-  // NEW FEATURE: If detailed-diagnostics flag is provided, display extended diagnostics details and exit
+  // Detailed diagnostics information
   if (args.includes("--detailed-diagnostics")) {
     const detailedDiagnostics = {
       memory: {
@@ -343,13 +334,12 @@ export async function main(args) {
     return;
   }
 
-  // For any other arguments, simply log them in a consistent style
+  // Default case: log unknown arguments
   console.log(chalk.green(`Run with: ${JSON.stringify(args)}`));
   safeExit(0);
-  return;
 }
 
-// Ensure that the script is executed only when run directly, not when imported
+// Execute main only if this script is run directly
 if (process.argv[1] === fileURLToPath(import.meta.url)) {
   const args = process.argv.slice(2);
   main(args);

commit 067e2cd77e7bf4cd06d7309082197bf64c2ea372
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 18:46:05 2025 +0000

    Extended fetch and diagnostics functionality to include metadata in OWL ontology output. (fixes #403) (#404)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index ad93c95..fec1501 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // src/lib/main.js
 // Improved consistency: unified comment style, consistent error handling, and consolidated JSON outputs for improved testability.
-// Ensures that default behavior shows usage with demo output and terminates execution without waiting for user input.
+// Extended functionality: Now includes metadata (fetch time, source endpoint, and record count) in OWL ontology outputs for data gathering commands.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -31,15 +31,15 @@ Options:
   --version               Show version
   --version-full          Show detailed version info
   --example-owl           Show an example OWL ontology as JSON
-  --fetch-owl             Fetch public API data and render as OWL ontology JSON
+  --fetch-owl             Fetch public API data and render as OWL ontology JSON (includes metadata)
   --build-owl             Build a demo OWL ontology as JSON
-  --diagnostics           Run diagnostics to test public API connectivity
+  --diagnostics           Run diagnostics to test public API connectivity (includes metadata)
   --extend                Display extended OWL ontology as JSON with additional metadata
   --log                   Enable logging of output to file
   --time                  Display the current UTC time
   --system                Display system information
   --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages
-`;
+`
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
     console.log(chalk.green("Demo Output: Run with: []"));
@@ -181,7 +181,7 @@ export async function main(args) {
         ontologyIRI: "http://example.org/countries.owl",
         classes: [{ id: "Country", label: "Country" }],
         properties: [],
-        individuals: individuals
+        individuals
       };
     } else {
       // Backup endpoint mapping using JSONPlaceholder users
@@ -193,9 +193,15 @@ export async function main(args) {
         ontologyIRI: "http://example.org/users.owl",
         classes: [{ id: "User", label: "User" }],
         properties: [],
-        individuals: individuals
+        individuals
       };
     }
+    // Extend OWL ontology with metadata information
+    owlOntology.metadata = {
+      fetchedAt: new Date().toISOString(),
+      sourceEndpoint: endpoint,
+      recordCount: data.length
+    };
     printAndExit([
       "Fetched OWL Ontology as JSON:",
       JSON.stringify(owlOntology, null, 2)
@@ -245,7 +251,13 @@ export async function main(args) {
         ontologyIRI: "http://example.org/diagnostics.owl",
         classes: [{ id: "Country", label: "Country" }],
         properties: [],
-        individuals: individuals
+        individuals
+      };
+      // Add metadata to diagnostics output
+      diagOwlOntology.metadata = {
+        fetchedAt: new Date().toISOString(),
+        recordCount: data.length,
+        latencyMs: latency
       };
       console.log(chalk.green(`Diagnostics: OWL Ontology JSON:\n${JSON.stringify(diagOwlOntology, null, 2)}`));
     } catch (error) {

commit fd8571f51847d1bd9af67cadff65cfb9e7dffd83
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 17:53:02 2025 +0000

    Improve CLI exit handling for unknown arguments and enhance testability by ensuring safeExit is called in all code paths. (fixes #346) (#400)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 32b7551..ad93c95 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -333,6 +333,8 @@ export async function main(args) {
 
   // For any other arguments, simply log them in a consistent style
   console.log(chalk.green(`Run with: ${JSON.stringify(args)}`));
+  safeExit(0);
+  return;
 }
 
 // Ensure that the script is executed only when run directly, not when imported

commit 314cb455148a59a0b729844e3bc73cd9e6fb62a3
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 17:36:23 2025 +0000

    Improve JSON output consistency in CLI responses to enhance test coverage and fix minor formatting bugs. (fixes #398) (#399)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 838f9a9..32b7551 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,6 +1,6 @@
 #!/usr/bin/env node
 // src/lib/main.js
-// Improved consistency: unified comment style and consistent error handling across commands.
+// Improved consistency: unified comment style, consistent error handling, and consolidated JSON outputs for improved testability.
 // Ensures that default behavior shows usage with demo output and terminates execution without waiting for user input.
 
 import { fileURLToPath } from "url";
@@ -109,8 +109,7 @@ export async function main(args) {
         "--detailed-diagnostics"
       ]
     };
-    console.log(chalk.green("Help JSON:"));
-    console.log(JSON.stringify(helpJson, null, 2));
+    console.log(chalk.green(`Help JSON:\n${JSON.stringify(helpJson, null, 2)}`));
     safeExit(0);
     return;
   }
@@ -248,8 +247,7 @@ export async function main(args) {
         properties: [],
         individuals: individuals
       };
-      console.log(chalk.green("Diagnostics: OWL Ontology JSON:"));
-      console.log(JSON.stringify(diagOwlOntology, null, 2));
+      console.log(chalk.green(`Diagnostics: OWL Ontology JSON:\n${JSON.stringify(diagOwlOntology, null, 2)}`));
     } catch (error) {
       console.error(chalk.red("Diagnostics: Error fetching public API data:"), error);
       safeExit(1);
@@ -278,10 +276,8 @@ export async function main(args) {
         timestamp: new Date().toISOString()
       }
     };
-    printAndExit([
-      "Extended OWL Ontology as JSON:",
-      JSON.stringify(extendedOntology, null, 2)
-    ]);
+    console.log(chalk.green(`Extended OWL Ontology as JSON:\n${JSON.stringify(extendedOntology, null, 2)}`));
+    safeExit(0);
     return;
   }
 
@@ -315,10 +311,8 @@ export async function main(args) {
       nodeVersion: process.version,
       cpu: os.cpus()[0].model
     };
-    printAndExit([
-      "System Information:",
-      JSON.stringify(systemInfo, null, 2)
-    ]);
+    console.log(chalk.green(`System Information:\n${JSON.stringify(systemInfo, null, 2)}`));
+    safeExit(0);
     return;
   }
 
@@ -332,10 +326,8 @@ export async function main(args) {
       uptime: os.uptime(),
       loadAverage: os.loadavg()
     };
-    printAndExit([
-      "Detailed Diagnostics:",
-      JSON.stringify(detailedDiagnostics, null, 2)
-    ]);
+    console.log(chalk.green(`Detailed Diagnostics:\n${JSON.stringify(detailedDiagnostics, null, 2)}`));
+    safeExit(0);
     return;
   }
 

commit c6ac9f2585fb609da9394c5a10ae9b50e712fa50
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 17:27:46 2025 +0000

    Ensure default behavior displays usage with demo output and terminates execution immediately without waiting for user input. (fixes #351) (#397)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 295415e..838f9a9 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,6 +1,7 @@
 #!/usr/bin/env node
 // src/lib/main.js
 // Improved consistency: unified comment style and consistent error handling across commands.
+// Ensures that default behavior shows usage with demo output and terminates execution without waiting for user input.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };

commit 7a444e618fa84e8183ab0d19383b1e0a7446f90d
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 17:04:22 2025 +0000

    Extended CLI functionality by adding a new --version-full option to display detailed version information. (fixes #395) (#396)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a484a8c..295415e 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -28,6 +28,7 @@ Options:
   --help                  Show help
   --help-json             Show help in JSON format
   --version               Show version
+  --version-full          Show detailed version info
   --example-owl           Show an example OWL ontology as JSON
   --fetch-owl             Fetch public API data and render as OWL ontology JSON
   --build-owl             Build a demo OWL ontology as JSON
@@ -95,6 +96,7 @@ export async function main(args) {
         "--help",
         "--help-json",
         "--version",
+        "--version-full",
         "--example-owl",
         "--fetch-owl",
         "--build-owl",
@@ -112,6 +114,16 @@ export async function main(args) {
     return;
   }
 
+  // NEW FEATURE: Detailed version info command
+  if (args.includes("--version-full")) {
+    printAndExit([
+      `Name: ${pkg.name}`,
+      `Version: ${pkg.version}`,
+      `Description: ${pkg.description}`
+    ]);
+    return;
+  }
+
   // If version flag is provided, display version info and exit
   if (args.includes("--version")) {
     printAndExit([`Version: ${pkg.version}`]);
@@ -261,7 +273,8 @@ export async function main(args) {
       ],
       metadata: {
         applied: true,
-        description: "This ontology includes extended functionality options."
+        description: "This ontology includes extended functionality options.",
+        timestamp: new Date().toISOString()
       }
     };
     printAndExit([

commit f66aae4d071c8a2472506fda9d7713e51149c9fa
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 16:53:52 2025 +0000

    Ensured the main function defaults to displaying usage and demo output when no arguments are provided terminating execution immediately without needing user input. (fixes #392) (#394)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index a3e1632..a484a8c 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -73,7 +73,7 @@ function printAndExit(messages, colorFunc = msg => chalk.green(msg)) {
  * @param {string[]} args - The command line arguments.
  */
 export async function main(args) {
-  // If no arguments are provided, display usage with demo output and exit
+  // If no arguments are provided, display usage with demo output and exit immediately
   if (!args || args.length === 0) {
     printUsage(true);
     safeExit(0);

commit 0dfc6919cf4bb4c91f2bb52d02fd1202b8b4b063
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 16:32:03 2025 +0000

    Improved consistency in source and test files along with minor readability updates in README and dependencies. (fixes #390) (#391)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index db7e32f..a3e1632 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -61,7 +61,7 @@ function safeExit(code) {
  * @param {string[]} messages - Array of messages to print.
  * @param {function} colorFunc - Optional function to color the message (default: chalk.green).
  */
-function printAndExit(messages, colorFunc = (msg) => chalk.green(msg)) {
+function printAndExit(messages, colorFunc = msg => chalk.green(msg)) {
   messages.forEach(message => console.log(colorFunc(message)));
   safeExit(0);
 }
@@ -288,7 +288,6 @@ export async function main(args) {
 
   // NEW FEATURE: If time flag is provided, display current UTC time and exit
   if (args.includes("--time")) {
-    // Use Date.now() directly to allow test overrides to work
     const formattedTime = dayjs.utc(Date.now()).format("YYYY-MM-DD HH:mm:ss");
     printAndExit([`Current Time: ${formattedTime}`]);
     return;

commit 5192e8cd3009046bcecf3d3e7b0b8941a5a8d5e4
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 15:29:30 2025 +0000

    Fix applied for failing tests (#386)
    
    * Improved consistency across source and test files with unified comments and standardized logging. (fixes #382)
    
    * Fixed the time functionality by using Date.now to allow test overrides to work as expected.
    
    ---------
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 4691bb0..db7e32f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -1,5 +1,6 @@
 #!/usr/bin/env node
 // src/lib/main.js
+// Improved consistency: unified comment style and consistent error handling across commands.
 
 import { fileURLToPath } from "url";
 import pkg from "../../package.json" with { type: "json" };
@@ -12,17 +13,31 @@ import os from "os";
 // Extend dayjs to support UTC formatting
 dayjs.extend(utc);
 
-// Use a no-op chalk when in test mode for consistency
+// Use a no-op chalk when in test mode for consistent output during testing
 const chalk = process.env.NODE_ENV === "test"
   ? { blue: s => s, green: s => s, red: s => s }
   : chalkImport;
 
 /**
  * Prints the usage instructions for the CLI tool.
- * @param {boolean} withDemo - Whether to include the demo output message.
+ * @param {boolean} withDemo - Whether to include demo output.
  */
 function printUsage(withDemo) {
-  const usageMsg = `Usage: node src/lib/main.js [options]\nOptions:\n  --help                  Show help\n  --help-json             Show help in JSON format\n  --version               Show version\n  --example-owl           Show an example OWL ontology as JSON\n  --fetch-owl             Fetch public API data and render as OWL ontology JSON\n  --build-owl             Build a demo OWL ontology as JSON\n  --diagnostics           Run diagnostics to test public API connectivity\n  --extend                Display extended OWL ontology as JSON with additional metadata\n  --log                   Enable logging of output to file\n  --time                  Display the current UTC time\n  --system                Display system information\n  --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages\n`;
+  const usageMsg = `Usage: node src/lib/main.js [options]
+Options:
+  --help                  Show help
+  --help-json             Show help in JSON format
+  --version               Show version
+  --example-owl           Show an example OWL ontology as JSON
+  --fetch-owl             Fetch public API data and render as OWL ontology JSON
+  --build-owl             Build a demo OWL ontology as JSON
+  --diagnostics           Run diagnostics to test public API connectivity
+  --extend                Display extended OWL ontology as JSON with additional metadata
+  --log                   Enable logging of output to file
+  --time                  Display the current UTC time
+  --system                Display system information
+  --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages
+`;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
     console.log(chalk.green("Demo Output: Run with: []"));
@@ -30,7 +45,7 @@ function printUsage(withDemo) {
 }
 
 /**
- * Safely exits the process unless in test environment. In test mode, simply returns.
+ * Safely exits the process unless in test environment.
  * @param {number} code - The exit code.
  */
 function safeExit(code) {
@@ -55,9 +70,6 @@ function printAndExit(messages, colorFunc = (msg) => chalk.green(msg)) {
  * Main function of the CLI tool. It processes the provided command line arguments
  * and executes the corresponding functionality.
  * 
- * If no arguments are provided, it defaults to displaying usage instructions
- * along with a demo output, then terminates execution.
- * 
  * @param {string[]} args - The command line arguments.
  */
 export async function main(args) {
@@ -276,8 +288,8 @@ export async function main(args) {
 
   // NEW FEATURE: If time flag is provided, display current UTC time and exit
   if (args.includes("--time")) {
-    const now = new Date(Date.now());
-    const formattedTime = dayjs.utc(now).format("YYYY-MM-DD HH:mm:ss");
+    // Use Date.now() directly to allow test overrides to work
+    const formattedTime = dayjs.utc(Date.now()).format("YYYY-MM-DD HH:mm:ss");
     printAndExit([`Current Time: ${formattedTime}`]);
     return;
   }

commit df832924a42917c31c7254e5bbf7855dc4c474ba
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 14:28:59 2025 +0000

    Add --detailed-diagnostics flag with extended diagnostics details and update usage tests and documentation accordingly. (fixes #379) (#381)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 683fd2f..4691bb0 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -22,7 +22,7 @@ const chalk = process.env.NODE_ENV === "test"
  * @param {boolean} withDemo - Whether to include the demo output message.
  */
 function printUsage(withDemo) {
-  const usageMsg = `Usage: node src/lib/main.js [options]\nOptions:\n  --help           Show help\n  --help-json      Show help in JSON format\n  --version        Show version\n  --example-owl    Show an example OWL ontology as JSON\n  --fetch-owl      Fetch public API data and render as OWL ontology JSON\n  --build-owl      Build a demo OWL ontology as JSON\n  --diagnostics    Run diagnostics to test public API connectivity\n  --extend         Display extended OWL ontology as JSON with additional metadata\n  --log            Enable logging of output to file\n  --time           Display the current UTC time\n  --system         Display system information\n`;
+  const usageMsg = `Usage: node src/lib/main.js [options]\nOptions:\n  --help                  Show help\n  --help-json             Show help in JSON format\n  --version               Show version\n  --example-owl           Show an example OWL ontology as JSON\n  --fetch-owl             Fetch public API data and render as OWL ontology JSON\n  --build-owl             Build a demo OWL ontology as JSON\n  --diagnostics           Run diagnostics to test public API connectivity\n  --extend                Display extended OWL ontology as JSON with additional metadata\n  --log                   Enable logging of output to file\n  --time                  Display the current UTC time\n  --system                Display system information\n  --detailed-diagnostics  Display extended diagnostics including memory usage, uptime, and load averages\n`;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
     console.log(chalk.green("Demo Output: Run with: []"));
@@ -90,7 +90,8 @@ export async function main(args) {
         "--extend",
         "--log",
         "--time",
-        "--system"
+        "--system",
+        "--detailed-diagnostics"
       ]
     };
     console.log(chalk.green("Help JSON:"));
@@ -296,6 +297,23 @@ export async function main(args) {
     return;
   }
 
+  // NEW FEATURE: If detailed-diagnostics flag is provided, display extended diagnostics details and exit
+  if (args.includes("--detailed-diagnostics")) {
+    const detailedDiagnostics = {
+      memory: {
+        total: os.totalmem(),
+        free: os.freemem()
+      },
+      uptime: os.uptime(),
+      loadAverage: os.loadavg()
+    };
+    printAndExit([
+      "Detailed Diagnostics:",
+      JSON.stringify(detailedDiagnostics, null, 2)
+    ]);
+    return;
+  }
+
   // For any other arguments, simply log them in a consistent style
   console.log(chalk.green(`Run with: ${JSON.stringify(args)}`));
 }

commit 67d121a79c8ddde640d2a2b0b88ea3cbb6284586
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 14:16:48 2025 +0000

    Ensure default usage and demo output are shown and execution terminates when no user input is provided. (fixes #355) (#380)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 57d3f76..683fd2f 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -55,6 +55,9 @@ function printAndExit(messages, colorFunc = (msg) => chalk.green(msg)) {
  * Main function of the CLI tool. It processes the provided command line arguments
  * and executes the corresponding functionality.
  * 
+ * If no arguments are provided, it defaults to displaying usage instructions
+ * along with a demo output, then terminates execution.
+ * 
  * @param {string[]} args - The command line arguments.
  */
 export async function main(args) {

commit 0cbd6cbec138a0acea0fade13996e1a616641d36
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 13:44:08 2025 +0000

    Added new --system flag to display system information along with updating docs and tests. (fixes #356) (#377)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index ef81c54..57d3f76 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -7,6 +7,7 @@ import chalkImport from "chalk";
 import { appendFile } from "fs/promises";
 import dayjs from "dayjs";
 import utc from "dayjs/plugin/utc.js"; // Updated import to include .js extension
+import os from "os";
 
 // Extend dayjs to support UTC formatting
 dayjs.extend(utc);
@@ -21,7 +22,7 @@ const chalk = process.env.NODE_ENV === "test"
  * @param {boolean} withDemo - Whether to include the demo output message.
  */
 function printUsage(withDemo) {
-  const usageMsg = `Usage: node src/lib/main.js [options]\nOptions:\n  --help           Show help\n  --help-json      Show help in JSON format\n  --version        Show version\n  --example-owl    Show an example OWL ontology as JSON\n  --fetch-owl      Fetch public API data and render as OWL ontology JSON\n  --build-owl      Build a demo OWL ontology as JSON\n  --diagnostics    Run diagnostics to test public API connectivity\n  --extend         Display extended OWL ontology as JSON with additional metadata\n  --log            Enable logging of output to file\n  --time           Display the current UTC time\n`;
+  const usageMsg = `Usage: node src/lib/main.js [options]\nOptions:\n  --help           Show help\n  --help-json      Show help in JSON format\n  --version        Show version\n  --example-owl    Show an example OWL ontology as JSON\n  --fetch-owl      Fetch public API data and render as OWL ontology JSON\n  --build-owl      Build a demo OWL ontology as JSON\n  --diagnostics    Run diagnostics to test public API connectivity\n  --extend         Display extended OWL ontology as JSON with additional metadata\n  --log            Enable logging of output to file\n  --time           Display the current UTC time\n  --system         Display system information\n`;
   console.log(chalk.blue(usageMsg));
   if (withDemo) {
     console.log(chalk.green("Demo Output: Run with: []"));
@@ -85,7 +86,8 @@ export async function main(args) {
         "--diagnostics",
         "--extend",
         "--log",
-        "--time"
+        "--time",
+        "--system"
       ]
     };
     console.log(chalk.green("Help JSON:"));
@@ -276,6 +278,21 @@ export async function main(args) {
     return;
   }
 
+  // NEW FEATURE: If system flag is provided, display system information and exit
+  if (args.includes("--system")) {
+    const systemInfo = {
+      platform: os.platform(),
+      arch: os.arch(),
+      nodeVersion: process.version,
+      cpu: os.cpus()[0].model
+    };
+    printAndExit([
+      "System Information:",
+      JSON.stringify(systemInfo, null, 2)
+    ]);
+    return;
+  }
+
   // For any other arguments, simply log them in a consistent style
   console.log(chalk.green(`Run with: ${JSON.stringify(args)}`));
 }

commit 59eeff55857ba222417e877103464ff614576268
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Wed Feb 26 13:09:01 2025 +0000

    Refactored CLI commands for consistent output and utilized a helper function for logging. (fixes #361) (#373)
    
    Co-authored-by: GitHub Actions[bot] <action@github.com>

diff --git a/src/lib/main.js b/src/lib/main.js
index 2eabb02..ef81c54 100755
--- a/src/lib/main.js
+++ b/src/lib/main.js
@@ -40,6 +40,16 @@ function safeExit(code) {
   }
 }
 
+/**
+ * Helper function to print messages and then exit.
+ * @param {string[]} messages - Array of messages to print.
+ * @param {function} colorFunc - Optional function to color the message (default: chalk.green).
+ */
+function printAndExit(messages, colorFunc = (msg) => chalk.green(msg)) {
+  messages.forEach(message => console.log(colorFunc(message)));
+  safeExit(0);
+}
+
 /**
  * Main function of the CLI tool. It processes the provided command line arguments
  * and executes the corresponding functionality.
@@ -86,8 +96,7 @@ export async function main(args) {
 
   // If version flag is provided, display version info and exit
   if (args.includes("--version")) {
-    console.log(chalk.green(`Version: ${pkg.version}`));
-    safeExit(0);
+    printAndExit([`Version: ${pkg.version}`]);
     return;
   }
 
@@ -101,9 +110,10 @@ export async function main(args) {
       properties: [],
       individuals: []
     };
-    console.log(chalk.green("Example OWL Ontology as JSON:"));
-    console.log(JSON.stringify(exampleOWL, null, 2));
-    safeExit(0);
+    printAndExit([
+      "Example OWL Ontology as JSON:",
+      JSON.stringify(exampleOWL, null, 2)
+    ]);
     return;
   }
 
@@ -156,9 +166,10 @@ export async function main(args) {
         individuals: individuals
       };
     }
-    console.log(chalk.green("Fetched OWL Ontology as JSON:"));
-    console.log(JSON.stringify(owlOntology, null, 2));
-    safeExit(0);
+    printAndExit([
+      "Fetched OWL Ontology as JSON:",
+      JSON.stringify(owlOntology, null, 2)
+    ]);
     return;
   }
 
@@ -174,9 +185,10 @@ export async function main(args) {
         { id: "SampleIndividual", label: "Sample Label" }
       ]
     };
-    console.log(chalk.green("Built OWL Ontology as JSON:"));
-    console.log(JSON.stringify(builtOntology, null, 2));
-    safeExit(0);
+    printAndExit([
+      "Built OWL Ontology as JSON:",
+      JSON.stringify(builtOntology, null, 2)
+    ]);
     return;
   }
 
@@ -234,9 +246,10 @@ export async function main(args) {
         description: "This ontology includes extended functionality options."
       }
     };
-    console.log(chalk.green("Extended OWL Ontology as JSON:"));
-    console.log(JSON.stringify(extendedOntology, null, 2));
-    safeExit(0);
+    printAndExit([
+      "Extended OWL Ontology as JSON:",
+      JSON.stringify(extendedOntology, null, 2)
+    ]);
     return;
   }
 
@@ -259,8 +272,7 @@ export async function main(args) {
   if (args.includes("--time")) {
     const now = new Date(Date.now());
     const formattedTime = dayjs.utc(now).format("YYYY-MM-DD HH:mm:ss");
-    console.log(chalk.green(`Current Time: ${formattedTime}`));
-    safeExit(0);
+    printAndExit([`Current Time: ${formattedTime}`]);
     return;
   }
 

tests/unit/core.test.js
# tests/unit/core.test.js
import { describe, test, expect } from "vitest";
import { generateFacesCore } from "@src/lib/main.js";

const jsonConfigPath = "tests/unit/fixtures/custom.json";

describe("generateFacesCore", () => {
  test("default options", () => {
    const result = generateFacesCore();
    expect(result).toHaveProperty("faces");
    expect(Array.isArray(result.faces)).toBe(true);
    expect(result.faces.length).toBe(1);
    expect(result.category).toBe("all");
    expect(result.count).toBe(1);
    expect(result.seed).toBe(null);
  });

  test("reproducible output with seed and category", () => {
    const opts = { count: 3, category: "happy", seed: 100 };
    const first = generateFacesCore(opts);
    const second = generateFacesCore(opts);
    expect(first.faces).toEqual(second.faces);
    expect(first.count).toBe(3);
    expect(first.category).toBe("happy");
    expect(first.seed).toBe(100);
  });

  test("invalid count throws error", () => {
    expect(() => generateFacesCore({ count: 0 })).toThrow();
  });

  test("invalid category throws error", () => {
    expect(() => generateFacesCore({ category: "unknown" })).toThrow();
  });

  test("custom config overrides faces", () => {
    const result = generateFacesCore({ config: jsonConfigPath, category: "happy", count: 2, seed: 1 });
    expect(result.faces.length).toBe(2);
    expect(result.faces.every((f) => ["H1", "H2"].includes(f))).toBe(true);
  });
});
tests/unit/main.test.js
# tests/unit/main.test.js
import { describe, test, expect, beforeEach, afterEach, vi } from "vitest";
import { parseOptions, getRandomFaceFromList, main, generateFaces } from "@src/lib/main.js";
import seedrandom from "seedrandom";

describe("parseOptions", () => {
  test("default options", () => {
    expect(parseOptions([])).toEqual({ count: 1, category: "all", seed: undefined, json: false, serve: false, port: 3000, config: undefined });
  });

  test("serve flag default off", () => {
    expect(parseOptions([]).serve).toBe(false);
  });

  test("long serve flag", () => {
    expect(parseOptions(["--serve"]).serve).toBe(true);
  });

  test("short serve flag", () => {
    expect(parseOptions(["-S"]).serve).toBe(true);
  });

  test("port flag", () => {
    expect(parseOptions(["--port", "8080"]).port).toBe(8080);
  });

  test("short port flag", () => {
    expect(parseOptions(["-p", "9090"]).port).toBe(9090);
  });

  test("json flag default off", () => {
    const opts = parseOptions([]);
    expect(opts.json).toBe(false);
  });

  test("long json flag", () => {
    expect(parseOptions(["--json"]))
      .toEqual({ count: 1, category: "all", seed: undefined, json: true, serve: false, port: 3000, config: undefined });
  });

  test("short json flag", () => {
    expect(parseOptions(["-j"]))
      .toEqual({ count: 1, category: "all", seed: undefined, json: true, serve: false, port: 3000, config: undefined });
  });

  test("custom count and category", () => {
    expect(
      parseOptions(["--count", "3", "--category", "happy"]),
    ).toEqual({ count: 3, category: "happy", seed: undefined, json: false, serve: false, port: 3000, config: undefined });
  });

  test("short flags", () => {
    expect(
      parseOptions(["-c", "2", "-C", "sad", "-s", "42"]),
    ).toEqual({ count: 2, category: "sad", seed: 42, json: false, serve: false, port: 3000, config: undefined });
  });

  test("invalid count throws", () => {
    expect(() => parseOptions(["--count", "0"])) .toThrow();
    expect(() => parseOptions(["--count", "-1"])) .toThrow();
    expect(() => parseOptions(["--count", "a"])) .toThrow();
  });

  test("invalid category throws", () => {
    expect(() => parseOptions(["--category", "unknown"])) .toThrow();
  });

  test("invalid seed throws", () => {
    expect(() => parseOptions(["--seed", "-5"])) .toThrow();
    expect(() => parseOptions(["--seed", "1.5"])) .toThrow();
  });

  test("long config flag sets config property", () => {
    expect(parseOptions(["--config", "path/to/config.json"]))
      .toEqual({ count: 1, category: "all", seed: undefined, json: false, serve: false, port: 3000, config: "path/to/config.json" });
  });

  test("short config flag sets config property", () => {
    expect(parseOptions(["-f", "path/to/config.yaml"]))
      .toEqual({ count: 1, category: "all", seed: undefined, json: false, serve: false, port: 3000, config: "path/to/config.yaml" });
  });
});

describe("getRandomFaceFromList", () => {
  const list = ["a", "b", "c"];
  test("returns element from list", () => {
    const face = getRandomFaceFromList(list, () => 0.5);
    expect(list).toContain(face);
  });
});

describe("main CLI", () => {
  let logs = [];
  beforeEach(() => {
    logs = [];
    vi.spyOn(console, "log").mockImplementation((...args) => logs.push(args.join(" ")));
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  test("help message", () => {
    main(["--help"]);
    expect(logs[0]).toContain("Usage:");
  });

  test("default outputs one face", () => {
    main([]);
    expect(logs.length).toBe(1);
  });

  test("respects count and category", () => {
    main(["--count", "3", "--category", "happy"]);
    expect(logs.length).toBe(3);
  });

  test("seed reproducibility", () => {
    main(["--count", "2", "--seed", "123"]);
    const firstRun = [...logs];
    logs = [];
    main(["--count", "2", "--seed", "123"]);
    expect(logs).toEqual(firstRun);
  });

  test("json output", () => {
    main(["--json"]);
    expect(logs.length).toBe(1);
    const obj = JSON.parse(logs[0]);
    expect(obj).toHaveProperty("faces");
    expect(Array.isArray(obj.faces)).toBe(true);
    expect(obj.faces.length).toBe(1);
    expect(obj.category).toBe("all");
    expect(obj.count).toBe(1);
    expect(obj.seed).toBe(null);
  });

  test("combined flags with json", () => {
    main(["-c", "3", "-C", "sad", "-s", "99", "-j"]);
    expect(logs.length).toBe(1);
    const obj = JSON.parse(logs[0]);
    expect(obj.faces.length).toBe(3);
    expect(obj.category).toBe("sad");
    expect(obj.count).toBe(3);
    expect(obj.seed).toBe(99);
    const firstFaces = obj.faces;
    logs = [];
    main(["-c", "3", "-C", "sad", "-s", "99", "-j"]);
    const obj2 = JSON.parse(logs[0]);
    expect(obj2.faces).toEqual(firstFaces);
  });

  test("config flag prints faces from custom config", () => {
    main(["--config", "tests/unit/fixtures/custom.json", "--category", "happy", "-c", "2"]);
    expect(logs.length).toBe(2);
    expect(logs.every((face) => ["H1", "H2"].includes(face))).toBe(true);
  });
});

// New tests for generateFaces

describe("generateFaces", () => {
  test("default invocation returns one face from all category with null seed", () => {
    const result = generateFaces();
    expect(result).toHaveProperty("faces");
    expect(Array.isArray(result.faces)).toBe(true);
    expect(result.faces.length).toBe(1);
    expect(result.category).toBe("all");
    expect(result.count).toBe(1);
    expect(result.seed).toBe(null);
  });

  test("custom invocation with count, category, and seed is reproducible", () => {
    const opts = { count: 3, category: "happy", seed: 42 };
    const first = generateFaces(opts);
    const second = generateFaces(opts);
    expect(first.count).toBe(3);
    expect(first.category).toBe("happy");
    expect(first.seed).toBe(42);
    expect(first.faces.length).toBe(3);
    expect(second.faces).toEqual(first.faces);
  });

  test("invalid inputs throw errors", () => {
    expect(() => generateFaces({ count: 0 })).toThrow();
    expect(() => generateFaces({ category: "unknown" })).toThrow();
    expect(() => generateFaces({ seed: -1 })).toThrow();
    expect(() => generateFaces({ seed: 1.5 })).toThrow();
  });
});
tests/unit/unique.test.js
# tests/unit/unique.test.js
import { describe, test, expect, beforeEach, afterEach, vi, beforeAll } from "vitest";
import request from "supertest";
import { generateFacesCore, getFaces, parseOptions, createApp, main } from "@src/lib/main.js";

// Programmatic API unique behavior
describe("Unique option programmatic", () => {
  test("generateFacesCore with unique produces unique deterministic faces", () => {
    const opts = { category: "happy", count: 3, seed: 123, unique: true };
    const first = generateFacesCore(opts);
    const second = generateFacesCore(opts);
    expect(first.faces).toEqual(second.faces);
    expect(first.faces.length).toBe(3);
    expect(new Set(first.faces).size).toBe(3);
  });

  test("generateFacesCore throws when count exceeds pool in unique mode", () => {
    expect(() => generateFacesCore({ category: "sad", count: 10, unique: true })).toThrow(
      /Requested 10 unique faces, but only \d+ available in category 'sad'/
    );
  });

  test("getFaces honors unique option", () => {
    const result = getFaces({ category: "angry", count: 2, seed: 5, unique: true });
    expect(result.faces.length).toBe(2);
    expect(new Set(result.faces).size).toBe(2);
  });
});

// CLI parseOptions unique flag
describe("parseOptions unique flag", () => {
  test("parseOptions recognizes --unique", () => {
    expect(parseOptions(["--unique"]).unique).toBe(true);
  });

  test("parseOptions recognizes -u", () => {
    expect(parseOptions(["-u"]).unique).toBe(true);
  });

  test("parseOptions default unique is false", () => {
    expect(parseOptions([]).unique).toBe(false);
  });
});

// CLI main unique behavior
describe("CLI unique behavior", () => {
  let logs;

  beforeEach(() => {
    logs = [];
    vi.spyOn(console, "log").mockImplementation((...args) => logs.push(args.join(" ")));
    vi.spyOn(console, "error").mockImplementation(() => {});
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  test("CLI prints unique faces without duplicates", () => {
    main(["--unique", "-c", "4", "-C", "surprised"]);
    expect(logs.length).toBe(4);
    expect(new Set(logs).size).toBe(4);
  });

  test("CLI exits with error when count exceeds pool in unique mode", () => {
    const exitSpy = vi.spyOn(process, "exit").mockImplementation(() => { throw new Error("exit"); });
    expect(() => main(["--unique", "-c", "10", "-C", "angry"]))
      .toThrow(/exit/);
    exitSpy.mockRestore();
  });
});

// HTTP API unique behavior
describe("HTTP API unique", () => {
  let app;

  beforeAll(() => {
    app = createApp();
  });

  test("GET /faces?unique=true returns unique faces without duplicates", async () => {
    const res = await request(app).get("/faces?unique=true&count=4");
    expect(res.status).toBe(200);
    expect(res.body.faces.length).toBe(4);
    expect(new Set(res.body.faces).size).toBe(4);
  });

  test("GET /faces?unique=true count exceeds pool returns 400 error", async () => {
    const res = await request(app).get("/faces?unique=true&category=happy&count=10");
    expect(res.status).toBe(400);
    expect(res.body.error).toMatch(/Requested 10 unique faces/);
  });
});tests/unit/config.test.js
# tests/unit/config.test.js
import { describe, test, expect } from "vitest";
import { getFaces, createApp } from "@src/lib/main.js";
import request from "supertest";

// Path to custom JSON config fixture
const jsonConfigPath = "tests/unit/fixtures/custom.json";

describe("Custom face configuration", () => {
  test("JSON config overrides existing category", () => {
    const result = getFaces({ config: jsonConfigPath, category: "happy", count: 2 });
    expect(result.faces.length).toBe(2);
    expect(result.faces.every(f => ["H1", "H2"].includes(f))).toBe(true);
    expect(result.category).toBe("happy");
  });

  test("Non-existent config file throws error", () => {
    expect(() => getFaces({ config: "no-such-file.json" })).toThrow(/Config file not found/);
  });

  test("HTTP /faces applies JSON config", async () => {
    const app = createApp();
    const res = await request(app)
      .get(`/faces?config=${jsonConfigPath}&category=happy&count=2`);
    expect(res.status).toBe(200);
    expect(res.body.faces.length).toBe(2);
    expect(res.body.faces.every(f => ["H1", "H2"].includes(f))).toBe(true);
    expect(res.body.category).toBe("happy");
  });

  test("JSON config adds new category and serves it", () => {
    const result = getFaces({ config: jsonConfigPath, category: "custom", count: 3 });
    expect(result.faces.length).toBe(3);
    expect(result.faces.every(f => ["C1", "C2"].includes(f))).toBe(true);
    expect(result.category).toBe("custom");
  });

  test("HTTP /faces serves new custom category", async () => {
    const app = createApp();
    const res = await request(app)
      .get(`/faces?config=${jsonConfigPath}&category=custom&count=2`);
    expect(res.status).toBe(200);
    expect(res.body.faces.length).toBe(2);
    expect(res.body.faces.every(f => ["C1", "C2"].includes(f))).toBe(true);
    expect(res.body.category).toBe("custom");
  });

  test("Invalid category with config throws error", () => {
    expect(() => getFaces({ config: jsonConfigPath, category: "notfound" }))
      .toThrow(/Unknown category: notfound/);
  });
});tests/unit/server.test.js
# tests/unit/server.test.js
import { describe, test, expect, beforeAll } from "vitest";
import request from "supertest";
import { createApp } from "@src/lib/main.js";

describe("HTTP server mode", () => {
  let app;

  beforeAll(() => {
    app = createApp();
  });

  test("GET /health returns status OK", async () => {
    const res = await request(app).get("/health");
    expect(res.status).toBe(200);
    expect(res.body).toEqual({ status: "OK" });
    expect(res.header).toHaveProperty("access-control-allow-origin", "*");
  });

  test("GET /faces default returns JSON with one face", async () => {
    const res = await request(app).get("/faces");
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty("faces");
    expect(Array.isArray(res.body.faces)).toBe(true);
    expect(res.body.faces.length).toBe(1);
    expect(res.body.category).toBe("all");
    expect(res.body.count).toBe(1);
    expect(res.body.seed).toBe(null);
    expect(res.header).toHaveProperty("access-control-allow-origin", "*");
  });

  test("GET /faces with parameters returns correct JSON", async () => {
    const res = await request(app).get("/faces?count=3&category=happy&seed=42");
    expect(res.status).toBe(200);
    const { faces, category, count, seed } = res.body;
    expect(count).toBe(3);
    expect(category).toBe("happy");
    expect(faces.length).toBe(3);
    expect(seed).toBe(42);
    expect(res.header).toHaveProperty("access-control-allow-origin", "*");

    const res2 = await request(app).get("/faces?count=3&category=happy&seed=42");
    expect(res2.body.faces).toEqual(faces);
  });

  test("GET /faces text format returns plain text", async () => {
    const res = await request(app).get("/faces?count=2&format=text");
    expect(res.status).toBe(200);
    expect(res.header).toHaveProperty("access-control-allow-origin", "*");
    expect(res.header["content-type"]).toMatch(/text\/plain/);
    const lines = res.text.split("\n");
    expect(lines.length).toBe(2);
  });

  test("GET /faces with unknown category returns validation error", async () => {
    const res = await request(app).get("/faces?category=unknown");
    expect(res.status).toBe(400);
    expect(res.body).toHaveProperty("error");
    expect(res.body.error).toMatch(/Unknown category/i);
    expect(res.header).toHaveProperty("access-control-allow-origin", "*");
  });

  test("GET /faces with non-numeric count returns validation error", async () => {
    const res = await request(app).get("/faces?count=abc");
    expect(res.status).toBe(400);
    expect(res.body).toHaveProperty("error");
    expect(res.body.error).toMatch(/number/i);
    expect(res.header).toHaveProperty("access-control-allow-origin", "*");
  });
});tests/unit/api.test.js
# tests/unit/api.test.js
import { describe, test, expect } from "vitest";
import { getFaces, listCategories, faces } from "@src/lib/main.js";

// Path to custom JSON config fixture
const jsonConfigPath = "tests/unit/fixtures/custom.json";

describe("Library API", () => {
  test("default getFaces returns one face from all category with null seed", () => {
    const result = getFaces();
    expect(result).toHaveProperty("faces");
    expect(Array.isArray(result.faces)).toBe(true);
    expect(result.faces.length).toBe(1);
    expect(result.category).toBe("all");
    expect(result.count).toBe(1);
    expect(result.seed).toBe(null);
  });

  test("getFaces with custom count, category, and seed is reproducible", () => {
    const opts = { count: 3, category: "happy", seed: 42 };
    const first = getFaces(opts);
    const second = getFaces(opts);
    expect(first.count).toBe(3);
    expect(first.category).toBe("happy");
    expect(first.seed).toBe(42);
    expect(first.faces.length).toBe(3);
    expect(second.faces).toEqual(first.faces);
  });

  test("invalid options throw validation errors", () => {
    expect(() => getFaces({ count: 0 })).toThrow();
    expect(() => getFaces({ category: "unknown" })).toThrow();
    expect(() => getFaces({ seed: -1 })).toThrow();
  });

  test("listCategories default returns built-in plus all only", () => {
    const cats = listCategories();
    expect(Array.isArray(cats)).toBe(true);
    expect(cats.sort()).toEqual([...(Object.keys(faces)), "all"].sort());
  });

  test("listCategories with custom config includes custom keys and all", () => {
    const cats = listCategories({ config: jsonConfigPath });
    expect(Array.isArray(cats)).toBe(true);
    // built-in
    expect(cats).toEqual(expect.arrayContaining(Object.keys(faces)));
    // custom
    expect(cats).toContain("custom");
    // all
    expect(cats).toContain("all");
  });

  test("listCategories with invalid config throws error", () => {
    expect(() => listCategories({ config: "no-such-file.json" })).toThrow(/Config file not found/);
  });
});
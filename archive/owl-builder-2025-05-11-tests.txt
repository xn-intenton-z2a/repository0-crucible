tests/unit/algorithm.test.js
# tests/unit/algorithm.test.js
import { describe, test, expect, beforeEach, afterEach, vi } from "vitest";
import os from "os";
import { main } from "@src/lib/main.js";

describe("Algorithm Selection CLI", () => {
  let origArgv;
  let origExit;
  let origLog;
  let origErr;
  const cpuCount = os.cpus().length;

  beforeEach(() => {
    origArgv = process.argv;
    origExit = process.exit;
    origLog = console.log;
    origErr = console.error;
    process.exit = vi.fn();
    console.log = vi.fn();
    console.error = vi.fn();
  });

  afterEach(() => {
    process.argv = origArgv;
    process.exit = origExit;
    console.log = origLog;
    console.error = origErr;
  });

  test("Ramanujan algorithm for 5 digits", () => {
    process.argv = ["node", "src/lib/main.js", "--digits", "5", "--algorithm", "ramanujan"];
    main();
    expect(console.log).toHaveBeenCalledWith("3.14159");
    expect(process.exit).toHaveBeenCalledWith(0);
  });

  test("Chudnovsky algorithm with 2 workers for 5 digits", () => {
    process.argv = [
      "node",
      "src/lib/main.js",
      "--digits",
      "5",
      "--algorithm",
      "chudnovsky",
      "--workers",
      "2",
    ];
    main();
    expect(console.log).toHaveBeenCalledWith("3.14159");
    expect(process.exit).toHaveBeenCalledWith(0);
  });

  test("Invalid algorithm", () => {
    process.argv = ["node", "src/lib/main.js", "--algorithm", "foo"];
    main();
    expect(console.error).toHaveBeenCalledWith("Error: Invalid algorithm 'foo'");
    expect(process.exit).toHaveBeenCalledWith(1);
  });

  test("Invalid workers (zero)", () => {
    process.argv = ["node", "src/lib/main.js", "--workers", "0"];
    main();
    expect(console.error).toHaveBeenCalledWith(
      `Error: --workers requires a positive integer ≤ ${cpuCount}`
    );
    expect(process.exit).toHaveBeenCalledWith(1);
  });

  test("Invalid workers (> cpuCount)", () => {
    process.argv = ["node", "src/lib/main.js", "--workers", `${cpuCount + 1}`];
    main();
    expect(console.error).toHaveBeenCalledWith(
      `Error: --workers requires a positive integer ≤ ${cpuCount}`
    );
    expect(process.exit).toHaveBeenCalledWith(1);
  });

  test("Invalid workers (non-integer)", () => {
    process.argv = ["node", "src/lib/main.js", "--workers", "foo"];
    main();
    expect(console.error).toHaveBeenCalledWith(
      `Error: --workers requires a positive integer ≤ ${cpuCount}`
    );
    expect(process.exit).toHaveBeenCalledWith(1);
  });
});
tests/unit/sse.test.js
# tests/unit/sse.test.js
import { describe, test, expect, beforeAll } from "vitest";
import request from 'supertest';
import { main } from '@src/lib/main.js';

describe('SSE endpoint', () => {
  let app;

  beforeAll(async () => {
    app = await main(['--serve', '0', '--sse']);
  });

  test('streams data for valid request', async () => {
    const res = await request(app).get('/pi/sse?digits=20&chunkSize=5');
    expect(res.status).toBe(200);
    expect(res.headers['content-type']).toMatch(/text\/event-stream/);
    expect(res.text).toMatch(/^data: .+\n\n/);
    expect(res.text).toMatch(/event: done/);
  });

  test('uses default chunk size when none provided', async () => {
    const res = await request(app).get('/pi/sse?digits=5');
    expect(res.status).toBe(200);
    expect(res.text).toMatch(/data: 3\.14159/);
    expect(res.text).toMatch(/event: done/);
  });

  test('returns 400 for invalid digits param', async () => {
    const res = await request(app).get('/pi/sse?digits=foo');
    expect(res.status).toBe(400);
    expect(res.body).toEqual({ error: "Invalid 'digits' parameter" });
  });

  test('returns 400 for invalid chunkSize param', async () => {
    const res = await request(app).get('/pi/sse?digits=5&chunkSize=-1');
    expect(res.status).toBe(400);
    expect(res.body).toEqual({ error: "Invalid 'chunkSize' parameter" });
  });
});tests/unit/main.test.js
# tests/unit/main.test.js
import { describe, test, expect, beforeEach, afterEach, vi } from "vitest";
import { calculatePi, main } from "@src/lib/main.js";

describe("calculatePi", () => {
  test("1 digit", () => {
    expect(calculatePi(1)).toBe("3.1");
  });

  test("2 digits", () => {
    expect(calculatePi(2)).toBe("3.14");
  });

  test("5 digits", () => {
    expect(calculatePi(5)).toBe("3.14159");
  });

  test("throws on non-integer or <1", () => {
    expect(() => calculatePi(0)).toThrow("Digits must be an integer >= 1");
    expect(() => calculatePi(2.5)).toThrow("Digits must be an integer >= 1");
  });

  test("throws on exceeding max limit", () => {
    expect(() => calculatePi(1001)).toThrow("Maximum digits is 1000");
  });
});

describe("CLI Integration", () => {
  let origArgv;
  let origExit;
  let origLog;
  let origErr;

  beforeEach(() => {
    origArgv = process.argv;
    origExit = process.exit;
    origLog = console.log;
    origErr = console.error;
    process.exit = vi.fn();
    console.log = vi.fn();
    console.error = vi.fn();
  });

  afterEach(() => {
    process.argv = origArgv;
    process.exit = origExit;
    console.log = origLog;
    console.error = origErr;
  });

  test("default digits outputs ~3.1415926536 and exits 0", () => {
    process.argv = ["node", "src/lib/main.js"];
    main();
    expect(console.log).toHaveBeenCalledWith(
      expect.stringMatching(/^3\.1415926536/)
    );
    expect(process.exit).toHaveBeenCalledWith(0);
  });

  test("--digits 3 outputs rounded 3.142 and exits 0", () => {
    process.argv = ["node", "src/lib/main.js", "--digits", "3"];
    main();
    expect(console.log).toHaveBeenCalledWith("3.142");
    expect(process.exit).toHaveBeenCalledWith(0);
  });

  test("--digits 1001 errors and exits 1", () => {
    process.argv = ["node", "src/lib/main.js", "--digits", "1001"];
    main();
    expect(console.error).toHaveBeenCalledWith("Error: Maximum digits is 1000");
    expect(process.exit).toHaveBeenCalledWith(1);
  });

  test("invalid --digits argument errors and exits 1", () => {
    process.argv = ["node", "src/lib/main.js", "--digits"];
    main();
    expect(console.error).toHaveBeenCalledWith("Error: --digits requires a number");
    expect(process.exit).toHaveBeenCalledWith(1);
  });

  test("--help prints help and exits 0", () => {
    process.argv = ["node", "src/lib/main.js", "--help"];
    main();
    expect(console.log).toHaveBeenCalledWith(expect.stringContaining("Usage:"));
    expect(process.exit).toHaveBeenCalledWith(0);
  });
});

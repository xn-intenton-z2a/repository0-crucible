tests/unit/main.test.js
# tests/unit/main.test.js
import { describe, it, expect, beforeEach, afterEach, vi } from "vitest";
import { main } from "@src/lib/main.js";

describe("PI Calculator CLI", () => {
  let logSpy;
  let errorSpy;

  beforeEach(() => {
    logSpy = vi.spyOn(console, "log").mockImplementation(() => {});
    errorSpy = vi.spyOn(console, "error").mockImplementation(() => {});
  });

  afterEach(() => {
    logSpy.mockRestore();
    errorSpy.mockRestore();
  });

  it("should output default 10-digit π", () => {
    process.argv = ["node", "src/lib/main.js"];
    main();
    expect(logSpy).toHaveBeenCalledWith("3.1415926536");
  });

  const digitsCases = [5, 8];
  const algorithms = ["leibniz", "nilakantha", "machin"];

  digitsCases.forEach((d) => {
    algorithms.forEach((algo) => {
      it(`should compute π using ${algo} with ${d} digits`, () => {
        process.argv = [
          "node",
          "src/lib/main.js",
          "--algorithm",
          algo,
          "--digits",
          String(d)
        ];
        main();
        const expected = Math.PI.toFixed(d);
        expect(logSpy).toHaveBeenCalledWith(expected);
      });
    });
  });

  it("should warn and default when digits invalid", () => {
    process.argv = ["node", "src/lib/main.js", "--digits", "abc"];
    main();
    expect(errorSpy).toHaveBeenCalledWith(expect.stringContaining("Invalid digits"));
    expect(logSpy).toHaveBeenCalledWith("3.1415926536");
  });

  it("should warn and default when digits < 1", () => {
    process.argv = ["node", "src/lib/main.js", "--digits", "0"];
    main();
    expect(errorSpy).toHaveBeenCalledWith(expect.stringContaining("Invalid digits"));
    expect(logSpy).toHaveBeenCalledWith("3.1415926536");
  });

  it("should warn and default when algorithm invalid", () => {
    process.argv = ["node", "src/lib/main.js", "--algorithm", "foo"];
    main();
    expect(errorSpy).toHaveBeenCalledWith(expect.stringContaining("Invalid algorithm"));
    expect(logSpy).toHaveBeenCalledWith("3.1415926536");
  });
});
npm DocsDocumentation for the npm registry, website, and command-line interfaceAbout npmGetting startedPackages and modulesIntegrationsOrganizationsPoliciesThreats and mitigationsnpm CLI\n\n\n\nnpm DocsDocumentation for the npm registry, website, and command-line interfaceAbout npmGetting startedPackages and modulesIntegrationsOrganizationsPoliciesThreats and mitigationsnpm CLI\n\n\n\nnpm DocsDocumentation for the npm registry, website, and command-line interfaceAbout npmGetting startedPackages and modulesIntegrationsOrganizationsPoliciesThreats and mitigationsnpm CLI\n\n\n\nAbout npmSee DetailsTable of contentsUse npm to . . .Getting startedSharing packages and collaborating with othersLearn moreCLI reference documentationnpm is the world's largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.
npm consists of three distinct components:

the website
the Command Line Interface (CLI)
the registry

Use the website to discover packages, set up profiles, and manage other aspects of your npm experience. For example, you can set up organizations to manage access to public or private packages.
The CLI runs from a terminal, and is how most developers interact with npm.
The registry is a large public database of JavaScript software and the meta-information surrounding it.
Use npm to . . .

Adapt packages of code for your apps, or incorporate packages as they are.
Download standalone tools you can use right away.
Run packages without downloading using npx.
Share code with any npm user, anywhere.
Restrict code to specific developers.
Create organizations to coordinate package maintenance, coding, and developers.
Form virtual teams by using organizations.
Manage multiple versions of code and code dependencies.
Update applications easily when underlying code is updated.
Discover multiple ways to solve the same puzzle.
Find other developers who are working on similar problems and projects.

Getting started
To get started with npm, you can create an account, which will be available at http://www.npmjs.com/~yourusername.
After you set up an npm account, the next step is to use the command line interface (CLI) to install npm. We look forward to seeing what you create!
Sharing packages and collaborating with others
If you choose to share your packages publicly, there is no cost. To use and share private packages, you need to upgrade your account. To share with others, create organizations, called npm organizations, and invite others to work with you, privately (for a fee) or publicly (for free).
You can also use a private npm package registry like GitHub Packages or the open source Verdaccio project. This lets you develop packages internally that are not shared publicly.
Learn more
To learn more about npm as a product, upcoming new features, and interesting uses of npm be sure to follow @npmjs on Twitter.
For mentoring, tutorials, and learning, visit node school. Consider attending or hosting a nodeschool event (usually free!) at a site near you, or use the self-help tools you can find on the site.
CLI reference documentation
While relevant CLI commands are covered throughout this user documentation, the CLI includes command line help, its own documentation section, and instant help (man pages).Edit this page on GitHub4 contributorslukekarrysmrienstraMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountCreating a new user account on the public registryCreating a new user account on the public registrySee DetailsTable of contentsCreating an account on the websiteTesting your new account with npm loginIf you do not already have an npm user account, you can create an account in order to share and download Javascript packages on the public registry.
Creating an account on the website


Go to the npm signup page


In the user signup form, type in the fields:

Username: The username that will be displayed when you publish packages or interact with other npm users on npmjs.com. Your username must be lower case, and can contain hyphens and numerals.
Email address: Your public email address will be added to the metadata of your packages and will be visible to anyone who downloads your packages. We will also send email to this account when you update packages, as well as occasional product updates and information.
Password: Your password must meet our password guidelines.




Read the End User License Agreement and Privacy Policy, and indicate that you agree to them.



Click Create An Account.



Note: After signing up for an npm account, you will receive an account verification email. You must verify your email address in order to publish packages to the registry.
Testing your new account with npm login
Use the npm login command to test logging in to your new account.
Note: If you misspell your existing account username when you log in with the npm login command, you will create a new account with the misspelled name. For help with accidentally-created accounts, contact npm Support.


On the command line, type the following command:
npm login


When prompted, enter your username, password, and email address.


If you have two-factor authentication enabled, when prompted, enter a one-time password.


To test that you have successfully logged in, type:
npm whoami
Your npm username should be displayed.

Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountCreating a strong passwordCreating a strong passwordSecure your npm account with a strong and unique password using a password manager.
You must choose or generate a password for your npm account that:

is longer than 10 characters
does not match or significantly contain your username, e.g. do not use 'username123'
has not been compromised and known to the Have I Been Pwned breach database

To keep your account secure, we recommend you follow these best practices:

Use a password manager, such as 1Password, to generate a password more than 16 characters.
Generate a unique password for npm. If you use your npm password elsewhere and that service is compromised, then attackers or other malicious actors could use that information to access your npm account.
Configure two-factor authentication for your account. For more information, see "About two-factor authentication."
Never share your password, even with a potential collaborator. Each person should use their own personal account on npm. For more information on ways to collaborate, see: "npm organizations".

When you type a password to sign in, create an account, or change your password, npm will check if the password you entered is considered weak according to datasets like HaveIBeenPwned. The password may be identified as weak even if you have never used that password before.
npm only inspects the password at the time you type it, and never stores the password you entered in plaintext. For more information, see HaveIBeenPwned.Edit this page on GitHub4 contributorslukekarrysMylesBorinsrzhade3ethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountReceiving a one-time password over emailReceiving a one-time password over emailSee DetailsTable of contentsLogging in with a one-time passwordEnabling two-factor authenticationUnable to access emailFor your security, npm may require additional verification to allow you to log in to your account. If you do not have two-factor authentication enabled, you may be asked to verify yourself with a one-time password sent to the email address configured for your account.
Logging in with a one-time password


On the npm "Sign In" page, enter your account details and click Sign In.



You'll be prompted for a one-time password that was sent to your email.



Check your email account for an email from npm containing your one-time password (the subject will begin "OTP for logging in to your account").



Enter the digits from your email in your one-time password field.


Enabling two-factor authentication
To avoid this additional login step, with a one-time password sent to you via e-mail, you can configure two-factor authentication with a device (2FA) instead.
Unable to access email
If you are unable to access the email linked to your npm account, you can submit a support ticket to reset this email address.


On the npm "Sign In" page, enter your account details and click Sign In.



Under the "Login Verification" form, click Try recovering your account.


On the "Request an Account Recovery" page, click Start Account Recovery.



In the "Open a Support Ticket" form, enter the following information:


In the Email field, enter an email address where our support team can contact you.

In the How can we help? section, select Reset my email.

If you need help with anything else, in the How can we help? section, select Other and enter more information in the Additional Details field.
If you have previously linked a GitHub account to your npm account, select Connect to GitHub. This will help our support team verify your account.If you have previously linked a Twitter account to your npm account, select Connect to Twitter. This will help our support team verify your account.




At the bottom of the form, click Submit Support Ticket.

Edit this page on GitHub2 contributorslukekarrysmonishcmLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountAbout two-factor authenticationAbout two-factor authenticationSee DetailsTable of contentsTwo-factor authentication on npmAuthorization and writesAuthorization onlyTwo-factor authentication (2FA) protects against unauthorized access to your account by confirming your identity using:

Something you know (e.g., a password).
Something you have (e.g., an ID badge or a cryptographic key).
Something you are (e.g., a fingerprint or other biometric data).

When you enable 2FA, you will be prompted for a second form of authentication before performing certain actions on your account or packages to which you have write access. Depending on your 2FA configuration you will be either prompted to authenticate with a security-key or a time-based one-time password (TOTP).

The security-key flow allows you to use biometric devices such as Apple Touch ID, Face ID or Windows Hello as well as physical keys such as Yubikey, Thetis or Feitian as your 2FA.
To configure TOTP you will need to install an authenticator application that can generate OTPs such as Authy, Google Authenticator, or Microsoft Authenticator on your mobile device.

Note: Two-factor authentication provides the best possible security for your account against attackers. We strongly recommend enabling 2FA on your account as soon as possible after you sign up.
Two-factor authentication on npm
Two-factor authentication on npm can be enabled for authorization and writes, or authorization only.
Authorization and writes
By default, 2FA is enabled for authorization and writes. We will request a second form of authentication for certain authorized actions, as well as write actions.
ActionCLI commandLog in to npmnpm loginChange profile settings (including your password)npm profile setChange 2FA modes for your user accountnpm profile enable-2fa auth-and-writesDisable 2FA for your user accountnpm profile disable-2faCreate tokensnpm token createRevoke tokensnpm token revokePublish packagesnpm publishUnpublish packagesnpm unpublishDeprecate packagesnpm deprecateChange package visibilitynpm access public/restrictedChange user and team package accessnpm access grant/revokeChange package 2FA requirementsnpm access 2fa-required/2fa-not-required
Authorization only
If you enable 2FA for authorization only. We will request a second form of authentication only for certain authorized actions.
ActionCLI commandLog in to npmnpm loginChange profile settings (including your password)npm profile setChange 2FA modes for your user accountnpm profile enable-2fa auth-onlyDisable 2FA for your user accountnpm profile disable-2faCreate tokensnpm token createRevoke tokensnpm token revokeEdit this page on GitHub5 contributorslukekarrysmonishcmb4mbooachrinzaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountConfiguring two-factor authenticationConfiguring two-factor authenticationSee DetailsTable of contentsPrerequisitesConfiguring 2FA from the websiteEnabling 2FADisabling 2FA for writesDisabling 2FAConfiguring 2FA from the command lineEnabling 2FA from the command lineSending a one-time password from the command lineRemoving 2FA from the command lineConfiguring account recovery optionsResolving TOTP errorsYou can enable two-factor authentication (2FA) on your npm user account to protect against unauthorized access to your account and packages, either by using a security-key or time-based one-time password (TOTP) from a mobile app.
Prerequisites
Before you enable 2FA on your npm user account, you must:

Update your npm client to version 5.5.1 or higher.
To configure a security-key requires a modern browser that support WebAuthn. This will allow you to configure a biometric devices featuring Apple Touch ID, Face ID, or Windows Hello as well as physical keys such as Yubikey, Thetis, or Feitian.
To configure TOTP you will need to install an authenticator application that can generate OTPs such as Authy, Google Authenticator, or Microsoft Authenticator on your mobile device.

For more information on supported 2FA methods, see "About two-factor authentication".
Note: npm does not accept SMS (text-to-phone) as a 2FA method.
Configuring 2FA from the website
Enabling 2FA


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Enable 2FA.



When prompted provide your current account password and then click Confirm password to continue.


On the 2FA method page, select the method you would like to enable and click Continue. For more information on supported 2FA methods, see "About two-factor authentication".



Configure the 2FA method of your choice:

When using a security-key, provide a name for it and click Add security key. Follow the browser specific steps to add your security-key.



Below is an example of configuration from Microsoft Edge running on a MacOS



When using an authenticator application on your phone, open it and scan the QR code on the two-step verification page. Enter the code generated by the app, then click Verify.




On the recovery code page, copy the recovery codes to your computer or other safe location that is not your second factor device. We recommend using a password manager.

Recovery codes are the only way to ensure you can recover your account if you lose access to your second factor device. Each code can be used only once. You can view and regenerate your recovery code from your 2FA settings page. For secondary account recovery options, see "Configuring account recovery options."


Click Go back to settings after confirming that you have saved your codes.


Disabling 2FA for writes
Check the Authorization and writes section for more information on different operations that requires 2FA when this mode is enabled.
Note: As a recommended setting, 2FA for write operations are automatically enabled when setting up 2FA. The following steps explain how to disable it.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Modify 2FA.



From the "Manage Two-Factor Authentication" navigate to "Additional Options" section


Clear the checkbox for "Require two-factor authentication for write actions" and click "Update Preferences"



Disabling 2FA
If you have 2FA enabled, you can remove it from your account settings page.
Note: You cannot remove 2FA if you are a member of an organization that enforces 2FA. You can view the list of organizations memberships from your profile page under the "Organizations" tab.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Modify 2FA.



Scroll to the bottom of the "Manage Two-Factor Authentication" page and click Disable 2FA.



Agree to the prompt from the browser.


Configuring 2FA from the command line
Enabling 2FA from the command line
Although security-key with WebAuthn can be used for authentication from both the web and the command line, it can only be configured from the web. When enabling 2FA from the command line, currently the only available option is to use an TOTP mobile app.
Note: Settings you configure on the command line will also apply to your profile settings on the npm website.


If you are logged out on the command line, log in using npm login command.


On the command line, type the npm profile command along with the option for the 2FA mode you want to enable:


To enable 2FA for authorization and writes, type:
npm profile enable-2fa auth-and-writes


To enable 2FA for authorization only, type:
npm profile enable-2fa auth-only




To add npm to your authenticator application, using the device with the app, you can either:

Scan the QR code displayed on the command line.
Type the number displayed below the QR code.



When prompted to add an OTP code from your authenticator, on the command line, enter a one-time password generated by your authenticator app.


Sending a one-time password from the command line
If you have enabled 2FA auth-and-writes, you will need to send the TOTP from the command line for certain commands to work. To do this, append --otp=123456 (where 123456 is the code generated by your authenticator) at the end of the command. Here are a few examples:
npm publish [<tarball>|<folder>][--tag <tag>] --otp=123456npm owner add <user > --otp=123456npm owner rm <user> --otp=123456npm dist-tags add <pkg>@<version> [<tag>] --otp=123456npm access edit [<package>) --otp=123456npm unpublish [<@scope>/]<pkg>[@<version>] --otp=123456
Removing 2FA from the command line


If you are logged out on the command line, log in using npm login command.


On the command line, type the following command:
npm profile disable-2fa


When prompted, enter your npm password:
npm password:


When prompted for a one-time password, enter a password from your authenticator app:
Enter one-time password from your authenticator: 123456


Configuring account recovery options
When you enable 2FA on your npm user account, we strongly recommend you link your GitHub and/or Twitter accounts to your npm user account. In the event you lose access to your 2FA device and recovery codes, these linked accounts can be used to verify your identity and expedite the recovery of your npm account.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



To link your GitHub account, on the account settings page, under "Linked Accounts & Recovery Option", click Link with GitHub.



On the authorization page, verify all information looks correct. Then click Authorize npm account link.


To link your Twitter account, on the account settings page, under "Linked Accounts & Recovery Option", click Link with Twitter.



On the authorization page, verify all information looks correct. Then click Authorize app.


The Twitter or GitHub account is now linked to your npm account. To remove the link to either account, you can click the Remove button next to the account you want to remove from your npm account.
Resolving TOTP errors
If you are entering what seems to be a valid TOTP but you see an error, be sure that you are using the correct authenticator account. If you have multiple authenticator accounts, using an TOTP from the wrong account will cause an error.
Also, when you reset two-factor authentication after it has been disabled, the authenticator might create a second account with the same name. Please see the authenticator documentation to delete the old account.Edit this page on GitHub7 contributorscdoublevlukekarrysmonishcmb4mboocoliffMylesBorinsethomsonLast edited by cdoublev on August 13, 2024\n\n\n\nGetting startedSetting up your accountAccessing npm using two-factor authenticationAccessing npm using two-factor authenticationSee DetailsTable of contentsSign in from the command line using security-key flowSign in from the command line using --auth-type=webWith an existing browser sessionWithout an existing browser sessionSign in from the command line using security-key flow


On the command line, type the npm login command.


When prompted, provide your username, password, and email address.
user@host:~$ npm loginnpm notice Log in on https://registry.npmjs.org/Username: monaPassword:Email: (this IS public) mona@github.comnpm notice Open https://www.npmjs.com/login/913c3ab1-89a0-44bd-be8d-d946e2e906f0 to use your security key for authentication or enter OTP from your authenticator app


If you have configured a security-key, open the provided URL shown in the command line. Alternatively, if you have configured a mobile authenticator skip to step 6.


Click on Use security key and follow the browser specific steps to authenticate.



Copy the generated token



Enter the one-time password into the CLI prompt.
Enter one-time password:


Sign in from the command line using --auth-type=web
npm 8.14.0 and higher support login flow through the browsers. This will become the default behavior for the npm public registry in npm 9.
With an existing browser session


On the command line, type the npm login --auth-type=web command.


When prompted hit "ENTER" to open your browser to start the login flow or click the provided URL show in the command line.
user@host:~$ npm loginnpm notice Log in on https://registry.npmjs.org/Authenticate your account at:https://www.npmjs.com/login?next=/login/cli/b1a2f96a-ce09-4463-954c-c99f6773b922Press ENTER to open in the browser...


Click on Use security key and follow the browser specific steps to authenticate.

Note: If you have configured to use TOTP, you will see an TOTP prompt instead


Without an existing browser session


On the command line, type the npm login --auth-type=web command.


When prompted hit "ENTER" to open your browser to start the login flow or click the provided URL show in the command line.
user@host:~$ npm loginnpm notice Log in on https://registry.npmjs.org/Authenticate your account at:https://www.npmjs.com/login?next=/login/cli/b1a2f96a-ce09-4463-954c-c99f6773b922Press ENTER to open in the browser...


On the npm "Sign In" page, enter your account details and click Sign In.



Click on Use security key and follow the browser specific steps to authenticate.

Note: If you have configured to use TOTP, you will see an TOTP prompt instead

Edit this page on GitHub5 contributorslukekarrysbitdawMylesBorinsmonishcmb4mbooLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedSetting up your accountRecovering your 2FA-enabled accountRecovering your 2FA-enabled accountSee DetailsTable of contentsMisplaced second factor deviceUsing recovery code on the webUsing recovery code from the command lineViewing and regenerating recovery codeMisplaced recovery codesWhen you have two-factor access enabled on your account, and you lose access to your 2FA device, you may be able to recover your account using the following methods.
Misplaced second factor device
If you have misplaced the device that provided second-factor authentication, you can use the recovery codes generated when you enabled 2FA to access your account.
Using recovery code on the web


Locate the recovery codes generated that you have saved.


On the npm "Sign In" page, enter your account details and click Sign In.



On the "Two-Factor Authentication" page, click Use a recovery code or request a reset.

Note: If you have configured to use TOTP, you will see an TOTP prompt instead


Enter an unused recovery code in the "Use a Recovery Code" prompt.



You are now logged into npm.


(Optional) To disable 2FA, see "Disabling 2FA".


Using recovery code from the command line


Locate the recovery codes generated when you enabled 2FA on your account.


If you are logged out on the command line, log in using npm login command with your username and npm password.


Enter an unused recovery code when you see this prompt:
Enter one-time password:


Once you are logged in, use the below and enter your npm password if prompted.
npm profile disable-2fa


Enter another unused recovery code when you see this prompt:
Enter one-time password:


npm will confirm that two-factor authentication has been disabled.


Follow the steps outlined in "Configuring two-factor authentication" to re-enable 2FA and generate new recovery codes.


Note: Using the recovery codes to re-enable 2FA may create a new authenticator account with the same npm account name.If you are using a time-based one-time password (TOTP) mobile app and want to delete the old authenticator account, follow the steps for the authenticator.
Viewing and regenerating recovery code
Note: Once you regenerate a set of code, all previous recovery codes become invalid. Each code can be used only once.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On the account settings page, under "Two-Factor Authentication", click Modify 2FA.



Click "Manage Recovery Codes" to view your recovery codes.



Click "Regenerate Code" to generate a new set of codes.


Misplaced recovery codes
If you have misplaced both your 2FA device and your recovery codes, you can contact our support team to attempt to recover your account. Provide as much information as possible to help us expedite the request faster.


On the npm "Sign In" page, enter your account details and click Sign In.



On the "Two-Factor Authentication" page, click Use a recovery code or request a reset.



Under the "Use a Recovery Code" form, click Try recovering your account.


On the "Request an Account Recovery" page, click Start Account Recovery.



If you have access to your registered email, enter the one-time password sent to your email in the One-Time Password field, then click Verify Email Address. If you do not have access to your registered email, select Skip email verification at the bottom of the form.


In the "Open a Support Ticket" form, enter the following information:


In the Email field, enter an email address where our support team can contact you.

In the How can we help? section, select Reset my two-factor authentication (2FA).

If you need help with anything else, in the How can we help? section, select Other and enter more information in the Additional Details field.
If you have previously linked a GitHub account to your npm account, select Connect to GitHub. This will help our support team verify your account.If you have previously linked a Twitter account to your npm account, select Connect to Twitter. This will help our support team verify your account.





At the bottom of the form, click Submit Support Ticket.

Edit this page on GitHub4 contributorslukekarrysmonishcmb4mbooethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountManaging your profile settingsManaging your profile settingsSee DetailsTable of contentsManaging user account profile settings from the webLinking your npm and GitHub accountsLinking your npm and Twitter accountsRemoving your GitHub account from npmRemoving your Twitter account from npmManaging user account profile settings from the command lineViewing user account profile settings from the command lineUpdating user account profile settings from the command lineSetting a password from the command lineConfiguring two-factor authentication from the command lineYou can manage settings for your user account profile from the web or command line.
Managing user account profile settings from the web
From the web, you can change the following user profile settings:

Avatar
Password
Full name
Link GitHub Account
Link Twitter Account
Email address added to package metadata
Two-factor authentication status



On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



Linking your npm and GitHub accounts


On the account settings page, you will find a button to link your GitHub account. Click that.



If you are not currently logged in to GitHub you will be prompted to go through the authentication flow.



After successfully logging in, or if you already had an active browser sessions, you will be prompted to "authorize npm account link", click the button.



You will be redirected to npm and the link will show as successful in your settings.



Linking your npm and Twitter accounts


On the account settings page, you will find a button to link your Twitter account. Click that.



If you are not currently logged in to Twitter you will be prompted to go through the authentication flow. Click "Log in"



After successfully logging in, or if you already had an active browser sessions, you will be prompted to "Authorize app", click the button.



You will be redirected to npm and the link will show as successful in your settings.



Removing your GitHub account from npm


On the account settings page, you will find a button to remove your GitHub account. Click that.

Note: Clicking remove will only remove the link from your npm account. You need to revoke permissions from your GitHub app authorization settings to permanently remove the integration from your GitHub account


Removing your Twitter account from npm


On the account settings page, you will find a button to remove your GitHub account. Click that.

Note: Clicking remove will only remove the link from your npm account. You need to revoke permissions from your Twitter connect apps management page to permanently remove the integration from your Twitter account


Managing user account profile settings from the command line
Note: Your npm client must be version 5.5.1 or higher to change your account settings from the CLI. To update to the latest version of npm, on the command line, run npm install npm@latest -g
Viewing user account profile settings from the command line
To view your user profile settings from the CLI, on the command line, run the following command:
npm profile get

Updating user account profile settings from the command line
From the CLI, you can change the following properties for your user account:

email
two-factor auth
fullname
homepage
freenode
password



On the command line, type the following command, replacing property with the name of the property, and value with the new value:
npm profile set <prop> <value>


When prompted, provide your current password.


If you have enabled two-factor authentication on your account, when prompted, enter a one-time password.


For more details, see the profile command line documentation.
Setting a password from the command line

On the command line, type the following command:

npm profile set password


When prompted, provide your current password.


When prompted, type a new password.


To protect your account, when you reset your password from the command line, it must:
be longer than 10 characters
not contain part of your username
not be in the "Have I Been Pwned" breach database

Configuring two-factor authentication from the command line
Enabling two-factor authentication on your account helps protect against unauthorized access to your account and packages.
To enable, configure, and disable two-factor authentication from the command line, see "Configuring two-factor authentication".Edit this page on GitHub5 contributorslukekarrysarisacobarzhade3MylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountChanging your npm usernameChanging your npm usernameIt is not currently possible to change your npm username. You'll need to create a new account and migrate the data to the new account manually.

Create a new user account with your desired username
Transfer your packages to your new account.
If you are a member of any organizations, ask the organization administrator to invite your new account to the organization.
Delete your original account. Note that this is permanent, and after 30 days, this account name is available for other people to claim.
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountDeleting your npm user accountDeleting your npm user accountFrom the web, you can delete your npm user account.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



On this page, you will find a button to delete your account. Click that.



You will now be presented with an overview of how many npm packages will be deleted and deprecated as part of your account deletion. If you agree with this, then enter your username and click "Delete this account".



You will be immediately logged out, and will not be able to log back in.


In some cases, you will be presented with an error if we were unable to automatically delete your account. For example. if you are the sole owner of an organization you will need to add an additional owner before your account can be deleted. You will be presented clear instructions of what you will need to do in order to delete your account.
If you are in doubt about deleting your account, contact npm Support.Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedManaging your accountRequesting an export of your personal dataRequesting an export of your personal dataSee DetailsTable of contentsHow to request an exportRetrieving the exported dataYou can export and review the metadata that npm stores about your personal account. The export is an archive containing the following information.

Your personal details such as username, email address, full name, linked Twitter / GitHub accounts, masked Personal Access Tokens (PAT) and the organisations that you are a member of.
Metadata of all the packages that you have access to.
Each individual version of packages that you have published to npm.

How to request an export

Navigate to npm support form
Select "Account and Billing issues" category
Select "Data export request" sub-category



Fill in the details and submit the form

Retrieving the exported data
After a request is placed our support team will review it and initiate an export on your behalf. Once the export process is complete you will receive an email with a link to an archive of your personal data. You must be authenticated to npmjs.com to download this archive.
The download link will be available for 7 days, after which the exported data and the link is purged.\n\n\n\nGetting startedPaying for your accountUpgrading to a paid user account planUpgrading to a paid user account planNote: This article only applies to users of the public npm registry.
If you need to install and publish private packages, you can upgrade to a paid user account plan. Our paid user account plan costs $7 per month. For more information, see the "npm account" column on our pricing page.
Your paid plan and billing cycle will start when you submit your credit card information, and you will be charged for the first month immediately.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



Under "change plan", click Upgrade Plan ($7/User).



Under "Want to upgrade?", click Enable Private Publishing for $7/mo.



In the billing information dialog box, enter your billing information:Email: the email address used for the billing contactName: the name on the credit card used to payStreet, City, ZIP Code, Country: the billing address associated with the credit card



Click Payment Info.



In the credit card information dialog box, enter your credit card information:Card numberMM / YY: the month and year of the card expiration dateCVC: the three-digit code on the credit card



To save your credit card information for other payments on npm, select "Remember me".



Click Pay $7.00.


Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedPaying for your accountViewing, downloading, and emailing receipts for your npm user accountViewing, downloading, and emailing receipts for your npm user accountSee DetailsTable of contentsViewing receiptsDownloading receiptsEmailing receiptsNote: This article only applies to users of the public npm registry.
You can view, download, and email receipts for the complete billing history of your npm user account.
Viewing receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.



Downloading receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



To download a single receipt, find the row of the receipt you want to download, then click the PDF icon on the right side of the row.



To download multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the "Date" header. Then click Download Checked.



Emailing receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



To email a single receipt, find the row of the receipt you want to download, then, on the right side of the row, click the email icon.



To email multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the "Date" header. Then click Email Checked.



In the Email Receipt dialog box, fill in the "From", "To", and "Message" fields.



Click Send.

Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedPaying for your accountUpdating user account billing settingsUpdating user account billing settingsSee DetailsTable of contentsUpdating credit card informationUpdating billing receipt email and extra receipt informationNote: This article only applies to users of the public npm registry.
You can update the credit card used to pay for your paid user account plan. Updating your credit card will not change your billing cycle date, and the new credit card will be charged on the next billing cycle.
Note: If the credit card used to pay for your paid user account plan expires, or we are otherwise are unable to charge your card, you have a grace period of nine days to update the card.
Updating credit card information


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



Under "monthly bill", click Edit Payment Info.



In the billing information dialog box, enter your billing information:Email: the email address used for the billing contactName: the name on the credit card used to payStreet, City, ZIP Code, Country: the billing address associated with the credit card



Click Payment Info.



In the credit card information dialog box, enter your credit card information:Card numberMM / YY: the month and year of the card expiration dateCVC: the three-digit code on the credit card



To save your credit card information for other payments on npm, select "Remember me".



Click Update Card.



Updating billing receipt email and extra receipt information
You can update the email address used for receipts, and add extra information to the receipt for your paid user account plan, such as your business name, VAT identification number, or address of record. Updated billing information will appear on all receipts immediately.
Note: The billing email is used for receipts only and is not required to match the email address of the person whose card is used to pay for the paid user account plan.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



On the Billing Information page, under "monthly bill", select View Billing History.



At the bottom of the Billing History dialog box, click "Receipt Settings".



To add a business name, VAT number, address of record, or other information to your receipts, in the "Extra Billing Information" text box, type the information.



To update the email address used for receipts, beside "Send my receipts", select the checkbox and type the email address that should receive billing receipts.



Click Save.


Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedPaying for your accountDowngrading to a free user account planDowngrading to a free user account planNote: This article only applies to users of the public npm registry.
If you have a paid user account, but no longer need private packages, you can downgrade your paid organization to a free organization. When you downgrade from a paid to a free organization, you will lose the ability to install and publish private packages at the end of your last paid billing cycle. Your private packages will not be made publicly visible when you downgrade to a free plan.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then select Billing Info.



Under "change plan", click Downgrade Plan.



Under "Are you sure?", click Downgrade to a free account.


Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedConfiguringAbout npm CLI versionsAbout npm CLI versionsSee DetailsTable of contentsThe latest release of npmThe npm command line interface (CLI) is released on a regular cadence. We recommend installing the release that supports your workflow:

latest release: the most recent stable version.

The latest release of npm
The latest release of npm is the most recent stable version. When you install Node.js, npm is automatically installed. However, npm is released more frequently than Node.js, so to install the latest stable version of npm, on the command line, run:
npm install npm@latest -gEdit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 11, 2021\n\n\n\nGetting startedConfiguringDownloading and installing Node.js and npmDownloading and installing Node.js and npmSee DetailsTable of contentsOverviewChecking your version of npm and Node.jsUsing a Node version manager to install Node.js and npmOSX or Linux Node version managersWindows Node version managersUsing a Node installer to install Node.js and npmOS X or Windows Node installersLinux or other operating systems Node installersLess-common operating systemsTo publish and install packages to and from the public npm registry or a private npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. We strongly recommend using a Node version manager like nvm to install Node.js and npm. We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.
Note: to download the latest version of npm, on the command line, run the following command:npm install -g npm
Overview

Checking your version of npm and Node.js
Using a Node version manager to install Node.js and npm
Using a Node installer to install Node.js and npm

Checking your version of npm and Node.js
To see if you already have Node.js and npm installed and check the installed version, run the following commands:
node -vnpm -v
Using a Node version manager to install Node.js and npm
Node version managers allow you to install and switch between multiple versions of Node.js and npm on your system so you can test your applications on multiple versions of npm to ensure they work for users on different versions.
OSX or Linux Node version managers

nvm
n

Windows Node version managers

nodist
nvm-windows

Using a Node installer to install Node.js and npm
If you are unable to use a Node version manager, you can use a Node installer to install both Node.js and npm on your system.

Node.js installer
NodeSource installer

If you use Linux, we recommend that you use a NodeSource installer.
OS X or Windows Node installers
If you're using OS X or Windows, use one of the installers from the Node.js download page. Be sure to install the version labeled LTS. Other versions have not yet been tested with npm.
Linux or other operating systems Node installers
If you're using Linux or another operating system, use one of the following installers:

NodeSource installer (recommended)
One of the installers on the Node.js download page

Or see this page to install npm for Linux in the way many Linux developers prefer.
Less-common operating systems
For more information on installing Node.js on a variety of operating systems, see this page.Edit this page on GitHub3 contributorslukekarryshappy4soulethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedTroubleshootingGenerating and locating npm-debug.log filesGenerating and locating npm-debug.log filesWhen a package fails to install or publish, the npm CLI will generate an npm-debug.log file. This log file can help you figure out what went wrong.
If you need to generate a npm-debug.log file, you can run one of these commands.
For installing packages:
npm install --timing
For publishing packages:
npm publish --timing
You can find the npm-debug.log file in your .npm directory. To find your .npm directory, use npm config get cache.
If you use a CI environment, your logs are likely located elsewhere. For example, in Travis CI, you can find them in the /home/travis/build directory.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 22, 2023\n\n\n\nGetting startedTroubleshootingCommon errorsCommon errorsSee DetailsTable of contentsErrorsBroken npm installationRandom errorsNo compatible version foundPermissions errorsError: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7No spaceNo gitRunning a Vagrant box on Windows fails due to path length issuesnpm only uses git: and ssh+git: URLs for GitHub repos, breaking proxiesSSL ErrorSSL-intercepting proxyNot found / Server errorInvalid JSONMany ENOENT / ENOTEMPTY errors in outputcb() never called! when using shrinkwrapped dependenciesnpm login errorsnpm hangs on Windows at addRemoteTarballnpm not running the latest version on a Windows machineErrors

Broken npm installation
Random errors
No compatible version found
Permissions errors
Error: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7
No space
No git
Running a Vagrant box on Windows fails due to path length issues
npm only uses git: and ssh+git: URLs for GitHub repos, breaking proxies
SSL error
SSL-intercepting proxy
Not found / Server error
Invalid JSON
Many ENOENT / ENOTEMPTY errors in output
cb() never called! when using shrinkwrapped dependencies
npm login errors
npm hangs on Windows at addRemoteTarball
npm not running the latest version on a Windows machine

Broken npm installation
If your npm is broken:

On Mac or Linux, reinstall npm.
Windows: If you're on Windows and you have a broken installation, the easiest thing to do is to reinstall node from the official installer (see this note about installing the latest stable version).

Random errors

Some strange issues can be resolved by simply running npm cache clean and trying again.
If you are having trouble with npm install, use the -verbose option to see more details.

No compatible version found
You have an outdated npm. Please update to the latest stable npm.
Permissions errors
Please see the discussions in "Downloading and installing Node.js and npm" and "Resolving EACCES permissions errors when installing packages globally" for ways to avoid and resolve permissions errors.
Error: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7
The error Error: ENOENT, stat 'C:\Users\<user>\AppData\Roaming\npm' on Windows 7 is a consequence of joyent/node#8141, and is an issue with the Node installer for Windows. The workaround is to ensure that C:\Users\<user>\AppData\Roaming\npm exists and is writable with your normal user account.
No space
npm ERR! Error: ENOSPC, write
You are trying to install on a drive that either has no space, or has no permission to write.

Free some disk space or
Set the tmp folder somewhere with more space: npm config set tmp /path/to/big/drive/tmp or
Build Node yourself and install it somewhere writable with lots of space.

No git
npm ERR! not found: gitENOGIT
You need to install git. Or, you may need to add your git information to your npm profile. You can do this from the command line or the website. For more information, see "Managing your profile settings".
Running a Vagrant box on Windows fails due to path length issues
@drmyersii went through what sounds like a lot of painful trial and error to come up with a working solution involving Windows long paths and some custom Vagrant configuration:

This is the commit that I implemented it in, but I'll go ahead and post the main snippet of code here:
config.vm.provider "virtualbox" do |v|    v.customize ["sharedfolder", "add", :id, "--name", "www", "--hostpath", (("//?/" + File.dirname(__FILE__) + "/www").gsub("/","\\"))]end
config.vm.provision :shell, inline: "mkdir /home/vagrant/www"config.vm.provision :shell, inline: "mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` > www /home/vagrant/www", run: "always"
In the code above, I am appending \\?\ to the current directory absolute path. This will actually force the Windows API to allow an increase in the MAX_PATH variable (normally capped at 260). Read more about max path. This is happening during the sharedfolder creation which is intentionally handled by VBoxManage and not Vagrant's "synced_folder" method. The last bit is pretty self-explanatory; we create the new shared folder and then make sure it's mounted each time the machine is accessed or touched since Vagrant likes to reload its mounts/shared folders on each load.

npm only uses git: and ssh+git: URLs for GitHub repos, breaking proxies
@LaurentGoderre fixed this with some Git trickery:

I fixed this issue for several of my colleagues by running the following two commands:
git config --global url."https://github.com/".insteadOf git@github.com:git config --global url."https://".insteadOf git://
One thing we noticed is that the .gitconfig used is not always the one expected so if you are on a machine that modified the home path to a shared drive, you need to ensure that your .gitconfig is the same on both your shared drive and in c:\users\[your user]\

SSL Error
npm ERR! Error: 7684:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:openssl l 23_clnt.c:787:
You are trying to talk SSL to an unencrypted endpoint. More often than not, this is due to a proxy configuration error (see also this helpful, if dated, guide). In this case, you do not want to disable strict-ssl – you may need to set up a CA / CA file for use with your proxy, but it's much better to take the time to figure that out than disabling SSL protection.
npm ERR! Error: SSL Error: CERT_UNTRUSTED
npm ERR! Error: SSL Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE
This problem will happen if you're running Node 0.6. Please upgrade to node 0.8 or above. See this post for details.
You could also try these workarounds: npm config set ca "" or npm config set strict-ssl false
npm ERR! Error: SSL Error: SELF_SIGNED_CERT_IN_CHAIN
npm no longer supports its self-signed certificates
Either:

upgrade your version of npm npm install npm -g --ca=""
tell your current version of npm to use known registrars npm config set ca=""

If this does not fix the problem, then you may have an SSL-intercepting proxy. (For example, https://github.com/npm/npm/issues/7439#issuecomment-76024878)
SSL-intercepting proxy
Unsolved. See https://github.com/npm/npm/issues/9282
Not found / Server error
npm http 404 https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgznpm ERR! fetch failed https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgznpm ERR! Error: 404 Not Found
npm http 500 https://registry.npmjs.org/phonegap

It's most likely a temporary npm registry glitch. Check npm server status and try again later.
If the error persists, perhaps the published package is corrupt. Contact the package owner and have them publish a new version of the package.

Invalid JSON
Error: Invalid JSON
npm ERR! SyntaxError: Unexpected token <
npm ERR! registry error parsing json

Possible temporary npm registry glitch, or corrupted local server cache. Run npm cache clean and/or try again later.
This can be caused by corporate proxies that give HTML responses to package.json requests. Check npm's proxy configuration.
Check that it's not a problem with a package you're trying to install (e.g. invalid package.json).

Many ENOENT / ENOTEMPTY errors in output
npm is written to use resources efficiently on install, and part of this is that it tries to do as many things concurrently as is practical. Sometimes this results in race conditions and other synchronization issues. As of npm 2.0.0, a very large number of these issues were addressed. If you see ENOENT lstat, ENOENT chmod, ENOTEMPTY unlink, or something similar in your log output, try updating npm to the latest version. If the problem persists, look at npm/npm#6043 and see if somebody has already discussed your issue.
cb() never called! when using shrinkwrapped dependencies
Take a look at issue #5920. We're working on fixing this one, but it's a fairly subtle race condition and it's taking us a little time. You might try moving your npm-shrinkwrap.json file out of the way until we have this fixed. This has been fixed in versions of npm newer than npm@2.1.5, so update to npm@latest.
npm login errors
Sometimes npm login fails for no obvious reason. The first thing to do is to log in at https://www.npmjs.com/login and check that your e-mail address on npmjs.com matches the email address you are giving to npm login.
If that's not the problem, or if you are seeing the message "may not mix password_sha and pbkdf2", then

Log in at https://npmjs.com/
Change password at https://npmjs.com/password – you can even "change" it to the same password
Clear login-related fields from ~/.npmrc – e.g., by running sed -ie '/registry.npmjs.org/d' ~/.npmrc
npm login

and it generally seems to work.
See https://github.com/npm/npm/issues/6641#issuecomment-72984009 for the history of this issue.
npm hangs on Windows at addRemoteTarball
Check if you have two temp directories set in your .npmrc:
> npm config ls -l
Look for lines defining the tmp config variable. If you find more than one, remove all but one of them.
See https://github.com/npm/npm/issues/7590 for more about this unusual problem.
npm not running the latest version on a Windows machine
See the section about Windows here.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedTroubleshootingTry the latest stable version of nodeTry the latest stable version of nodeSee DetailsTable of contentsSee what version of node you're running:Updating node on LinuxUpdating node on WindowsUpdating node on OSXAn easy way to stay up-to-dateIf you're experiencing issues while using a version of node which is unsupported or unstable (odd numbered versions e.g. 0.7.x, 0.9.x, 0.11.x), it's very possible your issue will be fixed by simply using the LTS version of node.
See what version of node you're running:
node -v
Updating node on Linux
For some Linux distributions (Debian/Ubuntu and RedHat/CentOS), the latest node version provided by the distribution may lag behind the stable version. Here are instructions from NodeSource on getting the latest node.
Updating node on Windows
Install the latest msi from https://nodejs.org/en/download
Updating node on OSX
Install the latest package from https://nodejs.org/en/download
or if you are using homebrew
brew install node
An easy way to stay up-to-date
Node.js has lots of versions, and its development is very active. As a good practice to manage the various versions, we recommend that you use a version manager for your Node.js installation. There are many great options, here are a few:

NVM
nodist
n
nave
nodebrew
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nGetting startedTroubleshootingTry the latest stable version of npmTry the latest stable version of npmSee DetailsTable of contentsSee what version of npm you're runningUpgrading on *nix (OSX, Linux, etc.)Upgrading on WindowsA brief note on the built-in Windows configurationSee what version of npm you're running
npm -v
Upgrading on *nix (OSX, Linux, etc.)
(You may need to prefix these commands with sudo, especially on Linux, or OS X if you installed Node using its default installer.)
You can upgrade to the latest version of npm using:
npm install -g npm@latest
Upgrading on Windows
By default, npm is installed alongside node in
C:\Program Files (x86)\nodejs
npm's globally installed packages (including, potentially, npm itself) are stored separately in a user-specific directory (which is currently
C:\Users\<username>\AppData\Roaming\npm).
Because the installer puts
C:\Program Files (x86)\nodejs
before
C:\Users\<username>\AppData\Roaming\npm
on your PATH, it will always use the version of npm installed with node instead of the version of npm you installed using npm -g install npm@<version>.
To get around this, you can do one of the following:


Option 1: edit your Windows installation's PATH to put %appdata%\npm before %ProgramFiles%\nodejs. Remember that you'll need to restart cmd.exe (and potentially restart Windows) when you make changes to PATH or how npm is installed.


Option 2: remove both of

%ProgramFiles%\nodejs\npm
%ProgramFiles%\nodejs\npm.cmd



Option 3: Navigate to %ProgramFiles%\nodejs\node_modules\npm and copy the npmrcfile to another folder or the desktop. Then open cmd.exe as an administrator and run the following commands:


cd %ProgramFiles%\nodejsnpm install npm@latest
If you installed npm with the node.js installer, after doing one of the previous steps, do the following.


Option 1 or 2

Go into %ProgramFiles%\nodejs\node_modules\npm and copy the file named npmrc in the new npm folder, which should be %appdata%\npm\node_modules\npm. This will tell the new npm where the global installed packages are.



Option 3

Copy the npmrc file back into %ProgramFiles%\nodejs\node_modules\npm



(See also the point below if you're running Windows 7 and don't have the directory %appdata%\npm.)
A brief note on the built-in Windows configuration
The Node installer installs, directly into the npm folder, a special piece of Windows-specific configuration that tells npm where to install global packages. When npm is used to install itself, it is supposed to copy this special builtin configuration into the new install. There was a bug in some versions of npm that kept this from working, so you may need to go in and fix that up by hand. Run the following command to see where npm will install global packages to verify it is correct.
npm config get prefix -g
If it isn't set to <X>:\Users\<user>\AppData\Roaming\npm, you can run the below command to correct it:
npm config set prefix %APPDATA%\npm -g
Incidentally, if you would prefer that packages not be installed to your roaming profile (because you have a quota on your shared network, or it makes logging in or out from a domain sluggish), you can put it in your local app data instead:
npm config set prefix %LOCALAPPDATA%\npm -g
...as well as copying %APPDATA%\npm to %LOCALAPPDATA%\npm (and updating your %PATH%, of course).
Everyone who works on npm knows that this process is complicated and fraught, and we're working on making it simpler. Stay tuned.Edit this page on GitHub5 contributorslukekarrysMylesBorinsfritzyjoshbmairethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionAbout the public npm registryAbout the public npm registryThe public npm registry is a database of JavaScript packages, each comprised of software and metadata. Open source developers and developers at companies use the npm registry to contribute packages to the entire community or members of their organizations, and download packages to use in their own projects.
To get started with the registry, sign up for an npm account and check out the "Getting started" and CLI documentation.Edit this page on GitHub1 contributorethomsonLast edited by ethomson on September 22, 2020\n\n\n\nPackages and modulesIntroductionAbout packages and modulesAbout packages and modulesSee DetailsTable of contentsAbout packagesAbout package formatsnpm package git URL formatsAbout modulesThe npm registry contains packages, many of which are also Node modules, or contain Node modules. Read on to understand how they differ and how they interact.
About packages
A package is a file or directory that is described by a package.json file. A package must contain a package.json file in order to be published to the npm registry. For more information on creating a package.json file, see "Creating a package.json file".
Packages can be unscoped or scoped to a user or organization, and scoped packages can be private or public. For more information, see

"About scopes"
"About private packages"
"Package scope, access level, and visibility"

About package formats
A package is any of the following:

a) A folder containing a program described by a package.json file.
b) A gzipped tarball containing (a).
c) A URL that resolves to (b).
d) A <name>@<version> that is published on the registry with (c).
e) A <name>@<tag> that points to (d).
f) A <name> that has a latest tag satisfying (e).
g) A git url that, when cloned, results in (a).

npm package git URL formats
Git URLs used for npm packages can be formatted in the following ways:

git://github.com/user/project.git#commit-ish
git+ssh://user@hostname:project.git#commit-ish
git+http://user@hostname/project/blah.git#commit-ish
git+https://user@hostname/project/blah.git#commit-ish

The commit-ish can be any tag, sha, or branch that can be supplied as an argument to git checkout. The default commit-ish is HEAD.
Installing any package directly from git will not install git submodules or workspaces.
About modules
A module is any file or directory in the node_modules directory that can be loaded by the Node.js require() function.
To be loaded by the Node.js require() function, a module must be one of the following:

A folder with a package.json file containing a "main" field.
A JavaScript file.

Note: Since modules are not required to have a package.json file, not all modules are packages. Only modules that have a package.json file are also packages.
In the context of a Node program, the module is also the thing that was loaded from a file. For example, in the following program:
var req = require('request')
The req variable refers to the request module returned by the require() function.Edit this page on GitHub7 contributorsreggiKCarlilelukekarrysseantcoyote0liverjoey-maethomsonLast edited by reggi on September 16, 2024\n\n\n\nPackages and modulesIntroductionAbout scopesAbout scopesSee DetailsTable of contentsScopes and package visibilityNote: You must be using npm version 2 or greater to use scopes. To upgrade to the latest version of npm, on the command line, run npm install npm@latest -g
When you sign up for an npm user account or create an organization, you are granted a scope that matches your user or organization name. You can use this scope as a namespace for related packages.
A scope allows you to create a package with the same name as a package created by another user or organization without conflict.
When listed as a dependent in a package.json file, scoped packages are preceded by their scope name. The scope name is everything between the @ and the slash:

"npm" scope:

@npm/package-name

"npmcorp" scope:

@npmcorp/package-name
To create and publish public scoped packages, see "Creating and publishing scoped public packages".
To create and publish private scoped packages, see "Creating and publishing private packages".
Scopes and package visibility

Unscoped packages are always public.
Private packages are always scoped.
Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.

For more information on package scope and visibility, see "Package scope, access level, and visibility".Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionAbout public packagesAbout public packagesSee DetailsTable of contentsNext stepsAs an npm user or organization member, you can create and publish public packages that anyone can download and use in their own projects.

Unscoped public packages exist in the global public registry namespace and can be referenced in a package.json file with the package name alone: package-name.
Scoped public packages belong to a user or organization and must be preceded by the user or organization name when included as a dependency in a package.json file:

@username/package-name
@org-name/package-name



Next steps

"Creating and publishing scoped public packages"
"Creating and publishing unscoped public packages"
"Using npm packages in your projects"
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionAbout private packagesAbout private packagesSee DetailsTable of contentsNext stepsResourcesTo use private packages, you must
be using npm version 2.7.0 or greater. To upgrade, on the command line, run npm install npm@latest -g
have a paid user or organization account

With npm private packages, you can use the npm registry to host code that is only visible to you and chosen collaborators, allowing you to manage and use private code alongside public code in your projects.
Private packages always have a scope, and scoped packages are private by default.

User-scoped private packages can only be accessed by you and collaborators to whom you have granted read or read/write access. For more information, see "Adding collaborators to private packages owned by a user account".
Organization-scoped private packages can only be accessed by teams that have been granted read or read/write access. For more information, see "Managing team access to organization packages".

Next steps

"Creating and publishing private packages"
"Using npm packages in your projects"

Resources
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesIntroductionnpm package scope, access level, and visibilitynpm package scope, access level, and visibilitySee DetailsTable of contentsnpm Package Access MatrixVisibility of npm packages depends on the scope (namespace) in which the package is contained, and the access level (private or public) set for the package.
Note: To create organization-scoped packages, you must first create an organization. For more information, see "Creating an organization".
npm Package Access Matrix
ScopeAccess levelCan view and downloadCan write (publish)OrgPrivateMembers of a team in the organization with read access to the packageMembers of a team in the organization with read and write access to the packageOrgPublicEveryoneMembers of a team in the organization with read and write access to the packageUserPrivateThe package owner and users who have been granted read access to the packageThe package owner and users who have been granted read and write access to the packageUserPublicEveryoneThe package owner and users who have been granted read and write access to the packageUnscopedPublicEveryoneThe package owner and users who have been granted read and write access to the package
Note: Only user accounts can create and manage unscoped packages. Organizations can only manage scoped packages.Edit this page on GitHub4 contributorsandrewnessinjimlukekarrysethomsonMylesBorinsLast edited by andrewnessinjim on June 25, 2024\n\n\n\nPackages and modulesContributingCreating a package.json fileCreating a package.json fileSee DetailsTable of contentspackage.json fieldsRequired name and version fieldsAuthor fieldExampleCreating a new package.json fileRunning a CLI questionnaireCustomizing the package.json questionnaireCreating a default package.json fileExampleDefault values extracted from the current directorySetting config options for the init commandYou can add a package.json file to your package to make it easy for others to manage and install. Packages published to the registry must contain a package.json file.
A package.json file:

lists the packages your project depends on
specifies versions of a package that your project can use using semantic versioning rules
makes your build reproducible, and therefore easier to share with other developers

Note: To make your package easier to find on the npm website, we recommend including a custom description in your package.json file.
package.json fields
Required name and version fields
A package.json file must contain "name" and "version" fields.
The "name" field contains your package's name and must be lowercase without any spaces. May contain hyphens, dots, and underscores.
The "version" field must be in the form x.x.x and follow the semantic versioning guidelines.
Author field
If you want inclusive package author information, in the "author" field use the following format (email and website are both optional):
Your Name <email@example.com> (https://example.com)
Example
{  "name": "my-awesome-package",  "version": "1.0.0",  "author": "Your Name <email@example.com> (https://example.com)"}
Creating a new package.json file
You can create a package.json file by running a CLI questionnaire or creating a default package.json file.
Running a CLI questionnaire
To create a package.json file with values that you supply, use the npm init command.


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command:
npm init


Answer the questions in the command line questionnaire.


Customizing the package.json questionnaire
If you expect to create many package.json files, you can customize the questions asked and fields created during the init process so all the package.json files contain a standard set of information.


In your home directory, create a file called .npm-init.js.


To add custom questions, using a text editor, add questions with the prompt function:
module.exports = prompt("what's your favorite flavor of ice cream, buddy?", "I LIKE THEM ALL");


To add custom fields, using a text editor, add desired fields to the .npm-init.js file:
module.exports = {  customField: 'Example custom field',  otherCustomField: 'This example field is really cool'}


To learn more about creating advanced npm init customizations, see the init-package-json GitHub repository.
Creating a default package.json file
To create a default package.json using information extracted from the current directory, use the npm init command with the --yes or -y flag. For a list of default values, see "Default values extracted from the current directory".


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command:
npm init --yes


Example
> npm init --yesWrote to /home/monatheoctocat/my_package/package.json:
{  "name": "my_package",  "description": "make your package easier to find on the npm website",  "version": "1.0.0",  "scripts": {    "test": "echo \"Error: no test specified\" && exit 1"  },  "repository": {    "type": "git",    "url": "https://github.com/monatheoctocat/my_package.git"  },  "keywords": [],  "author": "",  "license": "ISC",  "bugs": {    "url": "https://github.com/monatheoctocat/my_package/issues"  },  "homepage": "https://github.com/monatheoctocat/my_package"}
Default values extracted from the current directory

name: the current directory name
version: always 1.0.0
description: info about the package, or an empty string ""
scripts: by default creates an empty test script
keywords: empty
author: empty
license: ISC
bugs: information from the current directory, if present
homepage: information from the current directory, if present

Setting config options for the init command
You can set default config options for the npm init command. For example, to set the default author email, author name, and license, on the command line, run the following commands:
> npm set init-author-email "example-user@example.com"> npm set init-author-name "example_user"> npm set init-license "MIT"Edit this page on GitHub7 contributorswraithgarkenshantalukekarrys20shivangiBlizZard-botlgarronethomsonLast edited by wraithgar on October 15, 2024\n\n\n\nPackages and modulesContributingCreating Node.js modulesCreating Node.js modulesSee DetailsTable of contentsOverviewCreate a package.json fileCreate the file that will be loaded when your module is required by another applicationTest your moduleResourcesNode.js modules are a type of package that can be published to npm.
Overview

Create a package.json file
Create the file that will be loaded when your module is required by another application
Test your module

Create a package.json file

To create a package.json file, on the command line, in the root directory of your Node.js module, run npm init:

For scoped modules, run npm init --scope=@scope-name
For unscoped modules, run npm init


Provide responses for the required fields (name and version), as well as the main field:

name: The name of your module.
version: The initial module version. We recommend following semantic versioning guidelines and starting with 1.0.0.



For more information on package.json files, see "Creating a package.json file".
Create the file that will be loaded when your module is required by another application
Create a file with the same name you provided in the main field. In that file, add a function as a property of the exports object. This will make the function available to other code:
exports.printMsg = function() {  console.log("This is a message from the demo package");}
Test your module


Publish your package to npm:

For private packages and unscoped packages, use npm publish.
For scoped public packages, use npm publish --access public



On the command line, create a new test directory outside of your project directory.
mkdir test-directory


Switch to the new directory:
cd /path/to/test-directory


In the test directory, install your module:
npm install <your-module-name>


In the test directory, create a test.js file which requires your module and calls your module as a method.


On the command line, run node test.js. The message sent to the console.log should appear.


Resources
Edit this page on GitHub3 contributorsandrewnessinjimlukekarrysethomsonLast edited by andrewnessinjim on June 24, 2024\n\n\n\nPackages and modulesContributingAbout package README filesAbout package README filesSee DetailsTable of contentsCreating and adding a README.md file to a packageUpdating an existing package README.md fileWe highly recommend including a README.md file in your package directory as it helps developers find your package on npm and have a good experience using your code in their projects. In most cases README.md files include directions for installing, configuring, and using the code in your package; as well as any other information a user may find helpful. Just like in any GitHub repository, the README.md file will be rendered on the package's page.
An npm package README.md file must be in the root-level directory of the package.
Creating and adding a README.md file to a package

In a text editor, in your package root directory, create a file called README.md.
In the README.md file, add useful information about your package.
Save the README.md file.

Note: The file extension .md indicates a Markdown file. For more information about Markdown, see the GitHub Guide "Mastering Markdown".
Updating an existing package README.md file
The README.md file will only be updated on the package page when you publish a new version of your package. To update your README.md file:


In a text editor, update the contents of the README.md file.


Save the README.md file.


On the command line, in the package root directory, run the following commands:
npm version patchnpm publish

Edit this page on GitHub3 contributorskenshantalukekarrysethomsonLast edited by kenshanta on October 9, 2024\n\n\n\nPackages and modulesContributingCreating and publishing unscoped public packagesCreating and publishing unscoped public packagesSee DetailsTable of contentsCreating an unscoped public packageReviewing package contents for sensitive or unnecessary informationTesting your packagePublishing unscoped public packagesAs an npm user, you can create unscoped packages to use in your own projects and publish them to the npm public registry for others to use in theirs. Unscoped packages are always public and are referred to by the package name only:
package-name
For more information on package scope, access, and visibility, see "Package scope, access level, and visibility".
Note: Before you can publish public unscoped npm packages, you must sign up for an npm user account.
Creating an unscoped public package


On the command line, create a directory for your package:
mkdir my-test-package


Navigate to the root directory of your package:
cd my-test-package


If you are using git to manage your package code, in the package root directory, run the following commands, replacing git-remote-url with the git remote URL for your package:
git initgit remote add origin git://git-remote-url


In the package root directory, run the npm init command.


Respond to the prompts to generate a package.json file. For help naming your package, see "Package name guidelines".


Create a README file that explains what your package code is and how to use it.


In your preferred text editor, write the code for your package.


Reviewing package contents for sensitive or unnecessary information
Publishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. We strongly recommend removing sensitive information, such as private keys, passwords, personally identifiable information (PII), and credit card data before publishing your package to the registry.
For less sensitive information, such as testing data, use a .npmignore or .gitignore file to prevent publishing to the registry. For more information, see this article.
Testing your package
To reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run npm install with the full path to your package directory:
npm install path/to/my-package
Publishing unscoped public packages


On the command line, navigate to the root directory of your package.
cd /path/to/package


To publish your public package to the npm registry, run:
npm publish
Note: If you use GitHub Actions to publish your packages, you can generate provenance information for each package you publish. For more information, see "Generating provenance statements."


To see your public package page, visit https://npmjs.com/package/*package-name*, replacing *package-name* with the name of your package. Public packages will say public below the package name on the npm website.


For more information on the publish command, see the CLI documentation.Edit this page on GitHub4 contributorslukekarrysSiaraMistnick-loginovethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingCreating and publishing scoped public packagesCreating and publishing scoped public packagesSee DetailsTable of contentsCreating a scoped public packageReviewing package contents for sensitive or unnecessary informationTesting your packagePublishing scoped public packagesTo share your code publicly in a user or organization namespace, you can publish public user-scoped or organization-scoped packages to the npm registry.
For more information on scopes, see "About scopes".
Note: Before you can publish user-scoped npm packages, you must sign up for an npm user account.Additionally, to publish organization-scoped packages, you must create an npm user account, then create an npm organization.
Creating a scoped public package


If you are using npmrc to manage accounts on multiple registries, on the command line, switch to the appropriate profile:
npmrc <profile-name>


On the command line, create a directory for your package:
mkdir my-test-package


Navigate to the root directory of your package:
cd my-test-package


If you are using git to manage your package code, in the package root directory, run the following commands, replacing git-remote-url with the git remote URL for your package:
git initgit remote add origin git://git-remote-url


In the package root directory, run the npm init command and pass the scope to the scope flag:


For an organization-scoped package, replace my-org with the name of your organization:
npm init --scope=@my-org


For a user-scoped package, replace my-username with your username:
npm init --scope=@my-username




Respond to the prompts to generate a package.json file. For help naming your package, see "Package name guidelines".


Create a README file that explains what your package code is and how to use it.


In your preferred text editor, write the code for your package.


Reviewing package contents for sensitive or unnecessary information
Publishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. We strongly recommend removing sensitive information, such as private keys, passwords, personally identifiable information (PII), and credit card data before publishing your package to the registry.
For less sensitive information, such as testing data, use a .npmignore or .gitignore file to prevent publishing to the registry. For more information, see this article.
Testing your package
To reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run npm install with the full path to your package directory:
npm install my-package
Publishing scoped public packages
By default, scoped packages are published with private visibility. To publish a scoped package with public visibility, use npm publish --access public.


On the command line, navigate to the root directory of your package.
cd /path/to/package


To publish your scoped public package to the npm registry, run:
npm publish --access public
Note: If you use GitHub Actions to publish your packages, you can generate provenance information for each package you publish. For more information, see "Generating provenance statements."


To see your public package page, visit https://npmjs.com/package/\*package-name\*, replacing *package-name* with the name of your package. Public packages will say public below the package name on the npm website.



For more information on the publish command, see the CLI documentation.Edit this page on GitHub5 contributorslukekarrysmilofultzSiaraMistadambrangenbergethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingCreating and publishing private packagesCreating and publishing private packagesSee DetailsTable of contentsCreating a private packageReviewing package contents for sensitive or unnecessary informationTesting your packagePublishing private packagesTo share your code with a limited set of users or teams, you can publish private user-scoped or organization-scoped packages to the npm registry.
For more information on scopes and private packages, see "About scopes" and "About private packages".
Note: Before you can publish private user-scoped npm packages, you must sign up for a paid npm user account.Additionally, to publish private organization-scoped packages, you must create an npm user account, then  create a paid npm organization.
Creating a private package


If you are using npmrc to manage accounts on multiple registries, on the command line, switch to the appropriate profile:
npmrc <profile-name>


On the command line, create a directory for your package:
mkdir my-test-package


Navigate to the root directory of your package:
cd my-test-package


If you are using git to manage your package code, in the package root directory, run the following commands, replacing git-remote-url with the git remote URL for your package:
git initgit remote add origin git://git-remote-url


In the package root directory, run the npm init command and pass the scope to the scope flag:


For an organization-scoped package, replace my-org with the name of your organization:
npm init --scope=@my-org


For a user-scoped package, replace my-username with your username:
npm init --scope=@my-username




Respond to the prompts to generate a package.json file. For help naming your package, see "Package name guidelines".


Create a README file that explains what your package code is and how to use it.


In your preferred text editor, write the code for your package.


Reviewing package contents for sensitive or unnecessary information
Publishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. We strongly recommend removing sensitive information, such as private keys, passwords, personally identifiable information (PII), and credit card data before publishing your package to the registry. Even if your package is private, sensitive information can be exposed if the package is made public or downloaded to a computer that can be accessed by more users than intended.
For less sensitive information, such as testing data, use a .npmignore or .gitignore file to prevent publishing to the registry. For more information, see this article.
Testing your package
To reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run npm install with the full path to your package directory:
npm install my-package
Publishing private packages
By default, scoped packages are published with private visibility.


On the command line, navigate to the root directory of your package.
cd /path/to/package


To publish your private package to the npm registry, run:
npm publish


To see your private package page, visit https://npmjs.com/package/*package-name*, replacing *package-name* with the name of your package. Private packages will say private below the package name on the npm website.



For more information on the publish command, see the CLI documentation.Edit this page on GitHub3 contributorslukekarrysericmuttaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingPackage name guidelinesPackage name guidelinesWhen choosing a name for your package, choose a name that

is unique
is descriptive
meets npm policy guidelines. For example, do not give your package an offensive name, and do not use someone else's trademarked name or violate the npm trademark policy.

Additionally, when choosing a name for an unscoped package, also choose a name that

is not already owned by someone else
is not spelled in a similar way to another package name
will not confuse others about authorship
Edit this page on GitHub3 contributorslukekarrysericmuttaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingSpecifying dependencies and devDependencies in a package.json fileSpecifying dependencies and devDependencies in a package.json fileSee DetailsTable of contentsAdding dependencies to a package.json fileAdding dependencies to a package.json file from the command lineManually editing the package.json fileTo specify the packages your project depends on, you must list them as "dependencies" or "devDependencies" in your package's package.json file. When you (or another user) run npm install, npm will download dependencies and devDependencies that are listed in package.json that meet the semantic version requirements listed for each. To see which versions of a package will be installed, use the semver calculator.

"dependencies": Packages required by your application in production.
"devDependencies": Packages that are only needed for local development and testing.

Adding dependencies to a package.json file
You can add dependencies to a package.json file from the command line or by manually editing the package.json file.
Adding dependencies to a package.json file from the command line
To add dependencies and devDependencies to a package.json file from the command line, you can install them in the root directory of your package using the --save-prod flag (also -S) for dependencies (the default behavior of npm install) or the --save-dev flag (also -D) for devDependencies.
To add an entry to the "dependencies" attribute of a package.json file, on the command line, run the following command:
npm install <package-name> [--save-prod]
To add an entry to the "devDependencies" attribute of a package.json file, on the command line, run the following command:
npm install <package-name> --save-dev
Manually editing the package.json file
To add dependencies to a package.json file, in a text editor, add an attribute called "dependencies" that references the name and semantic version of each dependency:
{  "name": "my_package",  "version": "1.0.0",  "dependencies": {    "my_dep": "^1.0.0",    "another_dep": "~2.2.0"  }}
To add devDependencies to a package.json file, in a text editor, add an attribute called "devDependencies" that references the name and semantic version of each devDependency:
"name": "my_package","version": "1.0.0","dependencies": {  "my_dep": "^1.0.0",  "another_dep": "~2.2.0"},"devDependencies" : {  "my_test_framework": "^3.1.0",  "another_dev_dep": "1.0.0 - 1.2.0"}Edit this page on GitHub5 contributorsshallow-beachlukekarrysservel333drylintethomsonLast edited by shallow-beach on August 8, 2024\n\n\n\nPackages and modulesContributingAbout semantic versioningAbout semantic versioningSee DetailsTable of contentsIncrementing semantic versions in published packagesUsing semantic versioning to specify update types your package can acceptExampleResourcesTo keep the JavaScript ecosystem healthy, reliable, and secure, every time you make significant updates to an npm package you own, we recommend publishing a new version of the package with an updated version number in the package.json file that follows the semantic versioning spec. Following the semantic versioning spec helps other developers who depend on your code understand the extent of changes in a given version, and adjust their own code if necessary.
Note: If you introduce a change that breaks a package dependency, we strongly recommend incrementing the version major number; see below for details.
Incrementing semantic versions in published packages
To help developers who rely on your code, we recommend starting your package version at 1.0.0 and incrementing as follows:
Code statusStageRuleExample versionFirst releaseNew productStart with 1.0.01.0.0Backward compatible bug fixesPatch releaseIncrement the third digit1.0.1Backward compatible new featuresMinor releaseIncrement the middle digit and reset last digit to zero1.1.0Changes that break backward compatibilityMajor releaseIncrement the first digit and reset middle and last digits to zero2.0.0
Using semantic versioning to specify update types your package can accept
You can specify which update types your package can accept from dependencies in your package's package.json file.
For example, to specify acceptable version ranges up to 1.0.4, use the following syntax:

Patch releases: 1.0 or 1.0.x or ~1.0.4
Minor releases: 1 or 1.x or ^1.0.4
Major releases: * or x

For more information on semantic versioning syntax, see the npm semver calculator.
Example
"dependencies": {  "my_dep": "^1.0.0",  "another_dep": "~2.2.0"},
Resources
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesContributingAdding dist-tags to packagesAdding dist-tags to packagesSee DetailsTable of contentsPublishing a package with a dist-tagExampleAdding a dist-tag to a specific version of your packageExampleDistribution tags (dist-tags) are human-readable labels that you can use to organize and label different versions of packages you publish. dist-tags supplement semantic versioning. In addition to being more human-readable than semantic version numbering, tags allow publishers to distribute their packages more effectively.
For more information, see the dist-tag CLI documentation.
Note: Since dist-tags share a namespace with semantic versions, avoid dist-tags that conflict with existing version numbers. We recommend avoiding dist-tags that start with a number or the letter "v".
Publishing a package with a dist-tag
By default, running npm publish will tag your package with the latest dist-tag. To use another dist-tag, use the --tag flag when publishing.


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command, replacing <tag> with the tag you want to use:
npm publish --tag <tag>


Example
To publish a package with the "beta" dist-tag, on the command line, run the following command in the root directory of your package:
npm publish --tag beta
Adding a dist-tag to a specific version of your package


On the command line, navigate to the root directory of your package.
cd /path/to/package


Run the following command, replacing <package_name> with the name of your package, <version> with your package version number, and <tag> with the distribution tag:
npm dist-tag add <package-name>@<version> [<tag>]


Example
To add the "stable" tag to the 1.4.0 version of the "example-package" package, you would run the following command:
npm dist-tag add example-package@1.4.0 stableEdit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingChanging package visibilityChanging package visibilitySee DetailsTable of contentsMaking a public package privateUsing the websiteUsing the command lineMaking a private package publicUsing the websiteUsing the command lineYou can change the visibility of a scoped package from the website or command line.
You must be the owner of the user account or organization that owns the package in order to change package visibility.
For more information about package visibility, see "Package scope, access level, and visibility".
Note: You cannot change the visibility of an unscoped package. Only scoped packages with a paid subscription may be private.
Making a public package private
Note: Making a package private requires a paid user account or organization. To sign up for a paid user or organization, go to https://www.npmjs.com/settings/account-name/billing, replacing account-name with the name of your npm user account or organization.
If you want to restrict access and visibility for a public package you own, you can make the package private. When you make a package private, its access will be updated immediately and it will be removed from the website within a few minutes of the change.
Using the website

On the npm website, go to the package page.
On the package page, click Settings.
Under "Package Access", select "Is Package Private?"
Click Update package settings.

Using the command line
To make a public package private on the command line, run the following command, replacing <package-name> with the name of your package:
npm access restricted <package-name>
For more information, see the npm access documentation.
Making a private package public
Note: When you make a private package public, the package will be visible to and downloadable by all npm users.
Using the website

On the npm website, go to the package page.
On the package page, click Settings.
Under "Package Access", deselect "Is Package Private?"
Click Update package settings.

Using the command line
To make a private package public on the command line, run the following command, replacing <package-name> with the name of your package:
npm access public <package-name>
For more information, see the npm access CLI documentation.Edit this page on GitHub5 contributorslukekarrysZearinnanianlisaodylanatsmithethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingAdding collaborators to private packages owned by a user accountAdding collaborators to private packages owned by a user accountSee DetailsTable of contentsGranting access to a private user package on the webGranting private package access from the command line interfaceGranting access to private organization packagesAs an npm user with a paid user account, you can add another npm user with a paid account as a collaborator on a private package you own.
Note: The user you want to add as a collaborator on your private package must have a paid user account. To sign up for a paid account, they can visit https://www.npmjs.com/settings/username/billing, replacing username with their npm username.
When you add a member to your package, they are sent an email inviting them to the package. The new member has to accept the invitation to gain access to the package.
Granting access to a private user package on the web

On the npm website, go to the package to which you want to add a collaborator: https://www.npmjs.com/package/<your-package-name>.
On the package page, click the "Settings" tab.
Go to the "Invite maintainer" section.
Enter the npm username of the collaborator.
Click Invite.

Granting private package access from the command line interface
To add a collaborator to a package on the command line, run the following command, replacing <user> with the npm username of your collaborator, and <your-package-name> with the name of the private package:
npm owner add <user> <your-package-name>
Granting access to private organization packages
To grant an npm user access to private organization packages, you must have an organization owner add them to your organization, then add them to a team that has access to the private package. For more information, see "Adding members to your organization".Edit this page on GitHub6 contributorsreggiericmuttaMylesBorinsscovettamonishcmethomsonLast edited by reggi on February 13, 2024\n\n\n\nPackages and modulesUpdating and managingUpdating your published package version numberUpdating your published package version numberWhen you make significant changes to a published package, we recommend updating the version number to communicate the extent of the changes to others who rely on your code.
Note: If you have linked a git repository to a package, updating the package version number will also add a tag with the updated release number to the linked git repository.


To change the version number in package.json, on the command line, in the package root directory, run the following command, replacing <update_type> with one of the semantic versioning release types (patch, major, or minor):
npm version <update_type>


Run npm publish.


Go to your package page (https://npmjs.com/package/<package>) to check that the package version has been updated.


For more information on npm version, see the CLI documentation.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingDeprecating and undeprecating packages or package versionsDeprecating and undeprecating packages or package versionsSee DetailsTable of contentsDeprecating an entire packageUsing the websiteUsing the command lineDeprecating a single version of a packageUsing the command lineUndeprecating a package or versionTransferring a deprecated package to npmIf you no longer wish to maintain a package, or if you would like to encourage users to update to a new or different version, you can deprecate it. Deprecating a package or version will print a message to the terminal when a user installs it.
A deprecation warning or message can say anything. You may wish to include a message encouraging users to update to a specific version, or an alternate, supported package.
Note: We strongly recommend deprecating packages or package versions instead of unpublishing them, because unpublishing removes a package from the registry entirely, meaning anyone who relied on it will no longer be able to use it, with no warning.
Deprecating an entire package
Deprecating an entire package will remove it from search results on the npm website and a deprecation message will also be displayed on the package page.

Deprecating a package is an alternative to deleting a package if your package does not meet the unpublishing requirements.
Using the website


On the npm "Sign In" page, enter your account details and click Sign In.



Navigate to the package page for the package you want to deprecate, replacing <your-package-name> with the name of your package: https://www.npmjs.com/package/<your-package-name>.


Click Settings.



Under "deprecate package", click Deprecate package.



If you are sure that you want to continue, enter your package name and click Deprecate package.



Using the command line
To deprecate an entire package, run the following command, replacing <package-name> with the name of your package, and "<message>" with your deprecation message:
npm deprecate <package-name> "<message>"
If you have enabled two-factor authentication, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator app).
Deprecating a single version of a package
When you deprecate a version of a package, a red message will be displayed on that version's package page, similar to deprecating an entire package.

Using the command line
To deprecate a package version, run the following command, replacing <package-name> with the name of your package, <version> with your version number, and "<message>" with your deprecation message:
npm deprecate <package-name>@<version> "<message>"
The CLI will also accept version ranges for <version>.
If you have two-factor auth, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator).
Undeprecating a package or version
To undeprecate a package, replace "<message>" with "" (an empty string) in one of the above commands.
For example, to undeprecate an entire package, run the following command, replacing <package-name> with the name of your package, and <version> with your version number:
npm deprecate <package-name> ""
Or to undeprecate only a single package version, run the following command, replacing <package-name> with the name of your package, and <version> with your version number:
npm deprecate <package-name>@<version> ""
If you have two-factor auth, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator).
Transferring a deprecated package to npm
If you are no longer maintaining a package, but other users depend on it, and you'd like to remove it from your user profile, you can transfer it to the @npm user account, which is owned by the npm registry.
Note: Once you transfer a package to the npm account, you will no longer be able to update it.
To transfer a package to the npm user account, run the following two commands in order, replacing <user> with your npm user name, and <package-name> with the package you want to transfer:
npm owner add npm <package-name>npm owner rm <user> <package-name>
If you have two-factor auth, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator).Edit this page on GitHub6 contributorskarlhorkylukekarrysmountainashethomsonSeryozha95talgat-rubyLast edited by karlhorky on June 3, 2024\n\n\n\nPackages and modulesUpdating and managingTransferring a package from a user account to another user accountTransferring a package from a user account to another user accountSee DetailsTable of contentsTransferring a package from a user account to another user account on the websiteTransferring a package from a user account to another user account on the command lineAs a package owner or maintainer, you can transfer ownership of a package you no longer wish to maintain to another trusted npm user using either the npm website or the command line.
For more information on how npm support handles package name disputes between users, you can refer to npm's package name dispute policy.
Note: You cannot transfer a scoped package to another user account or organization, because a package's scope is the user account or organization name. You will need to create a new package in the new scope.
Transferring a package from a user account to another user account on the website
To transfer a package you own or maintain to another user, follow these steps:


Navigate to the package page for the package you want to transfer, replacing <your-package-name> with the name of your package: https://www.npmjs.com/package/<your-package-name>.


On the package Admin tab, under "Maintainers", enter the npm username of the new maintainer.



Click "Invite."


To remove yourself as a maintainer, under the maintainers list, click the "x" next to your username.



Transferring a package from a user account to another user account on the command line
To transfer a package to another npm user using the CLI, run the npm owner add command replacing <their-username> with the other user's npm username. An email invitation is sent to the other user. After the user has accepted the invitation, run the npm owner rm command replacing <your-username> with your npm username:
npm owner add <their-username> <package-name>
# new maintainer accepts invitation
npm owner rm <your-username> <package-name>
If you have two-factor authentication enabled for writes, add a one-time password to the command, --otp=123456 (where 123456 is the code from your authenticator application).
npm owner add <their-username> <package-name> --otp=123456
# new maintainer accepts invitation
npm owner rm <your-username> <package-name> --otp=123456Edit this page on GitHub5 contributorslukekarrysMylesBorinsmonishcmdemiraclethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesUpdating and managingUnpublishing packages from the registryUnpublishing packages from the registrySee DetailsTable of contentsUnpublishing a packageUsing the websiteUsing the command lineUnpublishing a single version of a packageUsing the command lineWhen to unpublishWhen to deprecateAs a package owner or collaborator, if your package has no dependents, you can permanently remove it from the npm registry by using the CLI. You can unpublish within 72 hours of the initial publish; beyond 72 hours, you can still unpublish your package if it meets certain criteria.
These criteria are set to avoid damaging the JavaScript package ecosystem. If you cannot unpublish your package, you can deprecate it instead.
Note: Removing all the collaborators or teams from the package will not unpublish it.
Unpublishing a package
If you want to completely remove all versions of a package from the registry, you can unpublish it completely. This will delete it from the registry and it will be unable to be installed.
To unpublish a package, you must meet the requirements of the package unpublishing rules.
Using the website


On the npm "Sign In" page, enter your account details and click Sign In.



Navigate to the package page for the package you want to unpublish, replacing <your-package-name> with the name of your package: https://www.npmjs.com/package/<your-package-name>.


Click Settings.



Under "delete package", click Delete package.

Note: If you cannot delete the package because it does not meet the unpublishing requirements, then the delete package option will not be available. Instead, you will be prompted to deprecate the package.


If you are sure that you want to continue, enter your package name and click Delete package.



Using the command line
To unpublish an entire package, run the following command, replacing <package-name> with the name of your package:
npm unpublish <package-name> -f
If you have two-factor authentication enabled for writes, you will need to add a one-time password to the unpublish command, --otp=123456 (where 123456 is the code from your authenticator app).
If you need help unpublishing your package, please contact npm Support. If you are an Enterprise customer, please contact Enterprise Support.
Note: If you unpublish an entire package, you may not publish any new versions of that package until 24 hours have passed.
Unpublishing a single version of a package
If you want to remove a single version of a package, you can unpublish one version without affecting the others. This will delete only that version from the registry and it will be unable to be installed. This option is only available via the npm CLI.
Using the command line
To unpublish a single version of a package, run the following command, replacing <package-name> with the name of your package, and <version> with your version number:
npm unpublish <package-name>@<version>
When to unpublish
Unpublishing a package permanently removes the package from the registry so it is no longer available for other users to install. Once a package is unpublished, republishing under the same name is blocked for 24 hours. If you've unpublished a package by mistake, we'd recommend publishing again under a different name, or for unpublished versions, bumping the version number and publishing again.
You might want to unpublish a package because you:

Published something accidentally.
Wanted to test npm.
Published content you didn't intend to be public.
Want to rename a package. (The only way to rename a package is to re-publish it under a new name)

Note: package-name@version is unique, and cannot be reused by unpublishing and re-publishing it. We recommend publishing a minor version update instead.
When to deprecate
If you are no longer interested in maintaining a package, but want it to remain available for users to install, or if your package has dependents, we'd recommend deprecating it. To learn about how to deprecate a package, see "Deprecating and undeprecating packages or package versions".Edit this page on GitHub7 contributorslukekarrysstarkblaze01mrienstraethomsonSeryozha95talgat-rubydemiraclLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesSearching for and choosing packages to downloadSearching for and choosing packages to downloadSee DetailsTable of contentsSearching for a packagePackage provenanceYou can use the npm search bar to find packages to use in your projects. The search is performed using content from the package's title, description, readme, and keywords and is powered by opensearch. Search results are displayed based on keyword matching from the package's title, description, readme, and keywords. No subjective ranking criteria are applied, except for a minimal boost to deprioritize spammy or entirely new packages, aiming to maintain a neutral stance towards all other packages.
Please note that newly published packages may take up to two weeks to appear in the search results. Additionally, deprecated packages are excluded from the search results to enhance the user experience.
Searching for a package


In the search bar, type a search term and press Enter. As you type, possible choices will appear.




The results display an approximate count of packages found, accompanied by a dropdown menu for sorting options. Users can refine their search by choosing from sorting methods such as keyword matching (Default), download counts, most dependents, and last published date.



In the package search results list, click the name of the package.


Package provenance
The package homepage also displays provenance information when available. For details on how to verify this information, check viewing package provenance.Edit this page on GitHub7 contributorsmonishcmleobaltermountainashlukekarrysSiaraMistfeelepxyzethomsonLast edited by monishcm on February 13, 2025\n\n\n\nPackages and modulesGetting packagesDownloading and installing packages locallyDownloading and installing packages locallySee DetailsTable of contentsInstalling an unscoped packageInstalling a scoped public packageInstalling a private packageTesting package installationInstalled package versionInstalling a package with dist-tagsResourcesYou can install a package locally if you want to depend on the package from your own module, using something like Node.js require. This is npm install's default behavior.
Installing an unscoped package
Unscoped packages are always public, which means they can be searched for, downloaded, and installed by anyone. To install a public package, on the command line, run
npm install <package_name>
This will create the node_modules directory in your current directory (if one doesn't exist yet) and will download the package to that directory.
Note: If there is no package.json file in the local directory, the latest version of the package is installed.If there is a package.json file, npm installs the latest version that satisfies the semver rule declared in package.json.
Installing a scoped public package
Scoped public packages can be downloaded and installed by anyone, as long as the scope name is referenced during installation:
npm install @scope/package-name
Installing a private package
Private packages can only be downloaded and installed by those who have been granted read access to the package. Since private packages are always scoped, you must reference the scope name during installation:
npm install @scope/private-package-name
Testing package installation
To confirm that npm install worked correctly, in your module directory, check that a node_modules directory exists and that it contains a directory for the package(s) you installed:
ls node_modules
Installed package version
If there is a package.json file in the directory in which npm install is run, npm installs the latest version of the package that satisfies the semantic versioning rule declared in package.json.
If there is no package.json file, the latest version of the package is installed.
Installing a package with dist-tags
Like npm publish, npm install <package_name> will use the latest tag by default.
To override this behavior, use npm install <package_name>@<tag>. For example, to install the example-package at the version tagged with beta, you would run the following command:
npm install example-package@beta
Resources
Edit this page on GitHub4 contributorslukekarrystaewookim02vokennyethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesDownloading and installing packages globallyDownloading and installing packages globallyTip: If you are using npm 5.2 or higher, we recommend using npx to run packages globally.
Installing a package globally allows you to use the code in the package as a set of tools on your local computer.
To download and install packages globally, on the command line, run the following command:
npm install -g <package_name>
If you get an EACCES permissions error, you may need to reinstall npm with a version manager or manually change npm's default directory. For more information, see "Resolving EACCES permissions errors when installing packages globally".Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesResolving EACCES permissions errors when installing packages globallyResolving EACCES permissions errors when installing packages globallySee DetailsTable of contentsReinstall npm with a node version managerManually change npm's default directoryIf you see an EACCES error when you try to install a package globally, you can either:


Reinstall npm with a node version manager (recommended),
or


Manually change npm's default directory


Reinstall npm with a node version manager
This is the best way to avoid permissions issues. To reinstall npm with a node version manager, follow the steps in "Downloading and installing Node.js and npm". You do not need to remove your current version of npm or Node.js before installing a node version manager.
Manually change npm's default directory
Note: This section does not apply to Microsoft Windows.
To minimize the chance of permissions errors, you can configure npm to use a different directory. In this example, you will create and use hidden directory in your home directory.


Back up your computer.


On the command line, in your home directory, create a directory for global installations:
mkdir -p ~/.npm-global/lib


Configure npm to use the new directory path:
npm config set prefix '~/.npm-global'


In your preferred text editor, open or create a ~/.profile file and add this line:
export PATH=~/.npm-global/bin:$PATH


On the command line, update your system variables:
source ~/.profile


To test your new configuration, install a package globally without using sudo:
npm install -g jshint


Instead of steps 3-5, you can use the corresponding ENV variable (e.g. if you don't want to modify ~/.profile):
NPM_CONFIG_PREFIX=~/.npm-global
npx: an alternative to running global commandsIf you are using npm version 5.2 or greater, you may want to consider npx as an alternative way to run global commands, especially if you only need a command occasionally. For more information, see this article about npx.Edit this page on GitHub5 contributorsmdsadiqlukekarrysmrienstralaurensvalkethomsonLast edited by mdsadiq on September 5, 2024\n\n\n\nPackages and modulesGetting packagesUpdating packages downloaded from the registryUpdating packages downloaded from the registrySee DetailsTable of contentsUpdating local packagesUpdating globally-installed packagesDetermining which global packages need updatingUpdating a single global packageUpdating all globally-installed packagesResourcesCLI commandsUpdating local and global packages you downloaded from the registry helps keep your code and tools stable, usable, and secure.
Updating local packages
We recommend regularly updating the local packages your project depends on to improve your code as improvements to its dependencies are made.


Navigate to the root directory of your project and ensure it contains a package.json file:
cd /path/to/project


In your project root directory, run the update command:
npm update


To test the update, run the outdated command. There should not be any output.
npm outdated


Updating globally-installed packages
Note: If you are using npm version 2.6.0 or less, run this script to update all outdated global packages.However, please consider upgrading to the latest version of npm:npm install npm@latest -g
Determining which global packages need updating
To see which global packages need to be updated, on the command line, run:
npm outdated -g --depth=0
Updating a single global package
To update a single global package, on the command line, run:
npm update -g <package_name>
Updating all globally-installed packages
To update all global packages, on the command line, run:
npm update -g
Resources

CLI commands

npm-update
npm-outdated
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesUsing npm packages in your projectsUsing npm packages in your projectsSee DetailsTable of contentsUsing unscoped packages in your projectsNode.js modulepackage.json fileUsing scoped packages in your projectsNode.js modulepackage.json fileResolving "Cannot find module" errorsOnce you have installed a package in node_modules, you can use it in your code.
Using unscoped packages in your projects
Node.js module
If you are creating a Node.js module, you can use a package in your module by passing it as an argument to the require function.
var lodash = require('lodash');
var output = lodash.without([1, 2, 3], 1);console.log(output);
package.json file
In package.json, list the package under dependencies. You can optionally include a semantic version.
{  "dependencies": {    "package_name": "^1.0.0"  }}
Using scoped packages in your projects
To use a scoped package, simply include the scope wherever you use the package name.
Node.js module
var projectName = require("@scope/package-name")
package.json file
In package.json:
{  "dependencies": {    "@scope/package_name": "^1.0.0"  }}
Resolving "Cannot find module" errors
If you have not properly installed a package, you will receive an error when you try to use it in your code. For example, if you reference the lodash package without installing it, you would see the following error:
module.js:340    throw err;          ^Error: Cannot find module 'lodash'

For scoped packages, run npm install <@scope/package_name>
For unscoped packages, run npm install <package_name>
Edit this page on GitHub3 contributorslukekarryshuzejrovicaethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesGetting packagesUsing deprecated packagesUsing deprecated packagesIf you install a package, and it prints a deprecation message, we recommend following the instructions, if possible.
That might mean updating to a new version, or updating your package dependencies.

A deprecation message doesn't always mean the package or version is unusable; it may mean the package is unmaintained and will no longer be updated by the publisher.Edit this page on GitHub1 contributorethomsonLast edited by ethomson on September 22, 2020\n\n\n\nPackages and modulesGetting packagesUninstalling packages and dependenciesUninstalling packages and dependenciesSee DetailsTable of contentsUninstalling local packagesRemoving a local package from your node_modules directoryUnscoped packageScoped packageExampleRemoving a local package without removing it from package.jsonExampleConfirming local package uninstallationUninstalling global packagesUnscoped packageScoped packageExampleResourcesUninstalling local packagesUninstalling global packagesIf you no longer need to use a package in your code, we recommend uninstalling it and removing it from your project's dependencies.
Uninstalling local packages
Removing a local package from your node_modules directory
To remove a package from your node_modules directory, on the command line, use the uninstall command. Include the scope if the package is scoped.
This uninstalls a package, completely removing everything npm installed on its behalf.
It also removes the package from the dependencies, devDependencies, optionalDependencies, and peerDependencies objects in your package.json.
Further, if you have an npm-shrinkwrap.json or package-lock.json, npm will update those files as well.
Unscoped package
npm uninstall <package_name>
Scoped package
npm uninstall <@scope/package_name>
Example
npm uninstall lodash
Removing a local package without removing it from package.json
Using the --no-save will tell npm not to remove the package from your package.json, npm-shrinkwrap.json, or package-lock.json files.
Example
npm uninstall --no-save lodash
--save or -S will tell npm to remove the package from your package.json, npm-shrinkwrap.json, and package-lock.json files. This is the default, but you may need to use this if you have for instance save=false in your .npmrc file.
Confirming local package uninstallation
To confirm that npm uninstall worked correctly, check that the node_modules directory no longer contains a directory for the uninstalled package(s).

Unix system (such as OSX): ls node_modules
Windows systems: dir node_modules

Uninstalling global packages
To uninstall an unscoped global package, on the command line, use the uninstall command with the -g flag. Include the scope if the package is scoped.
Unscoped package
npm uninstall -g <package_name>
Scoped package
npm uninstall -g <@scope/package_name>
Example
For example, to uninstall a package called jshint, run:
npm uninstall -g jshint
Resources
Uninstalling local packages

Uninstalling global packages
Edit this page on GitHub3 contributorslukekarrysericrallenethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeAbout audit reportsAbout audit reportsSee DetailsTable of contentsVulnerability table fieldsSeverityDescriptionPackagePatched inDependency ofPathMore infoAudit reports contain tables of information about security vulnerabilities in your project's dependencies to help you fix the vulnerability or troubleshoot further.

Vulnerability table fields

Severity
Description
Package
Patched in
Dependency of
Path
More info

Severity
The severity of the vulnerability, determined by the impact and exploitability of the vulnerability in its most common use case.
SeverityRecommended actionCriticalAddress immediatelyHighAddress as quickly as possibleModerateAddress as time allowsLowAddress at your discretion
Description
The description of the vulnerability. For example, "Denial of service".
Package
The name of the package that contains the vulnerability.
Patched in
The semantic version range that describes which versions contain a fix for the vulnerability.
Dependency of
The module that the package with the vulnerability depends on.
Path
The path to the code that contains the vulnerability.
More info
A link to the security report.Edit this page on GitHub3 contributorsFlyingCaiChonglukekarrysethomsonLast edited by FlyingCaiChong on April 17, 2024\n\n\n\nPackages and modulesSecuring your codeAuditing package dependencies for security vulnerabilitiesAuditing package dependencies for security vulnerabilitiesSee DetailsTable of contentsAbout security auditsRunning a security audit with npm auditResolving EAUDITNOPJSON and EAUDITNOLOCK errorsReviewing and acting on the security audit reportSecurity vulnerabilities found with suggested updatesSEMVER warningsSecurity vulnerabilities found requiring manual reviewCheck for mitigating factorsUpdate dependent packages if a fix existsFix the vulnerabilityOpen an issue in the package or dependent package issue trackerNo security vulnerabilities foundTurning off npm audit on package installationInstalling a single packageInstalling all packagesAbout security audits
A security audit is an assessment of package dependencies for security vulnerabilities. Security audits help you protect your package's users by enabling you to find and fix known vulnerabilities in dependencies that could cause data loss, service outages, unauthorized access to sensitive information, or other issues.
Running a security audit with npm audit
Note: The npm audit command is available in npm@6. To upgrade, run npm install npm@latest -g.
The npm audit command submits a description of the dependencies configured in your package to your default registry and asks for a report of known vulnerabilities. npm audit checks direct dependencies, devDependencies, bundledDependencies, and optionalDependencies, but does not check peerDependencies.
npm audit automatically runs when you install a package with npm install. You can also run npm audit manually on your locally installed packages to conduct a security audit of the package and produce a report of dependency vulnerabilities and, if available, suggested patches.

On the command line, navigate to your package directory by typing cd path/to/your-package-name and pressing Enter.
Ensure your package contains package.json and package-lock.json files.
Type npm audit and press Enter.
Review the audit report and run recommended commands or investigate further if needed.

Resolving EAUDITNOPJSON and EAUDITNOLOCK errors
npm audit requires packages to have package.json and package-lock.json files.

If you get an EAUDITNOPJSON error, create a package.json file by following the steps in "Creating a package.json file".
If you get an EAUDITNOLOCK error, make sure your package has a package.json file, then create the package lock file by running npm i --package-lock-only.

Reviewing and acting on the security audit report
Running npm audit will produce a report of security vulnerabilities with the affected package name, vulnerability severity and description, path, and other information, and, if available, commands to apply patches to resolve vulnerabilities. For more information on the fields in the audit report, see "About audit reports"
Security vulnerabilities found with suggested updates
If security vulnerabilities are found and updates are available, you can either:

Run the npm audit fix subcommand to automatically install compatible updates to vulnerable dependencies.
Run the recommended commands individually to install updates to vulnerable dependencies. (Some updates may be semver-breaking changes; for more information, see "SEMVER warnings".)


SEMVER warnings
If the recommended action is a potential breaking change (semantic version major change), it will be followed by a SEMVER WARNING that says "SEMVER WARNING: Recommended action is a potentially breaking change". If the package with the vulnerability has changed its API, you may need to make additional changes to your package's code.
Security vulnerabilities found requiring manual review
If security vulnerabilities are found, but no patches are available, the audit report will provide information about the vulnerability so you can investigate further.

To address the vulnerability, you can

Check for mitigating factors
Update dependent packages if a fix exists
Fix the vulnerability
Open an issue in the package or dependent package issue tracker

Check for mitigating factors
Review the security advisory in the "More info" field for mitigating factors that may allow you to continue using the package with the vulnerability in limited cases. For example, the vulnerability may only exist when the code is used on specific operating systems, or when a specific function is called.
Update dependent packages if a fix exists
If a fix exists but packages that depend on the package with the vulnerability have not been updated to include the fixed version, you may want to open a pull or merge request on the dependent package repository to use the fixed version.

To find the package that must be updated, check the "Path" field for the location of the package with the vulnerability, then check for the package that depends on it. For example, if the path to the vulnerability is @package-name > dependent-package > package-with-vulnerability, you will need to update dependent-package.
On the npm public registry, find the dependent package and navigate to its repository. For more information on finding packages, see "Searching for and choosing packages to download".
In the dependent package repository, open a pull or merge request to update the version of the vulnerable package to a version with a fix.
Once the pull or merge request is merged and the package has been updated in the npm public registry, update your copy of the package with npm update.

Fix the vulnerability
If a fix does not exist, you may want to suggest changes that address the vulnerability to the package maintainer in a pull or merge request on the package repository.

Check the "Path" field for the location of the vulnerability.
On the npm public registry, find the package with the vulnerability. For more information on finding packages, see "Searching for and choosing packages to download".
In the package repository, open a pull or merge request to make the fix on the package repository.
Once the fix is merged and the package has been updated in the npm public registry, update your copy of the package that depends on the package with the fix.

Open an issue in the package or dependent package issue tracker
If you do not want to fix the vulnerability or update the dependent package yourself, open an issue in the package or dependent package issue tracker.

On the npm public registry, find the package with the vulnerability or the dependent package that needs an update. For more information on finding packages, see "Searching for and choosing packages to download".
In the package or dependent package issue tracker, open an issue and include information from the audit report, including the vulnerability report from the "More info" field.

No security vulnerabilities found
If no security vulnerabilities are found, this means that packages with known vulnerabilities were not found in your package dependency tree. Since the advisory database can be updated at any time, we recommend regularly running npm audit manually, or adding npm audit to your continuous integration process.

Turning off npm audit on package installation
Installing a single package
To turn off npm audit when installing a single package, use the --no-audit flag:
npm install example-package-name --no-audit
For more information, see the npm-install command.
Installing all packages
To turn off npm audit when installing all packages, set the audit setting to false in your user and global npmrc config files:
npm set audit false
For more information, see the npm-config management command and the npm-config audit setting.Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeGenerating provenance statementsGenerating provenance statementsSee DetailsTable of contentsAbout npm provenanceAbout SigstoreProvenance limitationsPrerequisitesPublishing packages with provenance via GitHub ActionsExample GitHub Actions workflowUsing third-party package publishing toolsPublishing packages with provenance via GitLab CI/CDExample GitLab CI jobVerifying provenance attestationsYou can generate provenance statements for the packages you publish. This allows you to publicly establish where a package was built and who published a package, which can increase supply-chain security for your packages.
About npm provenance
npm provenance includes two types of attestations:

Provenance attestation
Publish attestation

The provenance attestation is established by publicly providing a link to a package's source code and build instructions from the build environment. This allows developers to verify where and how your package was built before they download it.
Publish attestations are generated by the registry when a package is published by an authorized user. When an npm package is published with provenance, it is signed by Sigstore public good servers and logged in a public transparency ledger, where users can view this information.
About Sigstore
Sigstore is a collection of tools and services aimed at making it easy to use short-lived, ephemeral certificates to sign software. Its three main components are a CLI tool, a certificate authority, and a time-stamping transparency log.
The certificate authority federates with any OIDC provider that includes verifiable build information. It acts as an intermediary between build systems and package registries by verifying the integrity of the OIDC token, issues a signing certificate that contains that build information, and then logging the signing certificate to an immutable ledger.
The transparency log service provides a public, verifiable, tamper-evident ledger of signed attestations. This ensures transparency of the public service, as well as providing a way to detect attempts to tamper with a package if a package registry were to be compromised.
Provenance limitations

To publish a package with provenance, you must build your package with a supported cloud CI/CD provider using a cloud-hosted runner. Today this includes GitHub Actions and GitLab CI/CD.
When a package in the npm registry has established provenance, it does not guarantee the package has no malicious code. Instead, npm provenance provides a verifiable link to the package's source code and build instructions, which developers can then audit and determine whether to trust it or not. For more information, see "Searching for and choosing packages to download."

Prerequisites
Before you can publish your packages with provenance, you must:


Review the Linux Foundation Immutable Record notice, which applies to the public transparency log.


Install the latest version of the npm CLI (ensure you are on 9.5.0+ as older versions don't support npm provenance). For more information, see "Try the latest stable version of npm."


Ensure your package.json is configured with a public repository that matches (case-sensitive) where you are publishing with provenance from.


Set up automation with a supported CI/CD provider to publish your packages to the npm registry. The following providers are supported:

GitHub Actions. For more information, see "Publishing packages with provenance via GitHub Actions."
GitLab CI/CD. For more information, see "Publishing packages with provenance via GitLab CI/CD."



Publishing packages with provenance via GitHub Actions
In order to establish provenance, you must use a supported cloud CI/CD provider and a cloud-hosted runner to publish your packages. GitHub Actions is a supported CI/CD platform that allows you to automate software development tasks. For more information, see GitHub Actions in the GitHub documentation.
To update your GitHub Actions workflow to publish your packages with provenance, you must:


Give permission to mint an ID-token:
permissions:  id-token: write


Run on a GitHub-hosted runner:
runs-on: ubuntu-latest


Add the --provenance flag to your publish command:
npm publish --provenance


If you are publishing a package for the first time you will also need to explicitly set access to public:
npm publish --provenance --access public


Example GitHub Actions workflow
This example workflow publishes a package to the npm registry with provenance.
name: Publish Package to npmjson:  release:    types: [published]jobs:  build:    runs-on: ubuntu-latest    permissions:      contents: read      id-token: write    steps:      - uses: actions/checkout@v4      - uses: actions/setup-node@v4        with:          node-version: '20.x'          registry-url: 'https://registry.npmjs.org'      - run: npm ci      - run: npm publish --provenance --access public        env:          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
Using third-party package publishing tools
If you publish your packages with tools that do not directly invoke the npm publish command, you can do one of the following in your GitHub Actions workflow to publish your packages with provenance.


Configure environment variables: In your GitHub Actions workflow, you can use an environment variable called NPM_CONFIG_PROVENANCE, and set it to true.


Configure your package.json file: You can add a publishConfig block to your package.json file:
"publishConfig": {  "provenance": true},


Add an .npmrc file: You can add an .npmrc file to your project with the following entry:
provenance=true


Note: To publish packages with provenance using Yarn, v4.9.0 or greater is required.
Publishing packages with provenance via GitLab CI/CD
In order to establish provenance, you must use a supported cloud CI/CD provider and a cloud-hosted runner to publish your packages. GitLab CI/CD is a supported CI/CD platform that allows you to automate software development tasks. For more information, see Generating provenance in GitLab CI/CD in the GitLab documentation.
Example GitLab CI job
This example job publishes a package to the npm registry with provenance when a git tag is pushed. Don't forget to define the NPM_TOKEN variable in your GitLab project settings.
publish:  image: 'node:20'  rules:    - if: $CI_COMMIT_TAG  id_tokens:    SIGSTORE_ID_TOKEN:      aud: sigstore  script:    - npm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"    - npm publish --provenance --access public
Verifying provenance attestations
You can verify the provenance attestations of downloaded packages with the following audit command:
npm audit signatures
Example response showing the count of verified registry signatures and verified attestations for all of the packages in a project:
audited 1267 packages in 6s
1267 packages have verified registry signatures
74 packages have verified attestations
Because provenance attestations are such a new feature, security features may be added to (or changed in) the attestation format over time. To ensure that you're always able to verify attestation signatures check that you're running the latest version of the npm CLI. Please note this often means updating npm beyond the version that ships with Node.js.Edit this page on GitHub14 contributorsSerenModz21ts-webkbdharunSantaClaasSiaraMistnhedgerbdehamerlukekarrysmeyfatraviremcohaszingfeelepxyzJamesHenryericcornelissenLast edited by SerenModz21 on April 9, 2025\n\n\n\nPackages and modulesSecuring your codeAbout ECDSA registry signaturesAbout ECDSA registry signaturesSee DetailsTable of contentsMigrating from PGP to ECDSA signaturesSupporting signatures on third-party registriesPackages published to the public npm registry are signed to make it possible to detect if the package content has been tampered with.
Signing and verifying published packages protects against an attacker controlling a registry mirror or proxy where they attempt to intercept and tamper with the package tarball content.
Migrating from PGP to ECDSA signatures
Note: PGP-based registry signatures were deprecated on April 25th 2023 and replaced by ECDSA registry signatures.
The public npm registry is migrating away from the existing PGP signatures to ECDSA signatures that are more compact and can be verified without extra dependencies in the npm CLI.
Signature verification was previously a multi-step process involving the Keybase CLI, as well as manually retrieving and parsing the signature from the package metadata.
Read more about migrating and verifying signatures using the npm CLI.
Supporting signatures on third-party registries
The npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:
1. Signatures are provided in the package's packument in each published version within the dist object:
"dist":{  ..omitted..,  "signatures": [{    "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",    "sig": "a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809..."  }],
See this example of a signed package from the public npm registry.
To generate the signature, sign the package name, version and tarball sha integrity: ${package.name}@${package.version}:${package.dist.integrity}.
The current best practice is to use a Key Management System that does the signing operation on a Hardware Security Module (HSM) in order to not directly handle the private key part, which reduces the attack surface.
The keyid must match one of the public signing keys below.
2. Public signing keys are provided at registry-host.tld/-/npm/v1/keys in the following format:
{  "keys": [{    "expires": null,    "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",    "keytype": "ecdsa-sha2-nistp256",    "scheme": "ecdsa-sha2-nistp256",    "key": "{{B64_PUBLIC_KEY}}"  }]}
Keys response:

expires: null or a simplified extended ISO 8601 format: YYYY-MM-DDTHH:mm:ss.sssZ
keyid: sha256 fingerprint of the public key
keytype: only ecdsa-sha2-nistp256 is currently supported by the npm CLI
scheme: only ecdsa-sha2-nistp256 is currently supported by the npm CLI
key: base64 encoded public key

See this example key's response from the public npm registry.Edit this page on GitHub3 contributorsvelutlukekarrysfeelepxyzLast edited by velut on April 9, 2024\n\n\n\nPackages and modulesSecuring your codeVerifying ECDSA registry signaturesVerifying ECDSA registry signaturesSee DetailsTable of contentsPrerequisitesVerifying registry signaturesTroubleshootingSome packages are missing registry signaturesTo ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI.
Prerequisites

Install npm CLI version v8.15.0 or later
Install dependencies using npm install or npm ci

Verifying registry signatures
Registry signatures can be verified using the following audit command:
npm audit signatures
Example response if all installed versions have valid registry signatures:
audited 1640 packages in 2s
1640 have verified registry signatures
Troubleshooting
Some packages are missing registry signatures
The CLI will error if packages don't have signatures and if the package registry supports signatures. This could mean an attacker might be trying to circumvent signature verification. You can check if the registry supports signatures by requesting the public signing keys from registry-host.tld/-/npm/v1/keys.
Example response if some versions have missing registry signatures:
audited 1640 packages in 2s
1405 packages have verified registry signatures
235 packages have missing registry signatures but the registry is providing signing keys:
missing-dep@1.0.0 (https://registry.npmjs.org/)...Edit this page on GitHub2 contributorslukekarrysfeelepxyzLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeRequiring 2FA for package publishing and settings modificationRequiring 2FA for package publishing and settings modificationSee DetailsTable of contentsConfiguring two-factor authenticationTo protect your packages, as a package publisher, you can require everyone who has write access to a package to have two-factor authentication (2FA) enabled. This will require that users provide 2FA credentials in addition to their login token when they publish the package. For more information, see "Configuring two-factor authentication".
You may also choose to allow publishing with either two-factor authentication or with automation tokens. This lets you configure automation tokens in a CI/CD workflow, but requires two-factor authentication from interactive publishes.
Configuring two-factor authentication


On the npm "Sign In" page, enter your account details and click Sign In.



Navigate to the package on which you want to require a second factor to publish or modify settings.


Click Settings.



Under "Publishing access", select the requirements to publish a package.


Dont require two-factor authentication
With this option, a maintainer can publish a package or change the package settings whether they have two-factor authentication enabled or not. This is the least secure setting.


Require two-factor authentication or automation tokens or granular access token
With this option, maintainers must have two-factor authentication enabled for their account. If they publish a package interactively, using the npm publish command, they will be required to enter 2FA credentials when they perform the publish. However, maintainers may also create an automation token or a granular access token and use that to publish. A second factor is not required when using a token, making it useful for continuous integration and continuous deployment workflows.


Require two-factor authentication and disallow tokens
With this option, a maintainer must have two-factor authentication enabled for their account, and they must publish interactively. Maintainers will be required to enter 2FA credentials when they perform the publish. Automation tokens and granular access tokens cannot be used to publish packages.





Click Update Package Settings.

Edit this page on GitHub5 contributorslukekarrysericmuttamonishcmb4mbooethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPackages and modulesSecuring your codeReporting malware in an npm packageReporting malware in an npm packageSee DetailsTable of contentsHow npm Security handles malwareReporting malwareIf you find malware in an npm package (either yours or someone else's), you can report it to the npm Security team to help keep the Javascript ecosystem safe.
Note: Vulnerabilities in npm packages should be reported directly to the package maintainers. We strongly advise doing this privately. You can find contact information about package maintainers with npm owner ls <package-name>. If the source code is hosted on GitHub please refer to the repository's Security Policy.
How npm Security handles malware
Malware is a major concern for npm Security and we have removed hundreds of malicious packages from the registry. For every malware report we receive, npm Security takes the following actions:

Confirm validity of the report.
Remove the package from the registry.
Publish a security placeholder for the package.
Publish a security advisory alerting the community.

As part of our process we determine whether the user account who uploaded the package should be banned. We also cooperate with 3rd parties when applicable.
Reporting malware

Gather information about the malware.
On the package page, click Report malware.
On the malware report page, provide information about yourself and the malware:

Name: Your name.
Email address: An email address the npm Security team can use to contact you.
Package name: The name of the package that contains the malware.
Package version: The version of the package that contains the malware. Include all affected versions.
Description of the malware: A brief description of the malware and its effects. Include references, commits, and/or code examples that would help our researchers confirm the report.


Click Send Report.
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nIntegrationsIntegrating with external servicesAbout access tokensAbout access tokensSee DetailsTable of contentsAbout legacy tokensAbout granular access tokensNote: You must be using npm version 5.5.1 or greater to use access tokens.
An access token is an alternative to using your username and password for authenticating to npm when using the API or the npm command-line interface (CLI). An access token is a hexadecimal string that you can use to authenticate, and which gives you the right to install and/or publish your modules.
There are two types of access tokens available:

Legacy tokens
Granular access tokens

You can create access tokens to give other tools (such as continuous integration testing environments) access to your npm packages. For example, GitHub Actions provides the ability to store secrets, such as access tokens, that you can then use to authenticate. When your workflow runs, it will be able to complete npm tasks as you, including installing private packages you can access.
You can work with tokens from the web or the CLI, whichever is easiest. What you do in each environment will be reflected in the other environment.
npm token commands let you:

View tokens for easier tracking and management
Create new legacy tokens
Limit access according to IP address ranges (CIDR)
Delete/revoke tokens

For more information on creating and viewing access tokens on the web and CLI, see "Creating and viewing access tokens".
About legacy tokens
Legacy tokens are created with the same permissions as the user who created them. The npm CLI automatically generates and uses a publish token when you run npm login.
There are three different types of legacy tokens:

Read-only: You can use these tokens to download packages from the registry. These tokens are best for automation and workflows where you are installing packages. For greater security, we recommend using granular access tokens instead.
Automation: You can use these tokens to download packages and install new ones. These tokens are best for automation workflows where you are publishing new packages. Automation tokens do not 2FA for executing operations on npm and are suitable for CI/CD workflows. For greater security, we recommend using granular access tokens instead.
Publish: You can use these tokens to download packages, install packages, and update user and package settings. We recommend using them for interactive workflows such as a CLI. If 2FA is enabled on your account, publish tokens will require 2FA to execute sensitive operations on npm.

Legacy tokens do not have an expiration date. It is important to be aware of your tokens and keep them protected for account security. For more information, see "Securing your token."
About granular access tokens
Granular access tokens allow you to restrict access provided to the token based on what you want to use the token for. With granular access tokens, you can:

Restrict which packages and scopes a token has access to
Grant tokens access to specific organizations
Set a token expiration date
Limit token access based on IP address ranges
Select between read-only or read and write access

You can create up to 1000 granular access tokens on your npm account. You can set how long your token is valid for, at least one day in the future. Each token can access up to 50 organizations, and up to either 50 packages, 50 scopes, or a combination of 50 packages and scopes. Access tokens are tied to users’ permission; hence it cannot have more permission than the user at any point in time. If a user has their access revoked from a package or an org., their granular access token also will have its access revoked from those packages or org.
When you give a token access to an organization, the token can only be used for managing organization settings and teams or users associated with the organization. It does not give the token the right to publish packages managed by the organization.Edit this page on GitHub4 contributorslukekarrysfeelepxyzmonishcmethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nIntegrationsIntegrating with external servicesCreating and viewing access tokensCreating and viewing access tokensSee DetailsTable of contentsCreating access tokensCreating legacy tokens on the websiteCreating granular access tokens on the websiteCreating tokens with the CLICIDR-restricted token errorsViewing access tokensViewing tokens on the websiteViewing tokens on the CLIToken attributesYou can create and view access tokens from the website and command line interface (CLI).
Creating access tokens
Creating legacy tokens on the website
Note: For greater security, we recommend using granular access tokens instead of legacy read-only tokens or legacy automation tokens.


In the upper right corner of the page, click your profile picture, then click Access Tokens.



Click Generate New Token, then select legacy token from the dropdown menu.



(Optional) Name your token.


Select the type of access token:


Read-only: A read-only token can only be used to download packages from the registry. It will have permission to read any private package that you have access to. This is recommended for automation and workflows where you are installing packages, but not publishing new ones.


Automation: An automation token can download packages and publish new ones, but if you have two-factor authentication (2FA) configured on your account, it will not be enforced. You can use an automation token in continuous integration workflows and other automation systems to publish a package even when you cannot enter a one-time passcode.


Publish: A publish token can perform any action on your behalf, including downloading packages, publishing packages, and changing user settings or package settings. If you have two-factor authentication configured on your account, you will be required to enter a one-time passcode when using a publish token. This is recommended for interactive workflows such as a CLI.





Click Generate Token.


Copy the token from the top of page.


Creating granular access tokens on the website


In the upper right corner of the page, click your profile picture, then click Access Tokens.



Click Generate New Token, then click Granular Access Token.



In the Token name field, enter a name for your token.


(Optional) In the Description field, enter a description for your token.


In the Expiration field, enter a token expiration period. The date must be at least 1 day in the future.


(Optional) In the Allowed IP Ranges field, enter IP address ranges to restrict your access token to. You must use CIDR notation to enter IP address ranges. To add more than one allowed IP range, click Add IP Range and enter an IP range in the new text field.



(Optional) In the Packages and scopes section, configure your token's access to packages and scopes.

In the Permissions dropdown menu, select No access, Read-only, or Read and write.
Under Select Packages, select either:

All Packages to grant the token access to all packages the user account has access to.
Only select packages and scopes to choose up to 50 specific packages or scopes to give the token access to. Then select specific packages or scopes from the dropdown menu.






(Optional) In the Organizations section, configure your token's access to organizations.

In the Permissions dropdown menu, select No access, Read-only, or Read and write.
Under Select organizations, select the organizations you want to grant your token access to.


Note: When you give a token access to an organization, the token can only be used for managing organization settings and teams or users associated with the organization. It does not give the token the right to publish packages managed by the organization.


Review the token summary, then click Generate Token.



Copy the token from the top of page.


Creating tokens with the CLI
You can create tokens with read-only permissions or read and publish permissions with the CLI.
Note: You cannot create legacy automation tokens or granular access tokens from the CLI. You must use the website to generate these types of tokens. For more information, see "Creating legacy tokens on the website" and "Creating granular access tokens on the website."

Read-only: Tokens that allow installation and distribution only, but no publishing or other rights associated with your account.
Publish: The default setting for new tokens, and most permissive token type. Publish tokens allow installation, distribution, modification, publishing, and all rights that you have on your account.

In addition, you can specify that the token is only valid for a specific IPv4 address range, using CIDR notation. The token will only be valid when used from the specified IP addresses.

To create a new token, on the command line, run:

npm token create for a read and publish token
npm token create --read-only for a read-only token
npm token create --cidr=[list] for a CIDR-restricted read and publish token. For example, npm token create --cidr=192.0.2.0/24
npm token create --read-only --cidr=[list] for a CIDR-restricted read-only token


When prompted, enter your password.
If you have enabled two-factor authentication, when prompted, enter a one-time password.
Copy the token from the token field in the command output.

CIDR-restricted token errors
If the CIDR string you enter is invalid or in an inappropriate format, you will get an error similar to the one below:
npm ERR! CIDR whitelist contains invalid CIDR entry: X.X.X.X./YY,Z.Z.. . .
Make sure you are using a valid IPv4 range and try creating the token again.
Viewing access tokens
Note: Full tokens are never displayed, only the first and last four characters will be shown. You can only view a full token immediately after creation.
Viewing tokens on the website
To view all tokens associated with your account, in the upper right corner of the page, click your profile picture, then click Access Tokens.

Viewing tokens on the CLI
To view all tokens associated with your account, on the command line, run the following command:
npm token list
Token attributes

id: Use the token ID to refer to the token in commands.
token: The first digits of the actual token.
create: Date the token was created.
readonly: If yes, indicates a read-only token. If no, indicates a token with both read and publish permissions.
CIDR whitelist: Restricts token use by IP address.
Edit this page on GitHub6 contributorslukekarrysfeelepxyzericmuttamonishcmMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nIntegrationsIntegrating with external servicesRevoking access tokensRevoking access tokensTo keep your account and packages secure, we strongly recommend revoking (deleting) tokens you no longer need or that have been compromised. You can revoke any token you have created.


To see a list of your tokens, on the command line, run:
npm token list


In the tokens table, find and copy the ID of the token you want to delete.


On the command line, run the following command, replacing 123456 with the ID of the token you want to delete:
npm token delete 123456
npm will report Removed 1 token


To confirm that the token has been removed, run:
npm token list


Note: You must use the token ID to delete a token, not the truncated version of the token. In some cases, there may be a delay of up to an hour before a token is successfully revoked.Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 14, 2023\n\n\n\nIntegrationsIntegrating with external servicesUsing private packages in a CI/CD workflowUsing private packages in a CI/CD workflowSee DetailsTable of contentsCreate a new access tokenContinuous integrationContinuous deploymentInteractive workflowsCIDR whitelistsSet the token as an environment variable on the CI/CD serverCreate and check in a project-specific .npmrc fileSecuring your tokenYou can use access tokens to test private npm packages with continuous integration (CI) systems, or deploy them using continuous deployment (CD) systems.
Create a new access token
Create a new access token that will be used only to access npm packages from a CI/CD server.
Continuous integration
When generating an access token for use in a continuous integration environment, we recommend using a granular access token with limited access to provide greater security.
If you use a legacy token instead, by default, npm token create will generate a token with both read and write permissions. We recommend creating a read-only token:
npm token create --read-only
For more information on creating access tokens, including CIDR-whitelisted tokens, see "Creating an access token".
Continuous deployment
Since continuous deployment environments usually involve the creation of a deploy artifact, you may wish to create an automation token on the website. This will allow you to publish even if you have two-factor authentication enabled on your account.
Interactive workflows
If your workflow produces a package, but you publish it manually after validation, then you will want to create a token with read and write permissions, which are granted with the standard token creation command:
npm token create
CIDR whitelists
For increased security, you may use a CIDR-whitelisted token that can only be used from a certain IP address range. You can use a CIDR whitelist with a read and publish token or a read-only token:
npm token create --cidr=[list]npm token create --read-only --cidr=[list]
Example:
npm token create --cidr=192.0.2.0/24
For more information, see "Creating and viewing authentication tokens".
Set the token as an environment variable on the CI/CD server
Set your token as an environment variable, or a secret, in your CI/CD server.
For example, in GitHub Actions, you would add your token as a secret. Then you can make the secret available to workflows.
If you named the secret NPM_TOKEN, then you would want to create an environment variable named NPM_TOKEN from that secret.
steps:  - run: |      npm install  - env:      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
Consult your CI/CD server's documentation for more details.
Create and check in a project-specific .npmrc file
Use a project-specific .npmrc file with a variable for your token to securely authenticate your CI/CD server with npm.


In the root directory of your project, create a custom .npmrc file with the following contents:
//registry.npmjs.org/:_authToken=${NPM_TOKEN}
Note: that you are specifying a literal value of ${NPM_TOKEN}. The npm cli will replace this value with the contents of the NPM_TOKEN environment variable. Do not put a token in this file.


Check in the .npmrc file.


Securing your token
Your token may have permission to read private packages, publish new packages on your behalf, or change user or package settings. Protect your token.
Do not add your token to version control or store it insecurely. Store it in a password manager, your cloud provider's secure storage, or your CI/CD provider's secure storage.
When possible, use granular access tokens with the minimum permissions necessary, and set short expiration dates for your tokens. For more information, see "About access tokens."Edit this page on GitHub4 contributorsmonishcmiinuwadevzomethomsonLast edited by monishcm on December 6, 2022\n\n\n\nIntegrationsIntegrating with external servicesDocker and private modulesDocker and private modulesSee DetailsTable of contentsBackground: runtime variablesUpdate the DockerfileBuild the Docker imageTo install private npm packages in a Docker container, you will need to use Docker build secrets.
Background: runtime variables
You cannot install private npm packages in a Docker container using only runtime variables. Consider the following Dockerfile:
FROM node
COPY package.json package.jsonRUN npm install
# Add your source filesCOPY . .CMD npm start
Which will use the official Node.js image, copy the package.json into our container, installs dependencies, copies the source files and runs the start command as specified in the package.json.
In order to install private packages, you may think that we could just add a line before we run npm install, using the ENV parameter:
ENV NPM_TOKEN=00000000-0000-0000-0000-000000000000
However, this doesn't work as you would expect, because you want the npm install to occur when you run docker build, and in this instance, ENV variables aren't used, they are set for runtime only.
Instead of run-time variables, you must use Docker build secrets.
Update the Dockerfile
The Dockerfile that takes advantage of this has a few more lines in it than the earlier example that allows us to use your global .npmrc and the access token created when running npm login command (if you haven't run it already - do so before moving on).
# https://docs.npmjs.com/docker-and-private-modulesFROM node:18
ENV APP_HOME="/app"
WORKDIR ${APP_HOME}
COPY package*.json ${APP_HOME}/
RUN --mount=type=secret,id=npmrc,target=/root/.npmrc npm install
COPY . ${APP_HOME}/
CMD npm start
This will configure your Dockerfile to receive .npmrc file via build secrets, that will leave no trace after npm dependency installation is done.
Build the Docker image
To build the image using the above Dockerfile and the npm authentication token, you can run the following command. Note the . at the end to give docker build the current directory as an argument.
docker build . -t secure-app-secrets:1.0 --secret id=npmrc,src=$HOME/.npmrc
This will build the Docker image with the access token coming from your global .npmrc file received via build secrets, so you can run npm install inside your container as the current logged-in user.
Note: You may need to specify a working directory different from the default / otherwise some frameworks like Angular will fail.Edit this page on GitHub3 contributorsmatzarmikhailianethomsonLast edited by matzar on March 16, 2023\n\n\n\nOrganizationsCreatingCreating an organizationCreating an organizationAny npm user can create an organization to manage contributor access to packages governed by the organization.
Note: You need an npm user account to create an organization. To create a user account, visit the account signup page".


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Add an Organization.



On the organization creation page, in the Name field, type a name for your organization. Your organization name will also be your organization scope.



Under the Name field, choose either the "Unlimited private packages" paid plan or the "Unlimited public packages" free plan and click Buy or Create.



(Optional) On the organization invitation page, type the npm username or email address of a person you would like to add to your organization as a member and select a team to invite them to, then click Invite.



Click Continue.


Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsCreatingConverting your user account to an organizationConverting your user account to an organizationIf you have an npm user account, you can convert your user account to an organization. When you convert your user account to an organization, we will:

Create a new organization with the name of your user account.
Prompt you to create a new npm user account. We recommend choosing a variation of your old user name so collaborators will recognize you. For example, if your old username was "wombat", your new username might be "wombat-new".
Make your new npm user account an owner of your new organization.
Add your new npm user account to a team called "Developers" in your new organization.
Transfer packages owned by your user account to your new organization.
Transfer your existing organization and team memberships and contributor access settings to your new user account.

Note: Once your old user account has been converted to an organization, you will no longer be able to sign in to npm with your old user account.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Add an Organization.



Below the account creation form, click Convert.



Review the account conversion steps and click Continue.



On the new user account creation page, in the "Username" field, type the name of your new user account, then click Submit.



On the plan selection page, select either the "Unlimited private packages" paid plan or the "Unlimited public packages" free plan, then click Buy or Create.



If you selected to use the unlimited private packages plan, in the payment dialog, provide the email, name, address, and credit card information for the card that will be used to pay for the organization.

Edit this page on GitHub3 contributorslukekarrysatuonufureethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsCreatingRequiring two-factor authentication in your organizationRequiring two-factor authentication in your organizationSee DetailsTable of contentsAbout two-factor authentication for organizationsPrerequisitesRequiring two-factor authentication in your organizationHelping removed members and outside collaborators rejoin your organizationOrganization owners can require organization members to enable two-factor authentication for their personal accounts, making it harder for malicious actors to access an organization's packages and settings
About two-factor authentication for organizations
Two-factor authentication (2FA) is an extra layer of security used when logging into websites or apps. You can require all members in your organization to enable two-factor authentication on npm. For more information about two-factor authentication, see "Configuring two-factor authentication".
Note:
When you require use of two-factor authentication for your organization, members who do not use 2FA will be removed from the organization and lose access to its packages. You can add them back to the organization if they enable two-factor authentication.
An organization owner cannot opt-in to requiring 2FA for an organization if they do not have 2FA enabled on their account.
If you are the member of an organization that requires 2FA you will not be able to disable 2FA until you leave that organization.

Prerequisites
Before you can require organization members to use two-factor authentication, you must enable two-factor authentication for your account on npm. For more information, see "Configuring two-factor authentication".
Before you require use of two-factor authentication, we recommend notifying organization members and asking them to set up 2FA for their accounts. You can see if members already use 2Fa in the organizations members page.
Requiring two-factor authentication in your organization


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Members.



Click the Enable 2FA Enforcement button.



If prompted, read the information about members who will be removed from the organization. Type your organization's name to confirm the change, then click Remove members & require two-factor authentication.



If any members are removed from the organization, we recommend sending them an invitation that can reinstate their former privileges and access to your organization. They must enable two-factor authentication before they can accept your invitation.


Helping removed members and outside collaborators rejoin your organization
If any members are removed from the organization when you enable required use of two-factor authentication, they'll receive an email notifying them that they've been removed. They should then enable 2FA for their personal account, and contact an organization owner to request access to your organization.Edit this page on GitHub3 contributorsbennycodelukekarrysMylesBorinsLast edited by bennycode on May 13, 2024\n\n\n\nOrganizationsCreatingRenaming an organizationRenaming an organizationOrganizations cannot be renamed from the website or command line interface.
To rename an organization, as an organization owner, you must manually migrate your existing organization members, teams, and packages to a new organization, then contact npm Support to have the outdated packages unpublished and the previous organization deleted.

Create a new organization with the name you want. If your old organization is on a paid plan, you must choose a paid plan for the new organization.
Add the members of your old organization to your new organization.
In your new organization, create teams to match teams in your old organization.
Republish packages to the new organization by updating the package scope in its package.json file to match the new organization name and running npm publish.
In the new organization teams, configure package access to match team package access in your old organization.
Contact npm Support to have the outdated packages unpublished and the previous organization deleted.
Edit this page on GitHub3 contributorslukekarrysbitdawethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsCreatingDeleting an organizationDeleting an organizationAn organization administrator can delete the organization; packages in the organization will also be deleted if they fulfill the requirements to unpublish packages. Packages that cannot be deleted can be deprecated instead.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization that you want to delete.



On the organization settings page, click Billing.



Under "delete organization", click Delete.



You will be given an overview of the packages in your organization and what will happen to them when your organization is deleted. Packages that can be unpublished will be deleted.
If you are sure that you want to continue, enter your organization name and click Delete this organization.


Edit this page on GitHub3 contributorslukekarrysethomsonSeryozha95Last edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsPayingUpgrading to a paid organization planUpgrading to a paid organization planNote: This article only applies to users of the public npm registry.
As an organization owner, you can upgrade your free organization plan to the npm Teams product. npm Teams is a paid plan to give organization members the ability to install and publish private packages. For more information about npm Teams and our organization pricing plans, see the "npm Teams" section of our pricing page.
If you have an organization with a private packages plan, your organization will cost you seven (7) dollars a month per user. The $7 charge is a flat fee for any member of the organization even if the teams the member belongs do not have access to private packages
Newly added members to an organization are always billed during the next billing cycle. For more information, see "Adding members to your organization".
Note: Your paid plan and billing cycle will start when you submit your credit card information, and you will be charged for the first month immediately.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization you want to upgrade.



On the organization settings page, click Billing.



Under "change plan", click Upgrade Plan ($7/User).


Under "Want to upgrade?", click Enable Private Publishing for $7/mo.


In the billing information dialog box, enter your billing information:Email: the email address used for the billing contactName: the name on the credit card used to payStreet, City, ZIP Code, Country: the billing address associated with the credit card



Click Payment Info.



In the credit card information dialog box, enter your credit card information:Card numberMM / YY: the month and year of the card expiration dateCVC: the three-digit code on the credit card



To save your credit card information for other payments on npm, select "Remember me".



Click Pay for the monthly amount. The monthly amount will be the number of members in your organization multiplied by $7.

Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsPayingViewing, downloading, and emailing receipts for your organizationViewing, downloading, and emailing receipts for your organizationSee DetailsTable of contentsViewing receiptsDownloading receiptsEmailing receiptsNote: This article only applies to users of the public npm registry.
As an organization owner, you can view, download, and email receipts for the complete billing history of your organization.
Viewing receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization whose billing receipts you want to view.



On the organization settings page, click Billing.



On the Billing Information page, under "monthly bill", select View Billing History.



To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.


To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.



Downloading receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization whose billing receipts you want to download.



On the organization settings page, click Billing.



On the Billing Information page, under "monthly bill", select View Billing History.



To download a single receipt, find the row of the receipt you want to download, then click the PDF icon on the right side of the row.



To download multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the "Date" header. Then click Download Checked.



Emailing receipts


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization whose billing receipts you want to email.



On the organization settings page, click Billing.



On the Billing Information page, under "monthly bill", select View Billing History.



To email a single receipt, find the row of the receipt you want to download, then, on the right side of the row, click the email icon.



To email multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the "Date" header. Then click Email Checked.



In the Email Receipt dialog box, fill in the "From", "To", and "Message" fields.



Click Send.

Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsPayingUpdating organization billing settingsUpdating organization billing settingsSee DetailsTable of contentsUpdating credit card informationUpdating billing receipt email and extra receipt informationNote: This article only applies to users of the public npm registry.
As an owner of an npm Teams subscription, a paid organization plan, you can update the credit card used to pay for your plan. Updating your credit card will not change your billing cycle date, and the new credit card will be charged on the next billing cycle.
Note: If the credit card used to pay for your npm Teams subscription or your paid organization plan expires, or we are otherwise are unable to charge your card, you have a grace period of nine days to update the card.
Updating credit card information


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization whose credit card information you want to change.



On the organization settings page, click Billing.



Under "monthly bill", click Edit Payment Info.



In the billing information dialog box, enter your billing information:Email: the email address used for the billing contactName: the name on the credit card used to payStreet, City, ZIP Code, Country: the billing address associated with the credit card



Click Payment Info.



In the credit card information dialog box, enter your credit card information:Card numberMM / YY: the month and year of the card expiration dateCVC: the three-digit code on the credit card



To save your credit card information for other payments on npm, select "Remember me".



Click Update Card.



Updating billing receipt email and extra receipt information
As an organization owner, you can update the email address used for receipts, and add extra information to the receipt for your paid organization plan, such as your business name, VAT identification number, or address of record. Updated billing information will appear on all receipts immediately.
Note: The billing email is used for receipts only and is not required to match the email address of the person whose card is used to pay for the organization.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization whose billing receipt information you want to change.



On the organization settings page, click Billing.


On the Billing Information page, under "monthly bill", select View Billing History.



At the bottom of the Billing History dialog box, click "Receipt Settings".



To add a business name, VAT number, address of record, or other information to your receipts, in the "Extra Billing Information" text box, type the information.



To update the email address used for receipts, beside "Send my receipts", select the checkbox and type the email address that should receive billing receipts.



Click Save.


Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsPayingDowngrading to a free organization planDowngrading to a free organization planNote: This article only applies to users of the public npm registry.
If you are a subscriber to the npm Teams product (you have a paid organization) and you are an owner of the organization, then you can downgrade from npm Teams to a free organization. When you downgrade from a paid to a free organization, you and your organization members will lose the ability to install and publish private packages at the end of your last paid billing cycle. Your private packages will not be made publicly visible when you downgrade to a free plan.
Note: If you would like to pay for fewer seats, you can remove members from your organization by following the steps in "Removing members from your organization".


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of the organization you want to downgrade.



On the organization settings page, click Billing.



Under "change plan", click Downgrade Plan.



Under "Are you sure?", click Downgrade to a free account.


Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging membersAdding members to your organizationAdding members to your organizationSee DetailsTable of contentsInviting members to your organizationRevoking an organization invitationAs an organization owner, you can add other npm users to your organization to give them read or read and write access to public and private packages within your organization's scope, as well as public unscoped packages governed by your organization.
When you add a member to your organization, they are sent an email inviting them to the organization.
Once the new member accepts the invitation, they are:

assigned the role of "member"
added to the "developers" team

If you have a paid organization, as part of an npm Teams plan, you will be billed $7 per month for each new member.
Inviting members to your organization


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Members.



Click the Invite Members button.



In the "Username or email" field, type the username or email address of the person you wish to invite. Optionally you can select a specific team to invite the member to.



Click Invite.



Revoking an organization invitation
As an organization owner, if you've made a mistake in inviting someone to your organization, you can revoke the organization invitation.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Members.



Click the Invite Members button.



Under the "Invitations" field, click the X next to the name of the user invitation you would like to revoke.


Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging membersAccepting or rejecting an organization invitationAccepting or rejecting an organization invitationSee DetailsTable of contentsAccepting an organization invitationRejecting an organization invitationAccepting an organization invitation
If you receive an invitation to an organization, you have to accept the invitation over email to be added to the organization.
You have the option to use a different email address than the one that received the invitation to join the organization.


Click the verification link in the organization invitation email.


You will be prompted to log into your npm user account. If you don't have an npm user account, you can sign up for one.



Rejecting an organization invitation
If you are invited to an organization that you do not want to join, you can let the invitation expire. Organization invitations expire after one week.Edit this page on GitHub1 contributorethomsonLast edited by ethomson on September 22, 2020\n\n\n\nOrganizationsManaging membersOrganization roles and permissionsOrganization roles and permissionsThere are three roles in an organization:

Owner: Users who manage organization members and billing.
Admin: Users who manage team membership and package access.
Member: Users who create and publish packages in the organization scope.

On the public registry, you cannot remove the last owner from an organization. To delete an organization, contact npm Support.
ActionOwnerAdminMemberManage organization billingXAdd members to the organizationXRemove members from the organizationXRename an organizationXDelete an organizationXChange any organization member's roleXAdd org owned packages to other orgsXCreate teamsXXDelete teamsXXAdd any member to any teamXXRemove any member from any teamXXManage team package accessXXCreate and publish packages in the organization scopeXXXEdit this page on GitHub3 contributorslukekarrysmonishcmethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging membersManaging organization permissionsManaging organization permissionsAs an organization owner, you can change the role of any member of your organization to add or remove permissions on the organization for that member.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Members.



In the list of organization members, find the member whose role you want to change.


In the member row, to select the new role of the organization member, click member, admin, or owner.


Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging membersRemoving members from your organizationRemoving members from your organizationAs an organization owner, you can remove members from your organization if they are no longer collaborating on packages owned or governed by your organization.
If you remove a member from an npm Teams subscription (a paid organization), then they will lose access to your organization's private packages, and the credit card on file for your organization will not be charged for them on the next billing cycle.
Note: Members are not notified when you remove them from your organization.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Members.



In the list of organization members, find the member you want to remove.


At the end of the member row, click X.


Edit this page on GitHub4 contributorslukekarryskheemchandraMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging teamsAbout the developers teamAbout the developers teamThe "developers" team is automatically created when you create an organization. By default, the developers team has read/write access to all new packages created under the organization's scope.

Members added to the organization, including the organization owner, are automatically added to the developers team
The maintainers field in the package.json of any newly created packages under the organization scope is automatically populated with the members of the current developers team

If you create a new package under your organization's scope and you do not want members of the developers team to have read/write access to that package, an owner or admin can remove the developers team's access to that package. For more information, see "Managing team access to organization packages".
If an owner adds a new member to an organization and does not want that member to be on the developers team, an owner can remove them.
Note: The developers team can no longer be removed from an organization for the following reasons:
It is the source of truth for all users, packages, and default permissions in an organization.
When you want to restrict write access, it is almost always better to set the default permissions to read-only and create separate teams for managing write permissions.
Edit this page on GitHub3 contributorslukekarrysbitdawethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging teamsCreating teamsCreating teamsAs an organization owner or team admin, you can create teams to manage access to sets of packages governed by your organization.
Note: Team names cannot be changed. To "rename" a team, you must delete the team and recreate it.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Teams.



In the "Name" and "Description" fields, type a team name and helpful description. Team names must be lower case and cannot contain spaces or punctuation.



Click Create Team.



Note: New teams do not have members or package access by default. Once you create a team, add packages and members from the "Teams" tab.Edit this page on GitHub4 contributorslukekarrysarisacobaMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging teamsAdding organization members to teamsAdding organization members to teamsSee DetailsTable of contentsManaging teams from the CLIAs an organization owner or team admin, you can add organization members to teams to give them access to a specific set of packages governed by the organization.
Note: An npm user must be a member of your organization before you can add them to a team. To add a member to your organization, see "Adding members to your organization".


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Teams.



Beside the team you want to add members to, click Members.



In the "Username" field, type the npm username of the organization member you would like to add to your team.



Click + Add User.



Note: organization members are not notified when they are added to a team. We recommend telling the organization member you have added them to a team.
Managing teams from the CLI
If you would like to manage the membership of your team from the command line interface (CLI), you can use:
npm team
For more information, see the CLI documentation on teams.Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging teamsRemoving organization members from teamsRemoving organization members from teamsAs an organization owner or team admin, you can remove organization members from teams if they no longer need access to packages accessible to the team.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Teams.



In the list of team members, find the member you want to remove.


In the member row, to remove the member from the team, click X.



Note: Removing a member from a team, even if it is the only team they are a member of, will not remove them from the organization. To remove a member from the organization, see "Removing members from your organization".Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging teamsManaging team access to organization packagesManaging team access to organization packagesSee DetailsTable of contentsAdding package access to a teamAdding package access to a team on the webAdding package access to a team using the CLIRemoving package access from a teamRemoving package access from a team on the webRemoving package access from a team using the CLIChanging package access for a teamChanging package access for a team on the webChanging package access for a team from the CLIAs an organization owner or package maintainer, you can add or remove package access to or from teams in your organization.
Adding package access to a team
Adding package access to a team on the web


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Teams.



Beside the team to which you want to add package access, click Packages.



On the "Add Packages" page, in the "Package" field, type the name of the package and select from the dropdown menu.



Click + Add Existing Package.



Beside the package name, click read or read/write to set the team permissions for the package.



Adding package access to a team using the CLI
As an organization owner or package maintainer, you can use the CLI access command to add package access to a team on the command line:
npm access grant <read-only|read-write> <org:team> [<package>]
For more information, see "npm-access".
Removing package access from a team
Removing package access from a team on the web


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Teams.



Beside the team from which you want to remove package access, click Packages.



Beside the name of the package from which you want to remove access, click x.



Removing package access from a team using the CLI
As an organization owner or package maintainer, you can also use the CLI access command to revoke package access from a team on the command line:
npm access revoke <org:team> [<package>]
For more information, see "npm-access".
Changing package access for a team
Changing package access for a team on the web


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Teams.



Beside the team from which you want to remove package access, click Packages.



Beside the package name, click read or read/write to set the team permissions for the package.



Changing package access for a team from the CLI
As an organization owner or package maintainer, you can change package access for a team from the command line:
npm access
For more information, see the npm-access CLI documentation.Edit this page on GitHub5 contributorsreggilukekarryscrookseMylesBorinsethomsonLast edited by reggi on March 21, 2025\n\n\n\nOrganizationsManaging teamsRemoving teamsRemoving teamsAs an organization owner or team admin, you can remove teams that no longer need access to a set of packages governed by your organization. Removing the team will not remove the team members or packages from your organization.
Note: if you remove all teams referencing a particular package, it will be orphaned and you will lose access to it. If this happens, contact npm Support.


On the npm "Sign In" page, enter your account details and click Sign In.



In the upper right corner of the page, click your profile picture, then click Account.



In the left sidebar, click the name of your organization.



On the organization settings page, click Teams.



Beside the name of the team you want to remove, click X.



Note: You cannot remove the developers team, learn more about the developers team.Edit this page on GitHub3 contributorslukekarrysMylesBorinsethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging packagesAbout organization scopes and packagesAbout organization scopes and packagesSee DetailsTable of contentsManaging unscoped packagesEvery organization is granted an organization scope, a unique namespace for packages owned by the organization that matches the organization name. For example, an organization named "wombat" would have the scope @wombat.
You can use scopes to:

Maintain a fork of a package: @wombat/request.
Avoid name disputes with popular names: @wombat/web.
Easily find packages in the same namespace

Packages in a scope must follow the same naming guidelines as unscoped packages.
Managing unscoped packages
While you are granted a scope by default when you create an organization, you can also use organizations to manage unscoped packages, or packages under a different scope (such as a user scope).Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging packagesConfiguring your npm client with your organization settingsConfiguring your npm client with your organization settingsSee DetailsTable of contentsConfiguring your npm client to use your organization's scopeSetting your organization scope for all new packagesSetting your organization scope for a single packageChanging default package visibility to publicSetting package visibility to public for a single packageSetting package visibility to public for all packagesAs an organization member, you can configure your npm client to:

make a single package or all new packages you create locally use your organization's scope
make a single package or all new packages you create locally have default public visibility

Before configuring your npm client, you must install npm.
Configuring your npm client to use your organization's scope
If you will be publishing packages with your organization's scope often, you can add your organization's scope to your global .npmrc configuration file.
Setting your organization scope for all new packages
Note: Setting the organization scope using the steps below will only set the scope for new packages; for existing packages, you will need to update the name field in package.json.
On the command line, run the following command, replacing <org-name> with the name of your organization:
npm config set scope <org-name> --global
For packages you do not want to publish with your organization's scope, you must manually edit the package's package.json to remove the organization scope from the name field.
Setting your organization scope for a single package


On the command line, navigate to the package directory.
cd /path/to/package


Run the following command, replacing <org-name> with the name of your organization:
npm config set scope <org-name>


Changing default package visibility to public
By default, publishing a scoped package with npm publish will publish the package as private. If you are a member of an organization on the free organization plan, or are on the paid organization plan but want to publish a scoped package as public, you must pass the --access public flag:
npm publish --access public
Setting package visibility to public for a single package
You can set a single package to pass --access public to every npm publish command that you issue for that package.


On the command line, navigate to the package directory.
cd /path/to/package


Run the following command:
npm config set access public


Setting package visibility to public for all packages
You can set all packages to pass --access public to every npm publish command that you issue for that package.
Warning: Setting packages access to public in your global .npmrc will affect all packages you create, including packages in your personal account scope, as well as packages scoped to your organization.
On the command line, run the following command:
npm config set access public --globalEdit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nOrganizationsManaging packagesCreating and publishing an organization scoped packageCreating and publishing an organization scoped packageSee DetailsTable of contentsCreating an organization scoped packagePublishing a private organization scoped packagePublishing a public organization scoped packageAs an organization member, you can create and publish public and private packages within the organization's scope.
Creating an organization scoped package


On the command line, make a directory with the name of the package you would like to create.
mkdir /path/to/package/directory


Navigate to the newly-created package directory.


To create an organization scoped package, on the command line, run:
npm init --scope=<your_org_name>


To verify the package is using your organization scope, in a text editor, open the package's package.json file and check that the name is @your_org_name/<pkg_name>, replacing your_org_name with the name of your organization.


Publishing a private organization scoped package
By default, npm publish will publish a scoped package as private.
By default, any scoped package is published as private. However, if you have an organization that does not have the Private Packages feature, npm publish will fail unless you pass the access flag.


On the command line, navigate to the package directory.


Run npm publish.


Private packages will say private below the package name on the npm website.

Publishing a public organization scoped package
To publish an organization scoped package as public, use npm publish --access public.


On the command line, navigate to the package directory.


Run npm publish --access public.


Public packages will say public below the package name on the npm website.
Edit this page on GitHub2 contributorslukekarrysethomsonLast edited by lukekarrys on October 23, 2023\n\n\n\nPoliciesTerms of UseTerms and LicensesSee DetailsTable of contentsSoftware from npmFree to use npm servicesPaid npm servicesnpm, Inc. offers software and services under a few different licenses and terms of use.
Software from npm
License terms and notices for the npm command-line program can be found in the LICENSE file of the project's source code at https://www.github.com/npm/cli.
Free to use npm services
Free usage of https://www.npmjs.com, and the npm public registry are covered by the npm Open Source Terms at https://docs.npmjs.com/policies/open-source-terms. These terms include several important policies, including:


What npm considers acceptable package content.


npm's Code of Conduct, which includes our policy on harassment.


npm's Privacy Policy, which limits use and sharing of information about you collected by npm Services.


npm's policy on copyright including how to report violations thereof.


npm's Dispute Policy which addresses how to resolve disputes over the control of a package name, user name, or organization name in the Public Registry. This includes our policy on users "squatting" on these names.


Use of npm's trademarks is governed by our Trademark Policy. If you have concerns about your own trademark's use on npm please see our Disputes Policy.


Paid npm services
npm's paid products, including the npm Solo and Orgs plans, are covered by the npm Paid Services Terms at https://docs.npmjs.com/policies/private-terms.
The npm Solo Payment Plan and the npm Orgs Payment Plan govern payment for these services.\n\n\n\nPoliciesOpen Source Termsnpm Open-Source TermsSee DetailsTable of contentsImportant TermsOther TermsLegal AgreementChangesnpm PoliciesUse of npm Open SourceConditionsAcceptable UseAcceptable ContentCommercial ContentEnforcement of Acceptable UseYour AccountYour ContentFeedbackIndemnityDisclaimersThird-Party ServicesLimits on LiabilityTerminationPayment TermsGeneral TermsDisputesNotices and Questions These npm Open Source terms of use (these Terms) govern access to and use of https://www.npmjs.com (the Website) as well as the "npm Public Registry" at https://registry.npmjs.org (the Public Registry). npm, Inc. (npm) operates each of those services. These terms refer to all of them together as npm Open Source.
npm last updated these npm Open Source Terms on March 10, 2022. You can review prior versions at https://github.com/npm/documentation/blob/main/content/policies/open-source-terms.mdx.
Important Terms
These Terms include a number of important provisions that affect your rights and responsibilities, such as the disclaimers in "Disclaimers", limits on npm's liability to you in "Limits on Liability", and an agreement to arbitrate disputes individually in "Arbitration".
Other Terms
npm offers additional, paid services (Paid Services) that are subject to additional terms:

Additional terms for npm Paid Services are available at https://docs.npmjs.com/policies/private-terms.

npm Open Source and any Paid Services you may agree to use are together called npm Services throughout these Terms.
Legal Agreement
You may only access or use npm Services by agreeing to these Terms. If npm adds any additional functionality to npm Services, you must agree to these Terms to use that new functionality, too. You show your agreement with npm on these Terms by creating a user account (your Account) or by accessing or using npm Services without creating an account. The agreement between you and npm is a legally binding contract (this Agreement).
Changes
npm may change these Terms and the additional terms for Paid Services in the future. npm will post changes on the Website with a new "last updated" date. If you have an Account, npm will notify you of changes by email to the address provided for your Account, by a message on the Website, or both. If you do not have an account, npm may notify you of changes by a general announcement via the Website, but it is up to you to check for changes to these Terms. After receiving notice of changes to these Terms, you must accept those changes to continue using npm Services. You accept changes to these Terms by continuing to use npm Services. npm may change, suspend, or discontinue npm Services at any time without notice or liability to you.
npm Policies
npm respects your privacy and limits use and sharing of information about you collected by npm Services. The privacy policy at https://docs.npmjs.com/policies/privacy(the Privacy Policy) describes these policies. npm will abide by the Privacy Policy and honor the privacy settings that you choose via npm Services.
npm respects the exclusive rights of copyright holders and responds to notifications about alleged infringement via npm Services per the copyright policy at https://docs.npmjs.com/dmca (the Copyright Policy).
npm resolves disputes about package names, user names, and organization names in the Public Registry per the policy at https://docs.npmjs.com/disputes (Dispute Policy). This includes "package squatting".
Use of all npm Services is governed by the code of conduct at https://docs.npmjs.com/conduct (Code of Conduct).
npm permits use of npm trademarks per the policy at https://docs.npmjs.com/trademark.
Use of npm Open Source
Subject to these Terms, npm grants you permission to use npm Open Source. That permission is not exclusive to you, and you cannot transfer it to anyone else.
Your permission to use npm Open Source entitles you to do the following:


You may search for, download, publish, and manage packages of computer code (Packages) in the Public Registry, and otherwise interact with the Public Registry, via the command-line tool published by npm at https://www.github.com/npm/cli (the CLI).


You may search for, download, publish, and manage Packages using software other than CLI via application programming interfaces that npm publicly documents or makes available for public use (Public APIs).


You may search for and manage Packages in the Public Registry, and otherwise interact with the Public Registry, via the Website.


You may update and manage your Account via the Website.


You may visit, create an account for, and participate in, discussions on npm.community.


Conditions
Your permission to use npm Open Source, as well as any permission you may have to use Paid Services, are subject to the following conditions:


You must be at least 13 years of age to use npm Services.


You may not use npm Services after npm says you may not, such as by disabling your Account.


You must use npm Services only in accordance with "Acceptable Use".


You may access and use data about the security of Packages, such as vulnerability reports, audit status reports, and supplementary security documentation, only for your own personal or internal business purposes. You may not provide others access to, copies of, or use of npm data about the security of Packages, directly or as part of other products or services.


Acceptable Use


You will abide by the Code of Conduct and the Dispute Policy.


You will not submit material to npm as a package or in any other form that violates npm's Acceptable Content, described below.


You will not disclose information that you do not have the right to disclose, such as confidential information of others.


You will not copy or share any personally identifiable information of any other person without their specific permission.


You will not violate any applicable law.


You will not use or attempt to use another person's Account without their specific permission.


You will not buy, sell, or otherwise trade in user names, organization names, names for Packages, or any other names reserved on npm Services, for money or other compensation.


You will not use npm Services' ability to send e-mail to send advertisements, chain letters, or other solicitations.


You will not automate access to, use, or monitor the Website, such as with a web crawler, browser plug-in or add-on, or other computer program that is not a web browser. You may replicate data from the Public Registry using the Public APIs per this Agreement.


You will not use npm Services to send email to distribution lists, newsgroups, or group mail aliases.


You will not falsely imply that you are affiliated with or endorsed by npm.


You will not operate illegal schemes, such as pyramid schemes, via npm Services.


You will not deep-hyperlink to images or other non-hypertext content served by npm Services.


You will not remove any marking indicating proprietary ownership from any material got via npm Services.


You will not display any portion of the Website via an HTML IFRAME.


You will not disable, avoid, or circumvent any security or access restrictions of npm Services, or access parts of npm Services not intended for access by you.


You will not strain infrastructure of npm Services with an unreasonable volume of requests, or requests designed to impose an unreasonable load on IT systems underlying npm Services. This rule is intentionally loose, to give npm the flexibility it needs to keep npm Services working for the user community as a whole. But to draw one clear line, under no circumstances are five million requests to npm Services in a single month-long period by any single individual, organization, or group of affiliated companies remotely reasonable. If you have a special need to make lots and lots of requests, our sales team can help.


You will not encourage or assist any other person in violation of "Acceptable Use".


Acceptable Content
Administrators at npm reserve the right to delete content hosted on the npm Services that they deem unacceptable. Unacceptable content can take the form of a package, a README file, a user or organization name, or any other content submitted to npm Services. A few examples of unacceptable content:


Content that is illegal, offensive, or otherwise harmful. This includes content that is harassing, inappropriate, or abusive.


Content in violation of law, infringing the intellectual property rights of others, violating the privacy or other rights of others, or in violation of any agreement with a third party. This includes code that violates a public license for others' work.


Content containing malicious computer code, such as computer viruses, computer worms, rootkits, back doors, or spyware. This includes content submitted for research purposes. Tools designed and documented explicitly to assist in security research are acceptable, but exploits and malware that use the npm registry as a deployment or delivery vector are not.


Packages that are not functionally compatible with the npm command-line client. For example, a "package" cannot simply be a PNG or JPEG image, a movie file, or a text document uploaded directly to the registry. Using the Public Registry as a general purpose database is not allowed.


Content that exists only to "reserve" a name, whether a package name, user name, or organization name. The Dispute Policy governs how npm handles such cases of "squatting".


To find out how to report violations of Acceptable Content, refer to the Code of Conduct.
Commercial Content
The npm Public Registry is about Packages. All manner of useful Packages are welcome, from hobby projects to competitive products, enterprise infrastructure and tooling to the latest fun hack or work of software art.
At the same time, the npm Public Registry, the Website, and important conventions like README go beyond just code. Developers use all of those channels to communicate more broadly about code, who is developing it, why, and how.
That communication is important, and welcome, so long as it respects that the npm Public Registry, the website, and npm Open Source more generally remain neutral. You are free to use npm Open Source for commercial projects, to advance your career, and for other business purposes. But you may not leverage content or system conventions to make the npm Public Registry, Website, or CLI put business before code.
These kinds of commercial content are generally acceptable in README files and other documentation:


Credits, acknowledgments, attributions, and other recognitions of contributions to Packages.


Information on how to pay, donate to, and otherwise support Package development, Package developers, and Package steward organizations.


Logos from, and links to, organizations developing, stewarding, or sponsoring Package development.


Information on paid products and services related to Packages, such as enhanced versions, add-ons, commercial license terms, training, integration, or support.


These kinds of commercial content generally aren't acceptable:


README, package.json, or other content displaying advertisements.


Packages that display ads at runtime, on installation, or at other stages of the software development lifecycle, such as via npm scripts. Packages with code that can be used to display ads are fine. Packages that themselves display ads are not.


Packages that function primarily as ads, with only placeholder or negligible code, data, and other technical content.


These examples are just examples. npm will continue to apply its judgment when deciding what content is acceptable. npm will continue to expect you to apply your own judgment when choosing what you share and how.
Enforcement of Acceptable Use
npm may investigate and prosecute violations of this Agreement to the fullest legal extent. npm may notify and cooperate with law enforcement authorities in prosecuting violations of this Agreement.
Your Account
You must create and log into an Account to access features of some npm Services, including npm Open Source.
To create an Account, you must provide certain information about yourself, as required by the account creation form on the Website or the CLI. If you create an Account, you will provide, at a minimum, a valid email address. You will keep that email address up-to-date. You will not impersonate any other individual. You may delete your Account at any time by contacting support.
You will be responsible for all action taken using your account, whether authorized by you or not, until you either close your account or give npm notice that the security of your Account has been compromised. You will notify npm immediately if you suspect the security of your Account has been compromised. You will select a secure password for your Account. You will keep your password secret.
npm may restrict, suspend, or terminate your Account according to the Copyright Policy, if npm reasonably believes that you are in breach of these Terms, or if npm reasonably believes that you have misused npm Services.
Your Content
Nothing in this Agreement gives npm any ownership rights in intellectual property that you share with npm Services, such as your Account information or any Packages you share with npm Services (Your Content). Nothing in this Agreement gives you any ownership rights in npm intellectual property provided via npm Services, like software, documentation, trademarks, service marks, logotypes, or other distinguishing graphics.
Between you and npm, you remain solely responsible for Your Content. You will not wrongly imply that Your Content is sponsored or approved by npm. npm will not be obligated to store, maintain, or provide copies of your content, except per the Privacy Policy.
npm may remove Your Content from npm Services without notice if npm suspects Your Content was submitted or used in violation of "Acceptable Use", as well as per the Copyright Policy.
Your Content belongs to you. You decide whether and how to license it. But at a minimum, you license npm to provide Your Content to users of npm Services when you share Your Content. That special license allows npm to copy, publish, and analyze Your Content, and to share its analyses with others. npm may run computer code in Your Content to analyze it, but npm's special license alone does not give npm the right to run code for its functionality in npm products or services.
When Your Content is removed from npm Services, whether by you or npm, npm's special license ends when the last copy disappears from npm's backups, caches, and other systems. Other licenses, such as open source licenses, may continue after Your Content is removed. Those licenses may give others, or npm itself, the right to share Your Content with npm Services again.
Others who receive Your Content via npm Services may violate the terms on which you license Your Content. You agree that npm will not be liable to you for those violations or their consequences.
Feedback
npm welcomes your feedback and suggestions for npm Services. You agree that npm will be free to act on feedback and suggestions you provide without further notice, consent, or payment. You will not submit feedback or suggestions that you consider confidential or proprietary.
Indemnity
You will indemnify npm, its officers, directors, employees, representatives, and agents, and hold them harmless for, all liability, expenses, damages, and costs from any third-party claims, demands, lawsuits, or other proceedings alleging that Your Content, your use of npm Services, or both, violate the intellectual property right of a third party, this Agreement, or applicable law. You will not settle any such proceeding without the prior written consent of npm. npm will notify you of any such proceeding it becomes aware of.
Disclaimers
Use of npm Services is at your sole risk. npm Services are provided on an "as is" and "as available" basis. npm expressly disclaims all warranties of any kind, whether express, implied, or statutory, including implied warranties of title, noninfringement, merchantability, and fitness for a particular purpose.
npm makes no warranty that npm Services will meet your requirements, operate in an uninterrupted, timely, secure, or error-free manner, or that errors in npm Services will be corrected.
You receive material via npm Services at your sole risk. You will be solely responsible for any damage to your computer system and network, as well as any data loss that may result from use of npm Services or material received via npm Services.
npm Services may provide information and software that is inaccurate, incomplete, misleading, illegal, offensive, or otherwise harmful. npm may, but does not promise to, review content provided by npm Services.
npm Services provide information about ownership and licensing of Packages, as provided by those Packages' publishers. That information may be wrong. npm cannot and does not provide legal advice.
Third-Party Services
npm Services may hyperlink to and integrate with third-party applications, websites, and other services. You decide whether and how to use and interact with such services. npm does not make any warranty regarding such services or content they may provide, and will not be liable to you for any damages related to such services. Use of such third-party services may be governed by other terms and privacy notices that are not part of this Agreement and are not controlled by npm.
Limits on Liability
Neither npm nor any third-party service provider used by npm to provide npm Services will, under any circumstances, be liable to you for any indirect, incidental, consequential, special, or exemplary damages related to your use of npm Services or this Agreement, whether based on breach of contract, breach of warranty, tort (including negligence, product liability, or otherwise), or any other pecuniary loss, and whether or not npm has been advised of the possibility of such damages.
To the maximum extent permitted by law, npm's liability to you for any damages related to this Agreement, for any one or more causes and regardless of the form of action, will not exceed $50.
Some jurisdictions do not allow exclusion of certain warranties or limits on liability for incidental or consequential damages. Some of "Disclaimers" and "Limits on Liability" may not apply to you.
Termination
Either you or npm may terminate this Agreement at any time with notice to the other.
On termination of this Agreement, your permission to use npm Open Source, as well any permission you may have to access Paid Services under additional terms, also terminate.
The following provisions survive termination of this Agreement: "Your Content", "Feedback", "Indemnity", "Disclaimers", "Limits on Liability", and "General Terms". Users of npm Services may continue to copy and share Your Content after termination of this Agreement.
Payment Terms
There is no charge for use of npm Open Source. If you use Paid Services from npm, our Paid Services Terms at https://docs.npmjs.com/policies/private-terms apply.
General Terms
If a provision of this Agreement is unenforceable as written, but could be changed to make it enforceable, that provision should be modified to the minimum extent necessary to make it enforceable. Otherwise, that provision should be removed.
You may not assign this Agreement. npm may assign this Agreement to any affiliate of npm, any third party that obtains control of npm, or any third party that purchases assets of npm relating to npm Services. Any purported assignment of rights in breach of this provision is void.
Neither the exercise of any right under this Agreement, nor waiver of any breach of this Agreement, waives any other breach of this Agreement.
This Agreement, together with the additional terms for Paid Services and npm software that you and npm agree to, embody all the terms of agreement between you and npm about npm Services. This Agreement supersedes any other agreements about npm Services, written or not.
Disputes
The law of the State of California will govern any dispute, including any legal proceedings, relating to this Agreement or your use of npm Services (a Dispute).
You and npm will seek injunctions related to this agreement only in state or federal court in San Francisco, California. Neither you nor npm will object to jurisdiction, forum, or venue in those courts.
Other than to seek an injunction, you and npm will resolve any Dispute by binding American Arbitration Association arbitration. Arbitration will follow the AAA's Commercial Arbitration Rules and Supplementary Procedures for Consumer Related Disputes. Arbitration will happen in San Francisco, California. You will settle any Dispute as an individual, and not as part of a class action or other representative proceeding, whether as the plaintiff or a class member. No arbitrator will consolidate any Dispute with any another arbitration without npm's permission.
Any arbitration award will include costs of the arbitration, reasonable attorneys' fees, and reasonable costs for witnesses. You or npm can enter arbitration awards in any court with jurisdiction.
Notices and Questions
You may send notice to npm and questions about the terms governing npm products and services to legal@npmjs.com or by mail to:
GitHub, Inc
Attn: npm Legal Department
88 Colin P Kelly Jr St
San Francisco, CA. 94107
npm may send you notice using the email address you provide for your Account or by posting a message to the homepage or your Account page on the Website.\n\n\n\nPoliciesPrivate Termsnpm Paid Services TermsSee DetailsTable of contentsPayment TermsUse of npm Paid ServicesPayment for npm Paid ServicesThese npm Paid Services Terms of Use (these npm Paid Services Terms) supplement the terms for npm Open Source offered by npm, Inc. (npm) at https://docs.npmjs.com/policies/open-source-terms (npm Open Source Terms). They govern access to and use of npm Paid Services, including but not limited to the products known as npm Solo and npm Orgs, the private package storage, delivery, organization management, and access control features of https://www.npmjs.com (the Website) and the npm public registry at https://registry.npmjs.org (the Public Registry). These are collectively called the Paid Services.
These npm Paid Services Terms were last updated on March 10, 2022. You can review prior versions at https://github.com/npm/documentation/blob/main/content/policies/private-terms.mdx.
You may only access or use npm Paid Services by agreeing to the npm Open Source Terms as supplemented by these npm Paid Services Terms. If npm adds any additional functionality to npm Paid Services, you must agree to these npm Paid Services Terms to use those new features, too. You add these npm Paid Services Terms to your agreement with npm by using npm Paid Services with your account (your Account). These npm Paid Services Terms then become a part of the contract between you and npm, until you or npm disable npm Paid Services for your Account.
Payment Terms
There is no charge for use of npm Open Source. If you use Paid Services, these payment terms apply. When enabling Paid Services, you must provide all the payment card details requested by the Website (your Payment Details). Those details must be for a valid payment card that you have the right to use (your Payment Card). You must keep your Payment Details up-to-date via the Website.
You can disable Paid Services at any time via the Website. npm will not refund any payment you have already made for Paid Services when you disable Paid Services.
Dollar amounts throughout this Agreement are amounts of United States Dollars. You must pay for Paid Services in United States Dollars.
Dollar amounts throughout this Agreement do not include tax. You will pay any tax.
Use of npm Paid Services
npm will provide the private package storage and delivery features and services described in the public documentation for npm Paid Services at https://docs.npmjs.com/ (the npm Paid Services Documentation). npm grants you permission to use those features and services.
npm will also provide the organization management and access control features described in the npm Paid Services Documentation, and grants you permission to use those features and services, for npm "organizations" to which your Account belongs.
Permission to use npm Paid Services is not exclusive to you, and you may not transfer it to others. These npm Paid Services Terms do not give you permission to give others rights to use npm Paid Services. If you agree to a Payment Plan that gives you that right, you may do so only according to that Payment Plan.
Payment for npm Paid Services
Both your permission to use npm Paid Services and npm's commitment to provide npm Paid Services are subject to these npm Paid Services Terms, the npm Open Source Terms, and payment for use of npm Paid Services by your Account under a Payment Plan. Payment plans include:


the npm Solo Payment Plan at https://docs.npmjs.com/policies/solo-plan


or the npm Orgs Payment Plan at https://docs.npmjs.com/policies/orgs-plan


You may not use npm Paid Services unless you or someone else has agreed to a Payment Plan, enabled npm Paid Services for your Account under that Payment Plan, and made payment.\n\n\n\nPoliciesCode of Conductnpm Code of ConductSee DetailsTable of contentstl;drScopeFriendly Harassment-Free SpaceAcceptable UseReporting Violations of this Code of ConductConsequencesAppeal and ReinstatementContact InfoChangesCredit and Licensenpm exists to facilitate sharing code, by making it easy for JavaScript module developers to publish and distribute packages.
npm is a piece of technology, but more importantly, it is a community.
We believe that our mission is best served in an environment that is friendly, safe, and accepting; free from intimidation or harassment.
Towards this end, certain behaviors and practices will not be tolerated.
tl;dr

Be respectful.
We're here to help
Abusive behavior is never tolerated.
Data published to npm is hosted at the discretion of the service administrators, and may be removed.
Violations of this code may result in swift and permanent expulsion from the npm community.

Scope
We expect all members of the npm community, including paid and unpaid agents, administrators, users, and customers of npm, Inc., to abide by this Code of Conduct at all times in all npm community venues, online and in person, and in one-on-one communications pertaining to npm affairs.
This policy covers the usage of the npm registry, as well as the npm website, npm related events, and any other services offered by or on behalf of npm, Inc. (collectively, the "Service"). It also applies to behavior in the context of the npm Open Source project communities, including but not limited to public GitHub repositories, IRC channels, social media, mailing lists, and public events.
This Code of Conduct is in addition to, and does not in any way nullify or invalidate, any other terms or conditions related to use of the Service.
The definitions of various subjective terms such as "discriminatory", "hateful", or "confusing" will be decided at the sole discretion of the npm abuse team.
Friendly Harassment-Free Space
We are committed to providing a friendly, safe and welcoming environment for all, regardless of gender identity, sexual orientation, ability, ethnicity, religion, age, physical appearance, body size, race, or similar personal characteristics.
We ask that you please respect that people have differences of opinion regarding technical choices, and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a single right answer. A difference of technology preferences is not a license to be rude.
Disputes over package rights must be handled respectfully, according to the terms described in the Disputes Policy. There is never a good reason to be rude over package name disputes.
Any spamming, trolling, flaming, baiting, or other attention-stealing behavior is not welcome, and will not be tolerated.
Harassing other users of the Service is never tolerated, whether via public or private media.
Avoid using offensive or harassing package names, nicknames, or other identifiers that might detract from a friendly, safe, and welcoming environment for all.
Harassment includes, but is not limited to: harmful or prejudicial verbal or written comments related to gender identity, sexual orientation, ability, ethnicity, religion, age, physical appearance, body size, race, or similar personal characteristics; inappropriate use of nudity, sexual images, and/or sexually explicit language in public spaces; threats of physical or non-physical harm; deliberate intimidation, stalking or following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; and unwelcome sexual attention.
Acceptable Use
The Service administrators reserve the right to make judgment calls about what is and isn't appropriate in published packages, package names, user and organization names, and other public content. Package that violates the npm Service's Acceptable Use rules including its Acceptable Content rules will be deleted, at the discretion of npm.
Reporting Violations of this Code of Conduct
Please select the method of contact you think is most appropriate for the form of violation:


For urgent security issues, please open a ticket at https://npmjs.com/support. Requests to un-publish packages are not usually considered urgent security issues, as it is possible to un-publish a package within 24 hours of its first publish. Any publicly published package is immediately replicated to thousands of third-party mirrors, so any confidential information contained in a package should be considered immediately compromised.


If you believe someone is harassing you or is demonstrating some other form of malicious or inappropriate behavior, open a support ticket at https://npmjs.com/support. If this is the initial report of a problem, please include as much detail as possible. It is easiest for us to address issues when we have more context.


If you have concerns about a potential copyright violation, please refer to our Copyright Policy and take action as recommended by that policy.


If you think a package or other content is "squatting" on a name, follow the process described in the Disputes Policy.


For any other issues, or if in doubt, contact support.
Consequences
All content published to the Service, including user account credentials, is hosted at the sole discretion of the npm administrators.
Unacceptable behavior from any community member, including sponsors, employees, customers, or others with decision-making authority, will not be tolerated.
Anyone asked to stop unacceptable behavior is expected to comply immediately.
If a community member engages in unacceptable behavior, the npm administrators may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event or service).
Appeal and Reinstatement
If your content or account has been disabled or restricted and you seek reinstatement or wish to appeal, please review GitHub's Appeal and Reinstatement page for information about the process and use the Appeal and Reinstatement form to submit a request.
Contact Info
Please open a support ticket at https://npmjs.com/support if you need to report a problem or address a grievance related to an abuse report.
You are also encouraged to contact us if you are curious about something that might be "on the line" between appropriate and inappropriate content. We are happy to provide guidance to help you be a successful part of our community.
Changes
This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes.
Credit and License
This Code of Conduct borrows heavily from the Stumptown Syndicate Citizen's Code of Conduct, and the Rust Project Code of Conduct.
This document may be reused under a Creative Commons Attribution-ShareAlike License.\n\n\n\nPoliciesPackage Name DisputesDispute ResolutionSee DetailsTable of contentstl;drWhen to use this processWhen not to use this processTrademarksChangesDefinitionsSquattingPackagesOrganizationsUser namesLicenseThis document describes the steps that you should take to resolve naming disputes with other npm publishers. It also describes the steps you should take if you think a name infringes your trademark.
This document is additive to the guidelines in the npm Code of Conduct and npm Open-Source terms. Nothing in this document should be interpreted to contradict any aspect of the npm Code of Conduct or Open-Source Terms.
tl;dr

Open a support ticket at https://support.github.com/contact/npm-name-disputes.
Fill out the form with as much detail as possible.
Support will address your request. Please note submitting a report does not guarantee the transfer of a package, org, or username.

When to use this process
This process is an excellent way to:

Request a name that you believe is currently misleading or could be confused with a name used by your company or open source project
Request a name related to your company or open source project that cannot be claimed via account recovery

This process does not apply if the package violates our Terms of Use, in particular our Acceptable Use and Acceptable Content rules, or our Code of Conduct. Those documents refer to this one to resolve cases of "squatting"; see below.
If you see bad behavior or content you believe is unacceptable, refer to the Code of Conduct for guidelines on reporting violations. You are never expected to resolve abusive behavior on your own. We are here to help.
When not to use this process
This process is not available for dispute requests due to lack of activity related to a specific name.
Please also note there are cases where a party may have claim to a specific name, but giving that name to the requesting party would pose a supply-chain risk to the npm ecosystem. In such cases, requests may be denied independent of the validity of the claim.
Trademarks
npm processes Trademark claims under GitHub's Trademark Policy.
If you think another npm publisher is infringing your trademark, such as by using a confusingly similar package, org, or user account name, please submit a Trademark Policy Violation Report via our form.
Use of npm's own trademarks is covered by our Logo and Usage Policy.
Changes
This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes.
Definitions
Squatting
It is against npm's Terms of Use to publish a package, register a user name or an organization name simply for the purposes of reserving it for future use.
We do not pro-actively scan the registry for squatted packages, so the fact that a name is in use does not mean we consider it valid. The standards for what we consider squatting depend on what is being squatted:
Packages
Package names are considered squatted if the package has no genuine function.
Organizations
Organization names are considered squatted if there are no packages published within a reasonable time. If an organization is a paid organization, it may have private packages that are invisible to third parties. For privacy reasons, we cannot reveal whether or not an organization has private packages, so a paid organization will never be considered squatted.
User names
We are extremely unlikely to transfer control of a user name, as it is totally valid to be an npm user and never publish any packages: for instance, you might be part of an organization or need read-only access to private packages.
License
Copyright (C) npm, Inc., All rights reserved
This document may be reused under a Creative Commons Attribution-ShareAlike License.\n\n\n\nPoliciesnpm Licensenpm LicenseCopyright (c) npm, Inc. and Contributors All rights reserved.
npm is released under the Artistic License 2.0, subject to additional terms that are listed below.
The text of the npm License follows and the text of the additional terms follows the Artistic License 2.0 terms:

The Artistic License 2.0
Copyright (c) 2000-2006, The Perl Foundation.
Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.
Preamble
This license establishes the terms under which a given free software Package may be copied, modified, distributed, and/or redistributed. The intent is that the Copyright Holder maintains some artistic control over the development of that Package while still keeping the Package available as open source and free software.
You are always permitted to make arrangements wholly outside of this license directly with the Copyright Holder of a given Package. If the terms of this license do not permit the full use that you propose to make of the Package, you should contact the Copyright Holder and seek a different licensing arrangement.
Definitions
"Copyright Holder" means the individual(s) or organization(s)
named in the copyright notice for the entire Package.
"Contributor" means any party that has contributed code or other
material to the Package, in accordance with the Copyright Holder's
procedures.
"You" and "your" means any person who would like to copy,
distribute, or modify the Package.
"Package" means the collection of files distributed by the
Copyright Holder, and derivatives of that collection and/or of
those files. A given Package may consist of either the Standard
Version, or a Modified Version.
"Distribute" means providing a copy of the Package or making it
accessible to anyone else, or in the case of a company or
organization, to others outside of your company or organization.
"Distributor Fee" means any fee that you charge for Distributing
this Package or providing support for this Package to another
party.  It does not mean licensing fees.
"Standard Version" refers to the Package if it has not been
modified, or has been modified only in ways explicitly requested
by the Copyright Holder.
"Modified Version" means the Package, if it has been changed, and
such changes were not explicitly requested by the Copyright
Holder.
"Original License" means this Artistic License as Distributed with
the Standard Version of the Package, in its current version or as
it may be modified by The Perl Foundation in the future.
"Source" form means the source code, documentation source, and
configuration files for the Package.
"Compiled" form means the compiled bytecode, object code, binary,
or any other form resulting from mechanical transformation or
translation of the Source form.
Permission for Use and Modification Without Distribution
(1) You are permitted to use the Standard Version and create and use Modified Versions for any purpose without restriction, provided that you do not Distribute the Modified Version.
Permissions for Redistribution of the Standard Version
(2) You may Distribute verbatim copies of the Source form of the Standard Version of this Package in any medium without restriction, either gratis or for a Distributor Fee, provided that you duplicate all of the original copyright notices and associated disclaimers. At your discretion, such verbatim copies may or may not include a Compiled form of the Package.
(3) You may apply any bug fixes, portability changes, and other modifications made available from the Copyright Holder. The resulting Package will still be considered the Standard Version, and as such will be subject to the Original License.
Distribution of Modified Versions of the Package as Source
(4) You may Distribute your Modified Version as Source (either gratis or for a Distributor Fee, and with or without a Compiled form of the Modified Version) provided that you clearly document how it differs from the Standard Version, including, but not limited to, documenting any non-standard features, executables, or modules, and provided that you do at least ONE of the following:
(a)  make the Modified Version available to the Copyright Holder
of the Standard Version, under the Original License, so that the
Copyright Holder may include your modifications in the Standard
Version.
(b)  ensure that installation of your Modified Version does not
prevent the user installing or running the Standard Version. In
addition, the Modified Version must bear a name that is different
from the name of the Standard Version.
(c)  allow anyone who receives a copy of the Modified Version to
make the Source form of the Modified Version available to others
under
(i)  the Original License or
(ii)  a license that permits the licensee to freely copy,
modify and redistribute the Modified Version using the same
licensing terms that apply to the copy that the licensee
received, and requires that the Source form of the Modified
Version, and of any works derived from it, be made freely
available in that license fees are prohibited but Distributor
Fees are allowed.
Distribution of Compiled Forms of the Standard Version or Modified Versions without the Source
(5) You may Distribute Compiled forms of the Standard Version without the Source, provided that you include complete instructions on how to get the Source of the Standard Version. Such instructions must be valid at the time of your distribution. If these instructions, at any time while you are carrying out such distribution, become invalid, you must provide new instructions on demand or cease further distribution. If you provide valid instructions or cease distribution within thirty days after you become aware that the instructions are invalid, then you do not forfeit any of your rights under this license.
(6) You may Distribute a Modified Version in Compiled form without the Source, provided that you comply with Section 4 with respect to the Source of the Modified Version.
Aggregating or Linking the Package
(7) You may aggregate the Package (either the Standard Version or Modified Version) with other packages and Distribute the resulting aggregation provided that you do not charge a licensing fee for the Package. Distributor Fees are permitted, and licensing fees for other components in the aggregation are permitted. The terms of this license apply to the use and Distribution of the Standard or Modified Versions as included in the aggregation.
(8) You are permitted to link Modified and Standard Versions with other works, to embed the Package in a larger work of your own, or to build stand-alone binary or bytecode versions of applications that include the Package, and Distribute the result without restriction, provided the result does not expose a direct interface to the Package.
Items That are Not Considered Part of a Modified Version
(9) Works (including, but not limited to, modules and scripts) that merely extend or make use of the Package, do not, by themselves, cause the Package to be a Modified Version. In addition, such works are not considered parts of the Package itself, and are not subject to the terms of this license.
General Provisions
(10) Any use, modification, and distribution of the Standard or Modified Versions is governed by this Artistic License. By using, modifying or distributing the Package, you accept this license. Do not use, modify, or distribute the Package, if you do not accept this license.
(11) If your Modified Version has been derived from a Modified Version made by someone other than you, you are nevertheless required to ensure that your Modified Version complies with the requirements of this license.
(12) This license does not grant you the right to use any trademark, service mark, tradename, or logo of the Copyright Holder.
(13) This license includes the non-exclusive, worldwide, free-of-charge patent license to make, have made, use, offer to sell, sell, import and otherwise transfer the Package with respect to any patent claims licensable by the Copyright Holder that are necessarily infringed by the Package. If you institute patent litigation (including a cross-claim or counterclaim) against any party alleging that the Package constitutes direct or contributory patent infringement, then this Artistic License to you shall terminate on the date that such litigation is filed.
(14) Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS "AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The following additional terms shall apply to use of the npm software, the npm website, the npm repository and any other services or products offered by npm, Inc.:
"Node.js" trademark Joyent, Inc. npm is not officially part of the Node.js project, and is neither owned by nor affiliated with Joyent, Inc.
"npm" and "The npm Registry" are owned by npm, Inc. All rights reserved.
Modules published on the npm registry are not officially endorsed by npm, Inc. or the Node.js project.
Data published to the npm registry is not part of npm itself, and is the sole property of the publisher. While every effort is made to ensure accountability, there is absolutely no guarantee, warrantee, or assertion expressed or implied as to the quality, fitness for a specific purpose, or lack of malice in any given npm package. Packages downloaded through the npm registry are independently licensed and are not covered by this license.
Additional policies relating to, and restrictions on use of, npm products and services are available on the npm website. All such policies and restrictions, as updated from time to time, are hereby incorporated into this license agreement. By using npm, you acknowledge your agreement to all such policies and restrictions.
If you have a complaint about a package in the public npm registry, and cannot resolve it with the package owner, please contact support and explain the situation. See the npm Dispute Resolution policy for more details.
Any data published to The npm Registry (including user account information) may be removed or modified at the sole discretion of the npm server administrators.
"npm Logo" contributed by Mathias Pettersson and Brian Hammond, use is subject to https://docs.npmjs.com/trademark
"Gubblebum Blocky" font Copyright (c) by Tjarda Koster, https://jelloween.deviantart.com included for use in the npm website and documentation, used with permission.
This program uses several Node modules contained in the node_modules/ subdirectory, according to the terms of their respective licenses.\n\n\n\nPoliciesPrivacy PolicyPrivacy Questions and AnswersSee DetailsTable of contentsWhat's most important?How does npm collect data about me?What data does npm collect about me, and why?npm collects data about how you use npm software and registriesnpm collects data about how you use the websitenpm collects account datanpm collects package datanpm collects payment card datanpm collects data about correspondencenpm collects data about use of npm.communityDoes npm share data about me with others?npm uses cookiesHow can I make choices about data collection?Where does npm keep data about me?How does npm handle data under the EU General Data Protection Regulation?How does npm handle data under the California Consumer Privacy Act?How can I see what data is publicly available about me?How can I change data about me?What is npm's policy on unpublishing packages?How does npm notify others about published data that's erased?What happens if npm merges with or is bought by another company?What are npm's information practices regarding information belonging to children?Who can I contact about npm and my privacy?How can I find out about changes?This notice describes how npm, Inc., or npm for short, collects and uses data about you.
What's most important?
That depends on your personal situation, which is why you should read on and decide for yourself. But at a minimum, absolutely every npm user should understand:
The npm public registry is for making software available to everyone online.
But: Software comes from people, and says something about us.
So: Think carefully about what packages to publish, what data you put in those packages, and what others might do with that data.
When you create an account, certain contact information is displayed publicly in the npm platform. And when you upload a package, your name and contact information may become associated with that package.
If you find yourself in a jam, open a support ticket.
How does npm collect data about me?
npm collects data about you:


when you use the npm command, the npx command or another program to access the npm public registry, Enterprise registries that npm hosts, private packages, such as when you're publishing a software package, and APIs for functionality like account and permissions management


when you browse the npm website, npmjs.com


when you use either the npm command or the website to create an npm account, update your account, and sign up for npm services


when you send support, privacy, legal, and other requests to npm


when working with and researching current and potential customers


When researching potential customers, npm staff sometimes search the public World Wide Web or paid business databases. Otherwise, npm doesn't buy or receive data about you from data brokers or other private services.
npm may inadvertently collect data about you if it is included in software packages that you or others upload.
What data does npm collect about me, and why?
npm collects data about how you use npm software and registries
When you use the npm command, the npx command, or other software to work with the npm public registry, an Enterprise registry that npm hosts, or private packages, npm logs data that might be identified to you:


a random, unique identifier, called npm-session, for each time you run commands like npm install


the names and versions of your project's dependencies, their dependencies, and so on, that come from the npm public registry, but not of other dependencies, like Git dependencies


the versions of Node.js, the npm command, and the operating system you are using


an npm-in-ci header, showing whether the command was run on a continuous integration server


the scope of the package for which you ran npm install, as an npm-scope header


a referrer header that shows the command you ran, with any file or directory paths redacted


data about the software you're using to access the registry, such as the User-Agent string


network request data, such as the date and time, your IP address, and the URL


npm uses this data to:


fulfill your requests, such as by sending the packages you ask for


send you alerts about security vulnerabilities that may affect the software you're building, when you run npm install or npm audit


keep registries working quickly and reliably


debug and develop the npm command and other software


defend registries from abuse and technical attacks


compile statistics on package usage and popularity


prepare reports on trends in the developer community


improve search results on the website


recommend packages that may be relevant to your work


npm collects data about how you use the website
When you visit www.npmjs.com, docs.npmjs.com, and other npm websites, npm uses cookies, server logs, and other methods to collect data about what pages you visit, and when. npm also collects technical information about the software and computer you use, such as:


your IP address


your preferred language


the web browser software you use


the kind of computer you use


the website that referred you


npm uses data about how you use the website to:


optimize the website, so that it's quick and easy to use


diagnose and debug technical errors


defend the website from abuse and technical attacks


compile statistics on package popularity


compile statistics on the kinds of software and computers visitors use


compile statistics on visitor searches and needs, to guide development of new website pages and functionality


decide who to contact about about product announcements, service changes, and new features


npm collects account data
Many features of npm services require an npm account. For example, you must have an npm account to publish packages to the npm public registry.
To create an npm account, npm requires a working email address and an available user name. npm uses this data to provide you access to features and identify you across npm services, publicly and within npm.
You do not have to give your personal or legal name to create an npm account. You can use a pseudonym instead. You can also open more than one account.
If you sign up for an account, then npm will publish account data for the whole world to see on user pages like this one. npm also publishes account data through the npm public registry, which is available for everyone to see, and Enterprise registries that npm hosts for others to find with commands like npm owner ls tap.
If you give npm a personal name or names on social media like GitHub and Twitter through the website, like when you include this on your profile or user page, npm publishes that data along with the email address and user name for the account. You don't have to give npm a personal name or any social media names, and you can remove this data at any time by updating your user page.
npm uses your email to:


notify you about packages published using your account


reset your password and help keep your account secure


add metadata to packages that you publish


contact you in special circumstances related to your account or packages


contact you about support requests


contact you about legal requests, like DMCA takedown requests and privacy complaints


announce new npm product offerings, service changes, and features


send you tips about how to better use free and paid services


send you messages about paid services you might want


npm collects package data
When you use npm publish or other software to publish packages to the npm public registry, an Enterprise registry that npm hosts, or as a private package, npm collects the contents of the package, plus metadata, including your account data. Other npm users may also publish packages that include data about you, such as the fact that you contributed code to a package.
npm uses data in packages to provide those packages to you and others who request them:


When you publish a package to the npm public registry, or change a package from private to public, npm makes the package and metadata available to everyone, online.


When you publish a package to an Enterprise registry that npm hosts, or as a private package, npm makes all of that data available to other users according to how the registry or the private packages account is configured. You may be able to configure who can access the package, or that may be up to others, such as the administrator of your company's Enterprise registry.


Making package data available to others allows them to download, build on, and depend on your work.
npm collects payment card data
To sign up for paid services, npm requires your payment card data. npm itself does not collect or store enough information to charge your card itself. Rather, Stripe collects that data on npm's behalf, and gives npm security tokens that allow npm to create charges and subscriptions.
npm uses your payment card data only to charge for npm services.
npm instructs Stripe to store your payment card data only as long as you use paid npm services.
npm collects data about correspondence
npm collects data about you when you send npm support requests, legal complaints, privacy inquiries, and business inquiries. Those data usually include your name and email address, and may include your company or other affiliation.
npm uses contact data to:


respond to you


compile aggregate statistics about correspondence


train support staff and other npm personnel


review the performance of npm personnel who respond


defend npm from legal claims


npm collects data about use of npm.community
npm collects data about visits, user accounts, and forum data on npm.community, the discussion forum for users of npm products and services. npm uses data from npm.community to collaborate with the development community, and to inform development decisions about the command-line interface and other software.
Does npm share data about me with others?
npm shares account data with others as mentioned in the section about account data.
npm shares package data with others as mentioned in the section about package data.
npm publishes posts and other content you submit to npm.community.
npm does not sell information about you to others. However, npm uses services provided by other companies to provide npm services. The types of service providers that npm uses include:


Companies that enable us to offer features on our website, such as to display your avatar


Companies that facilitate the efficient distribution of content


Cloud computing platforms and services that host our discussion forums


Services that assist with the detection of spam, scams, abuse others, or other violations of our terms of service


Payment processors


Platforms to help us receive, manage, and respond to support requests


Platforms for internal communication


npm uses cookies
npm's website only uses cookies strictly necessary to provide, optimize and secure the website. For example, we use them to keep you logged in, remember your preferences, authenticate your device for security purposes, analyze your use of the service, compile statistical reports, and provide information for future development of npm. The website uses internal cookies for analytics purposes, not any third-party analytics or service providers.
By using the website, you agree that we can place these types of cookies on your computer or device. If you disable your browser or device’s ability to accept these cookies, you will not be able to log in or use the website.
How can I make choices about data collection?
You choose what data the npm publish command includes in package data. You can use an .npmignore file in your package to keep specific files out of the package. You can also use a files list in package.json files to instruct npm to include only specific files that you name, in addition to standard files like README files, LICENSE files, and package.json.
To double check the data that you will share in a package that you plan to publish, run the npm publish --dry-run command. If you are running an older version of the npm command, run the npm pack command to create a tarball, then check its contents, such as with tar tvzf $tarball.
To publish a package to the npm public registry, npm's terms of service require you to license npm to share it. If a package is made public, it is available for everyone online to see. However, your choice of public license for your package may affect what others can do with data about you in your package.
npm does not respond to the Do Not Track HTTP header.
Where does npm keep data about me?
npm stores account data, data about website use, data about registry use, and private packages on servers in the United States of America. metadata about those packages worldwide, via content delivery networks.
npm stores package data published to Enterprise registries that npm hosts, plus metadata about them, in cloud computing zones of customers' choosing.
By using the npm platform, you consent to the collection and storage of your data as outlined in this section.
How does npm handle data under the EU General Data Protection Regulation?
npm respects privacy rights under Regulation (EU) 2016/679, the European Union's General Data Protection Regulation (GDPR). npm processes "Personal Data" on the following legal bases: (1) with your consent; (2) as necessary to perform our agreement to provide our services; and (3) as necessary for our legitimate interests in providing our services where those interests do not override your fundamental rights and freedom related to data privacy. Information we collect may be transferred to, and stored and processed in, the United States or any other country in which we or our affiliates or subcontractors maintain facilities, as described above.
If you reside in the EEA, Switzerland, or United Kingdom, you are entitled to certain rights, like the right to:


complain about our data collection or processing actions with the supervisor authority concerned. You can find a list of data protection authorities here.


access to information held about you.


ask us to correct or amend inaccurate or incomplete information we have about you.


ask us to erase data that under certain circumstances, like (1) when it is no longer necessary for the purpose for which it was collected, (2) you withdraw consent and no other legal basis for processing exists, or (3) you believe your fundamental rights to data privacy and protection outweigh our legitimate interest in continuing the processing.


request that we restrict our processing if we are processing your data based on legitimate interests or the performance of a task in the public interest as an exercise of official authority (including profiling); using your data for direct marketing (including profiling); or processing your data for purposes of scientific or historical research and statistics.


When you exercise your rights, npm may need to verify your identity and provide us with information before we access records containing your information. If you want to exercise your rights, please contact npm by opening a support ticket. We may have a reason under the law why we do not have to comply with your request or may comply with it in a more limited way than you anticipated. If we do, we will explain that to you in our response.
How does npm handle data under the California Consumer Privacy Act?
npm respects the rights of California residents under the California Consumer Privacy Act (CCPA). Where we collect information that is subject to the CCPA, that information we collect and your rights are described below.
Categories of personal information we collect:


Personal Identifiers:


Name and email address when you create an account. You will also be asked to create a username and we will assign one or more unique identifiers to your profile. We use this information to provide our services, respond to your requests, and send information to you.


We also collect your social media handle and basic account information if you provide it to us or interact with our services, such as our help desk, through social media.


We collect your payment information through our service provider, Stripe, as described above.




Internet or Other Electronic Network Activity Information: device identifiers such as IP address and user agent; the assigned unique IDs in cookies (as described below); information about how you arrived at and navigated through our Services.


Geolocation Data: We do not collect your specific longitude and latitude. However, we do collect imprecise location (e.g., your IP address).


Professional or employment-related information: If you apply for employment with us, information about your employment history.


Education information: If you apply for employment with us, information about your educational history.


We may collect any other information about you contained in software packages uploaded to our site, as described above under the "npm collects package data" section. We also collect the contents of your communications with us, e.g., when you submit a question to us through a web form or comments to us on social media.
We may disclose any of the categories of personal information listed above and use them for the above-listed purposes or for other business or operational purposes compatible with the context in which the personal information was collected. Our disclosures of personal information include disclosures to our "service providers," which are companies that we engage for business purposes to conduct activities on our behalf. The categories of service providers with whom we share information and the services they provide are described below.
Rights under CCPA:


Access/Right to Know: You have the right to request access to personal information we collected about you and information regarding the source of that personal information, the purposes for which we collect it, and the third parties and service providers with whom we share it.


Deletion: You have the right to request that we erase data we have collected from you. Please note that we may have a reason to deny your deletion request or delete data in a more limited way than you anticipated, e.g., because of a legal obligation to retain it.


To exercise your rights above, you can open a support ticket. When we process your request, we must verify your identity by asking you to (1) provide personal identifiers that we can match against information we may have collected from you previously; and (2) confirm your request using the email stated in the request.
Opt-out of sale:
California residents have the right to request that we stop "selling" their personal information. A "sale" of personal information is defined broadly: "selling, renting, releasing, disclosing, disseminating, making available, transferring, or otherwise communicating orally, in writing, or by electronic or other means, a consumer's personal information by the business to another business or a third party for monetary or other valuable consideration." We do not sell your information as defined by the CCPA.
Please note that your right to opt out does not apply to our sharing of personal information with service providers, who are parties we engage to perform a function on our behalf and are contractually obligated to use the Personal Information only for that function.
We may also disclose information to other entities who are not listed here when required by law or to protect our Company or other persons, as described in our Privacy Policy.
How can I see what data is publicly available about me?
You can access your account data at any time by visiting your account page on www.npmjs.com. Your account page also lists all the packages published under your account or other accounts.
You can access package data by downloading the packages, as long as they're public or you have permission to access them.
You can see metadata about packages by running npm info $package, or by accessing the appropriate registry's API. Registry APIs provide metadata in standard JSON format, and packages as tarballs.
How can I change data about me?
You can change your personal account data and payment card data at any time by visiting your account settings page on www.npmjs.com. You can change account and payment data for Enterprise by contacting support.
You can close your npm account at any time by e-mailing contacting support. Closing your account removes the profile from the public registry but does not automatically erase packages published under your account. We may retain some data about you internally even where you close your account.
npm's unpublish policy determines when you can erase packages from the npm public registry. The unpublish policy strikes a difficult balance between the purpose of publishing and hosting packages, others' reliance on what has been made public, and individual rights and freedoms.
If another user improperly publishes personal data about you, in a package or otherwise, open a support ticket.
Please note that while npm publishes notices about published data that's been erased, npm can't make everyone who has downloaded published package data or account data erase that data on your behalf. Choosing a public license, such as an open source software license, may encourage and allow storage, distribution, and use of package data indefinitely. Nearly all popular open source software licenses actually require preserving personal data that attributes the software to you, such as copyright notices, as a condition of permission for the software.
What is npm's policy on unpublishing packages?
Please see our policy on "unpublishing" packages or our terms of service for more information on erasing packages.
If you accidentally publish a package that threatens your privacy, or discover someone else has published a package that does, open a support ticket. npm can and will take down packages in specific, exceptional situations to protect you, especially if others violate your privacy. Using npm to violate others' privacy is against our terms of service.
How does npm notify others about published data that's erased?
npm takes a few steps to notify others who may be copying data from the npm public registry that published data has been erased:


npm publishes new placeholder versions of some erased packages, with README files that mention the package has been erased, and why.


npm's registry APIs, special software services that others use to copy data from the npm public registry, send update messages about packages that have been erased.


What happens if npm merges with or is bought by another company?
We may transfer to another entity or its affiliates or service providers some or all information about you in connection with, or during negotiations of, any merger, acquisition, sale of assets or any line of business, change in ownership control, or financing transaction. We cannot promise that an acquiring party or the merged entity will have the same privacy practices or treat your information the same as described in this Policy.
What are npm's information practices regarding information belonging to children?
npm's site and services are intended for users age sixteen and older. npm does not knowingly collect information from children. If we discover that we have inadvertently collected information from anyone younger than the age of 16, we will delete that information.
Who can I contact about npm and my privacy?
Please open a support ticket. You may also contact our Data Protection Officer directly.
Our United States HQ:
GitHub Data Protection Officer
Attention: npm Data Protection
88 Colin P. Kelly Jr. St.
San Francisco, CA 94107
United States
or our EU Office:
GitHub BV
Vijzelstraat 68-72
1017 HL Amsterdam
The Netherlands
How can I find out about changes?
This version of npm's privacy questions and answers took effect June 3, 2020.
npm will announce the next version on the npm blog. In the meantime, npm may update its contact information by updating the page at https://docs.npmjs.com/privacy, without an announcement. npm may change how it announces changes in future privacy versions.
You can review the history of changes in the Git repository for npm's public policies.\n\n\n\nPoliciesUnpublish Policynpm Unpublish PolicySee DetailsTable of contentsPackages published less than 72 hours agoPackages published more than 72 hours agoHow to unpublishConsiderations:What to do if your package does not meet the unpublish criteria?More on our unpublish policyIssues?ChangesLicenseThis document describes your options when looking to unpublish a package published to the public registry.
Registry data is immutable, meaning once published, a package cannot change. We do this for reasons of security and stability of the users who depend on those packages. So if you've ever published a package called "bob" at version 1.1.0, no other package can ever be published with that name at that version. This is true even if that package is unpublished.
However, because accidents happen, we allow you to unpublish packages in the situations described below. Otherwise, you can always deprecate a package.
Packages published less than 72 hours ago
For newly created packages, as long as no other packages in the npm Public Registry depend on your package, you can unpublish anytime within the first 72 hours after publishing.
Packages published more than 72 hours ago
Regardless of how long ago a package was published, you can unpublish a package that meets all of the following conditions:

no other packages in the npm Public Registry depend on it
it had less than 300 downloads over the last week
it has a single owner/maintainer

How to unpublish
To unpublish a single package version, run npm unpublish <package_name>@<version>.
If all the versions of a package can be unpublished, you can unpublish all versions at once by running npm unpublish <package_name> --force.
Considerations:

Once package@version has been used, you can never use it again. You must publish a new version even if you unpublished the old one.
Once you have unpublished a package, you will not be able to undo the unpublish.
If you entirely unpublish all versions of a package, you may not publish any new versions of that package until 24 hours have passed.

What to do if your package does not meet the unpublish criteria?
If your package does not meet the unpublish policy criteria, we recommend deprecating the package. This allows the package to be downloaded but publishes a clear warning message (that you get to write) every time the package is downloaded, and on the package's npmjs.com page. Users will know that you do not recommend they use the package, but if they are depending on it their builds will not break. We consider this a good compromise between reliability and author control.
This can be achieved by using one of the following from your command line:

npm deprecate <package> "<message>" to deprecate the entire package
npm deprecate <package>@<version> "<message>" to deprecate a specific version

If the entire package is deprecated, the package name will be dropped from our search results.
More on our unpublish policy
This document is additive to the unpublish procedures, the CLI commands unpublish documentation and the "Changes to npm Unpublish Policy - January 2020" blog post.
Issues?
If for some reason your package meets the unpublish policy criteria but the unpublish command fails, or if you need assistance with the deprecate process, please reach out to our support team where we'll be happy to assist.
If you believe a package violates npm's terms or policies, such as our terms of use, reach out to our support team. If a package infringes your copyright, refer to npm's DMCA takedown policy. If you believe a package violates your privacy rights, contact our privacy team as soon as possible.
Changes
This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes.
License
Copyright (C) npm, Inc., All rights reserved
This document may be reused under a Creative Commons Attribution-ShareAlike License.\n\n\n\nPoliciesCopyright and DMCA PolicyCopyright - DMCA Takedown PolicyThis policy describes how we at npm, Inc., the company behind npmjs.com and the npm public registry, respond to claims that materials users have submitted to our service infringe copyright.
npm follows GitHub's Copyright - DMCA Takedown Policy. Please carefully review that policy along with GitHub's Guide to Submitting a DMCA Takedown Notice to determine if you should submit a DMCA takedown.
If you are ready to submit a DMCA takedown notice, the fastest way to get a response is to enter your information and answer all the questions on GitHub's Copyright claims form. Be sure to select the option indicating that your claim involves content on npm.js.
You can also send an email notification to copyright@github.com. You may include an attachment if you like, but please also include a plain-text version of your letter in the body of your message.
If you must send your notice by physical mail, you can do that too, but it will take substantially longer for us to receive and respond to it. Notices we receive via plain-text email have a much faster turnaround than PDF attachments or physical mail. If you still wish to mail us your notice, GitHub's physical address is:
GitHub, Inc
Attn: DMCA Agent
88 Colin P Kelly Jr St
San Francisco, CA. 94107\n\n\n\nPoliciesLogos and Usagenpm Logos and UsageSee DetailsTable of contentsWhat is npm?Why npm, Inc. has a logo policyGeneral rulesNominative use - No need to type ™ on Twitter®Requesting permissionThe npm LogosThe npm Wombat MascotChangesLicenseThis policy describes npm logos and trademarks and how you may use them. For information on what to do if someone infringes a trademark of yours with a confusing package name, see the Disputes policy.
What is npm?
The npm project contains two main parts:

The npm client. It is a command line tool to install and publish packages.
The npm registry service. npm, Inc. runs the registry as a free (as in beer) public service for anyone wanting to publish an open source package and for anyone to install an open source package.

Why npm, Inc. has a logo policy
"npm" and the npm logos are trademarks owned by npm, Inc. We have developed this policy to make it clear how other businesses and projects can (and cannot) use the npm name and logos.
General rules

When referring to the npm software in body text, the first usage should be followed by a generic term such as "package manager," "services" or "client" to provide context.
"npm" should never be used or explained as an acronym.
When referring to the npm public registry, please follow npm with the word "registry" or the phrase "public registry".
When referring to a private registry for npm packages, please describe it as "private registry for npm packages" or a "proxy of the npm registry".
References to the owner of the npm client software and the operator of the npm public registry should be to "npm, Inc."
Any materials referring to npm should include the following notice in the footer or wherever you may have your own trademark notice: "npm is a registered trademark of npm, Inc."

Nominative use - No need to type ™ on Twitter®
"Nominative" or "referential" use means to refer to something or someone else by their trademark. So it's perfectly OK to use "npm" to refer to npm, Inc., the npm client, npm code, and the npm public registry. A referential use is generally going to be in a sentence or sentence fragment, like "first install the npm client," or in a book or article title. The use should not be attention-getting or potentially misperceived as suggesting "npm" is your own name, project, product or services.
It is not a referential use to incorporate the letters "npm" or any of the npm logos in the name or logo for your own company or its projects, products, services or social media handles.
If you need to use "npm" to indicate compatibility, you should use "npm" after your own product or service name and an accurate preposition:

Pink Unicorn Consulting Ltd. services for npm
Purple Unicorn Inc. private registry server compatible with the npm client
Kappa, a hierarchical proxy of the npm registry

You need to ask for permission for any uses not described. When in doubt about your use of the npm name or logo, please contact npm, Inc. for clarification.
Requesting permission
We like to make it easy for anyone to use the npm name or logo for community-oriented efforts that help spread and improve npm. We are therefore likely to grant permission to use the npm name and logo in the following ways:

For projects where:

The primary purpose of your project is to promote the spread and improvement of the npm client software or the npm registry service.
Your project is non-commercial in nature (it can make money to cover its costs or contribute to non-profit entities, but it cannot be run as a for-profit project or business).
Your project neither promotes nor is associated with entities that currently fail to comply with the Artistic License 2.0 under which npm is distributed, or which are in violation of this policy.


For a user group name where:

The main focus of the group is the software.
Any software or services the group provides are without cost.
The group does not make a profit.
Any charge to attend meetings are to cover the cost of the venue, food and drink only.



Any other requests are not likely to be granted licenses, but feel free to ask.
The npm Logos
Our npm Logos are very recognizable and deserve special treatment. In short, the npm logos represent only npm and should not be used to represent your products. The npm Logos signify us, or a special relationship with us, and you may use them only with our permission. Since the goal is to avoid confusion about you being us, or your relationship with us, context counts. We will consider requests on a case-by-case basis.
The npm Wombat Mascot
Like the npm Logo, the npm Wombat graphic is a very recognizable part of the npm brand, and signifies a special relationship with the npm project, service, or company. It should never be used except with explicit written permission. We will consider requests on a case-by-case basis.
Please be advised that the Wombat and the logos generally may not be used to refer to the project, service, or company in a nominative sense, as any usage will almost always imply a special relationship with npm.
Changes
This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes.
License
Copyright © npm, Inc.
This document may be reused under a Creative Commons Attribution-ShareAlike License.\n\n\n\nPoliciesSecuritynpm Security PolicySee DetailsTable of contentsTable of ContentsReporting Security Problems to npmSecurity Point of ContactCritical Updates And Security NoticesChangesLicenseOutlined in this document are the practices and policies that npm applies to help ensure that we release stable/secure software, and react appropriately to security threats when they arise.
Table of Contents

Reporting Security Problems to npm
Security Point of Contact
Critical Updates And Security Notices

Reporting Security Problems to npm
If you need to report a security vulnerability. Please visit https://npmjs.com/support. If your issue is specific to your account, such as lost credentials or problems with two-factor authentication, contacting our support team is more appropriate.
We review all security reports on the next business day. Note that the npm staff is generally offline for most US holidays, but please do not delay your report! Our off-hours support staff can fix many issues, and will alert our security point of contact if needed.
Security Point of Contact
Any security tickets opened using https://npmjs.com/support will be escalated to the security point of contact, who will delegate incident response activities as appropriate. This is the best and fastest way to contact npm about any security-related matter.
Critical Updates And Security Notices
We learn about critical software updates and security threats from a variety of sources:

Ubuntu's security notices page: https://usn.ubuntu.com/
The Node.js mailing list.
Security tickets sent to us.
and other media sources.

Changes
This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes.
License
This document may be reused under a Creative Commons Attribution-ShareAlike License.\n\n\n\nPoliciesReplication and web crawler policyCrawler policynpm's full public dataset is available via the public registry. Using CouchDB replication, you can get a full copy of all metadata, and it is acceptable within our terms of use to download copies of tarballs for inspection or experimentation.
npm's website also has package metadata available. We allow this content to be indexed by commercial crawlers such as GoogleBot. At our discretion, we also allow experimental crawlers to access the site, as long as they keep their request velocity to 1 request per second or less. At that velocity, indexing all packages would take 3 days, so if you want a full copy of our metadata it is always going to be faster to access the data via replication, which takes only an hour or two to provide full data and will thereafter automatically stay in sync.
If you do not wish to install CouchDB to manage replication, we provide open source software that makes it easy to sync to the registry's public feed.
If you attempt to access package metadata by high-velocity crawling of the npm website, we reserve the right to rate-limit or ban your IP, user-agent or both.\n\n\n\nnpm: Threats and MitigationsSee DetailsTable of contentsAccount TakeoversBy compromising passwordsBy registering an expired email domainUploading Malicious PackagesBy "typosquatting" / dependency confusionBy changing an existing package to have malicious behaviorWe put together this page to give an overview of the most common attacks npm faces, a high-level description of how we mitigate those attacks, and links to more information.
Account Takeovers
By compromising passwords
This is the most common attack, not just on npm but on any web service. The best way to protect your account is to enable two-factor authentication (2FA). The strongest option is to use a security-key, either built-in to your device or an external hardware key; it binds the authentication to the site you are accessing, making phishing exceedingly difficult. Not everyone has access to a security-key though, so we also support authentication apps that generate one-time passcodes for 2FA.
Because of how common this attack is, and how critical npm packages are to the broader software ecosystem, we have undertaken a phased approach in mandating 2FA for npm package maintainers. This has already rolled out to the top-100 package maintainers and top-500 package maintainers, and in the near future, maintainers of all high-impact packages (those with 1 million+ weekly downloads or 500+ dependents) will be enrolled in mandatory 2FA.
We also recognize that passwords aren’t going away any time soon. For users that don’t opt-in to 2FA, we do an enhanced login verification with a one-time password sent to their email to protect from account takeover.
By registering an expired email domain
Another method used to take over an account is by identifying accounts using an expired domain for their email address. An attacker could register the expired domain and recreate the email address used to register the account. With access to an account's registered email address an attacker could take over an account not protected by 2FA via a password reset.
When a package is published the email address associated with the account, at the time the package was published, is included in the public metadata. Attackers are able to utilize this public data to identify accounts that might be susceptible to account takeover. It is important to note that the email addresses stored in public metadata of packages are not updated when a maintainer updates their email address. As such crawling public metadata to identify accounts susceptible to expired domain takeover will result in false positives, accounts that appear to be vulnerable but are not.
npm does periodically check if accounts email addresses have expired domains or invalid MX records. When the domain has expired, we disable the account from doing a password reset and require the user to undergo account recovery or go through a successful authentication flow before they can reset their password.
Uploading Malicious Packages
By "typosquatting" / dependency confusion
Attackers may attempt to trick others into installing a malicious package by registering a package with a similar name to a popular package, in hopes that people will mistype or otherwise confuse the two. npm is able to detect typosquat attacks and block the publishing of these packages.
A variant of this attack is when a public package is registered with the same name of a private package that an organization is using. We strongly encourage using scoped packages to ensure that a private package isn’t being substituted with one from the public registry. While npm is not able to detect dependency confusion attacks we have a zero tolerance for malicious packages on the registry. If you believe you have identified a dependency confusion package, please let us know!
By changing an existing package to have malicious behavior
Rather than tricking people into using a similarly-named package, attackers also try to add malicious behavior to existing popular packages. In partnership with Microsoft, npm both scans packages for known malicious content, and runs the packages to look for new patterns of behavior that could be malicious. This has led to a substantial reduction in malicious content in npm packages. Furthermore, our Trust and Safety team checks and removes malicious content reported by our users. Similar to dependency confusion attacks, we are constantly updating our detection services with new examples, so if you think a package contains malicious behavior, please let us know!Edit this page on GitHub3 contributorsferdnycMylesBorinsericmuttaLast edited by ferdnyc on July 8, 2024\n\n\n\nCLICommandsnpmnpmjavascript package managerSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisVersionDescriptionImportantIntroductionDependenciesDirectoriesDeveloper UsageConfigurationContributionsBugsFeature RequestsSee AlsoSynopsis
npm
Note: This command is unaware of workspaces.
Version
11.3.0
Description
npm is the package manager for the Node JavaScript platform. It puts modules in place so that node can find them, and manages dependency conflicts intelligently.
It is extremely configurable to support a variety of use cases. Most commonly, you use it to publish, discover, install, and develop node programs.
Run npm help to get a list of available commands.
Important
npm comes preconfigured to use npm's public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to terms of use available at https://docs.npmjs.com/policies/terms.
You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed by their terms of use.
Introduction
You probably got npm because you want to install stuff.
The very first thing you will most likely want to run in any node program is npm install to install its dependencies.
You can also run npm install blerg to install the latest version of "blerg". Check out npm install for more info. It can do a lot of stuff.
Use the npm search command to show everything that's available in the public registry. Use npm ls to show everything you've installed.
Dependencies
If a package lists a dependency using a git URL, npm will install that dependency using the git command and will generate an error if it is not installed.
If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp for that task. For a Unix system, node-gyp needs Python, make and a buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit the node-gyp repository and the node-gyp Wiki.
Directories
See folders to learn about where npm puts stuff.
In particular, npm has two modes of operation:

local mode: npm installs packages into the current project directory, which defaults to the current working directory. Packages install to ./node_modules, and bins to ./node_modules/.bin.
global mode: npm installs packages into the install prefix at $npm_config_prefix/lib/node_modules and bins to $npm_config_prefix/bin.

Local mode is the default. Use -g or --global on any command to run in global mode instead.
Developer Usage
If you're using npm to develop and publish your code, check out the following help topics:

json: Make a package.json file. See package.json.
link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change. Use npm link to do this.
install: It's a good idea to install things if you don't need the symbolic link. Especially, installing other peoples code from the registry is done via npm install
adduser: Create an account or log in. When you do this, npm will store credentials in the user config file.
publish: Use the npm publish command to upload your code to the registry.

Configuration
npm is extremely configurable. It reads its configuration options from 5 places.

Command line switches: Set a config with --key val. All keys take a value, even if they are booleans (the config parser doesn't know what the options are at the time of parsing). If you do not provide a value (--key) then the option is set to boolean true.
Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_. For example, export npm_config_key=val.
User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs. If present, it is parsed. If the userconfig option is set in the cli or env, that file will be used instead.
Global Configs: The file found at ./etc/npmrc (relative to the global prefix will be parsed if it is found. See npm prefix for more info on the global prefix. If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead.
Defaults: npm's default configuration options are defined in lib/utils/config/definitions.js. These must not be changed.

See config for much much more information.
Contributions
Patches welcome!
If you would like to help, but don't know what to work on, read the contributing guidelines and check the issues list.
Bugs
When you find issues, please report them: https://github.com/npm/cli/issues
Please be sure to follow the template and bug reporting guidelines.
Feature Requests
Discuss new feature ideas on our discussion forum:

https://github.com/orgs/community/discussions/categories/npm

Or suggest formal RFC proposals:

https://github.com/npm/rfcs

See Also

npm help
package.json
npmrc
npm config
npm install
npm prefix
npm publish
Edit this page on GitHub3 contributorsleobalterericmuttalukekarrysLast edited by leobalter on May 30, 2024\n\n\n\nCLICommandsnpm accessnpm-accessSet access level on published packagesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionDetailsConfigurationjsonotpregistrySee AlsoSynopsis
npm access list packages [<user>|<scope>|<scope:team>] [<package>]npm access list collaborators [<package> [<user>]]npm access get status [<package>]npm access set status=public|private [<package>]npm access set mfa=none|publish|automation [<package>]npm access grant <read-only|read-write> <scope:team> [<package>]npm access revoke <scope:team> [<package>]
Note: This command is unaware of workspaces.
Description
Used to set access controls on private packages.
For all of the subcommands, npm access will perform actions on the packages in the current working directory if no package name is passed to the subcommand.


public / restricted (deprecated): Set a package to be either publicly accessible or restricted.


grant / revoke (deprecated): Add or remove the ability of users and teams to have read-only or read-write access to a package.


2fa-required / 2fa-not-required (deprecated): Configure whether a package requires that anyone publishing it have two-factor authentication enabled on their account.


ls-packages (deprecated): Show all of the packages a user or a team is able to access, along with the access level, except for read-only public packages (it won't print the whole registry listing)


ls-collaborators (deprecated): Show all of the access privileges for a package. Will only show permissions for packages to which you have at least read access. If <user> is passed in, the list is filtered only to teams that user happens to belong to.


edit (not implemented)


Details
npm access always operates directly on the current registry, configurable from the command line using --registry=<registry url>.
Unscoped packages are always public.
Scoped packages default to restricted, but you can either publish them as public using npm publish --access=public, or set their access as public using npm access public after the initial publish.
You must have privileges to set the access of a package:

You are an owner of an unscoped or scoped package.
You are a member of the team that owns a scope.
You have been given read-write privileges for a package, either as a member of a team or directly as an owner.

If you have two-factor authentication enabled then you'll be prompted to provide a second factor, or may use the --otp=... option to specify it on the command line.
If your account is not paid, then attempts to publish scoped packages will fail with an HTTP 402 status code (logically enough), unless you use --access=public.
Management of teams and team memberships is done with the npm team command.
Configuration
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
See Also

libnpmaccess
npm team
npm publish
npm config
npm registry
Edit this page on GitHub2 contributorsMylesBorinslukekarrysLast edited by MylesBorins on February 7, 2023\n\n\n\nCLICommandsnpm addusernpm-adduserAdd a registry user accountSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationregistryscopeauth-typeSee AlsoSynopsis
npm adduser
alias: add-user
Note: This command is unaware of workspaces.
Description
Create a new user in the specified registry, and save the credentials to the .npmrc file. If no registry is specified, the default registry will be used (see registry).
When using legacy for your auth-type, the username, password, and email are read in from prompts.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
scope

Default: the scope of the current project, if any, or ""
Type: String

Associate an operation with a scope for a scoped registry.
Useful when logging in to or out of a private registry:
# log in, linking the scope to the custom registrynpm login --scope=@mycorp --registry=https://registry.mycorp.com
# log out, removing the link and the auth tokennpm logout --scope=@mycorp
This will cause @mycorp to be mapped to the registry for future installation of packages specified according to the pattern @mycorp/package.
This will also cause npm init to create a scoped package.
# accept all defaults, and create a package named "@foo/whatever",# instead of just named "whatever"npm init --scope=@foo --yes
auth-type

Default: "web"
Type: "legacy" or "web"

What authentication strategy to use with login. Note that if an otp config is given, this value will always be set to legacy.
See Also

npm registry
npm config
npmrc
npm owner
npm whoami
npm token
npm profile
Edit this page on GitHub2 contributorsLiangYingClukekarrysLast edited by LiangYingC on April 14, 2025\n\n\n\nCLICommandsnpm auditnpm-auditRun a security auditSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionPackage lockAudit SignaturesAudit EndpointsBulk Advisory EndpointQuick Audit EndpointScrubbingCalculating Meta-Vulnerabilities and RemediationsExit CodeExamplesConfigurationaudit-leveldry-runforcejsonpackage-lock-onlypackage-lockomitincludeforeground-scriptsignore-scriptsworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm audit [fix|signatures]
Description
The audit command submits a description of the dependencies configured in your project to your default registry and asks for a report of known vulnerabilities. If any vulnerabilities are found, then the impact and appropriate remediation will be calculated. If the fix argument is provided, then remediations will be applied to the package tree.
The command will exit with a 0 exit code if no vulnerabilities were found.
Note that some vulnerabilities cannot be fixed automatically and will require manual intervention or review. Also note that since npm audit fix runs a full-fledged npm install under the hood, all configs that apply to the installer will also apply to npm install -- so things like npm audit fix --package-lock-only will work as expected.
By default, the audit command will exit with a non-zero code if any vulnerability is found. It may be useful in CI environments to include the --audit-level parameter to specify the minimum vulnerability level that will cause the command to fail. This option does not filter the report output, it simply changes the command's failure threshold.
Package lock
By default npm requires a package-lock or shrinkwrap in order to run the audit. You can bypass the package lock with --no-package-lock but be aware the results may be different with every run, since npm will re-build the dependency tree each time.
Audit Signatures
To ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI.
Registry signatures can be verified using the following audit command:
$ npm audit signatures
The audit signatures command will also verify the provenance attestations of downloaded packages. Because provenance attestations are such a new feature, security features may be added to (or changed in) the attestation format over time. To ensure that you're always able to verify attestation signatures check that you're running the latest version of the npm CLI. Please note this often means updating npm beyond the version that ships with Node.js.
The npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:

Signatures are provided in the package's packument in each published version within the dist object:

"dist":{  "..omitted..": "..omitted..",  "signatures": [{    "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",    "sig": "a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809..."  }]}
See this example of a signed package from the public npm registry.
The sig is generated using the following template: ${package.name}@${package.version}:${package.dist.integrity} and the keyid has to match one of the public signing keys below.

Public signing keys are provided at registry-host.tld/-/npm/v1/keys in the following format:

{  "keys": [{    "expires": null,    "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",    "keytype": "ecdsa-sha2-nistp256",    "scheme": "ecdsa-sha2-nistp256",    "key": "{{B64_PUBLIC_KEY}}"  }]}
Keys response:

expires: null or a simplified extended ISO 8601 format: YYYY-MM-DDTHH:mm:ss.sssZ
keydid: sha256 fingerprint of the public key
keytype: only ecdsa-sha2-nistp256 is currently supported by the npm CLI
scheme: only ecdsa-sha2-nistp256 is currently supported by the npm CLI
key: base64 encoded public key

See this example key's response from the public npm registry.
Audit Endpoints
There are two audit endpoints that npm may use to fetch vulnerability information: the Bulk Advisory endpoint and the Quick Audit endpoint.
Bulk Advisory Endpoint
As of version 7, npm uses the much faster Bulk Advisory endpoint to optimize the speed of calculating audit results.
npm will generate a JSON payload with the name and list of versions of each package in the tree, and POST it to the default configured registry at the path /-/npm/v1/security/advisories/bulk.
Any packages in the tree that do not have a version field in their package.json file will be ignored. If any --omit options are specified (either via the --omit config, or one of the shorthands such as --production, --only=dev, and so on), then packages will be omitted from the submitted payload as appropriate.
If the registry responds with an error, or with an invalid response, then npm will attempt to load advisory data from the Quick Audit endpoint.
The expected result will contain a set of advisory objects for each dependency that matches the advisory range. Each advisory object contains a name, url, id, severity, vulnerable_versions, and title.
npm then uses these advisory objects to calculate vulnerabilities and meta-vulnerabilities of the dependencies within the tree.
Quick Audit Endpoint
If the Bulk Advisory endpoint returns an error, or invalid data, npm will attempt to load advisory data from the Quick Audit endpoint, which is considerably slower in most cases.
The full package tree as found in package-lock.json is submitted, along with the following pieces of additional metadata:

npm_version
node_version
platform
arch
node_env

All packages in the tree are submitted to the Quick Audit endpoint. Omitted dependency types are skipped when generating the report.
Scrubbing
Out of an abundance of caution, npm versions 5 and 6 would "scrub" any packages from the submitted report if their name contained a / character, so as to avoid leaking the names of potentially private packages or git URLs.
However, in practice, this resulted in audits often failing to properly detect meta-vulnerabilities, because the tree would appear to be invalid due to missing dependencies, and prevented the detection of vulnerabilities in package trees that used git dependencies or private modules.
This scrubbing has been removed from npm as of version 7.
Calculating Meta-Vulnerabilities and Remediations
npm uses the @npmcli/metavuln-calculator module to turn a set of security advisories into a set of "vulnerability" objects. A "meta-vulnerability" is a dependency that is vulnerable by virtue of dependence on vulnerable versions of a vulnerable package.
For example, if the package foo is vulnerable in the range >=1.0.2 <2.0.0, and the package bar depends on foo@^1.1.0, then that version of bar can only be installed by installing a vulnerable version of foo. In this case, bar is a "metavulnerability".
Once metavulnerabilities for a given package are calculated, they are cached in the ~/.npm folder and only re-evaluated if the advisory range changes, or a new version of the package is published (in which case, the new version is checked for metavulnerable status as well).
If the chain of metavulnerabilities extends all the way to the root project, and it cannot be updated without changing its dependency ranges, then npm audit fix will require the --force option to apply the remediation. If remediations do not require changes to the dependency ranges, then all vulnerable packages will be updated to a version that does not have an advisory or metavulnerability posted against it.
Exit Code
The npm audit command will exit with a 0 exit code if no vulnerabilities were found. The npm audit fix command will exit with 0 exit code if no vulnerabilities are found or if the remediation is able to successfully fix all vulnerabilities.
If vulnerabilities were found the exit code will depend on the audit-level config.
Examples
Scan your project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies:
$ npm audit fix
Run audit fix without modifying node_modules, but still updating the pkglock:
$ npm audit fix --package-lock-only
Skip updating devDependencies:
$ npm audit fix --only=prod
Have audit fix install SemVer-major updates to toplevel dependencies, not just SemVer-compatible ones:
$ npm audit fix --force
Do a dry run to get an idea of what audit fix will do, and also output install information in JSON format:
$ npm audit fix --dry-run --json
Scan your project for vulnerabilities and just show the details, without fixing anything:
$ npm audit
Get the detailed audit report in JSON format:
$ npm audit --json
Fail an audit only if the results include a vulnerability with a level of moderate or higher:
$ npm audit --audit-level=moderate
Configuration
audit-level

Default: null
Type: null, "info", "low", "moderate", "high", "critical", or "none"

The minimum level of vulnerability for npm audit to exit with a non-zero exit code.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
force

Default: false
Type: Boolean

Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

Allow clobbering non-npm files in global installs.
Allow the npm version command to work on an unclean git repository.
Allow deleting the cache folder with npm cache clean.
Allow installing packages that have an engines declaration requiring a different version of npm.
Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict is enabled.
Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).
Allow unpublishing all versions of a published package.
Allow conflicting peerDependencies to be installed in the root project.
Implicitly set --yes during npm init.
Allow clobbering existing values in npm pkg
Allow unpublishing of entire packages (not just a single version).

If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
package-lock-only

Default: false
Type: Boolean

If set to true, the current operation will only use the package-lock.json, ignoring node_modules.
For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.
For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.
package-lock

Default: true
Type: Boolean

If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

npm install
config
Edit this page on GitHub5 contributorsemmanuel-ferdmandavidlj95bdehamerlukekarryswraithgarLast edited by emmanuel-ferdman on April 4, 2024\n\n\n\nCLICommandsnpm bugsnpm-bugsReport bugs for a package in a web browserSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationbrowserregistryworkspaceworkspacesinclude-workspace-rootSee AlsoSynopsis
npm bugs [<pkgname> [<pkgname> ...]]
alias: issues
Description
This command tries to guess at the likely location of a package's bug tracker URL or the mailto URL of the support email, and then tries to open it using the --browser config param. If no package name is provided, it will search for a package.json in the current folder and use the name property.
Configuration
browser

Default: OS X: "open", Windows: "start", Others: "xdg-open"
Type: null, Boolean, or String

The browser that is called by npm commands to open websites.
Set to false to suppress browser behavior and instead print urls to terminal.
Set to true to use default system URL opener.
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
See Also

npm docs
npm view
npm publish
npm registry
npm config
npmrc
package.json
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm cachenpm-cacheManipulates packages cacheSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionnpm cachenpm cache npxDetailsA note about the cache's designConfigurationcacheSee AlsoSynopsis
npm cache add <package-spec>npm cache clean [<key>]npm cache ls [<name>@<version>]npm cache verifynpm cache npx lsnpm cache npx rm [<key>...]npm cache npx info <key>...
Note: This command is unaware of workspaces.
Description
Used to add, list, or clean the npm cache folder. Also used to view info about entries in the npm exec (aka npx) cache folder.
npm cache


add: Add the specified packages to the local cache. This command is primarily intended to be used internally by npm, but it can provide a way to add data to the local installation cache explicitly.


clean: Delete a single entry or all entries out of the cache folder. Note that this is typically unnecessary, as npm's cache is self-healing and resistant to data corruption issues.


ls: List given entries or all entries in the local cache.


verify: Verify the contents of the cache folder, garbage collecting any unneeded data, and verifying the integrity of the cache index and all cached data.


npm cache npx


ls: List all entries in the npx cache.


rm: Remove given entries or all entries from the npx cache.


info: Get detailed information about given entries in the npx cache.


Details
npm stores cache data in an opaque directory within the configured cache, named _cacache. This directory is a cacache-based content-addressable cache that stores all http request data as well as other package-related data. This directory is primarily accessed through pacote, the library responsible for all package fetching as of npm@5.
All data that passes through the cache is fully verified for integrity on both insertion and extraction. Cache corruption will either trigger an error, or signal to pacote that the data must be refetched, which it will do automatically. For this reason, it should never be necessary to clear the cache for any reason other than reclaiming disk space, thus why clean now requires --force to run.
There is currently no method exposed through npm to inspect or directly manage the contents of this cache. In order to access it, cacache must be used directly.
npm will not remove data by itself: the cache will grow as new packages are installed.
A note about the cache's design
The npm cache is strictly a cache: it should not be relied upon as a persistent and reliable data store for package data. npm makes no guarantee that a previously-cached piece of data will be available later, and will automatically delete corrupted contents. The primary guarantee that the cache makes is that, if it does return data, that data will be exactly the data that was inserted.
To run an offline verification of existing cache contents, use npm cache verify.
Configuration
cache

Default: Windows: %LocalAppData%\npm-cache, Posix: ~/.npm
Type: Path

The location of npm's cache directory.
See Also

package spec
npm folders
npm config
npmrc
npm install
npm publish
npm pack
npm exec
https://npm.im/cacache
https://npm.im/pacote
https://npm.im/@npmcli/arborist
https://npm.im/make-fetch-happen
Edit this page on GitHub2 contributorswraithgarlukekarrysLast edited by wraithgar on January 24, 2025\n\n\n\nCLICommandsnpm cinpm-ciClean install a projectSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionExampleConfigurationinstall-strategylegacy-bundlingglobal-styleomitincludestrict-peer-depsforeground-scriptsignore-scriptsauditbin-linksfunddry-runworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm ci
aliases: clean-install, ic, install-clean, isntall-clean
Description
This command is similar to npm install, except it's meant to be used in automated environments such as test platforms, continuous integration, and deployment -- or any situation where you want to make sure you're doing a clean install of your dependencies.
The main differences between using npm install and npm ci are:

The project must have an existing package-lock.json or npm-shrinkwrap.json.
If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock.
npm ci can only install entire projects at a time: individual dependencies cannot be added with this command.
If a node_modules is already present, it will be automatically removed before npm ci begins its install.
It will never write to package.json or any of the package-locks: installs are essentially frozen.

NOTE: If you create your package-lock.json file by running npm install with flags that can affect the shape of your dependency tree, such as --legacy-peer-deps or --install-links, you must provide the same flags to npm ci or you are likely to encounter errors. An easy way to do this is to run, for example, npm config set legacy-peer-deps=true --location=project and commit the .npmrc file to your repo.
Example
Make sure you have a package-lock and an up-to-date install:
$ cd ./my/npm/project$ npm installadded 154 packages in 10s$ ls | grep package-lock
Run npm ci in that project
$ npm ciadded 154 packages in 5s
Configure Travis CI to build using npm ci instead of npm install:
# .travis.ymlinstall:- npm ci# keep the npm cache around to speed up installscache:  directories:  - "$HOME/.npm"
Configuration
install-strategy

Default: "hoisted"
Type: "hoisted", "nested", "shallow", or "linked"

Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
legacy-bundling

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=nested

Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets --install-strategy=nested.
global-style

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=shallow

Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies. Sets --install-strategy=shallow.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
strict-peer-deps

Default: false
Type: Boolean

If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.
By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.
When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
audit

Default: true
Type: Boolean

When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm audit for details on what is submitted.
bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
fund

Default: true
Type: Boolean

When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm fund for details.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

npm install
package-lock.json
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm completionnpm-completionTab Completion for npmSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionSee AlsoSynopsis
npm completion
Note: This command is unaware of workspaces.
Description
Enables tab-completion in all npm commands.
The synopsis above loads the completions into your current shell. Adding it to your ~/.bashrc or ~/.zshrc will make the completions available everywhere:
npm completion >> ~/.bashrcnpm completion >> ~/.zshrc
You may of course also pipe the output of npm completion to a file such as /usr/local/etc/bash_completion.d/npm or /etc/bash_completion.d/npm if you have a system that will read that file for you.
When COMP_CWORD, COMP_LINE, and COMP_POINT are defined in the environment, npm completion acts in "plumbing mode", and outputs completions based on the arguments.
See Also

npm developers
npm
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm confignpm-configManage the npm configuration filesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionSub-commandssetgetlistdeleteeditfixConfigurationjsonglobaleditorlocationlongSee AlsoSynopsis
npm config set <key>=<value> [<key>=<value> ...]npm config get [<key> [<key> ...]]npm config delete <key> [<key> ...]npm config list [--json]npm config editnpm config fix
alias: c
Note: This command is unaware of workspaces.
Description
npm gets its config settings from the command line, environment variables, npmrc files, and in some cases, the package.json file.
See npmrc for more information about the npmrc files.
See config for a more thorough explanation of the mechanisms involved, and a full list of config options available.
The npm config command can be used to update and edit the contents of the user and global npmrc files.
Sub-commands
Config supports the following sub-commands:
set
npm config set key=value [key=value...]npm set key=value [key=value...]
Sets each of the config keys to the value provided. Modifies the user configuration file unless location is passed.
If value is omitted, the key will be removed from your config file entirely.
Note: for backwards compatibility, npm config set key value is supported as an alias for npm config set key=value.
get
npm config get [key ...]npm get [key ...]
Echo the config value(s) to stdout.
If multiple keys are provided, then the values will be prefixed with the key names.
If no keys are provided, then this command behaves the same as npm config list.
list
npm config list
Show all the config settings. Use -l to also show defaults. Use --json to show the settings in json format.
delete
npm config delete key [key ...]
Deletes the specified keys from all configuration files.
edit
npm config edit
Opens the config file in an editor. Use the --global flag to edit the global config.
fix
npm config fix
Attempts to repair invalid configuration items. Usually this means attaching authentication config (i.e. _auth, _authToken) to the configured registry.
Configuration
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

editor

Default: The EDITOR or VISUAL environment variables, or '%SYSTEMROOT%\notepad.exe' on Windows, or 'vi' on Unix systems
Type: String

The command to run for npm edit and npm config edit.
location

Default: "user" unless --global is passed, which will also set this value to "global"
Type: "global", "user", or "project"

When passed to npm config this refers to which config file to use.
When set to "global" mode, packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

long

Default: false
Type: Boolean

Show extended information in ls, search, and help-search.
See Also

npm folders
npm config
package.json
npmrc
npm
Edit this page on GitHub3 contributorsDanKaplanSESwraithgarlukekarrysLast edited by DanKaplanSES on January 19, 2024\n\n\n\nCLICommandsnpm dedupenpm-dedupeReduce duplication in the package treeSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationinstall-strategylegacy-bundlingglobal-stylestrict-peer-depspackage-lockomitincludeignore-scriptsauditbin-linksfunddry-runworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm dedupe
alias: ddp
Description
Searches the local package tree and attempts to simplify the overall structure by moving dependencies further up the tree, where they can be more effectively shared by multiple dependent packages.
For example, consider this dependency graph:
a+-- b <-- depends on c@1.0.x|   `-- c@1.0.3`-- d <-- depends on c@~1.0.9    `-- c@1.0.10
In this case, npm dedupe will transform the tree to:
a+-- b+-- d`-- c@1.0.10
Because of the hierarchical nature of node's module lookup, b and d will both get their dependency met by the single c package at the root level of the tree.
In some cases, you may have a dependency graph like this:
a+-- b <-- depends on c@1.0.x+-- c@1.0.3`-- d <-- depends on c@1.x    `-- c@1.9.9
During the installation process, the c@1.0.3 dependency for b was placed in the root of the tree. Though d's dependency on c@1.x could have been satisfied by c@1.0.3, the newer c@1.9.0 dependency was used, because npm favors updates by default, even when doing so causes duplication.
Running npm dedupe will cause npm to note the duplication and re-evaluate, deleting the nested c module, because the one in the root is sufficient.
To prefer deduplication over novelty during the installation process, run npm install --prefer-dedupe or npm config set prefer-dedupe true.
Arguments are ignored. Dedupe always acts on the entire tree.
Note that this operation transforms the dependency tree, but will never result in new modules being installed.
Using npm find-dupes will run the command in --dry-run mode.
Note: npm dedupe will never update the semver values of direct dependencies in your project package.json, if you want to update values in package.json you can run: npm update --save instead.
Configuration
install-strategy

Default: "hoisted"
Type: "hoisted", "nested", "shallow", or "linked"

Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
legacy-bundling

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=nested

Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets --install-strategy=nested.
global-style

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=shallow

Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies. Sets --install-strategy=shallow.
strict-peer-deps

Default: false
Type: Boolean

If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.
By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.
When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.
package-lock

Default: true
Type: Boolean

If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
audit

Default: true
Type: Boolean

When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm audit for details on what is submitted.
bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
fund

Default: true
Type: Boolean

When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm fund for details.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

npm find-dupes
npm ls
npm update
npm install
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm deprecatenpm-deprecateDeprecate a version of a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationregistryotpdry-runSee AlsoSynopsis
npm deprecate <package-spec> <message>
Note: This command is unaware of workspaces.
Description
This command will update the npm registry entry for a package, providing a deprecation warning to all who attempt to install it.
It works on version ranges as well as specific versions, so you can do something like this:
npm deprecate my-thing@"< 0.2.3" "critical bug fixed in v0.2.3"
SemVer ranges passed to this command are interpreted such that they do include prerelease versions. For example:
npm deprecate my-thing@1.x "1.x is no longer supported"
In this case, a version my-thing@1.0.0-beta.0 will also be deprecated.
You must be the package owner to deprecate something. See the owner and adduser help topics.
To un-deprecate a package, specify an empty string ("") for the message argument. Note that you must use double quotes with no space between them to format an empty string.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
See Also

package spec
npm publish
npm registry
npm owner
npm adduser
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm diffnpm-diffThe registry diff commandSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionFiltering filesConfigurationdiffdiff-name-onlydiff-unifieddiff-ignore-all-spacediff-no-prefixdiff-src-prefixdiff-dst-prefixdiff-textglobaltagworkspaceworkspacesinclude-workspace-rootSee AlsoSynopsis
npm diff [...<paths>]
Description
Similar to its git diff counterpart, this command will print diff patches of files for packages published to the npm registry.


npm diff --diff=<spec-a> --diff=<spec-b>
Compares two package versions using their registry specifiers, e.g: npm diff --diff=pkg@1.0.0 --diff=pkg@^2.0.0. It's also possible to compare across forks of any package, e.g: npm diff --diff=pkg@1.0.0 --diff=pkg-fork@1.0.0.
Any valid spec can be used, so that it's also possible to compare directories or git repositories, e.g: npm diff --diff=pkg@latest --diff=./packages/pkg
Here's an example comparing two different versions of a package named abbrev from the registry:
npm diff --diff=abbrev@1.1.0 --diff=abbrev@1.1.1
On success, output looks like:
diff --git a/package.json b/package.jsonindex v1.1.0..v1.1.1 100644--- a/package.json+++ b/package.json@@ -1,6 +1,6 @@ {   "name": "abbrev",-  "version": "1.1.0",+  "version": "1.1.1",   "description": "Like ruby's abbrev module, but in js",   "author": "Isaac Z. Schlueter <i@izs.me>",   "main": "abbrev.js",
Given the flexible nature of npm specs, you can also target local directories or git repos just like when using npm install:
npm diff --diff=https://github.com/npm/libnpmdiff --diff=./local-path
In the example above we can compare the contents from the package installed from the git repo at github.com/npm/libnpmdiff with the contents of the ./local-path that contains a valid package, such as a modified copy of the original.


npm diff (in a package directory, no arguments):
If the package is published to the registry, npm diff will fetch the tarball version tagged as latest (this value can be configured using the tag option) and proceed to compare the contents of files present in that tarball, with the current files in your local file system.
This workflow provides a handy way for package authors to see what package-tracked files have been changed in comparison with the latest published version of that package.


npm diff --diff=<pkg-name> (in a package directory):
When using a single package name (with no version or tag specifier) as an argument, npm diff will work in a similar way to npm-outdated and reach for the registry to figure out what current published version of the package named <pkg-name> will satisfy its dependent declared semver-range. Once that specific version is known npm diff will print diff patches comparing the current version of <pkg-name> found in the local file system with that specific version returned by the registry.
Given a package named abbrev that is currently installed:
npm diff --diff=abbrev
That will request from the registry its most up to date version and will print a diff output comparing the currently installed version to this newer one if the version numbers are not the same.


npm diff --diff=<spec-a> (in a package directory):
Similar to using only a single package name, it's also possible to declare a full registry specifier version if you wish to compare the local version of an installed package with the specific version/tag/semver-range provided in <spec-a>.
An example: assuming pkg@1.0.0 is installed in the current node_modules folder, running:
npm diff --diff=pkg@2.0.0
It will effectively be an alias to npm diff --diff=pkg@1.0.0 --diff=pkg@2.0.0.


npm diff --diff=<semver-a> [--diff=<semver-b>] (in a package directory):
Using npm diff along with semver-valid version numbers is a shorthand to compare different versions of the current package.
It needs to be run from a package directory, such that for a package named pkg running npm diff --diff=1.0.0 --diff=1.0.1 is the same as running npm diff --diff=pkg@1.0.0 --diff=pkg@1.0.1.
If only a single argument <version-a> is provided, then the current local file system is going to be compared against that version.
Here's an example comparing two specific versions (published to the configured registry) of the current project directory:
npm diff --diff=1.0.0 --diff=1.1.0


Note that tag names are not valid --diff argument values, if you wish to compare to a published tag, you must use the pkg@tagname syntax.
Filtering files
It's possible to also specify positional arguments using file names or globs pattern matching in order to limit the result of diff patches to only a subset of files for a given package, e.g:
npm diff --diff=pkg@2 ./lib/ CHANGELOG.md
In the example above the diff output is only going to print contents of files located within the folder ./lib/ and changed lines of code within the CHANGELOG.md file.
Configuration
diff

Default:
Type: String (can be set multiple times)

Define arguments to compare in npm diff.
diff-name-only

Default: false
Type: Boolean

Prints only filenames when using npm diff.
diff-unified

Default: 3
Type: Number

The number of lines of context to print in npm diff.
diff-ignore-all-space

Default: false
Type: Boolean

Ignore whitespace when comparing lines in npm diff.
diff-no-prefix

Default: false
Type: Boolean

Do not show any source or destination prefix in npm diff output.
Note: this causes npm diff to ignore the --diff-src-prefix and --diff-dst-prefix configs.
diff-src-prefix

Default: "a/"
Type: String

Source prefix to be used in npm diff output.
diff-dst-prefix

Default: "b/"
Type: String

Destination prefix to be used in npm diff output.
diff-text

Default: false
Type: Boolean

Treat all files as text in npm diff.
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

tag

Default: "latest"
Type: String

If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.
It is the tag added to the package@version specified in the npm dist-tag add command, if no explicit tag is given.
When used by the npm diff command, this is the tag used to fetch the tarball that will be compared with the local files by default.
If used in the npm publish command, this is the tag that will be added to the package submitted to the registry.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
See Also

npm outdated
npm install
npm config
npm registry
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm dist-tagnpm-dist-tagModify package distribution tagsSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionPurposeCaveatsConfigurationworkspaceworkspacesinclude-workspace-rootSee AlsoSynopsis
npm dist-tag add <package-spec (with version)> [<tag>]npm dist-tag rm <package-spec> <tag>npm dist-tag ls [<package-spec>]
alias: dist-tags
Description
Add, remove, and enumerate distribution tags on a package:


add: Tags the specified version of the package with the specified tag, or the --tag config if not specified. If you have two-factor authentication on auth-and-writes then you’ll need to include a one-time password on the command line with --otp <one-time password>, or go through a second factor flow based on your authtype.


rm: Clear a tag that is no longer in use from the package. If you have two-factor authentication on auth-and-writes then you’ll need to include a one-time password on the command line with --otp <one-time password>, or go through a second factor flow based on your authtype


ls: Show all of the dist-tags for a package, defaulting to the package in the current prefix. This is the default action if none is specified.


A tag can be used when installing packages as a reference to a version instead of using a specific version number:
npm install <name>@<tag>
When installing dependencies, a preferred tagged version may be specified:
npm install --tag <tag>
(This also applies to any other commands that resolve and install dependencies, such as npm dedupe, npm update, and npm audit fix.)
Publishing a package sets the latest tag to the published version unless the --tag option is used. For example, npm publish --tag=beta.
By default, npm install <pkg> (without any @<version> or @<tag> specifier) installs the latest tag.
Purpose
Tags can be used to provide an alias instead of version numbers.
For example, a project might choose to have multiple streams of development and use a different tag for each stream, e.g., stable, beta, dev, canary.
By default, the latest tag is used by npm to identify the current version of a package, and npm install <pkg> (without any @<version> or @<tag> specifier) installs the latest tag. Typically, projects only use the latest tag for stable release versions, and use other tags for unstable versions such as prereleases.
The next tag is used by some projects to identify the upcoming version.
Other than latest, no tag has any special significance to npm itself.
Caveats
This command used to be known as npm tag, which only created new tags, and so had a different syntax.
Tags must share a namespace with version numbers, because they are specified in the same slot: npm install <pkg>@<version> vs npm install <pkg>@<tag>.
Tags that can be interpreted as valid semver ranges will be rejected. For example, v1.4 cannot be used as a tag, because it is interpreted by semver as >=1.4.0 <1.5.0. See https://github.com/npm/npm/issues/6082.
The simplest way to avoid semver problems with tags is to use tags that do not begin with a number or the letter v.
Configuration
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
See Also

package spec
npm publish
npm install
npm dedupe
npm registry
npm config
npmrc
Edit this page on GitHub2 contributorsMylesBorinslukekarrysLast edited by MylesBorins on February 7, 2023\n\n\n\nCLICommandsnpm docsnpm-docsOpen documentation for a package in a web browserSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationbrowserregistryworkspaceworkspacesinclude-workspace-rootSee AlsoSynopsis
npm docs [<pkgname> [<pkgname> ...]]
alias: home
Description
This command tries to guess at the likely location of a package's documentation URL, and then tries to open it using the --browser config param. You can pass multiple package names at once. If no package name is provided, it will search for a package.json in the current folder and use the name property.
Configuration
browser

Default: OS X: "open", Windows: "start", Others: "xdg-open"
Type: null, Boolean, or String

The browser that is called by npm commands to open websites.
Set to false to suppress browser behavior and instead print urls to terminal.
Set to true to use default system URL opener.
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
See Also

npm view
npm publish
npm registry
npm config
npmrc
package.json
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm doctornpm-doctorCheck the health of your npm environmentSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConnecting to the registryChecking npm versionChecking node versionChecking configured npm registryChecking for git executable in PATHPermissions checksValidate the checksums of cached packagesConfigurationregistrySee AlsoSynopsis
npm doctor [connection] [registry] [versions] [environment] [permissions] [cache]
Note: This command is unaware of workspaces.
Description
npm doctor runs a set of checks to ensure that your npm installation has what it needs to manage your JavaScript packages. npm is mostly a standalone tool, but it does have some basic requirements that must be met:

Node.js and git must be executable by npm.
The primary npm registry, registry.npmjs.com, or another service that uses the registry API, is available.
The directories that npm uses, node_modules (both locally and globally), exist and can be written by the current user.
The npm cache exists, and the package tarballs within it aren't corrupt.

Without all of these working properly, npm may not work properly. Many issues are often attributable to things that are outside npm's code base, so npm doctor confirms that the npm installation is in a good state.
Also, in addition to this, there are also very many issue reports due to using old versions of npm. Since npm is constantly improving, running npm@latest is better than an old version.
npm doctor verifies the following items in your environment, and if there are any recommended changes, it will display them. By default npm runs all of these checks. You can limit what checks are ran by specifying them as extra arguments.
Connecting to the registry
By default, npm installs from the primary npm registry, registry.npmjs.org. npm doctor hits a special connection testing endpoint within the registry. This can also be checked with npm ping. If this check fails, you may be using a proxy that needs to be configured, or may need to talk to your IT staff to get access over HTTPS to registry.npmjs.org.
This check is done against whichever registry you've configured (you can see what that is by running npm config get registry), and if you're using a private registry that doesn't support the /whoami endpoint supported by the primary registry, this check may fail.
Checking npm version
While Node.js may come bundled with a particular version of npm, it's the policy of the CLI team that we recommend all users run npm@latest if they can. As the CLI is maintained by a small team of contributors, there are only resources for a single line of development, so npm's own long-term support releases typically only receive critical security and regression fixes. The team believes that the latest tested version of npm is almost always likely to be the most functional and defect-free version of npm.
Checking node version
For most users, in most circumstances, the best version of Node will be the latest long-term support (LTS) release. Those of you who want access to new ECMAscript features or bleeding-edge changes to Node's standard library may be running a newer version, and some may be required to run an older version of Node because of enterprise change control policies. That's OK! But in general, the npm team recommends that most users run Node.js LTS.
Checking configured npm registry
You may be installing from private package registries for your project or company. That's great! Others may be following tutorials or StackOverflow questions in an effort to troubleshoot problems you may be having. Sometimes, this may entail changing the registry you're pointing at. This part of npm doctor just lets you, and maybe whoever's helping you with support, know that you're not using the default registry.
Checking for git executable in PATH
While it's documented in the README, it may not be obvious that npm needs Git installed to do many of the things that it does. Also, in some cases – especially on Windows – you may have Git set up in such a way that it's not accessible via your PATH so that npm can find it. This check ensures that Git is available.
Permissions checks

Your cache must be readable and writable by the user running npm.
Global package binaries must be writable by the user running npm.
Your local node_modules path, if you're running npm doctor with a project directory, must be readable and writable by the user running npm.

Validate the checksums of cached packages
When an npm package is published, the publishing process generates a checksum that npm uses at install time to verify that the package didn't get corrupted in transit. npm doctor uses these checksums to validate the package tarballs in your local cache (you can see where that cache is located with npm config get cache). In the event that there are corrupt packages in your cache, you should probably run npm cache clean -f and reset the cache.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
See Also

npm bugs
npm help
npm ping
Edit this page on GitHub3 contributorswraithgarsiemhesdalukekarrysLast edited by wraithgar on April 16, 2024\n\n\n\nCLICommandsnpm editnpm-editEdit an installed packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationeditorSee AlsoSynopsis
npm edit <pkg>[/<subpkg>...]
Note: This command is unaware of workspaces.
Description
Selects a dependency in the current project and opens the package folder in the default editor (or whatever you've configured as the npm editor config -- see npm-config.)
After it has been edited, the package is rebuilt so as to pick up any changes in compiled packages.
For instance, you can do npm install connect to install connect into your package, and then npm edit connect to make a few changes to your locally installed copy.
Configuration
editor

Default: The EDITOR or VISUAL environment variables, or '%SYSTEMROOT%\notepad.exe' on Windows, or 'vi' on Unix systems
Type: String

The command to run for npm edit and npm config edit.
See Also

npm folders
npm explore
npm install
npm config
npmrc
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm execnpm-execRun a command from a local or remote npm packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionnpx vs npm execConfigurationpackagecallworkspaceworkspacesinclude-workspace-rootExamplesWorkspaces supportFiltering workspacesCompatibility with Older npx VersionsA note on cachingprefer-onlineprefer-offlineofflineworkspaceworkspacesSee AlsoSynopsis
npm exec -- <pkg>[@<version>] [args...]npm exec --package=<pkg>[@<version>] -- <cmd> [args...]npm exec -c '<cmd> [args...]'npm exec --package=foo -c '<cmd> [args...]'
alias: x
Description
This command allows you to run an arbitrary command from an npm package (either one installed locally, or fetched remotely), in a similar context as running it via npm run.
Run without positional arguments or --call, this allows you to interactively run commands in the same sort of shell environment that package.json scripts are run. Interactive mode is not supported in CI environments when standard input is a TTY, to prevent hangs.
Whatever packages are specified by the --package option will be provided in the PATH of the executed command, along with any locally installed package executables. The --package option may be specified multiple times, to execute the supplied command in an environment where all specified packages are available.
If any requested packages are not present in the local project dependencies, then a prompt is printed, which can be suppressed by providing either --yes or --no. When standard input is not a TTY or a CI environment is detected, --yes is assumed. The requested packages are installed to a folder in the npm cache, which is added to the PATH environment variable in the executed process.
Package names provided without a specifier will be matched with whatever version exists in the local project. Package names with a specifier will only be considered a match if they have the exact same name and version as the local dependency.
If no -c or --call option is provided, then the positional arguments are used to generate the command string. If no --package options are provided, then npm will attempt to determine the executable name from the package specifier provided as the first positional argument according to the following heuristic:

If the package has a single entry in its bin field in package.json, or if all entries are aliases of the same command, then that command will be used.
If the package has multiple bin entries, and one of them matches the unscoped portion of the name field, then that command will be used.
If this does not result in exactly one option (either because there are no bin entries, or none of them match the name of the package), then npm exec exits with an error.

To run a binary other than the named binary, specify one or more --package options, which will prevent npm from inferring the package from the first command argument.
npx vs npm exec
When run via the npx binary, all flags and options must be set prior to any positional arguments. When run via npm exec, a double-hyphen -- flag can be used to suppress npm's parsing of switches and options that should be sent to the executed command.
For example:
$ npx foo@latest bar --package=@npmcli/foo
In this case, npm will resolve the foo package name, and run the following command:
$ foo bar --package=@npmcli/foo
Since the --package option comes after the positional arguments, it is treated as an argument to the executed command.
In contrast, due to npm's argument parsing logic, running this command is different:
$ npm exec foo@latest bar --package=@npmcli/foo
In this case, npm will parse the --package option first, resolving the @npmcli/foo package. Then, it will execute the following command in that context:
$ foo@latest bar
The double-hyphen character is recommended to explicitly tell npm to stop parsing command line options and switches. The following command would thus be equivalent to the npx command above:
$ npm exec -- foo@latest bar --package=@npmcli/foo
Configuration
package

Default:
Type: String (can be set multiple times)

The package or packages to install for npm exec
call

Default: ""
Type: String

Optional companion option for npm exec, npx that allows for specifying a custom command to be run along with the installed packages.
npm exec --package yo --package generator-node --call "yo node"
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
Examples
Run the version of tap in the local dependencies, with the provided arguments:
$ npm exec -- tap --bail test/foo.js$ npx tap --bail test/foo.js
Run a command other than the command whose name matches the package name by specifying a --package option:
$ npm exec --package=foo -- bar --bar-argument# ~ or ~$ npx --package=foo bar --bar-argument
Run an arbitrary shell script, in the context of the current project:
$ npm x -c 'eslint && say "hooray, lint passed"'$ npx -c 'eslint && say "hooray, lint passed"'
Workspaces support
You may use the workspace or workspaces configs in order to run an arbitrary command from an npm package (either one installed locally, or fetched remotely) in the context of the specified workspaces. If no positional argument or --call option is provided, it will open an interactive subshell in the context of each of these configured workspaces one at a time.
Given a project with configured workspaces, e.g:
.+-- package.json`-- packages   +-- a   |   `-- package.json   +-- b   |   `-- package.json   `-- c       `-- package.json
Assuming the workspace configuration is properly set up at the root level package.json file. e.g:
{    "workspaces": [ "./packages/*" ]}
You can execute an arbitrary command from a package in the context of each of the configured workspaces when using the workspaces config options, in this example we're using eslint to lint any js file found within each workspace folder:
npm exec --ws -- eslint ./*.js
Filtering workspaces
It's also possible to execute a command in a single workspace using the workspace config along with a name or directory path:
npm exec --workspace=a -- eslint ./*.js
The workspace config can also be specified multiple times in order to run a specific script in the context of multiple workspaces. When defining values for the workspace config in the command line, it also possible to use -w as a shorthand, e.g:
npm exec -w a -w b -- eslint ./*.js
This last command will run the eslint command in both ./packages/a and ./packages/b folders.
Compatibility with Older npx Versions
The npx binary was rewritten in npm v7.0.0, and the standalone npx package deprecated at that time. npx uses the npm exec command instead of a separate argument parser and install process, with some affordances to maintain backwards compatibility with the arguments it accepted in previous versions.
This resulted in some shifts in its functionality:

Any npm config value may be provided.
To prevent security and user-experience problems from mistyping package names, npx prompts before installing anything. Suppress this prompt with the -y or --yes option.
The --no-install option is deprecated, and will be converted to --no.
Shell fallback functionality is removed, as it is not advisable.
The -p argument is a shorthand for --parseable in npm, but shorthand for --package in npx. This is maintained, but only for the npx executable.
The --ignore-existing option is removed. Locally installed bins are always present in the executed process PATH.
The --npm option is removed. npx will always use the npm it ships with.
The --node-arg and -n options are removed.
The --always-spawn option is redundant, and thus removed.
The --shell option is replaced with --script-shell, but maintained in the npx executable for backwards compatibility.

A note on caching
The npm cli utilizes its internal package cache when using the package name specified. You can use the following to change how and when the cli uses this cache. See npm cache for more on how the cache works.
prefer-online
Forces staleness checks for packages, making the cli look for updates immediately even if the package is already in the cache.
prefer-offline
Bypasses staleness checks for packages. Missing data will still be requested from the server. To force full offline mode, use offline.
offline
Forces full offline mode. Any packages not locally cached will result in an error.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result to selecting all of the nested workspaces)

This value is not exported to the environment for child processes.
workspaces

Alias: --ws
Type: Boolean
Default: false

Run scripts in the context of all configured workspaces for the current project.
See Also

npm run-script
npm scripts
npm test
npm start
npm restart
npm stop
npm config
npm workspaces
npx
Edit this page on GitHub2 contributorsstyflelukekarrysLast edited by styfle on November 30, 2022\n\n\n\nCLICommandsnpm explainnpm-explainExplain installed packagesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationjsonworkspaceSee AlsoSynopsis
npm explain <package-spec>
alias: why
Description
This command will print the chain of dependencies causing a given package to be installed in the current project.
If one or more package specs are provided, then only packages matching one of the specifiers will have their relationships explained.
The package spec can also refer to a folder within ./node_modules
For example, running npm explain glob within npm's source tree will show:
glob@7.1.6node_modules/glob  glob@"^7.1.4" from the root project
glob@7.1.1 devnode_modules/tacks/node_modules/glob  glob@"^7.0.5" from rimraf@2.6.2  node_modules/tacks/node_modules/rimraf    rimraf@"^2.6.2" from tacks@1.3.0    node_modules/tacks      dev tacks@"^1.3.0" from the root project
To explain just the package residing at a specific folder, pass that as the argument to the command. This can be useful when trying to figure out exactly why a given dependency is being duplicated to satisfy conflicting version requirements within the project.
$ npm explain node_modules/nyc/node_modules/find-upfind-up@3.0.0 devnode_modules/nyc/node_modules/find-up  find-up@"^3.0.0" from nyc@14.1.1  node_modules/nyc    nyc@"^14.1.1" from tap@14.10.8    node_modules/tap      dev tap@"^14.10.8" from the root project
Configuration
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
See Also

package spec
npm config
npmrc
npm folders
npm ls
npm install
npm link
npm prune
npm outdated
npm update
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm explorenpm-exploreBrowse an installed packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationshellSee AlsoSynopsis
npm explore <pkg> [ -- <command>]
Note: This command is unaware of workspaces.
Description
Spawn a subshell in the directory of the installed package specified.
If a command is specified, then it is run in the subshell, which then immediately terminates.
This is particularly handy in the case of git submodules in the node_modules folder:
npm explore some-dependency -- git pull origin master
Note that the package is not automatically rebuilt afterwards, so be sure to use npm rebuild <pkg> if you make any changes.
Configuration
shell

Default: SHELL environment variable, or "bash" on Posix, or "cmd.exe" on Windows
Type: String

The shell to run for the npm explore command.
See Also

npm folders
npm edit
npm rebuild
npm install
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm find-dupesnpm-find-dupesFind duplication in the package treeSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationinstall-strategylegacy-bundlingglobal-stylestrict-peer-depspackage-lockomitincludeignore-scriptsauditbin-linksfundworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm find-dupes
Description
Runs npm dedupe in --dry-run mode, making npm only output the duplications, without actually changing the package tree.
Configuration
install-strategy

Default: "hoisted"
Type: "hoisted", "nested", "shallow", or "linked"

Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
legacy-bundling

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=nested

Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets --install-strategy=nested.
global-style

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=shallow

Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies. Sets --install-strategy=shallow.
strict-peer-deps

Default: false
Type: Boolean

If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.
By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.
When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.
package-lock

Default: true
Type: Boolean

If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
audit

Default: true
Type: Boolean

When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm audit for details on what is submitted.
bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
fund

Default: true
Type: Boolean

When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm fund for details.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

npm dedupe
npm ls
npm update
npm install
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm fundnpm-fundRetrieve funding informationSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionExampleWorkspaces supportExample:ConfigurationjsonbrowserunicodeworkspacewhichSee AlsoSynopsis
npm fund [<package-spec>]
Description
This command retrieves information on how to fund the dependencies of a given project. If no package name is provided, it will list all dependencies that are looking for funding in a tree structure, listing the type of funding and the url to visit. If a package name is provided then it tries to open its funding url using the --browser config param; if there are multiple funding sources for the package, the user will be instructed to pass the --which option to disambiguate.
The list will avoid duplicated entries and will stack all packages that share the same url as a single entry. Thus, the list does not have the same shape of the output from npm ls.
Example
Workspaces support
It's possible to filter the results to only include a single workspace and its dependencies using the workspace config option.
Example:
Here's an example running npm fund in a project with a configured workspace a:
$ npm fundtest-workspaces-fund@1.0.0+-- https://example.com/a| | `-- a@1.0.0| `-- https://example.com/maintainer|     `-- foo@1.0.0+-- https://example.com/npmcli-funding|   `-- @npmcli/test-funding`-- https://example.com/org    `-- bar@2.0.0
And here is an example of the expected result when filtering only by a specific workspace a in the same project:
$ npm fund -w atest-workspaces-fund@1.0.0`-- https://example.com/a  | `-- a@1.0.0  `-- https://example.com/maintainer      `-- foo@2.0.0
Configuration
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
browser

Default: OS X: "open", Windows: "start", Others: "xdg-open"
Type: null, Boolean, or String

The browser that is called by npm commands to open websites.
Set to false to suppress browser behavior and instead print urls to terminal.
Set to true to use default system URL opener.
unicode

Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG environment variables.
Type: Boolean

When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
which

Default: null
Type: null or Number

If there are multiple funding sources, which 1-indexed source URL to open.
See Also

package spec
npm install
npm docs
npm ls
npm config
npm workspaces
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm helpnpm-helpGet help on npmSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationviewerSee AlsoSynopsis
npm help <term> [<terms..>]
alias: hlep
Note: This command is unaware of workspaces.
Description
If supplied a topic, then show the appropriate documentation page.
If the topic does not exist, or if multiple terms are provided, then npm will run the help-search command to find a match. Note that, if help-search finds a single subject, then it will run help on that topic, so unique matches are equivalent to specifying a topic name.
Configuration
viewer

Default: "man" on Posix, "browser" on Windows
Type: String

The program to use to view help content.
Set to "browser" to view html help content in the default web browser.
See Also

npm
npm folders
npm config
npmrc
package.json
npm help-search
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm help-searchnpm-help-searchSearch npm help documentationSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationlongSee AlsoSynopsis
npm help-search <text>
Note: This command is unaware of workspaces.
Description
This command will search the npm markdown documentation files for the terms provided, and then list the results, sorted by relevance.
If only one result is found, then it will show that help topic.
If the argument to npm help is not a known help topic, then it will call help-search. It is rarely if ever necessary to call this command directly.
Configuration
long

Default: false
Type: Boolean

Show extended information in ls, search, and help-search.
See Also

npm
npm help
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm initnpm-initCreate a package.json fileSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionForwarding additional optionsExamplesWorkspaces supportConfigurationinit-author-nameinit-author-urlinit-licenseinit-moduleinit-typeinit-versionyesforcescopeworkspaceworkspacesworkspaces-updateinclude-workspace-rootSee AlsoSynopsis
npm init <package-spec> (same as `npx create-<package-spec>`)npm init <@scope> (same as `npx <@scope>/create`)
aliases: create, innit
Description
npm init <initializer> can be used to set up a new or existing npm package.
initializer in this case is an npm package named create-<initializer>, which will be installed by npm-exec, and then have its main bin executed -- presumably creating or updating package.json and running any other initialization-related operations.
The init command is transformed to a corresponding npm exec operation as follows:

npm init foo -> npm exec create-foo
npm init @usr/foo -> npm exec @usr/create-foo
npm init @usr -> npm exec @usr/create
npm init @usr@2.0.0 -> npm exec @usr/create@2.0.0
npm init @usr/foo@2.0.0 -> npm exec @usr/create-foo@2.0.0

If the initializer is omitted (by just calling npm init), init will fall back to legacy init behavior. It will ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on existing fields, dependencies, and options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether. If you pass --scope, it will create a scoped package.
Note: if a user already has the create-<initializer> package globally installed, that will be what npm init uses. If you want npm to use the latest version, or another specific version you must specify it:

npm init foo@latest # fetches and runs the latest create-foo from the registry
npm init foo@1.2.3 # runs create-foo@1.2.3 specifically

Forwarding additional options
Any additional options will be passed directly to the command, so npm init foo -- --hello will map to npm exec -- create-foo --hello.
To better illustrate how options are forwarded, here's a more evolved example showing options passed to both the npm cli and a create package, both following commands are equivalent:

npm init foo -y --registry=<url> -- --hello -a
npm exec -y --registry=<url> -- create-foo --hello -a

Examples
Create a new React-based project using create-react-app:
$ npm init react-app ./my-react-app
Create a new esm-compatible package using create-esm:
$ mkdir my-esm-lib && cd my-esm-lib$ npm init esm --yes
Generate a plain old package.json using legacy init:
$ mkdir my-npm-pkg && cd my-npm-pkg$ git init$ npm init
Generate it without having it ask any questions:
$ npm init -y
Workspaces support
It's possible to create a new workspace within your project by using the workspace config option. When using npm init -w <dir> the cli will create the folders and boilerplate expected while also adding a reference to your project package.json "workspaces": [] property in order to make sure that new generated workspace is properly set up as such.
Given a project with no workspaces, e.g:
.+-- package.json
You may generate a new workspace using the legacy init:
$ npm init -w packages/a
That will generate a new folder and package.json file, while also updating your top-level package.json to add the reference to this new workspace:
.+-- package.json`-- packages   `-- a       `-- package.json
The workspaces init also supports the npm init <initializer> -w <dir> syntax, following the same set of rules explained earlier in the initial Description section of this page. Similar to the previous example of creating a new React-based project using create-react-app, the following syntax will make sure to create the new react app as a nested workspace within your project and configure your package.json to recognize it as such:
npm init -w packages/my-react-app react-app .
This will make sure to generate your react app as expected, one important consideration to have in mind is that npm exec is going to be run in the context of the newly created folder for that workspace, and that's the reason why in this example the initializer uses the initializer name followed with a dot to represent the current directory in that context, e.g: react-app .:
.+-- package.json`-- packages   +-- a   |   `-- package.json   `-- my-react-app       +-- README       +-- package.json       `-- ...
Configuration
init-author-name

Default: ""
Type: String

The value npm init should use by default for the package author's name.
init-author-url

Default: ""
Type: "" or URL

The value npm init should use by default for the package author's homepage.
init-license

Default: "ISC"
Type: String

The value npm init should use by default for the package license.
init-module

Default: "~/.npm-init.js"
Type: Path

A module that will be loaded by the npm init command. See the documentation for the init-package-json module for more information, or npm init.
init-type

Default: "commonjs"
Type: String

The value that npm init should use by default for the package.json type field.
init-version

Default: "1.0.0"
Type: SemVer string

The value that npm init should use by default for the package version number, if not already set in package.json.
yes

Default: null
Type: null or Boolean

Automatically answer "yes" to any prompts that npm might print on the command line.
force

Default: false
Type: Boolean

Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

Allow clobbering non-npm files in global installs.
Allow the npm version command to work on an unclean git repository.
Allow deleting the cache folder with npm cache clean.
Allow installing packages that have an engines declaration requiring a different version of npm.
Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict is enabled.
Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).
Allow unpublishing all versions of a published package.
Allow conflicting peerDependencies to be installed in the root project.
Implicitly set --yes during npm init.
Allow clobbering existing values in npm pkg
Allow unpublishing of entire packages (not just a single version).

If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!
scope

Default: the scope of the current project, if any, or ""
Type: String

Associate an operation with a scope for a scoped registry.
Useful when logging in to or out of a private registry:
# log in, linking the scope to the custom registrynpm login --scope=@mycorp --registry=https://registry.mycorp.com
# log out, removing the link and the auth tokennpm logout --scope=@mycorp
This will cause @mycorp to be mapped to the registry for future installation of packages specified according to the pattern @mycorp/package.
This will also cause npm init to create a scoped package.
# accept all defaults, and create a package named "@foo/whatever",# instead of just named "whatever"npm init --scope=@foo --yes
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
workspaces-update

Default: true
Type: Boolean

If set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the node_modules folder.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
See Also

package spec
init-package-json module
package.json
npm version
npm scope
npm exec
npm workspaces
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm installnpm-installInstall a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationsavesave-exactglobalinstall-strategylegacy-bundlingglobal-styleomitincludestrict-peer-depsprefer-dedupepackage-lockpackage-lock-onlyforeground-scriptsignore-scriptsauditbin-linksfunddry-runcpuoslibcworkspaceworkspacesinclude-workspace-rootinstall-linksAlgorithmSee AlsoSynopsis
npm install [<package-spec> ...]
aliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall
Description
This command installs a package and any packages that it depends on. If the package has a package-lock, or an npm shrinkwrap file, or a yarn lock file, the installation of dependencies will be driven by that, respecting the following order of precedence:

npm-shrinkwrap.json
package-lock.json
yarn.lock

See package-lock.json and npm shrinkwrap.
A package is:

a) a folder containing a program described by a package.json file
b) a gzipped tarball containing (a)
c) a url that resolves to (b)
d) a <name>@<version> that is published on the registry (see registry) with (c)
e) a <name>@<tag> (see npm dist-tag) that points to (d)
f) a <name> that has a "latest" tag satisfying (e)
g) a <git remote url> that resolves to (a)

Even if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b).


npm install (in a package directory, no arguments):
Install the dependencies to the local node_modules folder.
In global mode (ie, with -g or --global appended to the command), it installs the current package context (ie, the current working directory) as a global package.
By default, npm install will install all modules listed as dependencies in package.json.
With the --production flag (or when the NODE_ENV environment variable is set to production), npm will not install modules listed in devDependencies. To install all modules listed in both dependencies and devDependencies when NODE_ENV environment variable is set to production, you can use --production=false.

NOTE: The --production flag has no particular meaning when adding a dependency to a project.



npm install <folder>:
If <folder> sits inside the root of your project, its dependencies will be installed and may be hoisted to the top-level node_modules as they would for other types of dependencies. If <folder> sits outside the root of your project, npm will not install the package dependencies in the directory <folder>, but it will create a symlink to <folder>.

NOTE: If you want to install the content of a directory like a package from the registry instead of creating a link, you would need to use the --install-links option.

Example:
npm install ../../other-package --install-linksnpm install ./sub-package


npm install <tarball file>:
Install a package that is sitting on the filesystem. Note: if you just want to link a dev directory into your npm root, you can do this more easily by using npm link.
Tarball requirements:

The filename must use .tar, .tar.gz, or .tgz as the extension.
The package contents should reside in a subfolder inside the tarball (usually it is called package/). npm strips one directory layer when installing the package (an equivalent of tar x --strip-components=1 is run).
The package must contain a package.json file with name and version properties.

Example:
npm install ./package.tgz


npm install <tarball url>:
Fetch the tarball url, and then install it. In order to distinguish between this and other options, the argument must start with "http://" or "https://"
Example:
npm install https://github.com/indexzero/forever/tarball/v0.5.6


npm install [<@scope>/]<name>:
Do a <name>@<tag> install, where <tag> is the "tag" config. (See config. The config's default value is latest.)
In most cases, this will install the version of the modules tagged as latest on the npm registry.
Example:
npm install sax
npm install saves any specified packages into dependencies by default. Additionally, you can control where and how they get saved with some additional flags:


-P, --save-prod: Package will appear in your dependencies. This is the default unless -D or -O are present.


-D, --save-dev: Package will appear in your devDependencies.


--save-peer: Package will appear in your peerDependencies.


-O, --save-optional: Package will appear in your optionalDependencies.


--no-save: Prevents saving to dependencies.


When using any of the above options to save dependencies to your package.json, there are two additional, optional flags:


-E, --save-exact: Saved dependencies will be configured with an exact version rather than using npm's default semver range operator.


-B, --save-bundle: Saved dependencies will also be added to your bundleDependencies list.


Further, if you have an npm-shrinkwrap.json or package-lock.json then it will be updated as well.
<scope> is optional. The package will be downloaded from the registry associated with the specified scope. If no registry is associated with the given scope the default registry is assumed. See scope.
Note: if you do not include the @-symbol on your scope name, npm will interpret this as a GitHub repository instead, see below. Scopes names must also be followed by a slash.
Examples:
npm install saxnpm install githubname/reponamenpm install @myorg/privatepackagenpm install node-tap --save-devnpm install dtrace-provider --save-optionalnpm install readable-stream --save-exactnpm install ansi-regex --save-bundle


npm install <alias>@npm:<name>:
Install a package under a custom alias. Allows multiple versions of a same-name package side-by-side, more convenient import names for packages with otherwise long ones, and using git forks replacements or forked npm packages as replacements. Aliasing works only on your project and does not rename packages in transitive dependencies. Aliases should follow the naming conventions stated in validate-npm-package-name.
Examples:
npm install my-react@npm:reactnpm install jquery2@npm:jquery@2npm install jquery3@npm:jquery@3npm install npa@npm:npm-package-arg


npm install [<@scope>/]<name>@<tag>:
Install the version of the package that is referenced by the specified tag. If the tag does not exist in the registry data for that package, then this will fail.
Example:
npm install sax@latestnpm install @myorg/mypackage@latest


npm install [<@scope>/]<name>@<version>:
Install the specified version of the package. This will fail if the version has not been published to the registry.
Example:
npm install sax@0.1.1npm install @myorg/privatepackage@1.5.0


npm install [<@scope>/]<name>@<version range>:
Install a version of the package matching the specified version range. This will follow the same rules for resolving dependencies described in package.json.
Note that most version ranges must be put in quotes so that your shell will treat it as a single argument.
Example:
npm install sax@">=0.1.0 <0.2.0"npm install @myorg/privatepackage@"16 - 17"


npm install <git remote url>:
Installs the package from the hosted git provider, cloning it with git. For a full git remote url, only that URL will be attempted.
<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
<protocol> is one of git, git+ssh, git+http, git+https, or git+file.
If #<commit-ish> is provided, it will be used to clone exactly that commit. If the commit-ish has the format #semver:<semver>, <semver> can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither #<commit-ish> or #semver:<semver> is specified, then the default branch of the repository is used.
If the repository makes use of submodules, those submodules will be cloned as well.
If the package being installed contains a prepare script, its dependencies and devDependencies will be installed, and the prepare script will be run, before the package is packaged and installed.
The following git environment variables are recognized by npm and will be added to the environment when running git:

GIT_ASKPASS
GIT_EXEC_PATH
GIT_PROXY_COMMAND
GIT_SSH
GIT_SSH_COMMAND
GIT_SSL_CAINFO
GIT_SSL_NO_VERIFY

See the git man page for details.
Examples:
npm install git+ssh://git@github.com:npm/cli.git#v1.0.27npm install git+ssh://git@github.com:npm/cli#pull/273npm install git+ssh://git@github.com:npm/cli#semver:^5.0npm install git+https://isaacs@github.com/npm/cli.gitnpm install git://github.com/npm/cli.git#v1.0.27GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git


npm install <githubname>/<githubrepo>[#<commit-ish>]:


npm install github:<githubname>/<githubrepo>[#<commit-ish>]:
Install the package at https://github.com/githubname/githubrepo by attempting to clone it using git.
If #<commit-ish> is provided, it will be used to clone exactly that commit. If the commit-ish has the format #semver:<semver>, <semver> can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither #<commit-ish> or #semver:<semver> is specified, then the default branch is used.
As with regular git dependencies, dependencies and devDependencies will be installed if the package has a prepare script before the package is done installing.
Examples:
npm install mygithubuser/myprojectnpm install github:mygithubuser/myproject


npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>]:
Install the package at https://gist.github.com/gistID by attempting to clone it using git. The GitHub username associated with the gist is optional and will not be saved in package.json.
As with regular git dependencies, dependencies and devDependencies will be installed if the package has a prepare script before the package is done installing.
Example:
npm install gist:101a11beef


npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]:
Install the package at https://bitbucket.org/bitbucketname/bitbucketrepo by attempting to clone it using git.
If #<commit-ish> is provided, it will be used to clone exactly that commit. If the commit-ish has the format #semver:<semver>, <semver> can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither #<commit-ish> or #semver:<semver> is specified, then master is used.
As with regular git dependencies, dependencies and devDependencies will be installed if the package has a prepare script before the package is done installing.
Example:
npm install bitbucket:mybitbucketuser/myproject


npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]:
Install the package at https://gitlab.com/gitlabname/gitlabrepo by attempting to clone it using git.
If #<commit-ish> is provided, it will be used to clone exactly that commit. If the commit-ish has the format #semver:<semver>, <semver> can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither #<commit-ish> or #semver:<semver> is specified, then master is used.
As with regular git dependencies, dependencies and devDependencies will be installed if the package has a prepare script before the package is done installing.
Example:
npm install gitlab:mygitlabuser/myprojectnpm install gitlab:myusr/myproj#semver:^5.0


You may combine multiple arguments and even multiple types of arguments. For example:
npm install sax@">=0.1.0 <0.2.0" bench supervisor
The --tag argument will apply to all of the specified install targets. If a tag with the given name exists, the tagged version is preferred over newer versions.
The --dry-run argument will report in the usual way what the install would have done without actually installing anything.
The --package-lock-only argument will only update the package-lock.json, instead of checking node_modules and downloading dependencies.
The -f or --force argument will force npm to fetch remote resources even if a local copy exists on disk.
npm install sax --force
Configuration
See the config help doc. Many of the configuration params have some effect on installation, since that's most of what npm does.
These are some of the most common options related to installation.
save

Default: true unless when using npm update where it defaults to false
Type: Boolean

Save installed packages to a package.json file as dependencies.
When used with the npm rm command, removes the dependency from package.json.
Will also prevent writing to package-lock.json if set to false.
save-exact

Default: false
Type: Boolean

Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

install-strategy

Default: "hoisted"
Type: "hoisted", "nested", "shallow", or "linked"

Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
legacy-bundling

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=nested

Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets --install-strategy=nested.
global-style

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=shallow

Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies. Sets --install-strategy=shallow.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
strict-peer-deps

Default: false
Type: Boolean

If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.
By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.
When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.
prefer-dedupe

Default: false
Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer version of a dependency.
package-lock

Default: true
Type: Boolean

If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.
package-lock-only

Default: false
Type: Boolean

If set to true, the current operation will only use the package-lock.json, ignoring node_modules.
For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.
For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
audit

Default: true
Type: Boolean

When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm audit for details on what is submitted.
bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
fund

Default: true
Type: Boolean

When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm fund for details.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
cpu

Default: null
Type: null or String

Override CPU architecture of native modules to install. Acceptable values are same as cpu field of package.json, which comes from process.arch.
os

Default: null
Type: null or String

Override OS of native modules to install. Acceptable values are same as os field of package.json, which comes from process.platform.
libc

Default: null
Type: null or String

Override libc of native modules to install. Acceptable values are same as libc field of package.json
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
Algorithm
Given a package{dep} structure: A{B,C}, B{C}, C{D}, the npm install algorithm produces:
A+-- B+-- C+-- D
That is, the dependency from B to C is satisfied by the fact that A already caused C to be installed at a higher level. D is still installed at the top level because nothing conflicts with it.
For A{B,C}, B{C,D@1}, C{D@2}, this algorithm produces:
A+-- B+-- C   `-- D@2+-- D@1
Because B's D@1 will be installed in the top-level, C now has to install D@2 privately for itself. This algorithm is deterministic, but different trees may be produced if two dependencies are requested for installation in a different order.
See folders for a more detailed description of the specific folder structures that npm creates.
See Also

npm folders
npm update
npm audit
npm fund
npm link
npm rebuild
npm scripts
npm config
npmrc
npm registry
npm dist-tag
npm uninstall
npm shrinkwrap
package.json
workspaces
Edit this page on GitHub3 contributorswraithgardrew4237lukekarrysLast edited by wraithgar on September 11, 2024\n\n\n\nCLICommandsnpm install-ci-testnpm-install-ci-testInstall a project with a clean slate and run testsSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationinstall-strategylegacy-bundlingglobal-styleomitincludestrict-peer-depsforeground-scriptsignore-scriptsauditbin-linksfunddry-runworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm install-ci-test
aliases: cit, clean-install-test, sit
Description
This command runs npm ci followed immediately by npm test.
Configuration
install-strategy

Default: "hoisted"
Type: "hoisted", "nested", "shallow", or "linked"

Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
legacy-bundling

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=nested

Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets --install-strategy=nested.
global-style

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=shallow

Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies. Sets --install-strategy=shallow.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
strict-peer-deps

Default: false
Type: Boolean

If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.
By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.
When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
audit

Default: true
Type: Boolean

When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm audit for details on what is submitted.
bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
fund

Default: true
Type: Boolean

When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm fund for details.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

npm install-test
npm ci
npm test
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm install-testnpm-install-testInstall package(s) and run testsSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationsavesave-exactglobalinstall-strategylegacy-bundlingglobal-styleomitincludestrict-peer-depsprefer-dedupepackage-lockpackage-lock-onlyforeground-scriptsignore-scriptsauditbin-linksfunddry-runcpuoslibcworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm install-test [<package-spec> ...]
alias: it
Description
This command runs an npm install followed immediately by an npm test. It takes exactly the same arguments as npm install.
Configuration
save

Default: true unless when using npm update where it defaults to false
Type: Boolean

Save installed packages to a package.json file as dependencies.
When used with the npm rm command, removes the dependency from package.json.
Will also prevent writing to package-lock.json if set to false.
save-exact

Default: false
Type: Boolean

Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

install-strategy

Default: "hoisted"
Type: "hoisted", "nested", "shallow", or "linked"

Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
legacy-bundling

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=nested

Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets --install-strategy=nested.
global-style

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=shallow

Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies. Sets --install-strategy=shallow.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
strict-peer-deps

Default: false
Type: Boolean

If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.
By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.
When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.
prefer-dedupe

Default: false
Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer version of a dependency.
package-lock

Default: true
Type: Boolean

If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.
package-lock-only

Default: false
Type: Boolean

If set to true, the current operation will only use the package-lock.json, ignoring node_modules.
For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.
For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
audit

Default: true
Type: Boolean

When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm audit for details on what is submitted.
bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
fund

Default: true
Type: Boolean

When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm fund for details.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
cpu

Default: null
Type: null or String

Override CPU architecture of native modules to install. Acceptable values are same as cpu field of package.json, which comes from process.arch.
os

Default: null
Type: null or String

Override OS of native modules to install. Acceptable values are same as os field of package.json, which comes from process.platform.
libc

Default: null
Type: null or String

Override libc of native modules to install. Acceptable values are same as libc field of package.json
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

npm install
npm install-ci-test
npm test
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm linknpm-linkSymlink a package folderSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionCaveatWorkspace UsageConfigurationsavesave-exactglobalinstall-strategylegacy-bundlingglobal-stylestrict-peer-depspackage-lockomitincludeignore-scriptsauditbin-linksfunddry-runworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm link [<package-spec>]
alias: ln
Description
This is handy for installing your own stuff, so that you can work on it and test iteratively without having to continually rebuild.
Package linking is a two-step process.
First, npm link in a package folder with no arguments will create a symlink in the global folder {prefix}/lib/node_modules/<package> that links to the package where the npm link command was executed. It will also link any bins in the package to {prefix}/bin/{name}. Note that npm link uses the global prefix (see npm prefix -g for its value).
Next, in some other location, npm link package-name will create a symbolic link from globally-installed package-name to node_modules/ of the current folder.
Note that package-name is taken from package.json, not from the directory name.
The package name can be optionally prefixed with a scope. See scope. The scope must be preceded by an @-symbol and followed by a slash.
When creating tarballs for npm publish, the linked packages are "snapshotted" to their current state by resolving the symbolic links, if they are included in bundleDependencies.
For example:
cd ~/projects/node-redis    # go into the package directorynpm link                    # creates global linkcd ~/projects/node-bloggy   # go into some other package directory.npm link redis              # link-install the package
Now, any changes to ~/projects/node-redis will be reflected in ~/projects/node-bloggy/node_modules/node-redis/. Note that the link should be to the package name, not the directory name for that package.
You may also shortcut the two steps in one. For example, to do the above use-case in a shorter way:
cd ~/projects/node-bloggy  # go into the dir of your main projectnpm link ../node-redis     # link the dir of your dependency
The second line is the equivalent of doing:
(cd ../node-redis; npm link)npm link redis
That is, it first creates a global link, and then links the global installation target into your project's node_modules folder.
Note that in this case, you are referring to the directory name, node-redis, rather than the package name redis.
If your linked package is scoped (see scope) your link command must include that scope, e.g.
npm link @myorg/privatepackage
Caveat
Note that package dependencies linked in this way are not saved to package.json by default, on the assumption that the intention is to have a link stand in for a regular non-link dependency. Otherwise, for example, if you depend on redis@^3.0.1, and ran npm link redis, it would replace the ^3.0.1 dependency with file:../path/to/node-redis, which you probably don't want! Additionally, other users or developers on your project would run into issues if they do not have their folders set up exactly the same as yours.
If you are adding a new dependency as a link, you should add it to the relevant metadata by running npm install <dep> --package-lock-only.
If you want to save the file: reference in your package.json and package-lock.json files, you can use npm link <dep> --save to do so.
Workspace Usage
npm link <pkg> --workspace <name> will link the relevant package as a dependency of the specified workspace(s). Note that It may actually be linked into the parent project's node_modules folder, if there are no conflicting dependencies.
npm link --workspace <name> will create a global link to the specified workspace(s).
Configuration
save

Default: true unless when using npm update where it defaults to false
Type: Boolean

Save installed packages to a package.json file as dependencies.
When used with the npm rm command, removes the dependency from package.json.
Will also prevent writing to package-lock.json if set to false.
save-exact

Default: false
Type: Boolean

Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

install-strategy

Default: "hoisted"
Type: "hoisted", "nested", "shallow", or "linked"

Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
legacy-bundling

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=nested

Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets --install-strategy=nested.
global-style

Default: false
Type: Boolean
DEPRECATED: This option has been deprecated in favor of --install-strategy=shallow

Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies. Sets --install-strategy=shallow.
strict-peer-deps

Default: false
Type: Boolean

If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.
By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.
When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set, then this warning is treated as a failure.
package-lock

Default: true
Type: Boolean

If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
audit

Default: true
Type: Boolean

When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm audit for details on what is submitted.
bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
fund

Default: true
Type: Boolean

When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm fund for details.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

package spec
npm developers
package.json
npm install
npm folders
npm config
npmrc
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm loginnpm-loginLogin to a registry user accountSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationregistryscopeauth-typeSee AlsoSynopsis
npm login
Note: This command is unaware of workspaces.
Description
Verify a user in the specified registry, and save the credentials to the .npmrc file. If no registry is specified, the default registry will be used (see config).
When using legacy for your auth-type, the username and password, are read in from prompts.
To reset your password, go to https://www.npmjs.com/forgot
To change your email address, go to https://www.npmjs.com/email-edit
You may use this command multiple times with the same user account to authorize on a new machine. When authenticating on a new machine, the username, password and email address must all match with your existing record.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
scope

Default: the scope of the current project, if any, or ""
Type: String

Associate an operation with a scope for a scoped registry.
Useful when logging in to or out of a private registry:
# log in, linking the scope to the custom registrynpm login --scope=@mycorp --registry=https://registry.mycorp.com
# log out, removing the link and the auth tokennpm logout --scope=@mycorp
This will cause @mycorp to be mapped to the registry for future installation of packages specified according to the pattern @mycorp/package.
This will also cause npm init to create a scoped package.
# accept all defaults, and create a package named "@foo/whatever",# instead of just named "whatever"npm init --scope=@foo --yes
auth-type

Default: "web"
Type: "legacy" or "web"

What authentication strategy to use with login. Note that if an otp config is given, this value will always be set to legacy.
See Also

npm registry
npm config
npmrc
npm owner
npm whoami
npm token
npm profile
Edit this page on GitHub2 contributorsLiangYingClukekarrysLast edited by LiangYingC on April 14, 2025\n\n\n\nCLICommandsnpm logoutnpm-logoutLog out of the registrySelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationregistryscopeSee AlsoSynopsis
npm logout
Note: This command is unaware of workspaces.
Description
When logged into a registry that supports token-based authentication, tell the server to end this token's session. This will invalidate the token everywhere you're using it, not just for the current environment.
When logged into a legacy registry that uses username and password authentication, this will clear the credentials in your user configuration. In this case, it will only affect the current environment.
If --scope is provided, this will find the credentials for the registry connected to that scope, if set.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
scope

Default: the scope of the current project, if any, or ""
Type: String

Associate an operation with a scope for a scoped registry.
Useful when logging in to or out of a private registry:
# log in, linking the scope to the custom registrynpm login --scope=@mycorp --registry=https://registry.mycorp.com
# log out, removing the link and the auth tokennpm logout --scope=@mycorp
This will cause @mycorp to be mapped to the registry for future installation of packages specified according to the pattern @mycorp/package.
This will also cause npm init to create a scoped package.
# accept all defaults, and create a package named "@foo/whatever",# instead of just named "whatever"npm init --scope=@foo --yes
See Also

npm adduser
npm registry
npm config
npm whoami
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm lsnpm-lsList installed packagesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationalljsonlongparseableglobaldepthomitincludelinkpackage-lock-onlyunicodeworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm ls <package-spec>
alias: list
Description
This command will print to stdout all the versions of packages that are installed, as well as their dependencies when --all is specified, in a tree structure.
Note: to get a "bottoms up" view of why a given package is included in the tree at all, use npm explain.
Positional arguments are name@version-range identifiers, which will limit the results to only the paths to the packages named. Note that nested packages will also show the paths to the specified packages. For example, running npm ls promzard in npm's source tree will show:
npm@11.3.0 /path/to/npm└─┬ init-package-json@0.0.4  └── promzard@0.1.5
It will print out extraneous, missing, and invalid packages.
If a project specifies git urls for dependencies these are shown in parentheses after the name@version to make it easier for users to recognize potential forks of a project.
The tree shown is the logical dependency tree, based on package dependencies, not the physical layout of your node_modules folder.
When run as ll or la, it shows extended information by default.
Configuration
all

Default: false
Type: Boolean

When running npm outdated and npm ls, setting --all will show all outdated or installed packages, rather than only those directly depended upon by the current project.
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
long

Default: false
Type: Boolean

Show extended information in ls, search, and help-search.
parseable

Default: false
Type: Boolean

Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

depth

Default: Infinity if --all is set, otherwise 0
Type: null or Number

The depth to go when recursing packages for npm ls.
If not set, npm ls will show only the immediate dependencies of the root project. If --all is set, then npm will show all dependencies by default.
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
link

Default: false
Type: Boolean

Used with npm ls, limiting output to only those packages that are linked.
package-lock-only

Default: false
Type: Boolean

If set to true, the current operation will only use the package-lock.json, ignoring node_modules.
For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.
For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.
unicode

Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG environment variables.
Type: Boolean

When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

package spec
npm explain
npm config
npmrc
npm folders
npm explain
npm install
npm link
npm prune
npm outdated
npm update
Edit this page on GitHub2 contributorsmilaninfylukekarrysLast edited by milaninfy on December 9, 2024\n\n\n\nCLICommandsnpm orgnpm-orgManage orgsSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisExampleDescriptionConfigurationregistryotpjsonparseableSee AlsoSynopsis
npm org set orgname username [developer | admin | owner]npm org rm orgname usernamenpm org ls orgname [<username>]
alias: ogr
Note: This command is unaware of workspaces.
Example
Add a new developer to an org:
$ npm org set my-org @mx-smith
Add a new admin to an org (or change a developer to an admin):
$ npm org set my-org @mx-santos admin
Remove a user from an org:
$ npm org rm my-org mx-santos
List all users in an org:
$ npm org ls my-org
List all users in JSON format:
$ npm org ls my-org --json
See what role a user has in an org:
$ npm org ls my-org @mx-santos
Description
You can use the npm org commands to manage and view users of an organization. It supports adding and removing users, changing their roles, listing them, and finding specific ones and their roles.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
parseable

Default: false
Type: Boolean

Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.
See Also

using orgs
Documentation on npm Orgs
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm outdatednpm-outdatedCheck for outdated packagesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionAn exampleConfigurationalljsonlongparseableglobalworkspaceSee AlsoSynopsis
npm outdated [<package-spec> ...]
Description
This command will check the registry to see if any (or, specific) installed packages are currently outdated.
By default, only the direct dependencies of the root project and direct dependencies of your configured workspaces are shown. Use --all to find all outdated meta-dependencies as well.
In the output:

wanted is the maximum version of the package that satisfies the semver range specified in package.json. If there's no available semver range (i.e. you're running npm outdated --global, or the package isn't included in package.json), then wanted shows the currently-installed version.
latest is the version of the package tagged as latest in the registry. Running npm publish with no special configuration will publish the package with a dist-tag of latest. This may or may not be the maximum version of the package, or the most-recently published version of the package, depending on how the package's developer manages the latest dist-tag.
location is where in the physical tree the package is located.
depended by shows which package depends on the displayed dependency
package type (when using --long / -l) tells you whether this package is a dependency or a dev/peer/optional dependency. Packages not included in package.json are always marked dependencies.
homepage (when using --long / -l) is the homepage value contained in the package's packument
Red means there's a newer version matching your semver requirements, so you should update now.
Yellow indicates that there's a newer version above your semver requirements (usually new major, or new 0.x minor) so proceed with caution.

An example
$ npm outdatedPackage      Current   Wanted   Latest  Location                  Depended byglob          5.0.15   5.0.15    6.0.1  node_modules/glob         dependent-package-namenothingness    0.0.3      git      git  node_modules/nothingness  dependent-package-namenpm            3.5.1    3.5.2    3.5.1  node_modules/npm          dependent-package-namelocal-dev      0.0.3   linked   linked  local-dev                 dependent-package-nameonce           1.3.2    1.3.3    1.3.3  node_modules/once         dependent-package-name
With these dependencies:
{  "glob": "^5.0.15",  "nothingness": "github:othiym23/nothingness#master",  "npm": "^3.5.1",  "once": "^1.3.1"}
A few things to note:

glob requires ^5, which prevents npm from installing glob@6, which is outside the semver range.
Git dependencies will always be reinstalled, because of how they're specified. The installed committish might satisfy the dependency specifier (if it's something immutable, like a commit SHA), or it might not, so npm outdated and npm update have to fetch Git repos to check. This is why currently doing a reinstall of a Git dependency always forces a new clone and install.
npm@3.5.2 is marked as "wanted", but "latest" is npm@3.5.1 because npm uses dist-tags to manage its latest and next release channels. npm update will install the newest version, but npm install npm (with no semver range) will install whatever's tagged as latest.
once is just plain out of date. Reinstalling node_modules from scratch or running npm update will bring it up to spec.

Configuration
all

Default: false
Type: Boolean

When running npm outdated and npm ls, setting --all will show all outdated or installed packages, rather than only those directly depended upon by the current project.
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
long

Default: false
Type: Boolean

Show extended information in ls, search, and help-search.
parseable

Default: false
Type: Boolean

Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
See Also

package spec
npm update
npm dist-tag
npm registry
npm folders
npm workspaces
Edit this page on GitHub2 contributorsmilaninfylukekarrysLast edited by milaninfy on April 11, 2025\n\n\n\nCLICommandsnpm ownernpm-ownerManage package ownersSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationregistryotpworkspaceworkspacesSee AlsoSynopsis
npm owner add <user> <package-spec>npm owner rm <user> <package-spec>npm owner ls <package-spec>
alias: author
Description
Manage ownership of published packages.

ls: List all the users who have access to modify a package and push new versions. Handy when you need to know who to bug for help.
add: Add a new user as a maintainer of a package. This user is enabled to modify metadata, publish new versions, and add other owners.
rm: Remove a user from the package owner list. This immediately revokes their privileges.

Note that there is only one level of access. Either you can modify a package, or you can't. Future versions may contain more fine-grained access levels, but that is not implemented at this time.
If you have two-factor authentication enabled with auth-and-writes (see npm-profile) then you'll need to go through a second factor flow when changing ownership or include an otp on the command line with --otp.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
See Also

package spec
npm profile
npm publish
npm registry
npm adduser
Edit this page on GitHub2 contributorsMylesBorinslukekarrysLast edited by MylesBorins on February 7, 2023\n\n\n\nCLICommandsnpm packnpm-packCreate a tarball from a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisConfigurationdry-runjsonpack-destinationworkspaceworkspacesinclude-workspace-rootignore-scriptsDescriptionSee AlsoSynopsis
npm pack <package-spec>
Configuration
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
pack-destination

Default: "."
Type: String

Directory in which npm pack will save tarballs.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
Description
For anything that's installable (that is, a package folder, tarball, tarball url, git url, name@tag, name@version, name, or scoped name), this command will fetch it to the cache, copy the tarball to the current working directory as <name>-<version>.tgz, and then write the filenames out to stdout.
If the same package is specified multiple times, then the file will be overwritten the second time.
If no arguments are supplied, then npm packs the current package folder.
See Also

package spec
npm-packlist package
npm cache
npm publish
npm config
npmrc
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm pingnpm-pingPing npm registrySelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationregistrySee AlsoSynopsis
npm ping
Note: This command is unaware of workspaces.
Description
Ping the configured or given npm registry and verify authentication. If it works it will output something like:
npm notice PING https://registry.npmjs.org/npm notice PONG 255ms
otherwise you will get an error:
npm notice PING http://foo.com/npm ERR! code E404npm ERR! 404 Not Found - GET http://www.foo.com/-/ping?write=true
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
See Also

npm doctor
npm config
npmrc
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm pkgnpm-pkgManages your package.jsonSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionWorkspaces supportConfigurationforcejsonworkspaceworkspacesSee AlsoSynopsis
npm pkg set <key>=<value> [<key>=<value> ...]npm pkg get [<key> [<key> ...]]npm pkg delete <key> [<key> ...]npm pkg set [<array>[<index>].<key>=<value> ...]npm pkg set [<array>[].<key>=<value> ...]npm pkg fix
Description
A command that automates the management of package.json files. npm pkg provide 3 different sub commands that allow you to modify or retrieve values for given object keys in your package.json.
The syntax to retrieve and set fields is a dot separated representation of the nested object properties to be found within your package.json, it's the same notation used in npm view to retrieve information from the registry manifest, below you can find more examples on how to use it.
Returned values are always in json format.


npm pkg get <field>
Retrieves a value key, defined in your package.json file.
For example, in order to retrieve the name of the current package, you can run:
npm pkg get name
It's also possible to retrieve multiple values at once:
npm pkg get name version
You can view child fields by separating them with a period. To retrieve the value of a test script value, you would run the following command:
npm pkg get scripts.test
For fields that are arrays, requesting a non-numeric field will return all of the values from the objects in the list. For example, to get all the contributor emails for a package, you would run:
npm pkg get contributors.email
You may also use numeric indices in square braces to specifically select an item in an array field. To just get the email address of the first contributor in the list, you can run:
npm pkg get contributors[0].email
For complex fields you can also name a property in square brackets to specifically select a child field. This is especially helpful with the exports object:
npm pkg get "exports[.].require"


npm pkg set <field>=<value>
Sets a value in your package.json based on the field value. When saving to your package.json file the same set of rules used during npm install and other cli commands that touches the package.json file are used, making sure to respect the existing indentation and possibly applying some validation prior to saving values to the file.
The same syntax used to retrieve values from your package can also be used to define new properties or overriding existing ones, below are some examples of how the dot separated syntax can be used to edit your package.json file.
Defining a new bin named mynewcommand in your package.json that points to a file cli.js:
npm pkg set bin.mynewcommand=cli.js
Setting multiple fields at once is also possible:
npm pkg set description='Awesome package' engines.node='>=10'
It's also possible to add to array values, for example to add a new contributor entry:
npm pkg set contributors[0].name='Foo' contributors[0].email='foo@bar.ca'
You may also append items to the end of an array using the special empty bracket notation:
npm pkg set contributors[].name='Foo' contributors[].name='Bar'
It's also possible to parse values as json prior to saving them to your package.json file, for example in order to set a "private": true property:
npm pkg set private=true --json
It also enables saving values as numbers:
npm pkg set tap.timeout=60 --json


npm pkg delete <key>
Deletes a key from your package.json
The same syntax used to set values from your package can also be used to remove existing ones. For example, in order to remove a script named build:
npm pkg delete scripts.build


npm pkg fix
Auto corrects common errors in your package.json. npm already does this during publish, which leads to subtle (mostly harmless) differences between the contents of your package.json file and the manifest that npm uses during installation.


Workspaces support
You can set/get/delete items across your configured workspaces by using the workspace or workspaces config options.
For example, setting a funding value across all configured workspaces of a project:
npm pkg set funding=https://example.com --ws
When using npm pkg get to retrieve info from your configured workspaces, the returned result will be in a json format in which top level keys are the names of each workspace, the values of these keys will be the result values returned from each of the configured workspaces, e.g:
npm pkg get name version --ws{  "a": {    "name": "a",    "version": "1.0.0"  },  "b": {    "name": "b",    "version": "1.0.0"  }}
Configuration
force

Default: false
Type: Boolean

Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

Allow clobbering non-npm files in global installs.
Allow the npm version command to work on an unclean git repository.
Allow deleting the cache folder with npm cache clean.
Allow installing packages that have an engines declaration requiring a different version of npm.
Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict is enabled.
Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).
Allow unpublishing all versions of a published package.
Allow conflicting peerDependencies to be installed in the root project.
Implicitly set --yes during npm init.
Allow clobbering existing values in npm pkg
Allow unpublishing of entire packages (not just a single version).

If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
See Also

npm install
npm init
npm config
workspaces
Edit this page on GitHub3 contributorsemmanuel-ferdmanwraithgarlukekarrysLast edited by emmanuel-ferdman on July 25, 2023\n\n\n\nCLICommandsnpm prefixnpm-prefixDisplay prefixSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionExampleConfigurationglobalSee AlsoSynopsis
npm prefix
Note: This command is unaware of workspaces.
Description
Print the local prefix to standard output. This is the closest parent directory to contain a package.json file or node_modules directory, unless -g is also specified.
If -g is specified, this will be the value of the global prefix. See npm config for more detail.
Example
npm prefix/usr/local/projects/foo
npm prefix -g/usr/local
Configuration
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

See Also

npm root
npm folders
npm config
npmrc
Edit this page on GitHub2 contributorsKevinRouchutlukekarrysLast edited by KevinRouchut on March 29, 2023\n\n\n\nCLICommandsnpm profilenpm-profileChange settings on your registry profileSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionDetailsConfigurationregistryjsonparseableotpSee AlsoSynopsis
npm profile enable-2fa [auth-only|auth-and-writes]npm profile disable-2fanpm profile get [<key>]npm profile set <key> <value>
Note: This command is unaware of workspaces.
Description
Change your profile information on the registry. Note that this command depends on the registry implementation, so third-party registries may not support this interface.

npm profile get [<property>]: Display all of the properties of your profile, or one or more specific properties. It looks like:

name: exampleemail: e@example.com (verified)two-factor auth: auth-and-writesfullname: Example Userhomepage:freenode:twitter:github:created: 2015-02-26T01:38:35.892Zupdated: 2017-10-02T21:29:45.922Z


npm profile set <property> <value>: Set the value of a profile property. You can set the following properties this way: email, fullname, homepage, freenode, twitter, github


npm profile set password: Change your password. This is interactive, you'll be prompted for your current password and a new password. You'll also be prompted for an OTP if you have two-factor authentication enabled.


npm profile enable-2fa [auth-and-writes|auth-only]: Enables two-factor authentication. Defaults to auth-and-writes mode. Modes are:

auth-only: Require an OTP when logging in or making changes to your account's authentication. The OTP will be required on both the website and the command line.
auth-and-writes: Requires an OTP at all the times auth-only does, and also requires one when publishing a module, setting the latest dist-tag, or changing access via npm access and npm owner.



npm profile disable-2fa: Disables two-factor authentication.


Details
Some of these commands may not be available on non npmjs.com registries.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
parseable

Default: false
Type: Boolean

Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
See Also

npm adduser
npm registry
npm config
npmrc
npm owner
npm whoami
npm token
Edit this page on GitHub2 contributorswraithgarlukekarrysLast edited by wraithgar on April 22, 2024\n\n\n\nCLICommandsnpm prunenpm-pruneRemove extraneous packagesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationomitincludedry-runjsonforeground-scriptsignore-scriptsworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm prune [[<@scope>/]<pkg>...]
Description
This command removes "extraneous" packages. If a package name is provided, then only packages matching one of the supplied names are removed.
Extraneous packages are those present in the node_modules folder that are not listed as any package's dependency list.
If the --omit=dev flag is specified or the NODE_ENV environment variable is set to production, this command will remove the packages specified in your devDependencies.
If the --dry-run flag is used then no changes will actually be made.
If the --json flag is used, then the changes npm prune made (or would have made with --dry-run) are printed as a JSON object.
In normal operation, extraneous modules are pruned automatically, so you'll only need this command with the --production flag. However, in the real world, operation is not always "normal". When crashes or mistakes happen, this command can help clean up any resulting garbage.
Configuration
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
include

Default:
Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.
This is the inverse of --omit=<type>.
Dependency types specified in --include will not be omitted, regardless of the order in which omit/include are specified on the command-line.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

npm uninstall
npm folders
npm ls
Edit this page on GitHub2 contributorsEommlukekarrysLast edited by Eomm on November 13, 2023\n\n\n\nCLICommandsnpm publishnpm-publishPublish a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionFiles included in packageConfigurationtagaccessdry-runotpworkspaceworkspacesinclude-workspace-rootprovenanceprovenance-fileSee AlsoSynopsis
npm publish <package-spec>
Description
Publishes a package to the registry so that it can be installed by name.
By default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a scope in the name, combined with a scope-configured registry (see package.json).
A package is interpreted the same way as other commands (like npm install) and can be:

a) a folder containing a program described by a package.json file
b) a gzipped tarball containing (a)
c) a url that resolves to (b)
d) a <name>@<version> that is published on the registry (see registry) with (c)
e) a <name>@<tag> (see npm dist-tag) that points to (d)
f) a <name> that has a "latest" tag satisfying (e)
g) a <git remote url> that resolves to (a)

The publish will fail if the package name and version combination already exists in the specified registry.
Once a package is published with a given name and version, that specific name and version combination can never be used again, even if it is removed with npm unpublish.
As of npm@5, both a sha1sum and an integrity field with a sha512sum of the tarball will be submitted to the registry during publication. Subsequent installs will use the strongest supported algorithm to verify downloads.
Similar to --dry-run see npm pack, which figures out the files to be included and packs them into a tarball to be uploaded to the registry.
Files included in package
To see what will be included in your package, run npm pack --dry-run. All files are included by default, with the following exceptions:


Certain files that are relevant to package installation and distribution are always included. For example, package.json, README.md, LICENSE, and so on.


If there is a "files" list in package.json, then only the files specified will be included. (If directories are specified, then they will be walked recursively and their contents included, subject to the same ignore rules.)


If there is a .gitignore or .npmignore file, then ignored files in that and all child directories will be excluded from the package. If both files exist, then the .gitignore is ignored, and only the .npmignore is used.
.npmignore files follow the same pattern rules as .gitignore files


If the file matches certain patterns, then it will never be included, unless explicitly added to the "files" list in package.json, or un-ignored with a ! rule in a .npmignore or .gitignore file.


Symbolic links are never included in npm packages.


See developers for full details on what's included in the published package, as well as details on how the package is built.
See package.json for more info on what can and can't be ignored.
Configuration
tag

Default: "latest"
Type: String

If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.
It is the tag added to the package@version specified in the npm dist-tag add command, if no explicit tag is given.
When used by the npm diff command, this is the tag used to fetch the tarball that will be compared with the local files by default.
If used in the npm publish command, this is the tag that will be added to the package submitted to the registry.
access

Default: 'public' for new packages, existing packages it will not change the current level
Type: null, "restricted", or "public"

If you do not want your scoped package to be publicly viewable (and installable) set --access=restricted.
Unscoped packages can not be set to restricted.
Note: This defaults to not changing the current access level for existing packages. Specifying a value of restricted or public during publish will change the access for an existing package the same way that npm access set status would.
dry-run

Default: false
Type: Boolean

Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.
Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
provenance

Default: false
Type: Boolean

When publishing from a supported cloud CI/CD system, the package will be publicly linked to where it was built and published from.
This config can not be used with: provenance-file
provenance-file

Default: null
Type: Path

When publishing, the provenance bundle at the given path will be used.
This config can not be used with: provenance
See Also

package spec
npm-packlist package
npm registry
npm scope
npm adduser
npm owner
npm deprecate
npm dist-tag
npm pack
npm profile
Edit this page on GitHub4 contributorswraithgarPtitetstaff0rdlukekarrysLast edited by wraithgar on November 27, 2024\n\n\n\nCLICommandsnpm querynpm-queryDependency selector querySelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionPiping npm query to other commandsExtended Use Cases & QueriesExample Response OutputExpecting a certain number of resultsPackage lock only modeConfigurationglobalworkspaceworkspacesinclude-workspace-rootpackage-lock-onlyexpect-resultsexpect-result-countSee AlsoSynopsis
npm query <selector>
Description
The npm query command allows for usage of css selectors in order to retrieve an array of dependency objects.
Piping npm query to other commands
# find all dependencies with postinstall scripts & uninstall themnpm query ":attr(scripts, [postinstall])" | jq 'map(.name)|join("\n")' -r | xargs -I {} npm uninstall {}
# find all git dependencies & explain who requires themnpm query ":type(git)" | jq 'map(.name)' | xargs -I {} npm why {}
Extended Use Cases & Queries
// all deps*
// all direct deps:root > *
// direct production deps:root > .prod
// direct development deps:root > .dev
// any peer dep of a direct deps:root > * > .peer
// any workspace dep.workspace
// all workspaces that depend on another workspace.workspace > .workspace
// all workspaces that have peer deps.workspace:has(.peer)
// any dep named "lodash"// equivalent to [name="lodash"]#lodash
// any deps named "lodash" & within semver range ^"1.2.3"#lodash@^1.2.3// equivalent to...[name="lodash"]:semver(^1.2.3)
// get the hoisted node for a given semver range#lodash@^1.2.3:not(:deduped)
// querying deps with a specific version#lodash@2.1.5// equivalent to...[name="lodash"][version="2.1.5"]
// has any deps:has(*)
// deps with no other deps (ie. "leaf" nodes):empty
// manually querying git dependencies[repository^=github:],[repository^=git:],[repository^=https://github.com],[repository^=http://github.com],[repository^=https://github.com],[repository^=+git:...]
// querying for all git dependencies:type(git)
// get production dependencies that aren't also dev deps.prod:not(.dev)
// get dependencies with specific licenses[license=MIT], [license=ISC]
// find all packages that have @ruyadorno as a contributor:attr(contributors, [email=ruyadorno@github.com])
Example Response Output

an array of dependency objects is returned which can contain multiple copies of the same package which may or may not have been linked or deduped

[  {    "name": "",    "version": "",    "description": "",    "homepage": "",    "bugs": {},    "author": {},    "license": {},    "funding": {},    "files": [],    "main": "",    "browser": "",    "bin": {},    "man": [],    "directories": {},    "repository": {},    "scripts": {},    "config": {},    "dependencies": {},    "devDependencies": {},    "optionalDependencies": {},    "bundledDependencies": {},    "peerDependencies": {},    "peerDependenciesMeta": {},    "engines": {},    "os": [],    "cpu": [],    "workspaces": {},    "keywords": [],    ...  },  ...
Expecting a certain number of results
One common use of npm query is to make sure there is only one version of a certain dependency in your tree. This is especially common for ecosystems like that rely on typescript where having state split across two different but identically-named packages causes bugs. You can use the --expect-results or --expect-result-count in your setup to ensure that npm will exit with an exit code if your tree doesn't look like you want it to.
$ npm query '#react' --expect-result-count=1
Perhaps you want to quickly check if there are any production dependencies that could be updated:
$ npm query ':root>:outdated(in-range).prod' --no-expect-results
Package lock only mode
If package-lock-only is enabled, only the information in the package lock (or shrinkwrap) is loaded. This means that information from the package.json files of your dependencies will not be included in the result set (e.g. description, homepage, engines).
Configuration
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
package-lock-only

Default: false
Type: Boolean

If set to true, the current operation will only use the package-lock.json, ignoring node_modules.
For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.
For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.
expect-results

Default: null
Type: null or Boolean

Tells npm whether or not to expect results from the command. Can be either true (expect some results) or false (expect no results).
This config can not be used with: expect-result-count
expect-result-count

Default: null
Type: null or Number

Tells to expect a specific number of results from the command.
This config can not be used with: expect-results
See Also

dependency selectors
Edit this page on GitHub2 contributorswraithgarlukekarrysLast edited by wraithgar on December 14, 2022\n\n\n\nCLICommandsnpm rebuildnpm-rebuildRebuild a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationglobalbin-linksforeground-scriptsignore-scriptsworkspaceworkspacesinclude-workspace-rootinstall-linksSee AlsoSynopsis
npm rebuild [<package-spec>] ...]
alias: rb
Description
This command does the following:

Execute lifecycle scripts (preinstall, install, postinstall, prepare)
Links bins depending on whether bin links are enabled

This command is particularly useful in scenarios including but not limited to:

Installing a new version of node.js, where you need to recompile all your C++ add-ons with the updated binary.
Installing with --ignore-scripts and --no-bin-links, to explicitly choose which packages to build and/or link bins.

If one or more package specs are provided, then only packages with a name and version matching one of the specifiers will be rebuilt.
Usually, you should not need to run npm rebuild as it is already done for you as part of npm install (unless you suppressed these steps with --ignore-scripts or --no-bin-links).
If there is a binding.gyp file in the root of your package, then npm will use a default install hook:
"scripts": {    "install": "node-gyp rebuild"}
This default behavior is suppressed if the package.json has its own install or preinstall scripts. It is also suppressed if the package specifies "gypfile": false
Configuration
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

bin-links

Default: true
Type: Boolean

Tells npm to create symlinks (or .cmd shims on Windows) for package executables.
Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
install-links

Default: false
Type: Boolean

When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
See Also

package spec
npm install
Edit this page on GitHub2 contributorssiemhesdalukekarrysLast edited by siemhesda on October 18, 2023\n\n\n\nCLICommandsnpm reponpm-repoOpen package repository page in the browserSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationbrowserregistryworkspaceworkspacesinclude-workspace-rootSee AlsoSynopsis
npm repo [<pkgname> [<pkgname> ...]]
Description
This command tries to guess at the likely location of a package's repository URL, and then tries to open it using the --browser config param. If no package name is provided, it will search for a package.json in the current folder and use the repository property.
Configuration
browser

Default: OS X: "open", Windows: "start", Others: "xdg-open"
Type: null, Boolean, or String

The browser that is called by npm commands to open websites.
Set to false to suppress browser behavior and instead print urls to terminal.
Set to true to use default system URL opener.
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
See Also

npm docs
npm config
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm restartnpm-restartRestart a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationignore-scriptsscript-shellSee AlsoSynopsis
npm restart [-- <args>]
Description
This restarts a project. It is equivalent to running npm run-script restart.
If the current project has a "restart" script specified in package.json, then the following scripts will be run:

prerestart
restart
postrestart

If it does not have a "restart" script specified, but it does have stop and/or start scripts, then the following scripts will be run:

prerestart
prestop
stop
poststop
prestart
start
poststart
postrestart

Configuration
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
script-shell

Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows
Type: null or String

The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.
See Also

npm run-script
npm scripts
npm test
npm start
npm stop
npm restart
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm rootnpm-rootDisplay npm rootSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationglobalSee AlsoSynopsis
npm root
Note: This command is unaware of workspaces.
Description
Print the effective node_modules folder to standard out.
Useful for using npm in shell scripts that do things with the node_modules folder. For example:
#!/bin/bashglobal_node_modules="$(npm root --global)"echo "Global packages installed in: ${global_node_modules}"
Configuration
global

Default: false
Type: Boolean

Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See folders for more on the differences in behavior.

packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

See Also

npm prefix
npm folders
npm config
npmrc
Edit this page on GitHub2 contributorsKevinRouchutlukekarrysLast edited by KevinRouchut on March 29, 2023\n\n\n\nCLICommandsnpm run-scriptnpm-run-scriptRun arbitrary package scriptsSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionWorkspaces supportFiltering workspacesConfigurationworkspaceworkspacesinclude-workspace-rootif-presentignore-scriptsforeground-scriptsscript-shellSee AlsoSynopsis
npm run-script <command> [-- <args>]
aliases: run, rum, urn
Description
This runs an arbitrary command from a package's "scripts" object. If no "command" is provided, it will list the available scripts.
run[-script] is used by the test, start, restart, and stop commands, but can be called directly, as well. When the scripts in the package are printed out, they're separated into lifecycle (test, start, restart) and directly-run scripts.
Any positional arguments are passed to the specified script. Use -- to pass --prefixed flags and options which would otherwise be parsed by npm.
For example:
npm run test -- --grep="pattern"
The arguments will only be passed to the script specified after npm run and not to any pre or post script.
The env script is a special built-in command that can be used to list environment variables that will be available to the script at runtime. If an "env" command is defined in your package, it will take precedence over the built-in.
In addition to the shell's pre-existing PATH, npm run adds node_modules/.bin to the PATH provided to scripts. Any binaries provided by locally-installed dependencies can be used without the node_modules/.bin prefix. For example, if there is a devDependency on tap in your package, you should write:
"scripts": {"test": "tap test/*.js"}
instead of
"scripts": {"test": "node_modules/.bin/tap test/*.js"}
The actual shell your script is run within is platform dependent. By default, on Unix-like systems it is the /bin/sh command, on Windows it is cmd.exe. The actual shell referred to by /bin/sh also depends on the system. You can customize the shell with the script-shell config.
Scripts are run from the root of the package folder, regardless of what the current working directory is when npm run is called. If you want your script to use different behavior based on what subdirectory you're in, you can use the INIT_CWD environment variable, which holds the full path you were in when you ran npm run.
npm run sets the NODE environment variable to the node executable with which npm is executed.
If you try to run a script without having a node_modules directory and it fails, you will be given a warning to run npm install, just in case you've forgotten.
Workspaces support
You may use the workspace or workspaces configs in order to run an arbitrary command from a package's "scripts" object in the context of the specified workspaces. If no "command" is provided, it will list the available scripts for each of these configured workspaces.
Given a project with configured workspaces, e.g:
.+-- package.json`-- packages   +-- a   |   `-- package.json   +-- b   |   `-- package.json   `-- c       `-- package.json
Assuming the workspace configuration is properly set up at the root level package.json file. e.g:
{    "workspaces": [ "./packages/*" ]}
And that each of the configured workspaces has a configured test script, we can run tests in all of them using the workspaces config:
npm test --workspaces
Filtering workspaces
It's also possible to run a script in a single workspace using the workspace config along with a name or directory path:
npm test --workspace=a
The workspace config can also be specified multiple times in order to run a specific script in the context of multiple workspaces. When defining values for the workspace config in the command line, it also possible to use -w as a shorthand, e.g:
npm test -w a -w b
This last command will run test in both ./packages/a and ./packages/b packages.
Configuration
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
include-workspace-root

Default: false
Type: Boolean

Include the workspace root when workspaces are enabled for a command.
When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate only on the specified workspaces, and not on the root project.
This value is not exported to the environment for child processes.
if-present

Default: false
Type: Boolean

If true, npm will not exit with an error code when run-script is invoked for a script that isn't defined in the scripts section of package.json. This option can be used when it's desirable to optionally run a script when it's present and fail if the script fails. This is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup.
This value is not exported to the environment for child processes.
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
foreground-scripts

Default: false unless when using npm pack or npm publish where it defaults to true
Type: Boolean

Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.
Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
script-shell

Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows
Type: null or String

The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.
See Also

npm scripts
npm test
npm start
npm restart
npm stop
npm config
npm workspaces
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm sbomnpm-sbomGenerate a Software Bill of Materials (SBOM)Select CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionExample CycloneDX SBOMExample SPDX SBOMPackage lock only modeConfigurationomitpackage-lock-onlysbom-formatsbom-typeworkspaceworkspacesSee AlsoSynopsis
npm sbom
Description
The npm sbom command generates a Software Bill of Materials (SBOM) listing the dependencies for the current project. SBOMs can be generated in either SPDX or CycloneDX format.
Example CycloneDX SBOM
{  "$schema": "http://cyclonedx.org/schema/bom-1.5.schema.json",  "bomFormat": "CycloneDX",  "specVersion": "1.5",  "serialNumber": "urn:uuid:09f55116-97e1-49cf-b3b8-44d0207e7730",  "version": 1,  "metadata": {    "timestamp": "2023-09-01T00:00:00.001Z",    "lifecycles": [      {        "phase": "build"      }    ],    "tools": [      {        "vendor": "npm",        "name": "cli",        "version": "10.1.0"      }    ],    "component": {      "bom-ref": "simple@1.0.0",      "type": "library",      "name": "simple",      "version": "1.0.0",      "scope": "required",      "author": "John Doe",      "description": "simple react app",      "purl": "pkg:npm/simple@1.0.0",      "properties": [        {          "name": "cdx:npm:package:path",          "value": ""        }      ],      "externalReferences": [],      "licenses": [        {          "license": {            "id": "MIT"          }        }      ]    }  },  "components": [    {      "bom-ref": "lodash@4.17.21",      "type": "library",      "name": "lodash",      "version": "4.17.21",      "scope": "required",      "author": "John-David Dalton",      "description": "Lodash modular utilities.",      "purl": "pkg:npm/lodash@4.17.21",      "properties": [        {          "name": "cdx:npm:package:path",          "value": "node_modules/lodash"        }      ],      "externalReferences": [        {          "type": "distribution",          "url": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz"        },        {          "type": "vcs",          "url": "git+https://github.com/lodash/lodash.git"        },        {          "type": "website",          "url": "https://lodash.com/"        },        {          "type": "issue-tracker",          "url": "https://github.com/lodash/lodash/issues"        }      ],      "hashes": [        {          "alg": "SHA-512",          "content": "bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a"        }      ],      "licenses": [        {          "license": {            "id": "MIT"          }        }      ]    }  ],  "dependencies": [    {      "ref": "simple@1.0.0",      "dependsOn": ["lodash@4.17.21"]    },    {      "ref": "lodash@4.17.21",      "dependsOn": []    }  ]}
Example SPDX SBOM
{  "spdxVersion": "SPDX-2.3",  "dataLicense": "CC0-1.0",  "SPDXID": "SPDXRef-DOCUMENT",  "name": "simple@1.0.0",  "documentNamespace": "http://spdx.org/spdxdocs/simple-1.0.0-bf81090e-8bbc-459d-bec9-abeb794e096a",  "creationInfo": {    "created": "2023-09-01T00:00:00.001Z",    "creators": ["Tool: npm/cli-10.1.0"]  },  "documentDescribes": ["SPDXRef-Package-simple-1.0.0"],  "packages": [    {      "name": "simple",      "SPDXID": "SPDXRef-Package-simple-1.0.0",      "versionInfo": "1.0.0",      "packageFileName": "",      "description": "simple react app",      "primaryPackagePurpose": "LIBRARY",      "downloadLocation": "NOASSERTION",      "filesAnalyzed": false,      "homepage": "NOASSERTION",      "licenseDeclared": "MIT",      "externalRefs": [        {          "referenceCategory": "PACKAGE-MANAGER",          "referenceType": "purl",          "referenceLocator": "pkg:npm/simple@1.0.0"        }      ]    },    {      "name": "lodash",      "SPDXID": "SPDXRef-Package-lodash-4.17.21",      "versionInfo": "4.17.21",      "packageFileName": "node_modules/lodash",      "description": "Lodash modular utilities.",      "downloadLocation": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",      "filesAnalyzed": false,      "homepage": "https://lodash.com/",      "licenseDeclared": "MIT",      "externalRefs": [        {          "referenceCategory": "PACKAGE-MANAGER",          "referenceType": "purl",          "referenceLocator": "pkg:npm/lodash@4.17.21"        }      ],      "checksums": [        {          "algorithm": "SHA512",          "checksumValue": "bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a"        }      ]    }  ],  "relationships": [    {      "spdxElementId": "SPDXRef-DOCUMENT",      "relatedSpdxElement": "SPDXRef-Package-simple-1.0.0",      "relationshipType": "DESCRIBES"    },    {      "spdxElementId": "SPDXRef-Package-simple-1.0.0",      "relatedSpdxElement": "SPDXRef-Package-lodash-4.17.21",      "relationshipType": "DEPENDS_ON"    }  ]}
Package lock only mode
If package-lock-only is enabled, only the information in the package lock (or shrinkwrap) is loaded. This means that information from the package.json files of your dependencies will not be included in the result set (e.g. description, homepage, engines).
Configuration
omit

Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.
Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.
Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not physically installed on disk.
If a package type appears in both the --include and --omit lists, then it will be included.
If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.
package-lock-only

Default: false
Type: Boolean

If set to true, the current operation will only use the package-lock.json, ignoring node_modules.
For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.
For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.
sbom-format

Default: null
Type: "cyclonedx" or "spdx"

SBOM format to use when generating SBOMs.
sbom-type

Default: "library"
Type: "library", "application", or "framework"

The type of package described by the generated SBOM. For SPDX, this is the value for the primaryPackagePurpose field. For CycloneDX, this is the value for the type field.
workspace

Default:
Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.
Valid values for the workspace config are either:

Workspace names
Path to a workspace directory
Path to a parent workspace directory (will result in selecting all workspaces within that folder)

When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.
This value is not exported to the environment for child processes.
workspaces

Default: null
Type: null or Boolean

Set to true to run the command in the context of all configured workspaces.
Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

Commands that operate on the node_modules tree (install, update, etc.) will link workspaces into the node_modules folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the workspace config.

This value is not exported to the environment for child processes.
See Also

package spec
dependency selectors
package.json
workspaces
Edit this page on GitHub1 contributorbdehamerLast edited by bdehamer on September 27, 2023\n\n\n\nCLICommandsnpm searchnpm-searchSearch for packagesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationjsoncolorparseabledescriptionsearchlimitsearchoptssearchexcluderegistryprefer-onlineprefer-offlineofflineSee AlsoSynopsis
npm search <search term> [<search term> ...]
aliases: find, s, se
Note: This command is unaware of workspaces.
Description
Search the registry for packages matching the search terms. npm search performs a linear, incremental, lexically-ordered search through package metadata for all files in the registry. If your terminal has color support, it will further highlight the matches in the results. This can be disabled with the config item color
Additionally, using the --searchopts and --searchexclude options paired with more search terms will include and exclude further patterns. The main difference between --searchopts and the standard search terms is that the former does not highlight results in the output and you can use them more fine-grained filtering. Additionally, you can add both of these to your config to change default search filtering behavior.
Search also allows targeting of maintainers in search results, by prefixing their npm username with =.
If a term starts with /, then it's interpreted as a regular expression and supports standard JavaScript RegExp syntax. In this case search will ignore a trailing / . (Note you must escape or quote many regular expression characters in most shells.)
Configuration
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
color

Default: true unless the NO_COLOR environ is set to something other than '0'
Type: "always" or Boolean

If false, never shows colors. If "always" then always shows colors. If true, then only prints color codes for tty file descriptors.
parseable

Default: false
Type: Boolean

Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.
description

Default: true
Type: Boolean

Show the description in npm search
searchlimit

Default: 20
Type: Number

Number of items to limit search results to. Will not apply at all to legacy searches.
searchopts

Default: ""
Type: String

Space-separated options that are always passed to search.
searchexclude

Default: ""
Type: String

Space-separated options that limit the results from search.
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
prefer-online

Default: false
Type: Boolean

If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data.
prefer-offline

Default: false
Type: Boolean

If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode, use --offline.
offline

Default: false
Type: Boolean

Force offline mode: no network requests will be done during install. To allow the CLI to fill in missing cache data, see --prefer-offline.
See Also

npm registry
npm config
npmrc
npm view
npm cache
https://npm.im/npm-registry-fetch
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm shrinkwrapnpm-shrinkwrapLock down dependency versions for publicationSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionSee AlsoSynopsis
npm shrinkwrap
Note: This command is unaware of workspaces.
Description
This command repurposes package-lock.json into a publishable npm-shrinkwrap.json or simply creates a new one. The file created and updated by this command will then take precedence over any other existing or future package-lock.json files. For a detailed explanation of the design and purpose of package locks in npm, see package-lock-json.
See Also

npm install
npm run-script
npm scripts
package.json
package-lock.json
npm-shrinkwrap.json
npm ls
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm starnpm-starMark your favorite packagesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionMoreUnstarListing starsConfigurationregistryunicodeotpSee AlsoSynopsis
npm star [<package-spec>...]
Note: This command is unaware of workspaces.
Description
"Starring" a package means that you have some interest in it. It's a vaguely positive way to show that you care.
It's a boolean thing. Starring repeatedly has no additional effect.
More
There's also these extra commands to help you manage your favorite packages:
Unstar
You can also "unstar" a package using npm unstar
"Unstarring" is the same thing, but in reverse.
Listing stars
You can see all your starred packages using npm stars
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
unicode

Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG environment variables.
Type: Boolean

When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
See Also

package spec
npm unstar
npm stars
npm view
npm whoami
npm adduser
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm starsnpm-starsView packages marked as favoritesSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationregistrySee AlsoSynopsis
npm stars [<user>]
Note: This command is unaware of workspaces.
Description
If you have starred a lot of neat things and want to find them again quickly this command lets you do just that.
You may also want to see your friend's favorite packages, in this case you will most certainly enjoy this command.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
See Also

npm star
npm unstar
npm view
npm whoami
npm adduser
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on January 1, 2023\n\n\n\nCLICommandsnpm startnpm-startStart a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionExampleConfigurationignore-scriptsscript-shellSee AlsoSynopsis
npm start [-- <args>]
Description
This runs a predefined command specified in the "start" property of a package's "scripts" object.
If the "scripts" object does not define a "start" property, npm will run node server.js.
Note that this is different from the default node behavior of running the file specified in a package's "main" attribute when evoking with node .
As of npm@2.0.0, you can use custom arguments when executing scripts. Refer to npm run-script for more details.
Example
{  "scripts": {    "start": "node foo.js"  }}
npm start
> npm@x.x.x start> node foo.js
(foo.js output would be here)
Configuration
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
script-shell

Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows
Type: null or String

The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.
See Also

npm run-script
npm scripts
npm test
npm restart
npm stop
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm stopnpm-stopStop a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionExampleConfigurationignore-scriptsscript-shellSee AlsoSynopsis
npm stop [-- <args>]
Description
This runs a predefined command specified in the "stop" property of a package's "scripts" object.
Unlike with npm start, there is no default script that will run if the "stop" property is not defined.
Example
{  "scripts": {    "stop": "node bar.js"  }}
npm stop
> npm@x.x.x stop> node bar.js
(bar.js output would be here)
Configuration
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
script-shell

Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows
Type: null or String

The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.
See Also

npm run-script
npm scripts
npm test
npm start
npm restart
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm teamnpm-teamManage organization teams and team membershipsSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionDetailsConfigurationregistryotpparseablejsonSee AlsoSynopsis
npm team create <scope:team> [--otp <otpcode>]npm team destroy <scope:team> [--otp <otpcode>]npm team add <scope:team> <user> [--otp <otpcode>]npm team rm <scope:team> <user> [--otp <otpcode>]npm team ls <scope>|<scope:team>
Note: This command is unaware of workspaces.
Description
Used to manage teams in organizations, and change team memberships. Does not handle permissions for packages.
Teams must always be fully qualified with the organization/scope they belong to when operating on them, separated by a colon (:). That is, if you have a newteam team in an org organization, you must always refer to that team as @org:newteam in these commands.
If you have two-factor authentication enabled in auth-and-writes mode, then you can provide a code from your authenticator with [--otp <otpcode>]. If you don't include this then you will be taken through a second factor flow based on your authtype.


create / destroy: Create a new team, or destroy an existing one. Note: You cannot remove the developers team, learn more.
Here's how to create a new team newteam under the org org:
npm team create @org:newteam
You should see a confirming message such as: +@org:newteam once the new team has been created.


add: Add a user to an existing team.
Adding a new user username to a team named newteam under the org org:
npm team add @org:newteam username
On success, you should see a message: username added to @org:newteam


rm: Using npm team rm you can also remove users from a team they belong to.
Here's an example removing user username from newteam team in org organization:
npm team rm @org:newteam username
Once the user is removed a confirmation message is displayed: username removed from @org:newteam


ls: If performed on an organization name, will return a list of existing teams under that organization. If performed on a team, it will instead return a list of all users belonging to that particular team.
Here's an example of how to list all teams from an org named org:
npm team ls @org
Example listing all members of a team named newteam:
npm team ls @org:newteam


Details
npm team always operates directly on the current registry, configurable from the command line using --registry=<registry url>.
You must be a team admin to create teams and manage team membership, under the given organization. Listing teams and team memberships may be done by any member of the organization.
Organization creation and management of team admins and organization members is done through the website, not the npm CLI.
To use teams to manage permissions on packages belonging to your organization, use the npm access command to grant or revoke the appropriate permissions.
Configuration
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
parseable

Default: false
Type: Boolean

Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.
json

Default: false
Type: Boolean

Whether or not to output JSON data, rather than the normal output.

In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

Not supported by all npm commands.
See Also

npm access
npm config
npm registry
Edit this page on GitHub2 contributorslukekarrysMylesBorinsLast edited by lukekarrys on October 23, 2023\n\n\n\nCLICommandsnpm testnpm-testTest a packageSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionExampleConfigurationignore-scriptsscript-shellSee AlsoSynopsis
npm test [-- <args>]
aliases: tst, t
Description
This runs a predefined command specified in the "test" property of a package's "scripts" object.
Example
{  "scripts": {    "test": "node test.js"  }}
npm test> npm@x.x.x test> node test.js
(test.js output would be here)
Configuration
ignore-scripts

Default: false
Type: Boolean

If true, npm does not run scripts specified in package.json files.
Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.
script-shell

Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows
Type: null or String

The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.
See Also

npm run-script
npm scripts
npm start
npm restart
npm stop
Edit this page on GitHub1 contributorlukekarrysLast edited by lukekarrys on October 5, 2022\n\n\n\nCLICommandsnpm tokennpm-tokenManage your authentication tokensSelect CLI Version:Version 11.3.0 (Latest)See DetailsTable of contentsSynopsisDescriptionConfigurationread-onlycidrregistryotpSee AlsoSynopsis
npm token listnpm token revoke <id|token>npm token create [--read-only] [--cidr=list]
Note: This command is unaware of workspaces.
Description
This lets you list, create and revoke authentication tokens.

npm token list: Shows a table of all active authentication tokens. You can request this as JSON with --json or tab-separated values with --parseable.

Read only token npm_1f… with id 7f3134 created 2017-10-21
Publish token npm_af…  with id c03241 created 2017-10-02with IP Whitelist: 192.168.0.1/24
Publish token npm_… with id e0cf92 created 2017-10-02


npm token create [--read-only] [--cidr=<cidr-ranges>]: Create a new authentication token. It can be --read-only, or accept a list of CIDR ranges with which to limit use of this token. This will prompt you for your password, and, if you have two-factor authentication enabled, an otp.
Currently, the cli can not generate automation tokens. Please refer to the docs website for more information on generating automation tokens.


Created publish token a73c9572-f1b9-8983-983d-ba3ac3cc913d

npm token revoke <token|id>: Immediately removes an authentication token from the registry. You will no longer be able to use it. This can accept both complete tokens (such as those you get back from npm token create, and those found in your .npmrc), and ids as seen in the parseable or json output of npm token list. This will NOT accept the truncated token found in the normal npm token list output.

Configuration
read-only

Default: false
Type: Boolean

This is used to mark a token as unable to publish when configuring limited access tokens with the npm token create command.
cidr

Default: null
Type: null or String (can be set multiple times)

This is a list of CIDR address to be used when configuring limited access tokens with the npm token create command.
registry

Default: "https://registry.npmjs.org/"
Type: URL

The base URL of the npm registry.
otp

Default: null
Type: null or String

This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.
If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
See Also

npm adduser
npm registry
npm config
npmrc
npm owner
npm whoami
npm profile
Edit this page on GitHub2 contributorswraithgarlukekarrysLast edited by wraithgar on April 22, 2024\n\n\n\n
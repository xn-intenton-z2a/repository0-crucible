AbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\n\n\nWeb technology for developersThe open Web presents incredible opportunities for developers. To take full advantage of these technologies, you need to know how to use them. Below you'll find links to our Web technology documentation.Documentation for Web developers
Web developer guides

The Web Developer Guides provide practical, how-to content to help you use Web technologies for your goals or needs.

Tutorials for Web developers

Tutorials to take you step-by-step through learning HTML, CSS, JavaScript, and Web APIs.

Accessibility

Enabling as many people as possible to use websites, even when those people's abilities are limited in some way.

Performance

Making content as available and interactive as possible, as soon as possible.

Privacy

Protecting users' personal data.

Security

Protecting users from data leaks and data theft, side-channel attacks, and attacks such as cross-site scripting, content injection, and click-jacking.

Glossary

Definitions of Web-related terms.

Web technology references
Web APIs

JavaScript programming APIs you can use to build apps on the Web.

HTML

HTML provides the fundamental building blocks for structuring Web documents and apps.

CSS

Cascading Style Sheets are used to describe the appearance of Web documents and apps.

JavaScript

JavaScript is the Web's native programming language.

WebAssembly

WebAssembly allows programs written in C, C++, Rust, Swift, C#, Go, and more to run on the Web.

Events

Events are what you build Web apps to react to; for example, when a Web page finishes loading, or a user selects something, presses a key, resizes a window, submits a form, or pauses a video.

HTTP

HTTP is the fundamental Internet protocol for fetching documents, stylesheets, scripts, images, videos, fonts, and other resources over the Web — and for sending data back to Web servers.

Media

Formats, codecs, protocols, APIs, and techniques for embedding and streaming video, audio, and image content in Web documents and apps.

SVG

Scalable Vector Graphics lets you create images that scale smoothly to any size.

MathML

MathML lets you display complex mathematical notation on the Web.

URI

Uniform Resource Identifiers are used by various technologies, including the browser itself via the address bar, to identify resources in various ways.

WebDriver

WebDriver is a browser-automation mechanism for remotely controlling a browser by emulating the actions of a real person using the browser. It's widely used for cross-browser testing of Web apps.

Web Extensions

Web Extensions are a way for you to give users enhanced capabilities in their browsers — for doing things such as blocking ads and other content, customizing the appearance of pages, and more.

Web App Manifests

Web App Manifests let you enable users to install Web apps to their device home screens, with aspects such as portrait/landscape screen orientation and display mode (e.g., full screen) pre-set.

Progressive Web Apps (PWAs)

Progressive Web Apps provide a user experience similar to native mobile apps.

OpenSearch

OpenSearch allows a website to describe a search engine for itself, so that a browser or other client application can use that search engine.

XML

The Extensible Markup Language is a strict serialization of the Document Object Model.

XSLT

Extensible Stylesheet Language Transformations is an XML-based language used, in conjunction with specialized processing software, for the transformation of XML documents.

XPath

XPath uses a non-XML syntax to provide a flexible way of addressing (pointing to) different parts of an XML document. It can also be used to test addressed nodes within a document to determine whether they match a pattern or not.

EXSLT

EXSLT a set of extensions to XSLT.

Developer tools documentation
Firefox Developer Tools

Documentation for the set of web-developer tools built into Firefox.

Chrome DevTools

Documentation for the set of web-developer tools built into Chrome.

Safari Web Inspector

Documentation for the set of web-developer tools built into Safari.

Edge DevTools

Documentation for the set of web-developer tools built into Edge.\n\nWeb technology for developersThe open Web presents incredible opportunities for developers. To take full advantage of these technologies, you need to know how to use them. Below you'll find links to our Web technology documentation.Documentation for Web developers
Web developer guides

The Web Developer Guides provide practical, how-to content to help you use Web technologies for your goals or needs.

Tutorials for Web developers

Tutorials to take you step-by-step through learning HTML, CSS, JavaScript, and Web APIs.

Accessibility

Enabling as many people as possible to use websites, even when those people's abilities are limited in some way.

Performance

Making content as available and interactive as possible, as soon as possible.

Privacy

Protecting users' personal data.

Security

Protecting users from data leaks and data theft, side-channel attacks, and attacks such as cross-site scripting, content injection, and click-jacking.

Glossary

Definitions of Web-related terms.

Web technology references
Web APIs

JavaScript programming APIs you can use to build apps on the Web.

HTML

HTML provides the fundamental building blocks for structuring Web documents and apps.

CSS

Cascading Style Sheets are used to describe the appearance of Web documents and apps.

JavaScript

JavaScript is the Web's native programming language.

WebAssembly

WebAssembly allows programs written in C, C++, Rust, Swift, C#, Go, and more to run on the Web.

Events

Events are what you build Web apps to react to; for example, when a Web page finishes loading, or a user selects something, presses a key, resizes a window, submits a form, or pauses a video.

HTTP

HTTP is the fundamental Internet protocol for fetching documents, stylesheets, scripts, images, videos, fonts, and other resources over the Web — and for sending data back to Web servers.

Media

Formats, codecs, protocols, APIs, and techniques for embedding and streaming video, audio, and image content in Web documents and apps.

SVG

Scalable Vector Graphics lets you create images that scale smoothly to any size.

MathML

MathML lets you display complex mathematical notation on the Web.

URI

Uniform Resource Identifiers are used by various technologies, including the browser itself via the address bar, to identify resources in various ways.

WebDriver

WebDriver is a browser-automation mechanism for remotely controlling a browser by emulating the actions of a real person using the browser. It's widely used for cross-browser testing of Web apps.

Web Extensions

Web Extensions are a way for you to give users enhanced capabilities in their browsers — for doing things such as blocking ads and other content, customizing the appearance of pages, and more.

Web App Manifests

Web App Manifests let you enable users to install Web apps to their device home screens, with aspects such as portrait/landscape screen orientation and display mode (e.g., full screen) pre-set.

Progressive Web Apps (PWAs)

Progressive Web Apps provide a user experience similar to native mobile apps.

OpenSearch

OpenSearch allows a website to describe a search engine for itself, so that a browser or other client application can use that search engine.

XML

The Extensible Markup Language is a strict serialization of the Document Object Model.

XSLT

Extensible Stylesheet Language Transformations is an XML-based language used, in conjunction with specialized processing software, for the transformation of XML documents.

XPath

XPath uses a non-XML syntax to provide a flexible way of addressing (pointing to) different parts of an XML document. It can also be used to test addressed nodes within a document to determine whether they match a pattern or not.

EXSLT

EXSLT a set of extensions to XSLT.

Developer tools documentation
Firefox Developer Tools

Documentation for the set of web-developer tools built into Firefox.

Chrome DevTools

Documentation for the set of web-developer tools built into Chrome.

Safari Web Inspector

Documentation for the set of web-developer tools built into Safari.

Edge DevTools

Documentation for the set of web-developer tools built into Edge.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 21, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nWeb technology for developersThe open Web presents incredible opportunities for developers. To take full advantage of these technologies, you need to know how to use them. Below you'll find links to our Web technology documentation.Documentation for Web developers
Web developer guides

The Web Developer Guides provide practical, how-to content to help you use Web technologies for your goals or needs.

Tutorials for Web developers

Tutorials to take you step-by-step through learning HTML, CSS, JavaScript, and Web APIs.

Accessibility

Enabling as many people as possible to use websites, even when those people's abilities are limited in some way.

Performance

Making content as available and interactive as possible, as soon as possible.

Privacy

Protecting users' personal data.

Security

Protecting users from data leaks and data theft, side-channel attacks, and attacks such as cross-site scripting, content injection, and click-jacking.

Glossary

Definitions of Web-related terms.

Web technology references
Web APIs

JavaScript programming APIs you can use to build apps on the Web.

HTML

HTML provides the fundamental building blocks for structuring Web documents and apps.

CSS

Cascading Style Sheets are used to describe the appearance of Web documents and apps.

JavaScript

JavaScript is the Web's native programming language.

WebAssembly

WebAssembly allows programs written in C, C++, Rust, Swift, C#, Go, and more to run on the Web.

Events

Events are what you build Web apps to react to; for example, when a Web page finishes loading, or a user selects something, presses a key, resizes a window, submits a form, or pauses a video.

HTTP

HTTP is the fundamental Internet protocol for fetching documents, stylesheets, scripts, images, videos, fonts, and other resources over the Web — and for sending data back to Web servers.

Media

Formats, codecs, protocols, APIs, and techniques for embedding and streaming video, audio, and image content in Web documents and apps.

SVG

Scalable Vector Graphics lets you create images that scale smoothly to any size.

MathML

MathML lets you display complex mathematical notation on the Web.

URI

Uniform Resource Identifiers are used by various technologies, including the browser itself via the address bar, to identify resources in various ways.

WebDriver

WebDriver is a browser-automation mechanism for remotely controlling a browser by emulating the actions of a real person using the browser. It's widely used for cross-browser testing of Web apps.

Web Extensions

Web Extensions are a way for you to give users enhanced capabilities in their browsers — for doing things such as blocking ads and other content, customizing the appearance of pages, and more.

Web App Manifests

Web App Manifests let you enable users to install Web apps to their device home screens, with aspects such as portrait/landscape screen orientation and display mode (e.g., full screen) pre-set.

Progressive Web Apps (PWAs)

Progressive Web Apps provide a user experience similar to native mobile apps.

OpenSearch

OpenSearch allows a website to describe a search engine for itself, so that a browser or other client application can use that search engine.

XML

The Extensible Markup Language is a strict serialization of the Document Object Model.

XSLT

Extensible Stylesheet Language Transformations is an XML-based language used, in conjunction with specialized processing software, for the transformation of XML documents.

XPath

XPath uses a non-XML syntax to provide a flexible way of addressing (pointing to) different parts of an XML document. It can also be used to test addressed nodes within a document to determine whether they match a pattern or not.

EXSLT

EXSLT a set of extensions to XSLT.

Developer tools documentation
Firefox Developer Tools

Documentation for the set of web-developer tools built into Firefox.

Chrome DevTools

Documentation for the set of web-developer tools built into Chrome.

Safari Web Inspector

Documentation for the set of web-developer tools built into Safari.

Edge DevTools

Documentation for the set of web-developer tools built into Edge.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 21, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nHTML: HyperText Markup LanguageHTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page's appearance/presentation (CSS) or functionality/behavior (JavaScript).
"Hypertext" refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.
HTML uses "markup" to annotate text, images, and other content for display in a Web browser. HTML markup includes special "elements" such as <head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <nav>, <search>, <output>, <progress>, <video>, <ul>, <ol>, <li> and many others.
An HTML element is set off from other text in a document by "tags", which consist of the element name surrounded by < and >. The name of an element inside a tag is case-insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the <title> tag can be written as <Title>, <TITLE>, or in any other way. However, the convention and recommended practice is to write tags in lowercase.
The articles below can help you learn more about HTML.Beginner's tutorials
Your first website: Creating the content

This article provides a brief tour of what HTML is and how to use it, aimed at people who are completely new to web development.

Structuring content with HTML

Our Learn web development section's HTML module teaches all the HTML fundamentals from the ground up.

Guides
HTML forms

Forms are a very important part of the Web — these provide much of the functionality you need for interacting with websites, e.g., registering and logging in, sending feedback, buying products, and more. This module gets you started with creating the client-side/front-end parts of forms.

CORS enabled image

The crossorigin attribute, in combination with an appropriate CORS header, allows images defined by the <img> element to be loaded from foreign origins and used in a <canvas> element as if they were being loaded from the current origin.

CORS settings attributes

Some HTML elements that provide support for CORS, such as <img> or <video>, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data.

Preloading content with rel="preload"

The preload value of the <link> element's rel attribute allows you to write declarative fetch requests in your HTML <head>, specifying resources that your pages will need very soon after loading, which you therefore want to start preloading early in the lifecycle of a page load, before the browser's main rendering machinery kicks in. This ensures that they are made available earlier and are less likely to block the page's first render, leading to performance improvements. This article provides a basic guide to how preload works.

Responsive images

In this article, we'll learn about the concept of responsive images — images that work well on devices with widely differing screen sizes, resolutions, and other such features — and look at what tools HTML provides to help implement them. This helps to improve performance across different devices.

Reference
HTML reference

HTML consists of elements, each of which may be modified by some number of attributes. HTML documents are connected to each other with links.

HTML element reference

Browse a list of all HTML elements.

HTML attribute reference

Elements in HTML have attributes. These are additional values that configure the elements or adjust their behavior in various ways.

Global attributes

Global attributes may be specified on all HTML elements, even those not specified in the standard. This means that any non-standard elements must still permit these attributes, even though those elements make the document HTML5-noncompliant.

Inline-level elements and block-level elements

HTML elements are usually "inline-level" or "block-level" elements. An inline-level element occupies only the space bounded by the tags that define it. A block-level element occupies the entire space of its parent element (container), thereby creating a "block box".

HTML comments

HTML comments are used to add explanatory notes to the markup or to prevent the browser from interpreting specific parts of the document.

Guide to media types and formats on the web

The <audio> and <video> elements allow you to play audio and video media natively within your content without the need for external software support.

HTML content categories

HTML is comprised of several kinds of content, each of which is allowed to be used in certain contexts and is disallowed in others. Similarly, each context has a set of other content categories it can contain and elements that can or can't be used in them. This is a guide to these categories.

Quirks mode and standards mode

Historical information on quirks mode and standards mode.

Related topics
Applying color to HTML elements using CSS

This article covers most of the ways you use CSS to add color to HTML content, listing what parts of HTML documents can be colored and what CSS properties to use when doing so.\n\nHTML: HyperText Markup LanguageHTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page's appearance/presentation (CSS) or functionality/behavior (JavaScript).
"Hypertext" refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.
HTML uses "markup" to annotate text, images, and other content for display in a Web browser. HTML markup includes special "elements" such as <head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <nav>, <search>, <output>, <progress>, <video>, <ul>, <ol>, <li> and many others.
An HTML element is set off from other text in a document by "tags", which consist of the element name surrounded by < and >. The name of an element inside a tag is case-insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the <title> tag can be written as <Title>, <TITLE>, or in any other way. However, the convention and recommended practice is to write tags in lowercase.
The articles below can help you learn more about HTML.Beginner's tutorials
Your first website: Creating the content

This article provides a brief tour of what HTML is and how to use it, aimed at people who are completely new to web development.

Structuring content with HTML

Our Learn web development section's HTML module teaches all the HTML fundamentals from the ground up.

Guides
HTML forms

Forms are a very important part of the Web — these provide much of the functionality you need for interacting with websites, e.g., registering and logging in, sending feedback, buying products, and more. This module gets you started with creating the client-side/front-end parts of forms.

CORS enabled image

The crossorigin attribute, in combination with an appropriate CORS header, allows images defined by the <img> element to be loaded from foreign origins and used in a <canvas> element as if they were being loaded from the current origin.

CORS settings attributes

Some HTML elements that provide support for CORS, such as <img> or <video>, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data.

Preloading content with rel="preload"

The preload value of the <link> element's rel attribute allows you to write declarative fetch requests in your HTML <head>, specifying resources that your pages will need very soon after loading, which you therefore want to start preloading early in the lifecycle of a page load, before the browser's main rendering machinery kicks in. This ensures that they are made available earlier and are less likely to block the page's first render, leading to performance improvements. This article provides a basic guide to how preload works.

Responsive images

In this article, we'll learn about the concept of responsive images — images that work well on devices with widely differing screen sizes, resolutions, and other such features — and look at what tools HTML provides to help implement them. This helps to improve performance across different devices.

Reference
HTML reference

HTML consists of elements, each of which may be modified by some number of attributes. HTML documents are connected to each other with links.

HTML element reference

Browse a list of all HTML elements.

HTML attribute reference

Elements in HTML have attributes. These are additional values that configure the elements or adjust their behavior in various ways.

Global attributes

Global attributes may be specified on all HTML elements, even those not specified in the standard. This means that any non-standard elements must still permit these attributes, even though those elements make the document HTML5-noncompliant.

Inline-level elements and block-level elements

HTML elements are usually "inline-level" or "block-level" elements. An inline-level element occupies only the space bounded by the tags that define it. A block-level element occupies the entire space of its parent element (container), thereby creating a "block box".

HTML comments

HTML comments are used to add explanatory notes to the markup or to prevent the browser from interpreting specific parts of the document.

Guide to media types and formats on the web

The <audio> and <video> elements allow you to play audio and video media natively within your content without the need for external software support.

HTML content categories

HTML is comprised of several kinds of content, each of which is allowed to be used in certain contexts and is disallowed in others. Similarly, each context has a set of other content categories it can contain and elements that can or can't be used in them. This is a guide to these categories.

Quirks mode and standards mode

Historical information on quirks mode and standards mode.

Related topics
Applying color to HTML elements using CSS

This article covers most of the ways you use CSS to add color to HTML content, listing what parts of HTML documents can be colored and what CSS properties to use when doing so.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nHTML: HyperText Markup LanguageHTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page's appearance/presentation (CSS) or functionality/behavior (JavaScript).
"Hypertext" refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.
HTML uses "markup" to annotate text, images, and other content for display in a Web browser. HTML markup includes special "elements" such as <head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <nav>, <search>, <output>, <progress>, <video>, <ul>, <ol>, <li> and many others.
An HTML element is set off from other text in a document by "tags", which consist of the element name surrounded by < and >. The name of an element inside a tag is case-insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the <title> tag can be written as <Title>, <TITLE>, or in any other way. However, the convention and recommended practice is to write tags in lowercase.
The articles below can help you learn more about HTML.Beginner's tutorials
Your first website: Creating the content

This article provides a brief tour of what HTML is and how to use it, aimed at people who are completely new to web development.

Structuring content with HTML

Our Learn web development section's HTML module teaches all the HTML fundamentals from the ground up.

Guides
HTML forms

Forms are a very important part of the Web — these provide much of the functionality you need for interacting with websites, e.g., registering and logging in, sending feedback, buying products, and more. This module gets you started with creating the client-side/front-end parts of forms.

CORS enabled image

The crossorigin attribute, in combination with an appropriate CORS header, allows images defined by the <img> element to be loaded from foreign origins and used in a <canvas> element as if they were being loaded from the current origin.

CORS settings attributes

Some HTML elements that provide support for CORS, such as <img> or <video>, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data.

Preloading content with rel="preload"

The preload value of the <link> element's rel attribute allows you to write declarative fetch requests in your HTML <head>, specifying resources that your pages will need very soon after loading, which you therefore want to start preloading early in the lifecycle of a page load, before the browser's main rendering machinery kicks in. This ensures that they are made available earlier and are less likely to block the page's first render, leading to performance improvements. This article provides a basic guide to how preload works.

Responsive images

In this article, we'll learn about the concept of responsive images — images that work well on devices with widely differing screen sizes, resolutions, and other such features — and look at what tools HTML provides to help implement them. This helps to improve performance across different devices.

Reference
HTML reference

HTML consists of elements, each of which may be modified by some number of attributes. HTML documents are connected to each other with links.

HTML element reference

Browse a list of all HTML elements.

HTML attribute reference

Elements in HTML have attributes. These are additional values that configure the elements or adjust their behavior in various ways.

Global attributes

Global attributes may be specified on all HTML elements, even those not specified in the standard. This means that any non-standard elements must still permit these attributes, even though those elements make the document HTML5-noncompliant.

Inline-level elements and block-level elements

HTML elements are usually "inline-level" or "block-level" elements. An inline-level element occupies only the space bounded by the tags that define it. A block-level element occupies the entire space of its parent element (container), thereby creating a "block box".

HTML comments

HTML comments are used to add explanatory notes to the markup or to prevent the browser from interpreting specific parts of the document.

Guide to media types and formats on the web

The <audio> and <video> elements allow you to play audio and video media natively within your content without the need for external software support.

HTML content categories

HTML is comprised of several kinds of content, each of which is allowed to be used in certain contexts and is disallowed in others. Similarly, each context has a set of other content categories it can contain and elements that can or can't be used in them. This is a guide to these categories.

Quirks mode and standards mode

Historical information on quirks mode and standards mode.

Related topics
Applying color to HTML elements using CSS

This article covers most of the ways you use CSS to add color to HTML content, listing what parts of HTML documents can be colored and what CSS properties to use when doing so.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nCSS: Cascading Style SheetsCascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.
CSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now just "CSS" with individual CSS modules having version numbers.
After CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.Beginner's tutorials
Your first website: Styling the content

This article provides a brief tour of what CSS is and how to use it, aimed at people who are completely new to web development.

CSS styling basics

Our Learn web development section's CSS basics module teaches CSS fundamentals from the ground up.

CSS text styling

Here we look at fundamentals including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.

CSS layout

Now it's time to look at how to correctly lay out your boxes in relation to one another, and the browser viewport. This module looks at floats, positioning, other modern layout tools, and building responsive designs that will adapt to different devices, screen sizes, and resolutions.

ReferenceThe CSS reference is an exhaustive reference for seasoned Web developers, describing every property and concept of CSS, including:

The syntax and forms of the language
Specificity, inheritance, and the cascade
CSS selectors, including pseudo-elements, nesting, scoping and shadow parts
CSS at-rules, including media and container queries
CSS values and units module, including numeric data types, textual data types and functional notations
Box model and margin collapse
The containing block
Stacking and block-formatting contexts
Initial, computed, used, and actual values
CSS shorthand properties
CSS flexible box, multi-column and grid layout
Animation, transitions, and transforms
CookbookThe CSS layout cookbook aims to bring together recipes for common layout patterns, things you might need to implement in your sites. In addition to providing code you can use as a starting point in your projects, these recipes highlight the different ways layout specifications can be used and the choices you can make as a developer.Tools for CSS development
You can use the W3C CSS Validation Service to check if your CSS is valid. This is an invaluable debugging tool.
Firefox Developer Tools lets you view and edit a page's live CSS via the Inspector and Style Editor tools.
The Web Developer extension for Firefox lets you track and edit live CSS on watched sites.
Meta bugs
Firefox: Firefox bug 1323667
See also
Web languages to which CSS is often applied: HTML, SVG, MathML, XHTML, and XML.
Stack Overflow questions about CSS\n\nCSS: Cascading Style SheetsCascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.
CSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now just "CSS" with individual CSS modules having version numbers.
After CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.Beginner's tutorials
Your first website: Styling the content

This article provides a brief tour of what CSS is and how to use it, aimed at people who are completely new to web development.

CSS styling basics

Our Learn web development section's CSS basics module teaches CSS fundamentals from the ground up.

CSS text styling

Here we look at fundamentals including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.

CSS layout

Now it's time to look at how to correctly lay out your boxes in relation to one another, and the browser viewport. This module looks at floats, positioning, other modern layout tools, and building responsive designs that will adapt to different devices, screen sizes, and resolutions.

ReferenceThe CSS reference is an exhaustive reference for seasoned Web developers, describing every property and concept of CSS, including:

The syntax and forms of the language
Specificity, inheritance, and the cascade
CSS selectors, including pseudo-elements, nesting, scoping and shadow parts
CSS at-rules, including media and container queries
CSS values and units module, including numeric data types, textual data types and functional notations
Box model and margin collapse
The containing block
Stacking and block-formatting contexts
Initial, computed, used, and actual values
CSS shorthand properties
CSS flexible box, multi-column and grid layout
Animation, transitions, and transforms
CookbookThe CSS layout cookbook aims to bring together recipes for common layout patterns, things you might need to implement in your sites. In addition to providing code you can use as a starting point in your projects, these recipes highlight the different ways layout specifications can be used and the choices you can make as a developer.Tools for CSS development
You can use the W3C CSS Validation Service to check if your CSS is valid. This is an invaluable debugging tool.
Firefox Developer Tools lets you view and edit a page's live CSS via the Inspector and Style Editor tools.
The Web Developer extension for Firefox lets you track and edit live CSS on watched sites.
Meta bugs
Firefox: Firefox bug 1323667
See also
Web languages to which CSS is often applied: HTML, SVG, MathML, XHTML, and XML.
Stack Overflow questions about CSS
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 22, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCSS: Cascading Style SheetsCascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.
CSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now just "CSS" with individual CSS modules having version numbers.
After CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.Beginner's tutorials
Your first website: Styling the content

This article provides a brief tour of what CSS is and how to use it, aimed at people who are completely new to web development.

CSS styling basics

Our Learn web development section's CSS basics module teaches CSS fundamentals from the ground up.

CSS text styling

Here we look at fundamentals including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.

CSS layout

Now it's time to look at how to correctly lay out your boxes in relation to one another, and the browser viewport. This module looks at floats, positioning, other modern layout tools, and building responsive designs that will adapt to different devices, screen sizes, and resolutions.

ReferenceThe CSS reference is an exhaustive reference for seasoned Web developers, describing every property and concept of CSS, including:

The syntax and forms of the language
Specificity, inheritance, and the cascade
CSS selectors, including pseudo-elements, nesting, scoping and shadow parts
CSS at-rules, including media and container queries
CSS values and units module, including numeric data types, textual data types and functional notations
Box model and margin collapse
The containing block
Stacking and block-formatting contexts
Initial, computed, used, and actual values
CSS shorthand properties
CSS flexible box, multi-column and grid layout
Animation, transitions, and transforms
CookbookThe CSS layout cookbook aims to bring together recipes for common layout patterns, things you might need to implement in your sites. In addition to providing code you can use as a starting point in your projects, these recipes highlight the different ways layout specifications can be used and the choices you can make as a developer.Tools for CSS development
You can use the W3C CSS Validation Service to check if your CSS is valid. This is an invaluable debugging tool.
Firefox Developer Tools lets you view and edit a page's live CSS via the Inspector and Style Editor tools.
The Web Developer extension for Firefox lets you track and edit live CSS on watched sites.
Meta bugs
Firefox: Firefox bug 1323667
See also
Web languages to which CSS is often applied: HTML, SVG, MathML, XHTML, and XML.
Stack Overflow questions about CSS
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 22, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nJavaScriptJavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g., functional programming) styles.
JavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via eval), object introspection (via for...in and Object utilities), and source-code recovery (JavaScript functions store their source text and can be retrieved through toString()).
This section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about APIs that are specific to Web pages, please see Web APIs and DOM.
The standards for JavaScript are the ECMAScript Language Specification (ECMA-262) and the ECMAScript Internationalization API specification (ECMA-402). As soon as one browser implements a feature, we try to document it. This means that cases where some proposals for new ECMAScript features have already been implemented in browsers, documentation and examples in MDN articles may use some of those new features. Most of the time, this happens between the stages 3 and 4, and is usually before the spec is officially published.
Do not confuse JavaScript with the Java programming language — JavaScript is not "Interpreted Java". Both "Java" and "JavaScript" are trademarks or registered trademarks of Oracle in the U.S. and other countries. However, the two programming languages have very different syntax, semantics, and use.
JavaScript documentation of core language features (pure ECMAScript, for the most part) includes the following:

The JavaScript guide
The JavaScript reference

For more information about JavaScript specifications and related technologies, see JavaScript technologies overview.Beginner's tutorialsLearn how to program in JavaScript from the ground up with our beginner's tutorials.

Your first website: Adding interactivity

This article provides a brief tour of what JavaScript is and how to use it, aimed at people who are completely new to web development.

Dynamic scripting with JavaScript

Our Learn web development section's JavaScript module teaches all the JavaScript fundamentals from the ground up.

JavaScript frameworks and libraries

JavaScript frameworks are an essential part of modern front-end web development, providing developers with tried and tested tools for building scalable, interactive web applications. Many modern companies use frameworks as a standard part of their tooling, so many front-end development jobs now require framework experience. In this set of articles, we aim to give you a comfortable starting point to help you begin learning frameworks.

JavaScript guidesFundamental language guides
JavaScript Guide

A much more detailed guide to the JavaScript language, aimed at those with previous programming experience either in JavaScript or another language.

Intermediate
Advanced JavaScript objects

The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you.

Asynchronous JavaScript

In this module, we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations, such as fetching resources from a server.

Client-side web APIs

Explores what APIs are, and how to use some of the most common APIs you'll come across often in your development work.

JavaScript language overview

An overview of the basic syntax and semantics of JavaScript for those coming from other programming languages to get up to speed.

JavaScript data structures

Overview of available data structures in JavaScript.

Equality comparisons and sameness

JavaScript provides three different value comparison operations: strict equality using ===, loose equality using ==, and the Object.is() method.

Enumerability and ownership of properties

How different methods that visit a group of object properties one-by-one handle the enumerability and ownership of properties.

Closures

A closure is the combination of a function and the lexical environment within which that function was declared.

Advanced
Inheritance and the prototype chain

Explanation of the widely misunderstood and underestimated prototype-based inheritance.

Memory Management

Memory life cycle and garbage collection in JavaScript.

ReferenceBrowse the complete JavaScript reference documentation.

Standard objects

Get to know standard built-in objects: Array, Boolean, Error, Function, JSON, Math, Number, Object, RegExp, String, Map, Set, WeakMap, WeakSet, and others.

Expressions and operators

Learn more about the behavior of JavaScript's operators instanceof, typeof, new, this, the operator precedence, and more.

Statements and declarations

Learn how do-while, for-in, for-of, try-catch, let, var, const, if-else, switch, and more JavaScript statements and keywords work.

Functions

Learn how to work with JavaScript's functions to develop your applications.

Classes

JavaScript classes are the most appropriate way to do object-oriented programming.\n\nJavaScriptJavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g., functional programming) styles.
JavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via eval), object introspection (via for...in and Object utilities), and source-code recovery (JavaScript functions store their source text and can be retrieved through toString()).
This section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about APIs that are specific to Web pages, please see Web APIs and DOM.
The standards for JavaScript are the ECMAScript Language Specification (ECMA-262) and the ECMAScript Internationalization API specification (ECMA-402). As soon as one browser implements a feature, we try to document it. This means that cases where some proposals for new ECMAScript features have already been implemented in browsers, documentation and examples in MDN articles may use some of those new features. Most of the time, this happens between the stages 3 and 4, and is usually before the spec is officially published.
Do not confuse JavaScript with the Java programming language — JavaScript is not "Interpreted Java". Both "Java" and "JavaScript" are trademarks or registered trademarks of Oracle in the U.S. and other countries. However, the two programming languages have very different syntax, semantics, and use.
JavaScript documentation of core language features (pure ECMAScript, for the most part) includes the following:

The JavaScript guide
The JavaScript reference

For more information about JavaScript specifications and related technologies, see JavaScript technologies overview.Beginner's tutorialsLearn how to program in JavaScript from the ground up with our beginner's tutorials.

Your first website: Adding interactivity

This article provides a brief tour of what JavaScript is and how to use it, aimed at people who are completely new to web development.

Dynamic scripting with JavaScript

Our Learn web development section's JavaScript module teaches all the JavaScript fundamentals from the ground up.

JavaScript frameworks and libraries

JavaScript frameworks are an essential part of modern front-end web development, providing developers with tried and tested tools for building scalable, interactive web applications. Many modern companies use frameworks as a standard part of their tooling, so many front-end development jobs now require framework experience. In this set of articles, we aim to give you a comfortable starting point to help you begin learning frameworks.

JavaScript guidesFundamental language guides
JavaScript Guide

A much more detailed guide to the JavaScript language, aimed at those with previous programming experience either in JavaScript or another language.

Intermediate
Advanced JavaScript objects

The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you.

Asynchronous JavaScript

In this module, we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations, such as fetching resources from a server.

Client-side web APIs

Explores what APIs are, and how to use some of the most common APIs you'll come across often in your development work.

JavaScript language overview

An overview of the basic syntax and semantics of JavaScript for those coming from other programming languages to get up to speed.

JavaScript data structures

Overview of available data structures in JavaScript.

Equality comparisons and sameness

JavaScript provides three different value comparison operations: strict equality using ===, loose equality using ==, and the Object.is() method.

Enumerability and ownership of properties

How different methods that visit a group of object properties one-by-one handle the enumerability and ownership of properties.

Closures

A closure is the combination of a function and the lexical environment within which that function was declared.

Advanced
Inheritance and the prototype chain

Explanation of the widely misunderstood and underestimated prototype-based inheritance.

Memory Management

Memory life cycle and garbage collection in JavaScript.

ReferenceBrowse the complete JavaScript reference documentation.

Standard objects

Get to know standard built-in objects: Array, Boolean, Error, Function, JSON, Math, Number, Object, RegExp, String, Map, Set, WeakMap, WeakSet, and others.

Expressions and operators

Learn more about the behavior of JavaScript's operators instanceof, typeof, new, this, the operator precedence, and more.

Statements and declarations

Learn how do-while, for-in, for-of, try-catch, let, var, const, if-else, switch, and more JavaScript statements and keywords work.

Functions

Learn how to work with JavaScript's functions to develop your applications.

Classes

JavaScript classes are the most appropriate way to do object-oriented programming.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nJavaScriptJavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g., functional programming) styles.
JavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via eval), object introspection (via for...in and Object utilities), and source-code recovery (JavaScript functions store their source text and can be retrieved through toString()).
This section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about APIs that are specific to Web pages, please see Web APIs and DOM.
The standards for JavaScript are the ECMAScript Language Specification (ECMA-262) and the ECMAScript Internationalization API specification (ECMA-402). As soon as one browser implements a feature, we try to document it. This means that cases where some proposals for new ECMAScript features have already been implemented in browsers, documentation and examples in MDN articles may use some of those new features. Most of the time, this happens between the stages 3 and 4, and is usually before the spec is officially published.
Do not confuse JavaScript with the Java programming language — JavaScript is not "Interpreted Java". Both "Java" and "JavaScript" are trademarks or registered trademarks of Oracle in the U.S. and other countries. However, the two programming languages have very different syntax, semantics, and use.
JavaScript documentation of core language features (pure ECMAScript, for the most part) includes the following:

The JavaScript guide
The JavaScript reference

For more information about JavaScript specifications and related technologies, see JavaScript technologies overview.Beginner's tutorialsLearn how to program in JavaScript from the ground up with our beginner's tutorials.

Your first website: Adding interactivity

This article provides a brief tour of what JavaScript is and how to use it, aimed at people who are completely new to web development.

Dynamic scripting with JavaScript

Our Learn web development section's JavaScript module teaches all the JavaScript fundamentals from the ground up.

JavaScript frameworks and libraries

JavaScript frameworks are an essential part of modern front-end web development, providing developers with tried and tested tools for building scalable, interactive web applications. Many modern companies use frameworks as a standard part of their tooling, so many front-end development jobs now require framework experience. In this set of articles, we aim to give you a comfortable starting point to help you begin learning frameworks.

JavaScript guidesFundamental language guides
JavaScript Guide

A much more detailed guide to the JavaScript language, aimed at those with previous programming experience either in JavaScript or another language.

Intermediate
Advanced JavaScript objects

The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you.

Asynchronous JavaScript

In this module, we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations, such as fetching resources from a server.

Client-side web APIs

Explores what APIs are, and how to use some of the most common APIs you'll come across often in your development work.

JavaScript language overview

An overview of the basic syntax and semantics of JavaScript for those coming from other programming languages to get up to speed.

JavaScript data structures

Overview of available data structures in JavaScript.

Equality comparisons and sameness

JavaScript provides three different value comparison operations: strict equality using ===, loose equality using ==, and the Object.is() method.

Enumerability and ownership of properties

How different methods that visit a group of object properties one-by-one handle the enumerability and ownership of properties.

Closures

A closure is the combination of a function and the lexical environment within which that function was declared.

Advanced
Inheritance and the prototype chain

Explanation of the widely misunderstood and underestimated prototype-based inheritance.

Memory Management

Memory life cycle and garbage collection in JavaScript.

ReferenceBrowse the complete JavaScript reference documentation.

Standard objects

Get to know standard built-in objects: Array, Boolean, Error, Function, JSON, Math, Number, Object, RegExp, String, Map, Set, WeakMap, WeakSet, and others.

Expressions and operators

Learn more about the behavior of JavaScript's operators instanceof, typeof, new, this, the operator precedence, and more.

Statements and declarations

Learn how do-while, for-in, for-of, try-catch, let, var, const, if-else, switch, and more JavaScript statements and keywords work.

Functions

Learn how to work with JavaScript's functions to develop your applications.

Classes

JavaScript classes are the most appropriate way to do object-oriented programming.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nHTTPHypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML.
It was designed for communication between web browsers and web servers, but it can also be used for other purposes, such as machine-to-machine communication, programmatic access to APIs, and more.
HTTP follows a classical client-server model, with a client opening a connection to make a request, then waiting until it receives a response from the server.
HTTP is a stateless protocol, meaning that the server does not keep any session data between two requests, although the later addition of cookies adds state to some client-server interactions.ReferenceThe HTTP reference documentation contains detailed information about headers, request methods, status responses, and lists relevant specifications and standards documents.

HTTP headers

Message headers are used to send metadata about a resource or a HTTP message, and to describe the behavior of the client or the server.

HTTP request methods

Request methods indicate the purpose of the request and what is expected if the request is successful.
The most common methods are GET and POST for retrieving and sending data to servers, respectively, but there are other methods which serve different purposes.

HTTP response status codes

Response status codes indicate the outcome of a specific HTTP request.
Responses are grouped in five classes: informational, successful, redirections, client errors, and server errors.

HTTP resources and specifications

This page lists relevant resources about HTTP since it was first specified in the early 1990s.


The following subsections are also notable:

CSP directives

The Content-Security-Policy (CSP) response header allows website administrators to specify which resources the user agent is allowed to load for a given page.
This section lists directives that can be used in a CSP header, with individual documentation pages that describe how the directives work and how to use them.

Permissions-Policy directives

The Permissions-Policy response header provides a mechanism to allow or deny the use of browser features in a document or within any <iframe> element in the document.
This section lists directives that can be used in a Permissions-Policy header, with individual documentation pages that describe how the directives work and how to use them.

GuidesHTTP is an extensible protocol that relies on concepts like resources and Uniform Resource Identifiers (URIs), a basic message structure, and client-server communication model.
On top of these concepts, numerous extensions have been developed over the years that add functionality and updated semantics, including additional HTTP methods and headers.
The HTTP guides are listed in order from general overviews to specialized, use-case-driven topics.
Beginners are encouraged to start with the foundational guides before exploring more focused articles.

Overview of HTTP

The basic features of HTTP, what it can do, its intended use in web architecture, and its position in the protocol stack.

Evolution of HTTP

HTTP was created in the early 1990s and has been extended several times.
This article goes through its history and describes HTTP/0.9, HTTP/1.0, HTTP/1.1, through HTTP/2 and HTTP/3, as well as novelties introduced over the years.

A typical HTTP session

Describes the flow of an HTTP session, from establishing a connection, sending a request, to receiving a response.

HTTP messages

HTTP messages transmitted as requests and responses have a defined structure.
This article describes this general structure, its purpose, and the different types of messages.

MIME types

Since HTTP/1.0, different types of content can be transmitted.
This article explains how this is accomplished using the Content-Type header and the MIME standard.
A shortlist of common types used by web developers can be found in Common MIME types.

Compression in HTTP

Browsers and servers compress their messages before sending them over the network to reduce the amount of data that needs to be transmitted, improving transfer speed and bandwidth utilization.

HTTP caching

Caching is a highly important mechanism for delivering fast experiences on the Web and for efficient use of resources.
This article describes different methods of caching and how to use HTTP headers to control them.

HTTP authentication

Authentication is a way to verify the identity of a client when making requests to a server.
It ensures that only authorized users or systems can access certain resources.

Using HTTP cookies

Although HTTP is a stateless protocol, a server can send a Set-Cookie header with the response.
The client then returns the cookie's value with every subsequent request to the server in the form of a Cookie request header.
This adds the ability to store and exchange a small amount of data which effectively adds state to some client-server interactions.

Redirections in HTTP

URL redirection, also known as URL forwarding, is a technique to give more than one URL address to a page, a form, a whole website, or a web application.
HTTP has a special kind of response, called a HTTP redirect, for this operation.

HTTP conditional requests

In conditional requests, the outcome of a request depends on the value of a validator in the request.
This method is used heavily in caching and use cases such as resuming a download, preventing lost updates when modifying a document on the server, and more.

HTTP range requests

A range request asks the server to send a specific part (or parts) of a resource back to a client instead of the full resource.
Range requests are useful for cases when a client knows they need only part of a large file, or for cases where an application allows the user to pause and resume a download.

Content negotiation

HTTP defines a set of message headers, starting with Accept as a way for a browser to announce the format, language, or encoding it prefers.
This article explains how this advertisement happens, how the server is expected to react, and how it chooses the most adequate response to a request.

Connection management in HTTP/1.x

HTTP/1.1 was the first version of HTTP to support persistent connections and pipelining.
This article explains both concepts, including the pros and cons of each.

Protocol upgrade mechanism

HTTP/1.1 provides a mechanism to upgrade an already-established connection to a different protocol using the Upgrade header.
A client can upgrade a connection from HTTP/1.1 to HTTP/2, or an HTTP(S) connection to a WebSocket (ws / wss).

Proxy servers and tunneling

A proxy can be on the user's local computer, or anywhere between the user's computer and a destination server on the Internet.
This page outlines some basics about proxies and introduces a few configuration options.

HTTP Client hints

Client Hints are a set of response headers that a server can use to proactively request information from a client about the device, network, user, and user-agent-specific preferences.
The server can then determine which resources to send, based on the information that the client chooses to provide.

Network Error Logging 
Experimental


Network Error Logging is a mechanism that can be configured via the NEL HTTP response header.
This experimental header allows websites and applications to opt-in to receive reports about failed (or even successful) network fetches from supporting browsers.

Browser detection using the user agent

It's very rarely a good idea to use user agent sniffing to detect a browser, but there are edge cases that require it.
This document will guide you in doing this as correctly as possible when this is necessary, with an emphasis on considerations to make before embarking on this route.

Security and privacy
Permissions Policy

Permissions Policy provides mechanisms for web developers to explicitly declare what functionality can and cannot be used on a website.
You define a set of "policies" that restrict what APIs the site's code can access or modify the browser's default behavior for certain features.

Cross-Origin Resource Sharing (CORS)

Cross-site HTTP requests are requests for resources from a different domain than that of the resource making the request.
Web pages today very commonly load cross-site resources, for example, a page 'Domain A' (http://domaina.example/) requests an image on 'Domain B' (http://domainb.foo/image.jpg) via the img element.
CORS allows web developers to control how their site reacts to cross-site requests.

Content Security Policy (CSP)

CSP allows website administrators to use the Content-Security-Policy response header to control which resources the client is allowed to load for a given page.
The CSP guide describes the overall Content Security Policy mechanism which helps detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks.

Cross-Origin Resource Policy (CORP)

CORP lets websites and applications opt in to protection against specific requests from other origins (such as those issued with elements like <script> and <img>), to mitigate speculative side-channel attacks.

Mozilla web security guidelines

A collection of tips to help operational teams with creating secure web applications.

Related resources
URIs

Uniform Resource Identifiers (URIs) are used to describe and locate resources on the web and are an essential component in HTTP requests.

Configuring servers for Ogg media

This guide covers a few server configuration changes that may be necessary for your web server to correctly serve Ogg media files.
This information may also be useful if you encounter other media types your server isn't already configured to recognize.

Tools & resourcesHelpful tools and resources for understanding and debugging HTTP.

Firefox Developer Tools

Network monitor

HTTP Observatory

A project designed to help developers, system administrators, and security professionals configure their sites safely and securely.

RedBot

Tools to check your cache-related headers.

nghttp2

An HTTP/2 client, server and proxy implementation written in C with load test and benchmarking tools and an HPACK encoder and decoder.

curl

A command-line tool for transferring data specified with URL syntax.
Supports HTTP, HTTPS, WS, WSS, among many other protocols.

How Browsers Work (2011)

A very comprehensive article on browser internals and request flow through HTTP protocol.\n\nHTTPHypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML.
It was designed for communication between web browsers and web servers, but it can also be used for other purposes, such as machine-to-machine communication, programmatic access to APIs, and more.
HTTP follows a classical client-server model, with a client opening a connection to make a request, then waiting until it receives a response from the server.
HTTP is a stateless protocol, meaning that the server does not keep any session data between two requests, although the later addition of cookies adds state to some client-server interactions.ReferenceThe HTTP reference documentation contains detailed information about headers, request methods, status responses, and lists relevant specifications and standards documents.

HTTP headers

Message headers are used to send metadata about a resource or a HTTP message, and to describe the behavior of the client or the server.

HTTP request methods

Request methods indicate the purpose of the request and what is expected if the request is successful.
The most common methods are GET and POST for retrieving and sending data to servers, respectively, but there are other methods which serve different purposes.

HTTP response status codes

Response status codes indicate the outcome of a specific HTTP request.
Responses are grouped in five classes: informational, successful, redirections, client errors, and server errors.

HTTP resources and specifications

This page lists relevant resources about HTTP since it was first specified in the early 1990s.


The following subsections are also notable:

CSP directives

The Content-Security-Policy (CSP) response header allows website administrators to specify which resources the user agent is allowed to load for a given page.
This section lists directives that can be used in a CSP header, with individual documentation pages that describe how the directives work and how to use them.

Permissions-Policy directives

The Permissions-Policy response header provides a mechanism to allow or deny the use of browser features in a document or within any <iframe> element in the document.
This section lists directives that can be used in a Permissions-Policy header, with individual documentation pages that describe how the directives work and how to use them.

GuidesHTTP is an extensible protocol that relies on concepts like resources and Uniform Resource Identifiers (URIs), a basic message structure, and client-server communication model.
On top of these concepts, numerous extensions have been developed over the years that add functionality and updated semantics, including additional HTTP methods and headers.
The HTTP guides are listed in order from general overviews to specialized, use-case-driven topics.
Beginners are encouraged to start with the foundational guides before exploring more focused articles.

Overview of HTTP

The basic features of HTTP, what it can do, its intended use in web architecture, and its position in the protocol stack.

Evolution of HTTP

HTTP was created in the early 1990s and has been extended several times.
This article goes through its history and describes HTTP/0.9, HTTP/1.0, HTTP/1.1, through HTTP/2 and HTTP/3, as well as novelties introduced over the years.

A typical HTTP session

Describes the flow of an HTTP session, from establishing a connection, sending a request, to receiving a response.

HTTP messages

HTTP messages transmitted as requests and responses have a defined structure.
This article describes this general structure, its purpose, and the different types of messages.

MIME types

Since HTTP/1.0, different types of content can be transmitted.
This article explains how this is accomplished using the Content-Type header and the MIME standard.
A shortlist of common types used by web developers can be found in Common MIME types.

Compression in HTTP

Browsers and servers compress their messages before sending them over the network to reduce the amount of data that needs to be transmitted, improving transfer speed and bandwidth utilization.

HTTP caching

Caching is a highly important mechanism for delivering fast experiences on the Web and for efficient use of resources.
This article describes different methods of caching and how to use HTTP headers to control them.

HTTP authentication

Authentication is a way to verify the identity of a client when making requests to a server.
It ensures that only authorized users or systems can access certain resources.

Using HTTP cookies

Although HTTP is a stateless protocol, a server can send a Set-Cookie header with the response.
The client then returns the cookie's value with every subsequent request to the server in the form of a Cookie request header.
This adds the ability to store and exchange a small amount of data which effectively adds state to some client-server interactions.

Redirections in HTTP

URL redirection, also known as URL forwarding, is a technique to give more than one URL address to a page, a form, a whole website, or a web application.
HTTP has a special kind of response, called a HTTP redirect, for this operation.

HTTP conditional requests

In conditional requests, the outcome of a request depends on the value of a validator in the request.
This method is used heavily in caching and use cases such as resuming a download, preventing lost updates when modifying a document on the server, and more.

HTTP range requests

A range request asks the server to send a specific part (or parts) of a resource back to a client instead of the full resource.
Range requests are useful for cases when a client knows they need only part of a large file, or for cases where an application allows the user to pause and resume a download.

Content negotiation

HTTP defines a set of message headers, starting with Accept as a way for a browser to announce the format, language, or encoding it prefers.
This article explains how this advertisement happens, how the server is expected to react, and how it chooses the most adequate response to a request.

Connection management in HTTP/1.x

HTTP/1.1 was the first version of HTTP to support persistent connections and pipelining.
This article explains both concepts, including the pros and cons of each.

Protocol upgrade mechanism

HTTP/1.1 provides a mechanism to upgrade an already-established connection to a different protocol using the Upgrade header.
A client can upgrade a connection from HTTP/1.1 to HTTP/2, or an HTTP(S) connection to a WebSocket (ws / wss).

Proxy servers and tunneling

A proxy can be on the user's local computer, or anywhere between the user's computer and a destination server on the Internet.
This page outlines some basics about proxies and introduces a few configuration options.

HTTP Client hints

Client Hints are a set of response headers that a server can use to proactively request information from a client about the device, network, user, and user-agent-specific preferences.
The server can then determine which resources to send, based on the information that the client chooses to provide.

Network Error Logging 
Experimental


Network Error Logging is a mechanism that can be configured via the NEL HTTP response header.
This experimental header allows websites and applications to opt-in to receive reports about failed (or even successful) network fetches from supporting browsers.

Browser detection using the user agent

It's very rarely a good idea to use user agent sniffing to detect a browser, but there are edge cases that require it.
This document will guide you in doing this as correctly as possible when this is necessary, with an emphasis on considerations to make before embarking on this route.

Security and privacy
Permissions Policy

Permissions Policy provides mechanisms for web developers to explicitly declare what functionality can and cannot be used on a website.
You define a set of "policies" that restrict what APIs the site's code can access or modify the browser's default behavior for certain features.

Cross-Origin Resource Sharing (CORS)

Cross-site HTTP requests are requests for resources from a different domain than that of the resource making the request.
Web pages today very commonly load cross-site resources, for example, a page 'Domain A' (http://domaina.example/) requests an image on 'Domain B' (http://domainb.foo/image.jpg) via the img element.
CORS allows web developers to control how their site reacts to cross-site requests.

Content Security Policy (CSP)

CSP allows website administrators to use the Content-Security-Policy response header to control which resources the client is allowed to load for a given page.
The CSP guide describes the overall Content Security Policy mechanism which helps detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks.

Cross-Origin Resource Policy (CORP)

CORP lets websites and applications opt in to protection against specific requests from other origins (such as those issued with elements like <script> and <img>), to mitigate speculative side-channel attacks.

Mozilla web security guidelines

A collection of tips to help operational teams with creating secure web applications.

Related resources
URIs

Uniform Resource Identifiers (URIs) are used to describe and locate resources on the web and are an essential component in HTTP requests.

Configuring servers for Ogg media

This guide covers a few server configuration changes that may be necessary for your web server to correctly serve Ogg media files.
This information may also be useful if you encounter other media types your server isn't already configured to recognize.

Tools & resourcesHelpful tools and resources for understanding and debugging HTTP.

Firefox Developer Tools

Network monitor

HTTP Observatory

A project designed to help developers, system administrators, and security professionals configure their sites safely and securely.

RedBot

Tools to check your cache-related headers.

nghttp2

An HTTP/2 client, server and proxy implementation written in C with load test and benchmarking tools and an HPACK encoder and decoder.

curl

A command-line tool for transferring data specified with URL syntax.
Supports HTTP, HTTPS, WS, WSS, among many other protocols.

How Browsers Work (2011)

A very comprehensive article on browser internals and request flow through HTTP protocol.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 9, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nHTTPHypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML.
It was designed for communication between web browsers and web servers, but it can also be used for other purposes, such as machine-to-machine communication, programmatic access to APIs, and more.
HTTP follows a classical client-server model, with a client opening a connection to make a request, then waiting until it receives a response from the server.
HTTP is a stateless protocol, meaning that the server does not keep any session data between two requests, although the later addition of cookies adds state to some client-server interactions.ReferenceThe HTTP reference documentation contains detailed information about headers, request methods, status responses, and lists relevant specifications and standards documents.

HTTP headers

Message headers are used to send metadata about a resource or a HTTP message, and to describe the behavior of the client or the server.

HTTP request methods

Request methods indicate the purpose of the request and what is expected if the request is successful.
The most common methods are GET and POST for retrieving and sending data to servers, respectively, but there are other methods which serve different purposes.

HTTP response status codes

Response status codes indicate the outcome of a specific HTTP request.
Responses are grouped in five classes: informational, successful, redirections, client errors, and server errors.

HTTP resources and specifications

This page lists relevant resources about HTTP since it was first specified in the early 1990s.


The following subsections are also notable:

CSP directives

The Content-Security-Policy (CSP) response header allows website administrators to specify which resources the user agent is allowed to load for a given page.
This section lists directives that can be used in a CSP header, with individual documentation pages that describe how the directives work and how to use them.

Permissions-Policy directives

The Permissions-Policy response header provides a mechanism to allow or deny the use of browser features in a document or within any <iframe> element in the document.
This section lists directives that can be used in a Permissions-Policy header, with individual documentation pages that describe how the directives work and how to use them.

GuidesHTTP is an extensible protocol that relies on concepts like resources and Uniform Resource Identifiers (URIs), a basic message structure, and client-server communication model.
On top of these concepts, numerous extensions have been developed over the years that add functionality and updated semantics, including additional HTTP methods and headers.
The HTTP guides are listed in order from general overviews to specialized, use-case-driven topics.
Beginners are encouraged to start with the foundational guides before exploring more focused articles.

Overview of HTTP

The basic features of HTTP, what it can do, its intended use in web architecture, and its position in the protocol stack.

Evolution of HTTP

HTTP was created in the early 1990s and has been extended several times.
This article goes through its history and describes HTTP/0.9, HTTP/1.0, HTTP/1.1, through HTTP/2 and HTTP/3, as well as novelties introduced over the years.

A typical HTTP session

Describes the flow of an HTTP session, from establishing a connection, sending a request, to receiving a response.

HTTP messages

HTTP messages transmitted as requests and responses have a defined structure.
This article describes this general structure, its purpose, and the different types of messages.

MIME types

Since HTTP/1.0, different types of content can be transmitted.
This article explains how this is accomplished using the Content-Type header and the MIME standard.
A shortlist of common types used by web developers can be found in Common MIME types.

Compression in HTTP

Browsers and servers compress their messages before sending them over the network to reduce the amount of data that needs to be transmitted, improving transfer speed and bandwidth utilization.

HTTP caching

Caching is a highly important mechanism for delivering fast experiences on the Web and for efficient use of resources.
This article describes different methods of caching and how to use HTTP headers to control them.

HTTP authentication

Authentication is a way to verify the identity of a client when making requests to a server.
It ensures that only authorized users or systems can access certain resources.

Using HTTP cookies

Although HTTP is a stateless protocol, a server can send a Set-Cookie header with the response.
The client then returns the cookie's value with every subsequent request to the server in the form of a Cookie request header.
This adds the ability to store and exchange a small amount of data which effectively adds state to some client-server interactions.

Redirections in HTTP

URL redirection, also known as URL forwarding, is a technique to give more than one URL address to a page, a form, a whole website, or a web application.
HTTP has a special kind of response, called a HTTP redirect, for this operation.

HTTP conditional requests

In conditional requests, the outcome of a request depends on the value of a validator in the request.
This method is used heavily in caching and use cases such as resuming a download, preventing lost updates when modifying a document on the server, and more.

HTTP range requests

A range request asks the server to send a specific part (or parts) of a resource back to a client instead of the full resource.
Range requests are useful for cases when a client knows they need only part of a large file, or for cases where an application allows the user to pause and resume a download.

Content negotiation

HTTP defines a set of message headers, starting with Accept as a way for a browser to announce the format, language, or encoding it prefers.
This article explains how this advertisement happens, how the server is expected to react, and how it chooses the most adequate response to a request.

Connection management in HTTP/1.x

HTTP/1.1 was the first version of HTTP to support persistent connections and pipelining.
This article explains both concepts, including the pros and cons of each.

Protocol upgrade mechanism

HTTP/1.1 provides a mechanism to upgrade an already-established connection to a different protocol using the Upgrade header.
A client can upgrade a connection from HTTP/1.1 to HTTP/2, or an HTTP(S) connection to a WebSocket (ws / wss).

Proxy servers and tunneling

A proxy can be on the user's local computer, or anywhere between the user's computer and a destination server on the Internet.
This page outlines some basics about proxies and introduces a few configuration options.

HTTP Client hints

Client Hints are a set of response headers that a server can use to proactively request information from a client about the device, network, user, and user-agent-specific preferences.
The server can then determine which resources to send, based on the information that the client chooses to provide.

Network Error Logging 
Experimental


Network Error Logging is a mechanism that can be configured via the NEL HTTP response header.
This experimental header allows websites and applications to opt-in to receive reports about failed (or even successful) network fetches from supporting browsers.

Browser detection using the user agent

It's very rarely a good idea to use user agent sniffing to detect a browser, but there are edge cases that require it.
This document will guide you in doing this as correctly as possible when this is necessary, with an emphasis on considerations to make before embarking on this route.

Security and privacy
Permissions Policy

Permissions Policy provides mechanisms for web developers to explicitly declare what functionality can and cannot be used on a website.
You define a set of "policies" that restrict what APIs the site's code can access or modify the browser's default behavior for certain features.

Cross-Origin Resource Sharing (CORS)

Cross-site HTTP requests are requests for resources from a different domain than that of the resource making the request.
Web pages today very commonly load cross-site resources, for example, a page 'Domain A' (http://domaina.example/) requests an image on 'Domain B' (http://domainb.foo/image.jpg) via the img element.
CORS allows web developers to control how their site reacts to cross-site requests.

Content Security Policy (CSP)

CSP allows website administrators to use the Content-Security-Policy response header to control which resources the client is allowed to load for a given page.
The CSP guide describes the overall Content Security Policy mechanism which helps detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks.

Cross-Origin Resource Policy (CORP)

CORP lets websites and applications opt in to protection against specific requests from other origins (such as those issued with elements like <script> and <img>), to mitigate speculative side-channel attacks.

Mozilla web security guidelines

A collection of tips to help operational teams with creating secure web applications.

Related resources
URIs

Uniform Resource Identifiers (URIs) are used to describe and locate resources on the web and are an essential component in HTTP requests.

Configuring servers for Ogg media

This guide covers a few server configuration changes that may be necessary for your web server to correctly serve Ogg media files.
This information may also be useful if you encounter other media types your server isn't already configured to recognize.

Tools & resourcesHelpful tools and resources for understanding and debugging HTTP.

Firefox Developer Tools

Network monitor

HTTP Observatory

A project designed to help developers, system administrators, and security professionals configure their sites safely and securely.

RedBot

Tools to check your cache-related headers.

nghttp2

An HTTP/2 client, server and proxy implementation written in C with load test and benchmarking tools and an HPACK encoder and decoder.

curl

A command-line tool for transferring data specified with URL syntax.
Supports HTTP, HTTPS, WS, WSS, among many other protocols.

How Browsers Work (2011)

A very comprehensive article on browser internals and request flow through HTTP protocol.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 9, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nWeb APIsWhen writing code for the Web, there are a large number of Web APIs available. Below is a list of all the APIs and interfaces (object types) that you may be able to use while developing your Web app or site.
Web APIs are typically used with JavaScript, although this doesn't always have to be the case.SpecificationsThis is a list of all the APIs that are available.
AAttribution Reporting API
Experimental
Audio Output Devices API
Experimental
BBackground Fetch API
Experimental
Background Synchronization APIBackground Tasks APIBadging APIBarcode Detection API
Experimental
Battery Status APIBeacon APIWeb Bluetooth API
Experimental
Broadcast Channel APICCSS Custom Highlight APICSS Font Loading APICSS Painting API
Experimental
CSS Properties and Values APICSS Typed Object Model APICSS Object Model (CSSOM)Canvas APIChannel Messaging APIClipboard APICompression Streams APICompute Pressure API
Experimental
Console APIContact Picker API
Experimental
Content Index API
Experimental
Cookie Store APICredential Management APIDDocument Object Model (DOM)Device Memory APIDevice orientation eventsDevice Posture API
Experimental
Document Picture-in-Picture API
Experimental
EEditContext API
Experimental
Encoding APIEncrypted Media Extensions APIEyeDropper API
Experimental
FFederated Credential Management (FedCM) API
Experimental
Fenced Frame API
Experimental
Fetch APIFile APIFile System APIFile and Directory Entries APIForce Touch events
Non-standard
Fullscreen APIGGamepad APIGeolocation APIGeometry interfacesHThe HTML DOM APIHTML Drag and Drop APIHistory APIHoudini APIsIIdle Detection API
Experimental
MediaStream Image Capture APIIndexedDB APIInk API
Experimental
InputDeviceCapabilities API
Experimental
Insertable Streams for MediaStreamTrack APIIntersection Observer APIInvoker Commands APIJJS Self-Profiling API
Experimental
KKeyboard API
Experimental
LLaunch Handler API
Experimental
Local Font Access API
Experimental
MMedia Capabilities APIMedia Capture and Streams API (Media Stream)Media Session APIMedia Source API
Experimental
MediaStream Recording APINNavigation API
Experimental
Network Information APIPPage Visibility APIPayment Handler API
Experimental
Payment Request APIPerformance APIsWeb Periodic Background Synchronization API
Experimental
Permissions APIPicture-in-Picture APIPointer eventsPointer Lock APIPopover APIPresentation API
Experimental
Prioritized Task Scheduling APIPush APIRRemote Playback APIReporting APIResize Observer APISSVG APIScreen Capture APIScreen Orientation APIScreen Wake Lock APISelection APISensor APIsServer-sent eventsService Worker APIShared Storage API
Experimental
Speculation Rules API
Experimental
Storage APIStorage Access APIStreams APITTopics API
Experimental

Non-standard
Touch eventsTrusted Types APIUUI EventsURL APIURL Fragment Text DirectivesURL Pattern API
Experimental
User-Agent Client Hints API
Experimental
VVibration APIView Transition APIVirtualKeyboard API
Experimental
Visual Viewport APIWWeb Animations APIWeb Audio APIWeb Authentication APIWeb ComponentsWeb Crypto APIWeb Locks APIWeb MIDI APIWeb NFC API
Experimental
Notifications APIWeb Serial API
Experimental
Web Share APIWeb Speech APIWeb Storage APIWeb Workers APIWebCodecs APIWebGL: 2D and 3D graphics for the webWebGPU API
Experimental
WebHID API
Experimental
WebOTP APIWebRTC APIThe WebSocket API (WebSockets)WebTransport APIWebUSB API
Experimental
WebVR API
Non-standard

Deprecated
WebVTT APIWebXR Device API
Experimental
Window Controls Overlay API
Experimental
Window Management API
Experimental
XXMLHttpRequest APIffetchLater() API
Experimental
InterfacesThis is a list of all the interfaces (that is, types of objects) that are available.
AAbortControllerAbortSignalAbsoluteOrientationSensorAbstractRangeAccelerometer
Experimental
AesCbcParamsAesCtrParamsAesGcmParamsAesKeyGenParamsAmbientLightSensor
Experimental
AnalyserNodeANGLE_instanced_arraysAnimationAnimationEffectAnimationEventAnimationPlaybackEventAnimationTimelineAttrAudioBufferAudioBufferSourceNodeAudioContextAudioDataAudioDecoderAudioDestinationNodeAudioEncoderAudioListenerAudioNodeAudioParamAudioParamDescriptorAudioParamMapAudioProcessingEvent
Deprecated
AudioScheduledSourceNodeAudioSinkInfo
Experimental
AudioTrackAudioTrackListAudioWorkletAudioWorkletGlobalScopeAudioWorkletNodeAudioWorkletProcessorAuthenticatorAssertionResponseAuthenticatorAttestationResponseAuthenticatorResponseBBackgroundFetchEvent
Experimental
BackgroundFetchManager
Experimental
BackgroundFetchRecord
Experimental
BackgroundFetchRegistration
Experimental
BackgroundFetchUpdateUIEvent
Experimental
BarcodeDetector
Experimental
BarPropBaseAudioContextBatteryManagerBeforeInstallPromptEvent
Experimental

Non-standard
BeforeUnloadEventBiquadFilterNodeBlobBlobEventBluetooth
Experimental
BluetoothCharacteristicProperties
Experimental
BluetoothDevice
Experimental
BluetoothRemoteGATTCharacteristic
Experimental
BluetoothRemoteGATTDescriptor
Experimental
BluetoothRemoteGATTServer
Experimental
BluetoothRemoteGATTService
Experimental
BluetoothUUIDBroadcastChannelBrowserCaptureMediaStreamTrack
Experimental
ByteLengthQueuingStrategyCCacheCacheStorageCanMakePaymentEvent
Experimental
CanvasCaptureMediaStreamTrackCanvasGradientCanvasPatternCanvasRenderingContext2DCaptureController
Experimental
CaretPositionCDATASectionChannelMergerNodeChannelSplitterNodeChapterInformation
Experimental
CharacterBoundsUpdateEvent
Experimental
CharacterDataClientClientsClipboardClipboardEventClipboardItemCloseEventCloseWatcher
Experimental
CommandEventCommentCompositionEventCompressionStreamcconsoleCConstantSourceNodeContactAddress
Experimental
ContactsManager
Experimental
ContentIndex
Experimental
ContentIndexEvent
Experimental
ContentVisibilityAutoStateChangeEventConvolverNodeCookieChangeEventCookieStoreCookieStoreManagerCountQueuingStrategyCredentialCredentialsContainerCropTarget
Experimental
CryptoCryptoKeyCryptoKeyPairCSPViolationReportBodyCSSCSSAnimationCSSConditionRuleCSSContainerRuleCSSCounterStyleRuleCSSFontFaceRuleCSSFontFeatureValuesRuleCSSFontPaletteValuesRuleCSSGroupingRuleCSSImageValueCSSImportRuleCSSKeyframeRuleCSSKeyframesRuleCSSKeywordValueCSSLayerBlockRuleCSSLayerStatementRuleCSSMathInvertCSSMathMaxCSSMathMinCSSMathNegateCSSMathProductCSSMathSumCSSMathValueCSSMatrixComponentCSSMediaRuleCSSNamespaceRuleCSSNestedDeclarationsCSSNumericArrayCSSNumericValueCSSPageDescriptors
Experimental
CSSPageRuleCSSPerspectiveCSSPositionTryDescriptors
Experimental
CSSPositionTryRule
Experimental
CSSPositionValue
Non-standard

Deprecated
CSSPrimitiveValue
Deprecated
CSSPropertyRuleCSSPseudoElement
Experimental
CSSRotateCSSRuleCSSRuleListCSSScaleCSSScopeRuleCSSSkewCSSSkewXCSSSkewYCSSStartingStyleRuleCSSStyleDeclarationCSSStyleRuleCSSStyleSheetCSSStyleValueCSSSupportsRuleCSSTransformComponentCSSTransformValueCSSTransitionCSSTranslateCSSUnitValueCSSUnparsedValueCSSValue
Deprecated
CSSValueList
Deprecated
CSSVariableReferenceValueCustomElementRegistryCustomEventCustomStateSetDDataTransferDataTransferItemDataTransferItemListDecompressionStreamDedicatedWorkerGlobalScopeDeferredRequestInit
Experimental
DelayNodeDelegatedInkTrailPresenter
Experimental
DeprecationReportBody
Experimental
DeviceMotionEventDeviceMotionEventAccelerationDeviceMotionEventRotationRateDeviceOrientationEventDevicePosture
Experimental
DirectoryEntrySync
Non-standard

Deprecated
DirectoryReaderSync
Non-standard

Deprecated
DocumentDocumentFragmentDocumentPictureInPicture
Experimental
DocumentPictureInPictureEvent
Experimental
DocumentTimelineDocumentTypeDOMError
Deprecated
DOMExceptionDOMHighResTimeStampDOMImplementationDOMMatrixDOMMatrixReadOnlyDOMParserDOMPointDOMPointReadOnlyDOMQuadDOMRectDOMRectListDOMRectReadOnlyDOMStringListDOMStringMapDOMTokenListDragEventDynamicsCompressorNodeEEcdhKeyDeriveParamsEcdsaParamsEcKeyGenParamsEcKeyImportParamsEditContext
Experimental
ElementElementInternalsEncodedAudioChunkEncodedVideoChunkErrorEventEventEventCountsEventSourceEventTargetExtendableCookieChangeEventExtendableEventExtendableMessageEventEyeDropper
Experimental
FFeaturePolicy
Experimental
FederatedCredential
Experimental
FederatedCredentialInitFence
Experimental
FencedFrameConfig
Experimental
FetchEventFetchLaterResult
Experimental
FileFileEntrySync
Non-standard

Deprecated
FileListFileReaderFileReaderSyncFileSystemFileSystemChangeRecordFileSystemDirectoryEntryFileSystemDirectoryHandleFileSystemDirectoryReaderFileSystemEntryFileSystemFileEntryFileSystemFileHandleFileSystemHandleFileSystemObserver
Experimental

Non-standard
FileSystemSync
Non-standard

Deprecated
FileSystemSyncAccessHandleFileSystemWritableFileStreamFocusEventFontData
Experimental
FontFaceFontFaceSetFontFaceSetLoadEventFormDataFormDataEventFragmentDirectiveGGainNodeGamepadGamepadButtonGamepadEventGamepadHapticActuatorGamepadPose
Experimental
GeolocationGeolocationCoordinatesGeolocationPositionGeolocationPositionErrorGestureEvent
Non-standard
GPU
Experimental
GPUAdapter
Experimental
GPUAdapterInfo
Experimental
GPUBindGroup
Experimental
GPUBindGroupLayout
Experimental
GPUBuffer
Experimental
GPUCanvasContext
Experimental
GPUCommandBuffer
Experimental
GPUCommandEncoder
Experimental
GPUCompilationInfo
Experimental
GPUCompilationMessage
Experimental
GPUComputePassEncoder
Experimental
GPUComputePipeline
Experimental
GPUDevice
Experimental
GPUDeviceLostInfo
Experimental
GPUError
Experimental
GPUExternalTexture
Experimental
GPUInternalError
Experimental
GPUOutOfMemoryError
Experimental
GPUPipelineError
Experimental
GPUPipelineLayout
Experimental
GPUQuerySet
Experimental
GPUQueue
Experimental
GPURenderBundle
Experimental
GPURenderBundleEncoder
Experimental
GPURenderPassEncoder
Experimental
GPURenderPipeline
Experimental
GPUSampler
Experimental
GPUShaderModule
Experimental
GPUSupportedFeatures
Experimental
GPUSupportedLimits
Experimental
GPUTexture
Experimental
GPUTextureView
Experimental
GPUUncapturedErrorEvent
Experimental
GPUValidationError
Experimental
GravitySensorGyroscopeHHashChangeEventHeadersHID
Experimental
HIDConnectionEvent
Experimental
HIDDevice
Experimental
HIDInputReportEvent
Experimental
HighlightHighlightRegistryHistoryHkdfParamsHmacImportParamsHmacKeyGenParamsHMDVRDevice
Non-standard

Deprecated
HTMLAllCollectionHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBaseElementHTMLBodyElementHTMLBRElementHTMLButtonElementHTMLCanvasElementHTMLCollectionHTMLDataElementHTMLDataListElementHTMLDetailsElementHTMLDialogElementHTMLDivElementHTMLDListElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFencedFrameElement
Experimental
HTMLFieldSetElementHTMLFontElement
Deprecated
HTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElement
Deprecated
HTMLHeadElementHTMLHeadingElementHTMLHRElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLabelElementHTMLLegendElementHTMLLIElementHTMLLinkElementHTMLMapElementHTMLMarqueeElement
Deprecated
HTMLMediaElementHTMLMenuElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLObjectElementHTMLOListElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLParamElement
Deprecated
HTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectedContentElementHTMLSelectElementHTMLSlotElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementIIDBCursorIDBCursorWithValueIDBDatabaseIDBFactoryIDBIndexIDBKeyRangeIDBObjectStoreIDBOpenDBRequestIDBRequestIDBTransactionIDBVersionChangeEventIdentityCredential
Experimental
IdentityCredentialRequestOptionsIdentityProvider
Experimental
IdleDeadlineIdleDetector
Experimental
IIRFilterNodeImageBitmapImageBitmapRenderingContextImageCaptureImageDataImageDecoderImageTrackImageTrackListInk
Experimental
InputDeviceCapabilities
Experimental
InputDeviceInfoInputEventInstallEventIntersectionObserverIntersectionObserverEntryInterventionReportBody
Experimental
KKeyboard
Experimental
KeyboardEventKeyboardLayoutMap
Experimental
KeyframeEffectLLargestContentfulPaintLaunchParams
Experimental
LaunchQueue
Experimental
LayoutShift
Experimental
LayoutShiftAttribution
Experimental
LinearAccelerationSensorLocationLockLockManagerMMagnetometer
Experimental
MathMLElementMediaCapabilitiesMediaDeviceInfoMediaDevicesMediaElementAudioSourceNodeMediaEncryptedEventMediaErrorMediaKeyMessageEventMediaKeysMediaKeySessionMediaKeyStatusMapMediaKeySystemAccessMediaListMediaMetadataMediaQueryListMediaQueryListEventMediaRecorderMediaRecorderErrorEvent
Non-standard

Deprecated
MediaSessionMediaSourceMediaSourceHandleMediaStreamMediaStreamAudioDestinationNodeMediaStreamAudioSourceNodeMediaStreamEvent
Non-standard

Deprecated
MediaStreamTrackMediaStreamTrackAudioSourceNodeMediaStreamTrackEventMediaStreamTrackGenerator
Experimental

Non-standard
MediaStreamTrackProcessorMediaTrackConstraintsMediaTrackSettingsMediaTrackSupportedConstraintsMerchantValidationEvent
Deprecated
MessageChannelMessageEventMessagePortMetadata
Experimental

Non-standard
MIDIAccessMIDIConnectionEventMIDIInputMIDIInputMapMIDIMessageEventMIDIOutputMIDIOutputMapMIDIPortMimeType
Deprecated
MimeTypeArray
Deprecated
MouseEventMouseScrollEvent
Non-standard

Deprecated
MutationEvent
Non-standard

Deprecated
MutationObserverMutationRecordNNamedNodeMapNavigateEvent
Experimental
Navigation
Experimental
NavigationActivation
Experimental
NavigationCurrentEntryChangeEvent
Experimental
NavigationDestination
Experimental
NavigationHistoryEntry
Experimental
NavigationPreloadManagerNavigationTransition
Experimental
NavigatorNavigatorLoginNavigatorUAData
Experimental
NDEFMessage
Experimental
NDEFReader
Experimental
NDEFReadingEvent
Experimental
NDEFRecord
Experimental
NetworkInformationNodeNodeIteratorNodeListNotificationNotificationEventNotRestoredReasonDetails
Experimental
NotRestoredReasons
Experimental
OOES_draw_buffers_indexedOfflineAudioCompletionEventOfflineAudioContextOffscreenCanvasOffscreenCanvasRenderingContext2DOrientationSensorOscillatorNodeOTPCredential
Experimental
OverconstrainedErrorPPageRevealEventPageSwapEventPageTransitionEventPaintRenderingContext2DPaintSizePaintWorkletGlobalScope
Experimental
PannerNodePasswordCredential
Experimental
PasswordCredentialInitPath2DPaymentAddress
Non-standard

Deprecated
PaymentManager
Experimental
PaymentMethodChangeEventPaymentRequestPaymentRequestEvent
Experimental
PaymentRequestUpdateEventPaymentResponsePbkdf2ParamsPerformancePerformanceElementTiming
Experimental
PerformanceEntryPerformanceEventTimingPerformanceLongAnimationFrameTiming
Experimental
PerformanceLongTaskTiming
Experimental
PerformanceMarkPerformanceMeasurePerformanceNavigation
Deprecated
PerformanceNavigationTimingPerformanceObserverPerformanceObserverEntryListPerformancePaintTimingPerformanceResourceTimingPerformanceScriptTiming
Experimental
PerformanceServerTimingPerformanceTiming
Deprecated
PeriodicSyncEvent
Experimental
PeriodicSyncManager
Experimental
PeriodicWavePermissionsPermissionStatusPictureInPictureEventPictureInPictureWindowPlugin
Deprecated
PluginArray
Deprecated
Point
Non-standard

Deprecated
PointerEventPopStateEventPositionSensorVRDevice
Non-standard

Deprecated
Presentation
Experimental
PresentationAvailability
Experimental
PresentationConnection
Experimental
PresentationConnectionAvailableEvent
Experimental
PresentationConnectionCloseEvent
Experimental
PresentationConnectionList
Experimental
PresentationReceiver
Experimental
PresentationRequest
Experimental
PressureObserver
Experimental
PressureRecord
Experimental
ProcessingInstructionProfiler
Experimental
ProgressEventPromiseRejectionEventPublicKeyCredentialPublicKeyCredentialCreationOptionsPublicKeyCredentialRequestOptionsPushEventPushManagerPushMessageDataPushSubscriptionPushSubscriptionOptionsRRadioNodeListRangeReadableByteStreamControllerReadableStreamReadableStreamBYOBReaderReadableStreamBYOBRequestReadableStreamDefaultControllerReadableStreamDefaultReaderRelativeOrientationSensorRemotePlaybackReportReportBodyReportingObserverRequestRequestInitResizeObserverResizeObserverEntryResizeObserverSizeResponseRestrictionTarget
Experimental
RsaHashedImportParamsRsaHashedKeyGenParamsRsaOaepParamsRsaPssParamsRTCAudioSourceStatsRTCCertificateRTCCertificateStatsRTCCodecStatsRTCDataChannelRTCDataChannelEventRTCDataChannelStatsRTCDtlsTransportRTCDTMFSenderRTCDTMFToneChangeEventRTCEncodedAudioFrameRTCEncodedVideoFrameRTCErrorRTCErrorEventRTCIceCandidateRTCIceCandidatePairRTCIceCandidatePairStatsRTCIceCandidateStatsRTCIceParametersRTCIceTransportRTCIdentityAssertion
Experimental
RTCInboundRtpStreamStatsRTCOutboundRtpStreamStatsRTCPeerConnectionRTCPeerConnectionIceErrorEventRTCPeerConnectionIceEventRTCPeerConnectionStatsRTCRemoteInboundRtpStreamStatsRTCRemoteOutboundRtpStreamStatsRTCRtpReceiverRTCRtpScriptTransformRTCRtpScriptTransformerRTCRtpSenderRTCRtpTransceiverRTCSctpTransportRTCSessionDescriptionRTCStatsReportRTCTrackEventRTCTransformEventRTCTransportStatsRTCVideoSourceStatsSSchedulerScheduling
Experimental
ScreenScreenDetailed
Experimental
ScreenDetails
Experimental
ScreenOrientationScriptProcessorNode
Deprecated
ScrollTimeline
Experimental
SecurePaymentConfirmationRequestSecurityPolicyViolationEventSelectionSensorSensorErrorEventSerial
Experimental
SerialPort
Experimental
ServiceWorkerServiceWorkerContainerServiceWorkerGlobalScopeServiceWorkerRegistrationShadowRootSharedStorage
Experimental
SharedStorageOperation
Experimental
SharedStorageRunOperation
Experimental
SharedStorageSelectURLOperation
Experimental
SharedStorageWorklet
Experimental
SharedStorageWorkletGlobalScope
Experimental
SharedWorkerSharedWorkerGlobalScopeSnapEvent
Experimental
SourceBufferSourceBufferListSpeechGrammar
Non-standard

Deprecated
SpeechGrammarList
Experimental
SpeechRecognitionSpeechRecognitionAlternativeSpeechRecognitionErrorEventSpeechRecognitionEventSpeechRecognitionResultSpeechRecognitionResultListSpeechSynthesisSpeechSynthesisErrorEventSpeechSynthesisEventSpeechSynthesisUtteranceSpeechSynthesisVoiceStaticRangeStereoPannerNodeStorageStorageAccessHandleStorageEventStorageManagerStylePropertyMapStylePropertyMapReadOnlyStyleSheetStyleSheetListSubmitEventSubtleCryptoSVGAElementSVGAngleSVGAnimateColorElement
Deprecated
SVGAnimatedAngleSVGAnimatedBooleanSVGAnimatedEnumerationSVGAnimatedIntegerSVGAnimatedLengthSVGAnimatedLengthListSVGAnimatedNumberSVGAnimatedNumberListSVGAnimatedPreserveAspectRatioSVGAnimatedRectSVGAnimatedStringSVGAnimatedTransformListSVGAnimateElementSVGAnimateMotionElementSVGAnimateTransformElementSVGAnimationElementSVGCircleElementSVGClipPathElementSVGComponentTransferFunctionElementSVGDefsElementSVGDescElementSVGDiscardElement
Experimental
SVGElementSVGEllipseElementSVGFEBlendElementSVGFEColorMatrixElementSVGFEComponentTransferElementSVGFECompositeElementSVGFEConvolveMatrixElementSVGFEDiffuseLightingElementSVGFEDisplacementMapElementSVGFEDistantLightElementSVGFEDropShadowElementSVGFEFloodElementSVGFEFuncAElementSVGFEFuncBElementSVGFEFuncGElementSVGFEFuncRElementSVGFEGaussianBlurElementSVGFEImageElementSVGFEMergeElementSVGFEMergeNodeElementSVGFEMorphologyElementSVGFEOffsetElementSVGFEPointLightElementSVGFESpecularLightingElementSVGFESpotLightElementSVGFETileElementSVGFETurbulenceElementSVGFilterElementSVGForeignObjectElementSVGGElementSVGGeometryElementSVGGradientElementSVGGraphicsElementSVGImageElementSVGLengthSVGLengthListSVGLinearGradientElementSVGLineElementSVGMarkerElementSVGMaskElementSVGMetadataElementSVGMPathElementSVGNumberSVGNumberListSVGPathElementSVGPatternElementSVGPoint
Deprecated
SVGPointListSVGPolygonElementSVGPolylineElementSVGPreserveAspectRatioSVGRadialGradientElementSVGRectSVGRectElementSVGRenderingIntent
Deprecated
SVGScriptElementSVGSetElementSVGStopElementSVGStringListSVGStyleElementSVGSVGElementSVGSwitchElementSVGSymbolElementSVGTextContentElementSVGTextElementSVGTextPathElementSVGTextPositioningElementSVGTitleElementSVGTransformSVGTransformListSVGTSpanElementSVGUnitTypesSVGUseElementSVGViewElementSyncEventSyncManagerTTaskAttributionTiming
Experimental
TaskControllerTaskPriorityChangeEventTaskSignalTextTextDecoderTextDecoderStreamTextEncoderTextEncoderStreamTextEvent
Deprecated
TextFormat
Experimental
TextFormatUpdateEvent
Experimental
TextMetricsTextTrackTextTrackCueTextTrackCueListTextTrackListTextUpdateEvent
Experimental
TimeEventTimeRangesToggleEventTouchTouchEventTouchListTrackEventTransformStreamTransformStreamDefaultControllerTransitionEventTreeWalkerTrustedHTMLTrustedScriptTrustedScriptURLTrustedTypePolicyTrustedTypePolicyFactoryUUIEventURLURLPattern
Experimental
URLSearchParamsUSB
Experimental
USBAlternateInterface
Experimental
USBConfiguration
Experimental
USBConnectionEvent
Experimental
USBDevice
Experimental
USBEndpoint
Experimental
USBInterface
Experimental
USBInTransferResult
Experimental
USBIsochronousInTransferPacket
Experimental
USBIsochronousInTransferResult
Experimental
USBIsochronousOutTransferPacket
Experimental
USBIsochronousOutTransferResult
Experimental
USBOutTransferResult
Experimental
UserActivationVValidityStateVideoColorSpaceVideoDecoderVideoEncoderVideoFrameVideoPlaybackQualityVideoTrackVideoTrackGenerator
Experimental
VideoTrackListViewTimeline
Experimental
ViewTransitionVirtualKeyboard
Experimental
VisibilityStateEntry
Experimental
VisualViewportVRDisplay
Non-standard

Deprecated
VRDisplayCapabilities
Non-standard

Deprecated
VRDisplayEvent
Non-standard

Deprecated
VREyeParameters
Non-standard

Deprecated
VRFieldOfView
Non-standard

Deprecated
VRFrameData
Non-standard

Deprecated
VRLayerInit
Deprecated
VRPose
Non-standard

Deprecated
VRStageParameters
Non-standard

Deprecated
VTTCueVTTRegionWWakeLockWakeLockSentinelWaveShaperNodeWebGL2RenderingContextWebGLActiveInfoWebGLBufferWebGLContextEventWebGLFramebufferWebGLObject
Experimental
WebGLProgramWebGLQueryWebGLRenderbufferWebGLRenderingContextWebGLSamplerWebGLShaderWebGLShaderPrecisionFormatWebGLSyncWebGLTextureWebGLTransformFeedbackWebGLUniformLocationWebGLVertexArrayObjectWebSocketWebSocketStream
Experimental
WebTransportWebTransportBidirectionalStreamWebTransportDatagramDuplexStreamWebTransportErrorWebTransportReceiveStream
Experimental
WebTransportSendStream
Experimental
WGSLLanguageFeatures
Experimental
WheelEventWindowWindowClientWindowControlsOverlay
Experimental
WindowControlsOverlayGeometryChangeEvent
Experimental
WindowSharedStorage
Experimental
WorkerWorkerGlobalScopeWorkerLocationWorkerNavigatorWorkletWorkletGlobalScopeWorkletSharedStorage
Experimental
WritableStreamWritableStreamDefaultControllerWritableStreamDefaultWriterXXMLDocumentXMLHttpRequestXMLHttpRequestEventTargetXMLHttpRequestUploadXMLSerializerXPathEvaluatorXPathExpressionXPathResultXRAnchor
Experimental
XRAnchorSet
Experimental
XRBoundedReferenceSpace
Experimental
XRCompositionLayer
Experimental
XRCPUDepthInformation
Experimental
XRCubeLayer
Experimental
XRCylinderLayer
Experimental
XRDepthInformation
Experimental
XREquirectLayer
Experimental
XRFrame
Experimental
XRHandXRHitTestResult
Experimental
XRHitTestSource
Experimental
XRInputSourceXRInputSourceArray
Experimental
XRInputSourceEventXRInputSourcesChangeEventXRJointPoseXRJointSpaceXRLayer
Experimental
XRLayerEvent
Experimental
XRLightEstimate
Experimental
XRLightProbe
Experimental
XRMediaBinding
Experimental
XRPoseXRProjectionLayer
Experimental
XRQuadLayer
Experimental
XRRay
Experimental
XRReferenceSpaceXRReferenceSpaceEventXRRenderState
Experimental
XRRigidTransformXRSession
Experimental
XRSessionEventXRSpaceXRSubImage
Experimental
XRSystem
Experimental
XRTransientInputHitTestResult
Experimental
XRTransientInputHitTestSource
Experimental
XRView
Experimental
XRViewerPoseXRViewportXRWebGLBinding
Experimental
XRWebGLDepthInformation
Experimental
XRWebGLLayer
Experimental
XRWebGLSubImage
Experimental
XSLTProcessorSee also
Web API event reference\n\nWeb APIsWhen writing code for the Web, there are a large number of Web APIs available. Below is a list of all the APIs and interfaces (object types) that you may be able to use while developing your Web app or site.
Web APIs are typically used with JavaScript, although this doesn't always have to be the case.SpecificationsThis is a list of all the APIs that are available.
AAttribution Reporting API
Experimental
Audio Output Devices API
Experimental
BBackground Fetch API
Experimental
Background Synchronization APIBackground Tasks APIBadging APIBarcode Detection API
Experimental
Battery Status APIBeacon APIWeb Bluetooth API
Experimental
Broadcast Channel APICCSS Custom Highlight APICSS Font Loading APICSS Painting API
Experimental
CSS Properties and Values APICSS Typed Object Model APICSS Object Model (CSSOM)Canvas APIChannel Messaging APIClipboard APICompression Streams APICompute Pressure API
Experimental
Console APIContact Picker API
Experimental
Content Index API
Experimental
Cookie Store APICredential Management APIDDocument Object Model (DOM)Device Memory APIDevice orientation eventsDevice Posture API
Experimental
Document Picture-in-Picture API
Experimental
EEditContext API
Experimental
Encoding APIEncrypted Media Extensions APIEyeDropper API
Experimental
FFederated Credential Management (FedCM) API
Experimental
Fenced Frame API
Experimental
Fetch APIFile APIFile System APIFile and Directory Entries APIForce Touch events
Non-standard
Fullscreen APIGGamepad APIGeolocation APIGeometry interfacesHThe HTML DOM APIHTML Drag and Drop APIHistory APIHoudini APIsIIdle Detection API
Experimental
MediaStream Image Capture APIIndexedDB APIInk API
Experimental
InputDeviceCapabilities API
Experimental
Insertable Streams for MediaStreamTrack APIIntersection Observer APIInvoker Commands APIJJS Self-Profiling API
Experimental
KKeyboard API
Experimental
LLaunch Handler API
Experimental
Local Font Access API
Experimental
MMedia Capabilities APIMedia Capture and Streams API (Media Stream)Media Session APIMedia Source API
Experimental
MediaStream Recording APINNavigation API
Experimental
Network Information APIPPage Visibility APIPayment Handler API
Experimental
Payment Request APIPerformance APIsWeb Periodic Background Synchronization API
Experimental
Permissions APIPicture-in-Picture APIPointer eventsPointer Lock APIPopover APIPresentation API
Experimental
Prioritized Task Scheduling APIPush APIRRemote Playback APIReporting APIResize Observer APISSVG APIScreen Capture APIScreen Orientation APIScreen Wake Lock APISelection APISensor APIsServer-sent eventsService Worker APIShared Storage API
Experimental
Speculation Rules API
Experimental
Storage APIStorage Access APIStreams APITTopics API
Experimental

Non-standard
Touch eventsTrusted Types APIUUI EventsURL APIURL Fragment Text DirectivesURL Pattern API
Experimental
User-Agent Client Hints API
Experimental
VVibration APIView Transition APIVirtualKeyboard API
Experimental
Visual Viewport APIWWeb Animations APIWeb Audio APIWeb Authentication APIWeb ComponentsWeb Crypto APIWeb Locks APIWeb MIDI APIWeb NFC API
Experimental
Notifications APIWeb Serial API
Experimental
Web Share APIWeb Speech APIWeb Storage APIWeb Workers APIWebCodecs APIWebGL: 2D and 3D graphics for the webWebGPU API
Experimental
WebHID API
Experimental
WebOTP APIWebRTC APIThe WebSocket API (WebSockets)WebTransport APIWebUSB API
Experimental
WebVR API
Non-standard

Deprecated
WebVTT APIWebXR Device API
Experimental
Window Controls Overlay API
Experimental
Window Management API
Experimental
XXMLHttpRequest APIffetchLater() API
Experimental
InterfacesThis is a list of all the interfaces (that is, types of objects) that are available.
AAbortControllerAbortSignalAbsoluteOrientationSensorAbstractRangeAccelerometer
Experimental
AesCbcParamsAesCtrParamsAesGcmParamsAesKeyGenParamsAmbientLightSensor
Experimental
AnalyserNodeANGLE_instanced_arraysAnimationAnimationEffectAnimationEventAnimationPlaybackEventAnimationTimelineAttrAudioBufferAudioBufferSourceNodeAudioContextAudioDataAudioDecoderAudioDestinationNodeAudioEncoderAudioListenerAudioNodeAudioParamAudioParamDescriptorAudioParamMapAudioProcessingEvent
Deprecated
AudioScheduledSourceNodeAudioSinkInfo
Experimental
AudioTrackAudioTrackListAudioWorkletAudioWorkletGlobalScopeAudioWorkletNodeAudioWorkletProcessorAuthenticatorAssertionResponseAuthenticatorAttestationResponseAuthenticatorResponseBBackgroundFetchEvent
Experimental
BackgroundFetchManager
Experimental
BackgroundFetchRecord
Experimental
BackgroundFetchRegistration
Experimental
BackgroundFetchUpdateUIEvent
Experimental
BarcodeDetector
Experimental
BarPropBaseAudioContextBatteryManagerBeforeInstallPromptEvent
Experimental

Non-standard
BeforeUnloadEventBiquadFilterNodeBlobBlobEventBluetooth
Experimental
BluetoothCharacteristicProperties
Experimental
BluetoothDevice
Experimental
BluetoothRemoteGATTCharacteristic
Experimental
BluetoothRemoteGATTDescriptor
Experimental
BluetoothRemoteGATTServer
Experimental
BluetoothRemoteGATTService
Experimental
BluetoothUUIDBroadcastChannelBrowserCaptureMediaStreamTrack
Experimental
ByteLengthQueuingStrategyCCacheCacheStorageCanMakePaymentEvent
Experimental
CanvasCaptureMediaStreamTrackCanvasGradientCanvasPatternCanvasRenderingContext2DCaptureController
Experimental
CaretPositionCDATASectionChannelMergerNodeChannelSplitterNodeChapterInformation
Experimental
CharacterBoundsUpdateEvent
Experimental
CharacterDataClientClientsClipboardClipboardEventClipboardItemCloseEventCloseWatcher
Experimental
CommandEventCommentCompositionEventCompressionStreamcconsoleCConstantSourceNodeContactAddress
Experimental
ContactsManager
Experimental
ContentIndex
Experimental
ContentIndexEvent
Experimental
ContentVisibilityAutoStateChangeEventConvolverNodeCookieChangeEventCookieStoreCookieStoreManagerCountQueuingStrategyCredentialCredentialsContainerCropTarget
Experimental
CryptoCryptoKeyCryptoKeyPairCSPViolationReportBodyCSSCSSAnimationCSSConditionRuleCSSContainerRuleCSSCounterStyleRuleCSSFontFaceRuleCSSFontFeatureValuesRuleCSSFontPaletteValuesRuleCSSGroupingRuleCSSImageValueCSSImportRuleCSSKeyframeRuleCSSKeyframesRuleCSSKeywordValueCSSLayerBlockRuleCSSLayerStatementRuleCSSMathInvertCSSMathMaxCSSMathMinCSSMathNegateCSSMathProductCSSMathSumCSSMathValueCSSMatrixComponentCSSMediaRuleCSSNamespaceRuleCSSNestedDeclarationsCSSNumericArrayCSSNumericValueCSSPageDescriptors
Experimental
CSSPageRuleCSSPerspectiveCSSPositionTryDescriptors
Experimental
CSSPositionTryRule
Experimental
CSSPositionValue
Non-standard

Deprecated
CSSPrimitiveValue
Deprecated
CSSPropertyRuleCSSPseudoElement
Experimental
CSSRotateCSSRuleCSSRuleListCSSScaleCSSScopeRuleCSSSkewCSSSkewXCSSSkewYCSSStartingStyleRuleCSSStyleDeclarationCSSStyleRuleCSSStyleSheetCSSStyleValueCSSSupportsRuleCSSTransformComponentCSSTransformValueCSSTransitionCSSTranslateCSSUnitValueCSSUnparsedValueCSSValue
Deprecated
CSSValueList
Deprecated
CSSVariableReferenceValueCustomElementRegistryCustomEventCustomStateSetDDataTransferDataTransferItemDataTransferItemListDecompressionStreamDedicatedWorkerGlobalScopeDeferredRequestInit
Experimental
DelayNodeDelegatedInkTrailPresenter
Experimental
DeprecationReportBody
Experimental
DeviceMotionEventDeviceMotionEventAccelerationDeviceMotionEventRotationRateDeviceOrientationEventDevicePosture
Experimental
DirectoryEntrySync
Non-standard

Deprecated
DirectoryReaderSync
Non-standard

Deprecated
DocumentDocumentFragmentDocumentPictureInPicture
Experimental
DocumentPictureInPictureEvent
Experimental
DocumentTimelineDocumentTypeDOMError
Deprecated
DOMExceptionDOMHighResTimeStampDOMImplementationDOMMatrixDOMMatrixReadOnlyDOMParserDOMPointDOMPointReadOnlyDOMQuadDOMRectDOMRectListDOMRectReadOnlyDOMStringListDOMStringMapDOMTokenListDragEventDynamicsCompressorNodeEEcdhKeyDeriveParamsEcdsaParamsEcKeyGenParamsEcKeyImportParamsEditContext
Experimental
ElementElementInternalsEncodedAudioChunkEncodedVideoChunkErrorEventEventEventCountsEventSourceEventTargetExtendableCookieChangeEventExtendableEventExtendableMessageEventEyeDropper
Experimental
FFeaturePolicy
Experimental
FederatedCredential
Experimental
FederatedCredentialInitFence
Experimental
FencedFrameConfig
Experimental
FetchEventFetchLaterResult
Experimental
FileFileEntrySync
Non-standard

Deprecated
FileListFileReaderFileReaderSyncFileSystemFileSystemChangeRecordFileSystemDirectoryEntryFileSystemDirectoryHandleFileSystemDirectoryReaderFileSystemEntryFileSystemFileEntryFileSystemFileHandleFileSystemHandleFileSystemObserver
Experimental

Non-standard
FileSystemSync
Non-standard

Deprecated
FileSystemSyncAccessHandleFileSystemWritableFileStreamFocusEventFontData
Experimental
FontFaceFontFaceSetFontFaceSetLoadEventFormDataFormDataEventFragmentDirectiveGGainNodeGamepadGamepadButtonGamepadEventGamepadHapticActuatorGamepadPose
Experimental
GeolocationGeolocationCoordinatesGeolocationPositionGeolocationPositionErrorGestureEvent
Non-standard
GPU
Experimental
GPUAdapter
Experimental
GPUAdapterInfo
Experimental
GPUBindGroup
Experimental
GPUBindGroupLayout
Experimental
GPUBuffer
Experimental
GPUCanvasContext
Experimental
GPUCommandBuffer
Experimental
GPUCommandEncoder
Experimental
GPUCompilationInfo
Experimental
GPUCompilationMessage
Experimental
GPUComputePassEncoder
Experimental
GPUComputePipeline
Experimental
GPUDevice
Experimental
GPUDeviceLostInfo
Experimental
GPUError
Experimental
GPUExternalTexture
Experimental
GPUInternalError
Experimental
GPUOutOfMemoryError
Experimental
GPUPipelineError
Experimental
GPUPipelineLayout
Experimental
GPUQuerySet
Experimental
GPUQueue
Experimental
GPURenderBundle
Experimental
GPURenderBundleEncoder
Experimental
GPURenderPassEncoder
Experimental
GPURenderPipeline
Experimental
GPUSampler
Experimental
GPUShaderModule
Experimental
GPUSupportedFeatures
Experimental
GPUSupportedLimits
Experimental
GPUTexture
Experimental
GPUTextureView
Experimental
GPUUncapturedErrorEvent
Experimental
GPUValidationError
Experimental
GravitySensorGyroscopeHHashChangeEventHeadersHID
Experimental
HIDConnectionEvent
Experimental
HIDDevice
Experimental
HIDInputReportEvent
Experimental
HighlightHighlightRegistryHistoryHkdfParamsHmacImportParamsHmacKeyGenParamsHMDVRDevice
Non-standard

Deprecated
HTMLAllCollectionHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBaseElementHTMLBodyElementHTMLBRElementHTMLButtonElementHTMLCanvasElementHTMLCollectionHTMLDataElementHTMLDataListElementHTMLDetailsElementHTMLDialogElementHTMLDivElementHTMLDListElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFencedFrameElement
Experimental
HTMLFieldSetElementHTMLFontElement
Deprecated
HTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElement
Deprecated
HTMLHeadElementHTMLHeadingElementHTMLHRElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLabelElementHTMLLegendElementHTMLLIElementHTMLLinkElementHTMLMapElementHTMLMarqueeElement
Deprecated
HTMLMediaElementHTMLMenuElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLObjectElementHTMLOListElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLParamElement
Deprecated
HTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectedContentElementHTMLSelectElementHTMLSlotElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementIIDBCursorIDBCursorWithValueIDBDatabaseIDBFactoryIDBIndexIDBKeyRangeIDBObjectStoreIDBOpenDBRequestIDBRequestIDBTransactionIDBVersionChangeEventIdentityCredential
Experimental
IdentityCredentialRequestOptionsIdentityProvider
Experimental
IdleDeadlineIdleDetector
Experimental
IIRFilterNodeImageBitmapImageBitmapRenderingContextImageCaptureImageDataImageDecoderImageTrackImageTrackListInk
Experimental
InputDeviceCapabilities
Experimental
InputDeviceInfoInputEventInstallEventIntersectionObserverIntersectionObserverEntryInterventionReportBody
Experimental
KKeyboard
Experimental
KeyboardEventKeyboardLayoutMap
Experimental
KeyframeEffectLLargestContentfulPaintLaunchParams
Experimental
LaunchQueue
Experimental
LayoutShift
Experimental
LayoutShiftAttribution
Experimental
LinearAccelerationSensorLocationLockLockManagerMMagnetometer
Experimental
MathMLElementMediaCapabilitiesMediaDeviceInfoMediaDevicesMediaElementAudioSourceNodeMediaEncryptedEventMediaErrorMediaKeyMessageEventMediaKeysMediaKeySessionMediaKeyStatusMapMediaKeySystemAccessMediaListMediaMetadataMediaQueryListMediaQueryListEventMediaRecorderMediaRecorderErrorEvent
Non-standard

Deprecated
MediaSessionMediaSourceMediaSourceHandleMediaStreamMediaStreamAudioDestinationNodeMediaStreamAudioSourceNodeMediaStreamEvent
Non-standard

Deprecated
MediaStreamTrackMediaStreamTrackAudioSourceNodeMediaStreamTrackEventMediaStreamTrackGenerator
Experimental

Non-standard
MediaStreamTrackProcessorMediaTrackConstraintsMediaTrackSettingsMediaTrackSupportedConstraintsMerchantValidationEvent
Deprecated
MessageChannelMessageEventMessagePortMetadata
Experimental

Non-standard
MIDIAccessMIDIConnectionEventMIDIInputMIDIInputMapMIDIMessageEventMIDIOutputMIDIOutputMapMIDIPortMimeType
Deprecated
MimeTypeArray
Deprecated
MouseEventMouseScrollEvent
Non-standard

Deprecated
MutationEvent
Non-standard

Deprecated
MutationObserverMutationRecordNNamedNodeMapNavigateEvent
Experimental
Navigation
Experimental
NavigationActivation
Experimental
NavigationCurrentEntryChangeEvent
Experimental
NavigationDestination
Experimental
NavigationHistoryEntry
Experimental
NavigationPreloadManagerNavigationTransition
Experimental
NavigatorNavigatorLoginNavigatorUAData
Experimental
NDEFMessage
Experimental
NDEFReader
Experimental
NDEFReadingEvent
Experimental
NDEFRecord
Experimental
NetworkInformationNodeNodeIteratorNodeListNotificationNotificationEventNotRestoredReasonDetails
Experimental
NotRestoredReasons
Experimental
OOES_draw_buffers_indexedOfflineAudioCompletionEventOfflineAudioContextOffscreenCanvasOffscreenCanvasRenderingContext2DOrientationSensorOscillatorNodeOTPCredential
Experimental
OverconstrainedErrorPPageRevealEventPageSwapEventPageTransitionEventPaintRenderingContext2DPaintSizePaintWorkletGlobalScope
Experimental
PannerNodePasswordCredential
Experimental
PasswordCredentialInitPath2DPaymentAddress
Non-standard

Deprecated
PaymentManager
Experimental
PaymentMethodChangeEventPaymentRequestPaymentRequestEvent
Experimental
PaymentRequestUpdateEventPaymentResponsePbkdf2ParamsPerformancePerformanceElementTiming
Experimental
PerformanceEntryPerformanceEventTimingPerformanceLongAnimationFrameTiming
Experimental
PerformanceLongTaskTiming
Experimental
PerformanceMarkPerformanceMeasurePerformanceNavigation
Deprecated
PerformanceNavigationTimingPerformanceObserverPerformanceObserverEntryListPerformancePaintTimingPerformanceResourceTimingPerformanceScriptTiming
Experimental
PerformanceServerTimingPerformanceTiming
Deprecated
PeriodicSyncEvent
Experimental
PeriodicSyncManager
Experimental
PeriodicWavePermissionsPermissionStatusPictureInPictureEventPictureInPictureWindowPlugin
Deprecated
PluginArray
Deprecated
Point
Non-standard

Deprecated
PointerEventPopStateEventPositionSensorVRDevice
Non-standard

Deprecated
Presentation
Experimental
PresentationAvailability
Experimental
PresentationConnection
Experimental
PresentationConnectionAvailableEvent
Experimental
PresentationConnectionCloseEvent
Experimental
PresentationConnectionList
Experimental
PresentationReceiver
Experimental
PresentationRequest
Experimental
PressureObserver
Experimental
PressureRecord
Experimental
ProcessingInstructionProfiler
Experimental
ProgressEventPromiseRejectionEventPublicKeyCredentialPublicKeyCredentialCreationOptionsPublicKeyCredentialRequestOptionsPushEventPushManagerPushMessageDataPushSubscriptionPushSubscriptionOptionsRRadioNodeListRangeReadableByteStreamControllerReadableStreamReadableStreamBYOBReaderReadableStreamBYOBRequestReadableStreamDefaultControllerReadableStreamDefaultReaderRelativeOrientationSensorRemotePlaybackReportReportBodyReportingObserverRequestRequestInitResizeObserverResizeObserverEntryResizeObserverSizeResponseRestrictionTarget
Experimental
RsaHashedImportParamsRsaHashedKeyGenParamsRsaOaepParamsRsaPssParamsRTCAudioSourceStatsRTCCertificateRTCCertificateStatsRTCCodecStatsRTCDataChannelRTCDataChannelEventRTCDataChannelStatsRTCDtlsTransportRTCDTMFSenderRTCDTMFToneChangeEventRTCEncodedAudioFrameRTCEncodedVideoFrameRTCErrorRTCErrorEventRTCIceCandidateRTCIceCandidatePairRTCIceCandidatePairStatsRTCIceCandidateStatsRTCIceParametersRTCIceTransportRTCIdentityAssertion
Experimental
RTCInboundRtpStreamStatsRTCOutboundRtpStreamStatsRTCPeerConnectionRTCPeerConnectionIceErrorEventRTCPeerConnectionIceEventRTCPeerConnectionStatsRTCRemoteInboundRtpStreamStatsRTCRemoteOutboundRtpStreamStatsRTCRtpReceiverRTCRtpScriptTransformRTCRtpScriptTransformerRTCRtpSenderRTCRtpTransceiverRTCSctpTransportRTCSessionDescriptionRTCStatsReportRTCTrackEventRTCTransformEventRTCTransportStatsRTCVideoSourceStatsSSchedulerScheduling
Experimental
ScreenScreenDetailed
Experimental
ScreenDetails
Experimental
ScreenOrientationScriptProcessorNode
Deprecated
ScrollTimeline
Experimental
SecurePaymentConfirmationRequestSecurityPolicyViolationEventSelectionSensorSensorErrorEventSerial
Experimental
SerialPort
Experimental
ServiceWorkerServiceWorkerContainerServiceWorkerGlobalScopeServiceWorkerRegistrationShadowRootSharedStorage
Experimental
SharedStorageOperation
Experimental
SharedStorageRunOperation
Experimental
SharedStorageSelectURLOperation
Experimental
SharedStorageWorklet
Experimental
SharedStorageWorkletGlobalScope
Experimental
SharedWorkerSharedWorkerGlobalScopeSnapEvent
Experimental
SourceBufferSourceBufferListSpeechGrammar
Non-standard

Deprecated
SpeechGrammarList
Experimental
SpeechRecognitionSpeechRecognitionAlternativeSpeechRecognitionErrorEventSpeechRecognitionEventSpeechRecognitionResultSpeechRecognitionResultListSpeechSynthesisSpeechSynthesisErrorEventSpeechSynthesisEventSpeechSynthesisUtteranceSpeechSynthesisVoiceStaticRangeStereoPannerNodeStorageStorageAccessHandleStorageEventStorageManagerStylePropertyMapStylePropertyMapReadOnlyStyleSheetStyleSheetListSubmitEventSubtleCryptoSVGAElementSVGAngleSVGAnimateColorElement
Deprecated
SVGAnimatedAngleSVGAnimatedBooleanSVGAnimatedEnumerationSVGAnimatedIntegerSVGAnimatedLengthSVGAnimatedLengthListSVGAnimatedNumberSVGAnimatedNumberListSVGAnimatedPreserveAspectRatioSVGAnimatedRectSVGAnimatedStringSVGAnimatedTransformListSVGAnimateElementSVGAnimateMotionElementSVGAnimateTransformElementSVGAnimationElementSVGCircleElementSVGClipPathElementSVGComponentTransferFunctionElementSVGDefsElementSVGDescElementSVGDiscardElement
Experimental
SVGElementSVGEllipseElementSVGFEBlendElementSVGFEColorMatrixElementSVGFEComponentTransferElementSVGFECompositeElementSVGFEConvolveMatrixElementSVGFEDiffuseLightingElementSVGFEDisplacementMapElementSVGFEDistantLightElementSVGFEDropShadowElementSVGFEFloodElementSVGFEFuncAElementSVGFEFuncBElementSVGFEFuncGElementSVGFEFuncRElementSVGFEGaussianBlurElementSVGFEImageElementSVGFEMergeElementSVGFEMergeNodeElementSVGFEMorphologyElementSVGFEOffsetElementSVGFEPointLightElementSVGFESpecularLightingElementSVGFESpotLightElementSVGFETileElementSVGFETurbulenceElementSVGFilterElementSVGForeignObjectElementSVGGElementSVGGeometryElementSVGGradientElementSVGGraphicsElementSVGImageElementSVGLengthSVGLengthListSVGLinearGradientElementSVGLineElementSVGMarkerElementSVGMaskElementSVGMetadataElementSVGMPathElementSVGNumberSVGNumberListSVGPathElementSVGPatternElementSVGPoint
Deprecated
SVGPointListSVGPolygonElementSVGPolylineElementSVGPreserveAspectRatioSVGRadialGradientElementSVGRectSVGRectElementSVGRenderingIntent
Deprecated
SVGScriptElementSVGSetElementSVGStopElementSVGStringListSVGStyleElementSVGSVGElementSVGSwitchElementSVGSymbolElementSVGTextContentElementSVGTextElementSVGTextPathElementSVGTextPositioningElementSVGTitleElementSVGTransformSVGTransformListSVGTSpanElementSVGUnitTypesSVGUseElementSVGViewElementSyncEventSyncManagerTTaskAttributionTiming
Experimental
TaskControllerTaskPriorityChangeEventTaskSignalTextTextDecoderTextDecoderStreamTextEncoderTextEncoderStreamTextEvent
Deprecated
TextFormat
Experimental
TextFormatUpdateEvent
Experimental
TextMetricsTextTrackTextTrackCueTextTrackCueListTextTrackListTextUpdateEvent
Experimental
TimeEventTimeRangesToggleEventTouchTouchEventTouchListTrackEventTransformStreamTransformStreamDefaultControllerTransitionEventTreeWalkerTrustedHTMLTrustedScriptTrustedScriptURLTrustedTypePolicyTrustedTypePolicyFactoryUUIEventURLURLPattern
Experimental
URLSearchParamsUSB
Experimental
USBAlternateInterface
Experimental
USBConfiguration
Experimental
USBConnectionEvent
Experimental
USBDevice
Experimental
USBEndpoint
Experimental
USBInterface
Experimental
USBInTransferResult
Experimental
USBIsochronousInTransferPacket
Experimental
USBIsochronousInTransferResult
Experimental
USBIsochronousOutTransferPacket
Experimental
USBIsochronousOutTransferResult
Experimental
USBOutTransferResult
Experimental
UserActivationVValidityStateVideoColorSpaceVideoDecoderVideoEncoderVideoFrameVideoPlaybackQualityVideoTrackVideoTrackGenerator
Experimental
VideoTrackListViewTimeline
Experimental
ViewTransitionVirtualKeyboard
Experimental
VisibilityStateEntry
Experimental
VisualViewportVRDisplay
Non-standard

Deprecated
VRDisplayCapabilities
Non-standard

Deprecated
VRDisplayEvent
Non-standard

Deprecated
VREyeParameters
Non-standard

Deprecated
VRFieldOfView
Non-standard

Deprecated
VRFrameData
Non-standard

Deprecated
VRLayerInit
Deprecated
VRPose
Non-standard

Deprecated
VRStageParameters
Non-standard

Deprecated
VTTCueVTTRegionWWakeLockWakeLockSentinelWaveShaperNodeWebGL2RenderingContextWebGLActiveInfoWebGLBufferWebGLContextEventWebGLFramebufferWebGLObject
Experimental
WebGLProgramWebGLQueryWebGLRenderbufferWebGLRenderingContextWebGLSamplerWebGLShaderWebGLShaderPrecisionFormatWebGLSyncWebGLTextureWebGLTransformFeedbackWebGLUniformLocationWebGLVertexArrayObjectWebSocketWebSocketStream
Experimental
WebTransportWebTransportBidirectionalStreamWebTransportDatagramDuplexStreamWebTransportErrorWebTransportReceiveStream
Experimental
WebTransportSendStream
Experimental
WGSLLanguageFeatures
Experimental
WheelEventWindowWindowClientWindowControlsOverlay
Experimental
WindowControlsOverlayGeometryChangeEvent
Experimental
WindowSharedStorage
Experimental
WorkerWorkerGlobalScopeWorkerLocationWorkerNavigatorWorkletWorkletGlobalScopeWorkletSharedStorage
Experimental
WritableStreamWritableStreamDefaultControllerWritableStreamDefaultWriterXXMLDocumentXMLHttpRequestXMLHttpRequestEventTargetXMLHttpRequestUploadXMLSerializerXPathEvaluatorXPathExpressionXPathResultXRAnchor
Experimental
XRAnchorSet
Experimental
XRBoundedReferenceSpace
Experimental
XRCompositionLayer
Experimental
XRCPUDepthInformation
Experimental
XRCubeLayer
Experimental
XRCylinderLayer
Experimental
XRDepthInformation
Experimental
XREquirectLayer
Experimental
XRFrame
Experimental
XRHandXRHitTestResult
Experimental
XRHitTestSource
Experimental
XRInputSourceXRInputSourceArray
Experimental
XRInputSourceEventXRInputSourcesChangeEventXRJointPoseXRJointSpaceXRLayer
Experimental
XRLayerEvent
Experimental
XRLightEstimate
Experimental
XRLightProbe
Experimental
XRMediaBinding
Experimental
XRPoseXRProjectionLayer
Experimental
XRQuadLayer
Experimental
XRRay
Experimental
XRReferenceSpaceXRReferenceSpaceEventXRRenderState
Experimental
XRRigidTransformXRSession
Experimental
XRSessionEventXRSpaceXRSubImage
Experimental
XRSystem
Experimental
XRTransientInputHitTestResult
Experimental
XRTransientInputHitTestSource
Experimental
XRView
Experimental
XRViewerPoseXRViewportXRWebGLBinding
Experimental
XRWebGLDepthInformation
Experimental
XRWebGLLayer
Experimental
XRWebGLSubImage
Experimental
XSLTProcessorSee also
Web API event reference
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nWeb APIsWhen writing code for the Web, there are a large number of Web APIs available. Below is a list of all the APIs and interfaces (object types) that you may be able to use while developing your Web app or site.
Web APIs are typically used with JavaScript, although this doesn't always have to be the case.SpecificationsThis is a list of all the APIs that are available.
AAttribution Reporting API
Experimental
Audio Output Devices API
Experimental
BBackground Fetch API
Experimental
Background Synchronization APIBackground Tasks APIBadging APIBarcode Detection API
Experimental
Battery Status APIBeacon APIWeb Bluetooth API
Experimental
Broadcast Channel APICCSS Custom Highlight APICSS Font Loading APICSS Painting API
Experimental
CSS Properties and Values APICSS Typed Object Model APICSS Object Model (CSSOM)Canvas APIChannel Messaging APIClipboard APICompression Streams APICompute Pressure API
Experimental
Console APIContact Picker API
Experimental
Content Index API
Experimental
Cookie Store APICredential Management APIDDocument Object Model (DOM)Device Memory APIDevice orientation eventsDevice Posture API
Experimental
Document Picture-in-Picture API
Experimental
EEditContext API
Experimental
Encoding APIEncrypted Media Extensions APIEyeDropper API
Experimental
FFederated Credential Management (FedCM) API
Experimental
Fenced Frame API
Experimental
Fetch APIFile APIFile System APIFile and Directory Entries APIForce Touch events
Non-standard
Fullscreen APIGGamepad APIGeolocation APIGeometry interfacesHThe HTML DOM APIHTML Drag and Drop APIHistory APIHoudini APIsIIdle Detection API
Experimental
MediaStream Image Capture APIIndexedDB APIInk API
Experimental
InputDeviceCapabilities API
Experimental
Insertable Streams for MediaStreamTrack APIIntersection Observer APIInvoker Commands APIJJS Self-Profiling API
Experimental
KKeyboard API
Experimental
LLaunch Handler API
Experimental
Local Font Access API
Experimental
MMedia Capabilities APIMedia Capture and Streams API (Media Stream)Media Session APIMedia Source API
Experimental
MediaStream Recording APINNavigation API
Experimental
Network Information APIPPage Visibility APIPayment Handler API
Experimental
Payment Request APIPerformance APIsWeb Periodic Background Synchronization API
Experimental
Permissions APIPicture-in-Picture APIPointer eventsPointer Lock APIPopover APIPresentation API
Experimental
Prioritized Task Scheduling APIPush APIRRemote Playback APIReporting APIResize Observer APISSVG APIScreen Capture APIScreen Orientation APIScreen Wake Lock APISelection APISensor APIsServer-sent eventsService Worker APIShared Storage API
Experimental
Speculation Rules API
Experimental
Storage APIStorage Access APIStreams APITTopics API
Experimental

Non-standard
Touch eventsTrusted Types APIUUI EventsURL APIURL Fragment Text DirectivesURL Pattern API
Experimental
User-Agent Client Hints API
Experimental
VVibration APIView Transition APIVirtualKeyboard API
Experimental
Visual Viewport APIWWeb Animations APIWeb Audio APIWeb Authentication APIWeb ComponentsWeb Crypto APIWeb Locks APIWeb MIDI APIWeb NFC API
Experimental
Notifications APIWeb Serial API
Experimental
Web Share APIWeb Speech APIWeb Storage APIWeb Workers APIWebCodecs APIWebGL: 2D and 3D graphics for the webWebGPU API
Experimental
WebHID API
Experimental
WebOTP APIWebRTC APIThe WebSocket API (WebSockets)WebTransport APIWebUSB API
Experimental
WebVR API
Non-standard

Deprecated
WebVTT APIWebXR Device API
Experimental
Window Controls Overlay API
Experimental
Window Management API
Experimental
XXMLHttpRequest APIffetchLater() API
Experimental
InterfacesThis is a list of all the interfaces (that is, types of objects) that are available.
AAbortControllerAbortSignalAbsoluteOrientationSensorAbstractRangeAccelerometer
Experimental
AesCbcParamsAesCtrParamsAesGcmParamsAesKeyGenParamsAmbientLightSensor
Experimental
AnalyserNodeANGLE_instanced_arraysAnimationAnimationEffectAnimationEventAnimationPlaybackEventAnimationTimelineAttrAudioBufferAudioBufferSourceNodeAudioContextAudioDataAudioDecoderAudioDestinationNodeAudioEncoderAudioListenerAudioNodeAudioParamAudioParamDescriptorAudioParamMapAudioProcessingEvent
Deprecated
AudioScheduledSourceNodeAudioSinkInfo
Experimental
AudioTrackAudioTrackListAudioWorkletAudioWorkletGlobalScopeAudioWorkletNodeAudioWorkletProcessorAuthenticatorAssertionResponseAuthenticatorAttestationResponseAuthenticatorResponseBBackgroundFetchEvent
Experimental
BackgroundFetchManager
Experimental
BackgroundFetchRecord
Experimental
BackgroundFetchRegistration
Experimental
BackgroundFetchUpdateUIEvent
Experimental
BarcodeDetector
Experimental
BarPropBaseAudioContextBatteryManagerBeforeInstallPromptEvent
Experimental

Non-standard
BeforeUnloadEventBiquadFilterNodeBlobBlobEventBluetooth
Experimental
BluetoothCharacteristicProperties
Experimental
BluetoothDevice
Experimental
BluetoothRemoteGATTCharacteristic
Experimental
BluetoothRemoteGATTDescriptor
Experimental
BluetoothRemoteGATTServer
Experimental
BluetoothRemoteGATTService
Experimental
BluetoothUUIDBroadcastChannelBrowserCaptureMediaStreamTrack
Experimental
ByteLengthQueuingStrategyCCacheCacheStorageCanMakePaymentEvent
Experimental
CanvasCaptureMediaStreamTrackCanvasGradientCanvasPatternCanvasRenderingContext2DCaptureController
Experimental
CaretPositionCDATASectionChannelMergerNodeChannelSplitterNodeChapterInformation
Experimental
CharacterBoundsUpdateEvent
Experimental
CharacterDataClientClientsClipboardClipboardEventClipboardItemCloseEventCloseWatcher
Experimental
CommandEventCommentCompositionEventCompressionStreamcconsoleCConstantSourceNodeContactAddress
Experimental
ContactsManager
Experimental
ContentIndex
Experimental
ContentIndexEvent
Experimental
ContentVisibilityAutoStateChangeEventConvolverNodeCookieChangeEventCookieStoreCookieStoreManagerCountQueuingStrategyCredentialCredentialsContainerCropTarget
Experimental
CryptoCryptoKeyCryptoKeyPairCSPViolationReportBodyCSSCSSAnimationCSSConditionRuleCSSContainerRuleCSSCounterStyleRuleCSSFontFaceRuleCSSFontFeatureValuesRuleCSSFontPaletteValuesRuleCSSGroupingRuleCSSImageValueCSSImportRuleCSSKeyframeRuleCSSKeyframesRuleCSSKeywordValueCSSLayerBlockRuleCSSLayerStatementRuleCSSMathInvertCSSMathMaxCSSMathMinCSSMathNegateCSSMathProductCSSMathSumCSSMathValueCSSMatrixComponentCSSMediaRuleCSSNamespaceRuleCSSNestedDeclarationsCSSNumericArrayCSSNumericValueCSSPageDescriptors
Experimental
CSSPageRuleCSSPerspectiveCSSPositionTryDescriptors
Experimental
CSSPositionTryRule
Experimental
CSSPositionValue
Non-standard

Deprecated
CSSPrimitiveValue
Deprecated
CSSPropertyRuleCSSPseudoElement
Experimental
CSSRotateCSSRuleCSSRuleListCSSScaleCSSScopeRuleCSSSkewCSSSkewXCSSSkewYCSSStartingStyleRuleCSSStyleDeclarationCSSStyleRuleCSSStyleSheetCSSStyleValueCSSSupportsRuleCSSTransformComponentCSSTransformValueCSSTransitionCSSTranslateCSSUnitValueCSSUnparsedValueCSSValue
Deprecated
CSSValueList
Deprecated
CSSVariableReferenceValueCustomElementRegistryCustomEventCustomStateSetDDataTransferDataTransferItemDataTransferItemListDecompressionStreamDedicatedWorkerGlobalScopeDeferredRequestInit
Experimental
DelayNodeDelegatedInkTrailPresenter
Experimental
DeprecationReportBody
Experimental
DeviceMotionEventDeviceMotionEventAccelerationDeviceMotionEventRotationRateDeviceOrientationEventDevicePosture
Experimental
DirectoryEntrySync
Non-standard

Deprecated
DirectoryReaderSync
Non-standard

Deprecated
DocumentDocumentFragmentDocumentPictureInPicture
Experimental
DocumentPictureInPictureEvent
Experimental
DocumentTimelineDocumentTypeDOMError
Deprecated
DOMExceptionDOMHighResTimeStampDOMImplementationDOMMatrixDOMMatrixReadOnlyDOMParserDOMPointDOMPointReadOnlyDOMQuadDOMRectDOMRectListDOMRectReadOnlyDOMStringListDOMStringMapDOMTokenListDragEventDynamicsCompressorNodeEEcdhKeyDeriveParamsEcdsaParamsEcKeyGenParamsEcKeyImportParamsEditContext
Experimental
ElementElementInternalsEncodedAudioChunkEncodedVideoChunkErrorEventEventEventCountsEventSourceEventTargetExtendableCookieChangeEventExtendableEventExtendableMessageEventEyeDropper
Experimental
FFeaturePolicy
Experimental
FederatedCredential
Experimental
FederatedCredentialInitFence
Experimental
FencedFrameConfig
Experimental
FetchEventFetchLaterResult
Experimental
FileFileEntrySync
Non-standard

Deprecated
FileListFileReaderFileReaderSyncFileSystemFileSystemChangeRecordFileSystemDirectoryEntryFileSystemDirectoryHandleFileSystemDirectoryReaderFileSystemEntryFileSystemFileEntryFileSystemFileHandleFileSystemHandleFileSystemObserver
Experimental

Non-standard
FileSystemSync
Non-standard

Deprecated
FileSystemSyncAccessHandleFileSystemWritableFileStreamFocusEventFontData
Experimental
FontFaceFontFaceSetFontFaceSetLoadEventFormDataFormDataEventFragmentDirectiveGGainNodeGamepadGamepadButtonGamepadEventGamepadHapticActuatorGamepadPose
Experimental
GeolocationGeolocationCoordinatesGeolocationPositionGeolocationPositionErrorGestureEvent
Non-standard
GPU
Experimental
GPUAdapter
Experimental
GPUAdapterInfo
Experimental
GPUBindGroup
Experimental
GPUBindGroupLayout
Experimental
GPUBuffer
Experimental
GPUCanvasContext
Experimental
GPUCommandBuffer
Experimental
GPUCommandEncoder
Experimental
GPUCompilationInfo
Experimental
GPUCompilationMessage
Experimental
GPUComputePassEncoder
Experimental
GPUComputePipeline
Experimental
GPUDevice
Experimental
GPUDeviceLostInfo
Experimental
GPUError
Experimental
GPUExternalTexture
Experimental
GPUInternalError
Experimental
GPUOutOfMemoryError
Experimental
GPUPipelineError
Experimental
GPUPipelineLayout
Experimental
GPUQuerySet
Experimental
GPUQueue
Experimental
GPURenderBundle
Experimental
GPURenderBundleEncoder
Experimental
GPURenderPassEncoder
Experimental
GPURenderPipeline
Experimental
GPUSampler
Experimental
GPUShaderModule
Experimental
GPUSupportedFeatures
Experimental
GPUSupportedLimits
Experimental
GPUTexture
Experimental
GPUTextureView
Experimental
GPUUncapturedErrorEvent
Experimental
GPUValidationError
Experimental
GravitySensorGyroscopeHHashChangeEventHeadersHID
Experimental
HIDConnectionEvent
Experimental
HIDDevice
Experimental
HIDInputReportEvent
Experimental
HighlightHighlightRegistryHistoryHkdfParamsHmacImportParamsHmacKeyGenParamsHMDVRDevice
Non-standard

Deprecated
HTMLAllCollectionHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBaseElementHTMLBodyElementHTMLBRElementHTMLButtonElementHTMLCanvasElementHTMLCollectionHTMLDataElementHTMLDataListElementHTMLDetailsElementHTMLDialogElementHTMLDivElementHTMLDListElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFencedFrameElement
Experimental
HTMLFieldSetElementHTMLFontElement
Deprecated
HTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElement
Deprecated
HTMLHeadElementHTMLHeadingElementHTMLHRElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLabelElementHTMLLegendElementHTMLLIElementHTMLLinkElementHTMLMapElementHTMLMarqueeElement
Deprecated
HTMLMediaElementHTMLMenuElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLObjectElementHTMLOListElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLParamElement
Deprecated
HTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectedContentElementHTMLSelectElementHTMLSlotElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementIIDBCursorIDBCursorWithValueIDBDatabaseIDBFactoryIDBIndexIDBKeyRangeIDBObjectStoreIDBOpenDBRequestIDBRequestIDBTransactionIDBVersionChangeEventIdentityCredential
Experimental
IdentityCredentialRequestOptionsIdentityProvider
Experimental
IdleDeadlineIdleDetector
Experimental
IIRFilterNodeImageBitmapImageBitmapRenderingContextImageCaptureImageDataImageDecoderImageTrackImageTrackListInk
Experimental
InputDeviceCapabilities
Experimental
InputDeviceInfoInputEventInstallEventIntersectionObserverIntersectionObserverEntryInterventionReportBody
Experimental
KKeyboard
Experimental
KeyboardEventKeyboardLayoutMap
Experimental
KeyframeEffectLLargestContentfulPaintLaunchParams
Experimental
LaunchQueue
Experimental
LayoutShift
Experimental
LayoutShiftAttribution
Experimental
LinearAccelerationSensorLocationLockLockManagerMMagnetometer
Experimental
MathMLElementMediaCapabilitiesMediaDeviceInfoMediaDevicesMediaElementAudioSourceNodeMediaEncryptedEventMediaErrorMediaKeyMessageEventMediaKeysMediaKeySessionMediaKeyStatusMapMediaKeySystemAccessMediaListMediaMetadataMediaQueryListMediaQueryListEventMediaRecorderMediaRecorderErrorEvent
Non-standard

Deprecated
MediaSessionMediaSourceMediaSourceHandleMediaStreamMediaStreamAudioDestinationNodeMediaStreamAudioSourceNodeMediaStreamEvent
Non-standard

Deprecated
MediaStreamTrackMediaStreamTrackAudioSourceNodeMediaStreamTrackEventMediaStreamTrackGenerator
Experimental

Non-standard
MediaStreamTrackProcessorMediaTrackConstraintsMediaTrackSettingsMediaTrackSupportedConstraintsMerchantValidationEvent
Deprecated
MessageChannelMessageEventMessagePortMetadata
Experimental

Non-standard
MIDIAccessMIDIConnectionEventMIDIInputMIDIInputMapMIDIMessageEventMIDIOutputMIDIOutputMapMIDIPortMimeType
Deprecated
MimeTypeArray
Deprecated
MouseEventMouseScrollEvent
Non-standard

Deprecated
MutationEvent
Non-standard

Deprecated
MutationObserverMutationRecordNNamedNodeMapNavigateEvent
Experimental
Navigation
Experimental
NavigationActivation
Experimental
NavigationCurrentEntryChangeEvent
Experimental
NavigationDestination
Experimental
NavigationHistoryEntry
Experimental
NavigationPreloadManagerNavigationTransition
Experimental
NavigatorNavigatorLoginNavigatorUAData
Experimental
NDEFMessage
Experimental
NDEFReader
Experimental
NDEFReadingEvent
Experimental
NDEFRecord
Experimental
NetworkInformationNodeNodeIteratorNodeListNotificationNotificationEventNotRestoredReasonDetails
Experimental
NotRestoredReasons
Experimental
OOES_draw_buffers_indexedOfflineAudioCompletionEventOfflineAudioContextOffscreenCanvasOffscreenCanvasRenderingContext2DOrientationSensorOscillatorNodeOTPCredential
Experimental
OverconstrainedErrorPPageRevealEventPageSwapEventPageTransitionEventPaintRenderingContext2DPaintSizePaintWorkletGlobalScope
Experimental
PannerNodePasswordCredential
Experimental
PasswordCredentialInitPath2DPaymentAddress
Non-standard

Deprecated
PaymentManager
Experimental
PaymentMethodChangeEventPaymentRequestPaymentRequestEvent
Experimental
PaymentRequestUpdateEventPaymentResponsePbkdf2ParamsPerformancePerformanceElementTiming
Experimental
PerformanceEntryPerformanceEventTimingPerformanceLongAnimationFrameTiming
Experimental
PerformanceLongTaskTiming
Experimental
PerformanceMarkPerformanceMeasurePerformanceNavigation
Deprecated
PerformanceNavigationTimingPerformanceObserverPerformanceObserverEntryListPerformancePaintTimingPerformanceResourceTimingPerformanceScriptTiming
Experimental
PerformanceServerTimingPerformanceTiming
Deprecated
PeriodicSyncEvent
Experimental
PeriodicSyncManager
Experimental
PeriodicWavePermissionsPermissionStatusPictureInPictureEventPictureInPictureWindowPlugin
Deprecated
PluginArray
Deprecated
Point
Non-standard

Deprecated
PointerEventPopStateEventPositionSensorVRDevice
Non-standard

Deprecated
Presentation
Experimental
PresentationAvailability
Experimental
PresentationConnection
Experimental
PresentationConnectionAvailableEvent
Experimental
PresentationConnectionCloseEvent
Experimental
PresentationConnectionList
Experimental
PresentationReceiver
Experimental
PresentationRequest
Experimental
PressureObserver
Experimental
PressureRecord
Experimental
ProcessingInstructionProfiler
Experimental
ProgressEventPromiseRejectionEventPublicKeyCredentialPublicKeyCredentialCreationOptionsPublicKeyCredentialRequestOptionsPushEventPushManagerPushMessageDataPushSubscriptionPushSubscriptionOptionsRRadioNodeListRangeReadableByteStreamControllerReadableStreamReadableStreamBYOBReaderReadableStreamBYOBRequestReadableStreamDefaultControllerReadableStreamDefaultReaderRelativeOrientationSensorRemotePlaybackReportReportBodyReportingObserverRequestRequestInitResizeObserverResizeObserverEntryResizeObserverSizeResponseRestrictionTarget
Experimental
RsaHashedImportParamsRsaHashedKeyGenParamsRsaOaepParamsRsaPssParamsRTCAudioSourceStatsRTCCertificateRTCCertificateStatsRTCCodecStatsRTCDataChannelRTCDataChannelEventRTCDataChannelStatsRTCDtlsTransportRTCDTMFSenderRTCDTMFToneChangeEventRTCEncodedAudioFrameRTCEncodedVideoFrameRTCErrorRTCErrorEventRTCIceCandidateRTCIceCandidatePairRTCIceCandidatePairStatsRTCIceCandidateStatsRTCIceParametersRTCIceTransportRTCIdentityAssertion
Experimental
RTCInboundRtpStreamStatsRTCOutboundRtpStreamStatsRTCPeerConnectionRTCPeerConnectionIceErrorEventRTCPeerConnectionIceEventRTCPeerConnectionStatsRTCRemoteInboundRtpStreamStatsRTCRemoteOutboundRtpStreamStatsRTCRtpReceiverRTCRtpScriptTransformRTCRtpScriptTransformerRTCRtpSenderRTCRtpTransceiverRTCSctpTransportRTCSessionDescriptionRTCStatsReportRTCTrackEventRTCTransformEventRTCTransportStatsRTCVideoSourceStatsSSchedulerScheduling
Experimental
ScreenScreenDetailed
Experimental
ScreenDetails
Experimental
ScreenOrientationScriptProcessorNode
Deprecated
ScrollTimeline
Experimental
SecurePaymentConfirmationRequestSecurityPolicyViolationEventSelectionSensorSensorErrorEventSerial
Experimental
SerialPort
Experimental
ServiceWorkerServiceWorkerContainerServiceWorkerGlobalScopeServiceWorkerRegistrationShadowRootSharedStorage
Experimental
SharedStorageOperation
Experimental
SharedStorageRunOperation
Experimental
SharedStorageSelectURLOperation
Experimental
SharedStorageWorklet
Experimental
SharedStorageWorkletGlobalScope
Experimental
SharedWorkerSharedWorkerGlobalScopeSnapEvent
Experimental
SourceBufferSourceBufferListSpeechGrammar
Non-standard

Deprecated
SpeechGrammarList
Experimental
SpeechRecognitionSpeechRecognitionAlternativeSpeechRecognitionErrorEventSpeechRecognitionEventSpeechRecognitionResultSpeechRecognitionResultListSpeechSynthesisSpeechSynthesisErrorEventSpeechSynthesisEventSpeechSynthesisUtteranceSpeechSynthesisVoiceStaticRangeStereoPannerNodeStorageStorageAccessHandleStorageEventStorageManagerStylePropertyMapStylePropertyMapReadOnlyStyleSheetStyleSheetListSubmitEventSubtleCryptoSVGAElementSVGAngleSVGAnimateColorElement
Deprecated
SVGAnimatedAngleSVGAnimatedBooleanSVGAnimatedEnumerationSVGAnimatedIntegerSVGAnimatedLengthSVGAnimatedLengthListSVGAnimatedNumberSVGAnimatedNumberListSVGAnimatedPreserveAspectRatioSVGAnimatedRectSVGAnimatedStringSVGAnimatedTransformListSVGAnimateElementSVGAnimateMotionElementSVGAnimateTransformElementSVGAnimationElementSVGCircleElementSVGClipPathElementSVGComponentTransferFunctionElementSVGDefsElementSVGDescElementSVGDiscardElement
Experimental
SVGElementSVGEllipseElementSVGFEBlendElementSVGFEColorMatrixElementSVGFEComponentTransferElementSVGFECompositeElementSVGFEConvolveMatrixElementSVGFEDiffuseLightingElementSVGFEDisplacementMapElementSVGFEDistantLightElementSVGFEDropShadowElementSVGFEFloodElementSVGFEFuncAElementSVGFEFuncBElementSVGFEFuncGElementSVGFEFuncRElementSVGFEGaussianBlurElementSVGFEImageElementSVGFEMergeElementSVGFEMergeNodeElementSVGFEMorphologyElementSVGFEOffsetElementSVGFEPointLightElementSVGFESpecularLightingElementSVGFESpotLightElementSVGFETileElementSVGFETurbulenceElementSVGFilterElementSVGForeignObjectElementSVGGElementSVGGeometryElementSVGGradientElementSVGGraphicsElementSVGImageElementSVGLengthSVGLengthListSVGLinearGradientElementSVGLineElementSVGMarkerElementSVGMaskElementSVGMetadataElementSVGMPathElementSVGNumberSVGNumberListSVGPathElementSVGPatternElementSVGPoint
Deprecated
SVGPointListSVGPolygonElementSVGPolylineElementSVGPreserveAspectRatioSVGRadialGradientElementSVGRectSVGRectElementSVGRenderingIntent
Deprecated
SVGScriptElementSVGSetElementSVGStopElementSVGStringListSVGStyleElementSVGSVGElementSVGSwitchElementSVGSymbolElementSVGTextContentElementSVGTextElementSVGTextPathElementSVGTextPositioningElementSVGTitleElementSVGTransformSVGTransformListSVGTSpanElementSVGUnitTypesSVGUseElementSVGViewElementSyncEventSyncManagerTTaskAttributionTiming
Experimental
TaskControllerTaskPriorityChangeEventTaskSignalTextTextDecoderTextDecoderStreamTextEncoderTextEncoderStreamTextEvent
Deprecated
TextFormat
Experimental
TextFormatUpdateEvent
Experimental
TextMetricsTextTrackTextTrackCueTextTrackCueListTextTrackListTextUpdateEvent
Experimental
TimeEventTimeRangesToggleEventTouchTouchEventTouchListTrackEventTransformStreamTransformStreamDefaultControllerTransitionEventTreeWalkerTrustedHTMLTrustedScriptTrustedScriptURLTrustedTypePolicyTrustedTypePolicyFactoryUUIEventURLURLPattern
Experimental
URLSearchParamsUSB
Experimental
USBAlternateInterface
Experimental
USBConfiguration
Experimental
USBConnectionEvent
Experimental
USBDevice
Experimental
USBEndpoint
Experimental
USBInterface
Experimental
USBInTransferResult
Experimental
USBIsochronousInTransferPacket
Experimental
USBIsochronousInTransferResult
Experimental
USBIsochronousOutTransferPacket
Experimental
USBIsochronousOutTransferResult
Experimental
USBOutTransferResult
Experimental
UserActivationVValidityStateVideoColorSpaceVideoDecoderVideoEncoderVideoFrameVideoPlaybackQualityVideoTrackVideoTrackGenerator
Experimental
VideoTrackListViewTimeline
Experimental
ViewTransitionVirtualKeyboard
Experimental
VisibilityStateEntry
Experimental
VisualViewportVRDisplay
Non-standard

Deprecated
VRDisplayCapabilities
Non-standard

Deprecated
VRDisplayEvent
Non-standard

Deprecated
VREyeParameters
Non-standard

Deprecated
VRFieldOfView
Non-standard

Deprecated
VRFrameData
Non-standard

Deprecated
VRLayerInit
Deprecated
VRPose
Non-standard

Deprecated
VRStageParameters
Non-standard

Deprecated
VTTCueVTTRegionWWakeLockWakeLockSentinelWaveShaperNodeWebGL2RenderingContextWebGLActiveInfoWebGLBufferWebGLContextEventWebGLFramebufferWebGLObject
Experimental
WebGLProgramWebGLQueryWebGLRenderbufferWebGLRenderingContextWebGLSamplerWebGLShaderWebGLShaderPrecisionFormatWebGLSyncWebGLTextureWebGLTransformFeedbackWebGLUniformLocationWebGLVertexArrayObjectWebSocketWebSocketStream
Experimental
WebTransportWebTransportBidirectionalStreamWebTransportDatagramDuplexStreamWebTransportErrorWebTransportReceiveStream
Experimental
WebTransportSendStream
Experimental
WGSLLanguageFeatures
Experimental
WheelEventWindowWindowClientWindowControlsOverlay
Experimental
WindowControlsOverlayGeometryChangeEvent
Experimental
WindowSharedStorage
Experimental
WorkerWorkerGlobalScopeWorkerLocationWorkerNavigatorWorkletWorkletGlobalScopeWorkletSharedStorage
Experimental
WritableStreamWritableStreamDefaultControllerWritableStreamDefaultWriterXXMLDocumentXMLHttpRequestXMLHttpRequestEventTargetXMLHttpRequestUploadXMLSerializerXPathEvaluatorXPathExpressionXPathResultXRAnchor
Experimental
XRAnchorSet
Experimental
XRBoundedReferenceSpace
Experimental
XRCompositionLayer
Experimental
XRCPUDepthInformation
Experimental
XRCubeLayer
Experimental
XRCylinderLayer
Experimental
XRDepthInformation
Experimental
XREquirectLayer
Experimental
XRFrame
Experimental
XRHandXRHitTestResult
Experimental
XRHitTestSource
Experimental
XRInputSourceXRInputSourceArray
Experimental
XRInputSourceEventXRInputSourcesChangeEventXRJointPoseXRJointSpaceXRLayer
Experimental
XRLayerEvent
Experimental
XRLightEstimate
Experimental
XRLightProbe
Experimental
XRMediaBinding
Experimental
XRPoseXRProjectionLayer
Experimental
XRQuadLayer
Experimental
XRRay
Experimental
XRReferenceSpaceXRReferenceSpaceEventXRRenderState
Experimental
XRRigidTransformXRSession
Experimental
XRSessionEventXRSpaceXRSubImage
Experimental
XRSystem
Experimental
XRTransientInputHitTestResult
Experimental
XRTransientInputHitTestSource
Experimental
XRView
Experimental
XRViewerPoseXRViewportXRWebGLBinding
Experimental
XRWebGLDepthInformation
Experimental
XRWebGLLayer
Experimental
XRWebGLSubImage
Experimental
XSLTProcessorSee also
Web API event reference
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nBrowser extensionsExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.
The technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.Key resources
Guides

Whether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.

References

Get comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.

Firefox workflow

Discover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.



Note:
If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.
Get startedDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.ConceptsGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.User interfaceDiscover all the user interface components you can use in your extensions, with coding examples and tips.How toFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.Firefox workflowWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:

The Firefox workflow, such as temporarily installing extensions during development, debugging, request the right permissions, and more.
The web-ext developer tool.
Porting a Google Chrome extension, differences between desktop and Android, and more.
Publishing and distribution overview, promoting your extension, the extension lifecycle best practices, and more.
ReferenceJavaScript APIsGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.Manifest keysGet full details about the manifest keys, including all their properties and settings.\n\nBrowser extensionsExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.
The technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.Key resources
Guides

Whether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.

References

Get comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.

Firefox workflow

Discover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.



Note:
If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.
Get startedDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.ConceptsGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.User interfaceDiscover all the user interface components you can use in your extensions, with coding examples and tips.How toFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.Firefox workflowWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:

The Firefox workflow, such as temporarily installing extensions during development, debugging, request the right permissions, and more.
The web-ext developer tool.
Porting a Google Chrome extension, differences between desktop and Android, and more.
Publishing and distribution overview, promoting your extension, the extension lifecycle best practices, and more.
ReferenceJavaScript APIsGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.Manifest keysGet full details about the manifest keys, including all their properties and settings.Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 22, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nBrowser extensionsExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.
The technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.Key resources
Guides

Whether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.

References

Get comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.

Firefox workflow

Discover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.



Note:
If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.
Get startedDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.ConceptsGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.User interfaceDiscover all the user interface components you can use in your extensions, with coding examples and tips.How toFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.Firefox workflowWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:

The Firefox workflow, such as temporarily installing extensions during development, debugging, request the right permissions, and more.
The web-ext developer tool.
Porting a Google Chrome extension, differences between desktop and Android, and more.
Publishing and distribution overview, promoting your extension, the extension lifecycle best practices, and more.
ReferenceJavaScript APIsGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.Manifest keysGet full details about the manifest keys, including all their properties and settings.Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 22, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAccessibilityAccessibility (often abbreviated to A11y — as in, "a", then 11 characters, and then "y") in web development means enabling as many people as possible to use websites, even when those people's abilities are limited in some way.
For many people, technology makes things easier. For people with disabilities, technology makes things possible. Accessibility means developing content to be as accessible as possible, no matter an individual's physical and cognitive abilities and how they access the web.

The Web is fundamentally designed to work for all people, whatever their hardware, software, language, location, or ability.
When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability. 
– (W3C - Accessibility)
Accessibility guidesThe Accessibility guides cover authoring principles, WCAG compliance, accessible widgets and navigation, mobile accessibility, and other key topics that will help you understand why accessibility is crucial for the web and how to improve it in your projects.

Accessibility information for web authors

This document lists guidelines and regulations, how-to's, and tools for checking and repairing accessibility problems with websites.

Personalization to help browse safely

This article discusses making web content accessible for those with vestibular disorders, and those who support them, by taking advantage of personalization and accessibility settings built into the operating systems.

Accessible web applications and widgets

Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces.
While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.
This document describes techniques to improve accessibility of such widgets.

Keyboard-navigable JavaScript widgets

Until now, web developers who wanted to make their styled <div> and <span> based widgets accessible have lacked proper techniques.
Keyboard accessibility is part of the minimum accessibility requirements, which a developer should be aware of.
This document describes techniques to make JavaScript widgets accessible with the keyboard.

Mobile accessibility checklist

This document provides a concise checklist of accessibility requirements for mobile app developers.

Understanding the Web Content Accessibility Guidelines (WCAG)

A set of articles that provide quick explanations to help you understand the steps that need to be taken to conform to the recommendations outlined in the Web Content Accessibility Guidelines (WCAG).

Cognitive accessibility

Cognitive accessibility covers accessibility considerations for people with cognition and learning disabilities.
This document introduces cognitive accessibility and improving accessibility of the web for people with cognitive and learning differences.

Accessibility and spatial patterns

This document describes visual patterns that can induce physical symptoms in people who have photosensitive epilepsy, vestibular disorders, or other perceptual issues.

Web Accessibility: Understanding Colors and Luminance

While understanding color, luminance, and saturation is important for design and readability for all sighted users, they are essential for those with reduced vision and color-deficient vision and those with specific neurological, cognitive, and other impairments.

Web accessibility for seizures and physical reactions

Some types of visual web content can induce seizures in people with certain brain disorders.
This article helps you understand the types of content that can be problematic and find tools and strategies to help you avoid them.

ARIA

This is a collection of articles to learn how to use Accessible Rich Internet Applications (ARIA) to make your HTML documents more accessible.

Tutorials for beginnersThe MDN Accessibility Learning Area contains modern, up-to-date tutorials covering the following accessibility essentials:

What is accessibility?

This article starts off the module with a good look at what accessibility actually is — this includes what groups of people we need to consider and why, what tools different people use to interact with the Web, and how we can make accessibility part of our web development workflow.

HTML: A good basis for accessibility

A great deal of web content can be made accessible just by making sure that the correct HTML elements are used for the correct purpose at all times. This article looks in detail at how HTML can be used to ensure maximum accessibility.

CSS and JavaScript accessibility best practices

CSS and JavaScript, when used properly, also have the potential to allow for accessible web experiences. They can significantly harm accessibility if misused. This article outlines some CSS and JavaScript best practices that should be considered to ensure that even complex content is as accessible as possible.

WAI-ARIA basics

Following on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and let users know what is going on. Here we'll show how to use it at a basic level to improve accessibility.

Accessible multimedia

Another category of content that can create accessibility problems is multimedia — video, audio, and image content need to be given proper textual alternatives so that they can be understood by assistive technologies and their users. This article shows how.

Mobile accessibility

With web access on mobile devices being so popular and popular platforms such as iOS and Android having fully-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. This article looks at mobile-specific accessibility considerations.

References
ARIA reference

Reference documentation for Accessible Rich Internet Applications (ARIA) attributes and roles.

See also
Developer guides
WAI Interest Group\n\nAccessibilityAccessibility (often abbreviated to A11y — as in, "a", then 11 characters, and then "y") in web development means enabling as many people as possible to use websites, even when those people's abilities are limited in some way.
For many people, technology makes things easier. For people with disabilities, technology makes things possible. Accessibility means developing content to be as accessible as possible, no matter an individual's physical and cognitive abilities and how they access the web.

The Web is fundamentally designed to work for all people, whatever their hardware, software, language, location, or ability.
When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability. 
– (W3C - Accessibility)
Accessibility guidesThe Accessibility guides cover authoring principles, WCAG compliance, accessible widgets and navigation, mobile accessibility, and other key topics that will help you understand why accessibility is crucial for the web and how to improve it in your projects.

Accessibility information for web authors

This document lists guidelines and regulations, how-to's, and tools for checking and repairing accessibility problems with websites.

Personalization to help browse safely

This article discusses making web content accessible for those with vestibular disorders, and those who support them, by taking advantage of personalization and accessibility settings built into the operating systems.

Accessible web applications and widgets

Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces.
While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.
This document describes techniques to improve accessibility of such widgets.

Keyboard-navigable JavaScript widgets

Until now, web developers who wanted to make their styled <div> and <span> based widgets accessible have lacked proper techniques.
Keyboard accessibility is part of the minimum accessibility requirements, which a developer should be aware of.
This document describes techniques to make JavaScript widgets accessible with the keyboard.

Mobile accessibility checklist

This document provides a concise checklist of accessibility requirements for mobile app developers.

Understanding the Web Content Accessibility Guidelines (WCAG)

A set of articles that provide quick explanations to help you understand the steps that need to be taken to conform to the recommendations outlined in the Web Content Accessibility Guidelines (WCAG).

Cognitive accessibility

Cognitive accessibility covers accessibility considerations for people with cognition and learning disabilities.
This document introduces cognitive accessibility and improving accessibility of the web for people with cognitive and learning differences.

Accessibility and spatial patterns

This document describes visual patterns that can induce physical symptoms in people who have photosensitive epilepsy, vestibular disorders, or other perceptual issues.

Web Accessibility: Understanding Colors and Luminance

While understanding color, luminance, and saturation is important for design and readability for all sighted users, they are essential for those with reduced vision and color-deficient vision and those with specific neurological, cognitive, and other impairments.

Web accessibility for seizures and physical reactions

Some types of visual web content can induce seizures in people with certain brain disorders.
This article helps you understand the types of content that can be problematic and find tools and strategies to help you avoid them.

ARIA

This is a collection of articles to learn how to use Accessible Rich Internet Applications (ARIA) to make your HTML documents more accessible.

Tutorials for beginnersThe MDN Accessibility Learning Area contains modern, up-to-date tutorials covering the following accessibility essentials:

What is accessibility?

This article starts off the module with a good look at what accessibility actually is — this includes what groups of people we need to consider and why, what tools different people use to interact with the Web, and how we can make accessibility part of our web development workflow.

HTML: A good basis for accessibility

A great deal of web content can be made accessible just by making sure that the correct HTML elements are used for the correct purpose at all times. This article looks in detail at how HTML can be used to ensure maximum accessibility.

CSS and JavaScript accessibility best practices

CSS and JavaScript, when used properly, also have the potential to allow for accessible web experiences. They can significantly harm accessibility if misused. This article outlines some CSS and JavaScript best practices that should be considered to ensure that even complex content is as accessible as possible.

WAI-ARIA basics

Following on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and let users know what is going on. Here we'll show how to use it at a basic level to improve accessibility.

Accessible multimedia

Another category of content that can create accessibility problems is multimedia — video, audio, and image content need to be given proper textual alternatives so that they can be understood by assistive technologies and their users. This article shows how.

Mobile accessibility

With web access on mobile devices being so popular and popular platforms such as iOS and Android having fully-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. This article looks at mobile-specific accessibility considerations.

References
ARIA reference

Reference documentation for Accessible Rich Internet Applications (ARIA) attributes and roles.

See also
Developer guides
WAI Interest Group
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 7, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAccessibilityAccessibility (often abbreviated to A11y — as in, "a", then 11 characters, and then "y") in web development means enabling as many people as possible to use websites, even when those people's abilities are limited in some way.
For many people, technology makes things easier. For people with disabilities, technology makes things possible. Accessibility means developing content to be as accessible as possible, no matter an individual's physical and cognitive abilities and how they access the web.

The Web is fundamentally designed to work for all people, whatever their hardware, software, language, location, or ability.
When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability. 
– (W3C - Accessibility)
Accessibility guidesThe Accessibility guides cover authoring principles, WCAG compliance, accessible widgets and navigation, mobile accessibility, and other key topics that will help you understand why accessibility is crucial for the web and how to improve it in your projects.

Accessibility information for web authors

This document lists guidelines and regulations, how-to's, and tools for checking and repairing accessibility problems with websites.

Personalization to help browse safely

This article discusses making web content accessible for those with vestibular disorders, and those who support them, by taking advantage of personalization and accessibility settings built into the operating systems.

Accessible web applications and widgets

Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces.
While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.
This document describes techniques to improve accessibility of such widgets.

Keyboard-navigable JavaScript widgets

Until now, web developers who wanted to make their styled <div> and <span> based widgets accessible have lacked proper techniques.
Keyboard accessibility is part of the minimum accessibility requirements, which a developer should be aware of.
This document describes techniques to make JavaScript widgets accessible with the keyboard.

Mobile accessibility checklist

This document provides a concise checklist of accessibility requirements for mobile app developers.

Understanding the Web Content Accessibility Guidelines (WCAG)

A set of articles that provide quick explanations to help you understand the steps that need to be taken to conform to the recommendations outlined in the Web Content Accessibility Guidelines (WCAG).

Cognitive accessibility

Cognitive accessibility covers accessibility considerations for people with cognition and learning disabilities.
This document introduces cognitive accessibility and improving accessibility of the web for people with cognitive and learning differences.

Accessibility and spatial patterns

This document describes visual patterns that can induce physical symptoms in people who have photosensitive epilepsy, vestibular disorders, or other perceptual issues.

Web Accessibility: Understanding Colors and Luminance

While understanding color, luminance, and saturation is important for design and readability for all sighted users, they are essential for those with reduced vision and color-deficient vision and those with specific neurological, cognitive, and other impairments.

Web accessibility for seizures and physical reactions

Some types of visual web content can induce seizures in people with certain brain disorders.
This article helps you understand the types of content that can be problematic and find tools and strategies to help you avoid them.

ARIA

This is a collection of articles to learn how to use Accessible Rich Internet Applications (ARIA) to make your HTML documents more accessible.

Tutorials for beginnersThe MDN Accessibility Learning Area contains modern, up-to-date tutorials covering the following accessibility essentials:

What is accessibility?

This article starts off the module with a good look at what accessibility actually is — this includes what groups of people we need to consider and why, what tools different people use to interact with the Web, and how we can make accessibility part of our web development workflow.

HTML: A good basis for accessibility

A great deal of web content can be made accessible just by making sure that the correct HTML elements are used for the correct purpose at all times. This article looks in detail at how HTML can be used to ensure maximum accessibility.

CSS and JavaScript accessibility best practices

CSS and JavaScript, when used properly, also have the potential to allow for accessible web experiences. They can significantly harm accessibility if misused. This article outlines some CSS and JavaScript best practices that should be considered to ensure that even complex content is as accessible as possible.

WAI-ARIA basics

Following on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and let users know what is going on. Here we'll show how to use it at a basic level to improve accessibility.

Accessible multimedia

Another category of content that can create accessibility problems is multimedia — video, audio, and image content need to be given proper textual alternatives so that they can be understood by assistive technologies and their users. This article shows how.

Mobile accessibility

With web access on mobile devices being so popular and popular platforms such as iOS and Android having fully-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. This article looks at mobile-specific accessibility considerations.

References
ARIA reference

Reference documentation for Accessible Rich Internet Applications (ARIA) attributes and roles.

See also
Developer guides
WAI Interest Group
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 7, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nLearn web developmentThe essential skill set for new front-end developersWelcome to MDN Learning Web Development (also known as Learn). This resource provides a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer, along with challenges and further recommended resources.About Learn web development

Teaches the essential skills and knowledge every front-end developer needs for career success and industry relevance, as defined in the MDN Curriculum.


Created by the MDN community and refined with insights from students, educators, and developers from the broader web community.


Designed to take you from "beginner" to "comfortable" (not "beginner" to "expert"), giving you enough knowledge to use more advanced resources (such as the rest of MDN).



Note:
Last updated: December 2024 (see changelog).
Don't know where to get started?
Never coded before?

Our Getting started modules provide setup tutorials and essential concepts and background information for complete beginners. You should start here if you are a complete beginner (i.e., you've not installed a code editor or written any code yet).

Want to master the essentials?

Our Core modules provide a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer.

Beyond the basics?

Our Extension modules cover useful additional skills to learn as you start to expand your knowledge and develop specialisms. Go onto these after you finish our Core.

Working at a school?

Use our modules to guide your teaching, check out our Educators page for more ideas, or enroll your students in Scrimba's Frontend Developer Career PathMDN learning partner.

Getting our code examplesThe code examples you'll encounter in the Learning Area are all available on GitHub:

The easiest way to get them is to download a ZIP of the latest main code branch.
If you are familiar with Git and GitHub, you could also choose to clone the repository.
Contact usIf you want to get in touch with us about anything, use the communication channels. We'd love to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.
If you're interested in helping develop/improve the content, take a look at how you can help and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.See also
The Frontend Developer Career Path MDN learning partner

Scrimba's Frontend Developer Career Path teaches all you need to know to be a competent front-end web developer, with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job! Many of the course components are available as standalone free versions.

Codecademy

A great interactive site for learning programming languages from scratch.

freeCodeCamp.org

Interactive site with tutorials and projects to learn web development.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.\n\nLearn web developmentThe essential skill set for new front-end developersWelcome to MDN Learning Web Development (also known as Learn). This resource provides a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer, along with challenges and further recommended resources.About Learn web development

Teaches the essential skills and knowledge every front-end developer needs for career success and industry relevance, as defined in the MDN Curriculum.


Created by the MDN community and refined with insights from students, educators, and developers from the broader web community.


Designed to take you from "beginner" to "comfortable" (not "beginner" to "expert"), giving you enough knowledge to use more advanced resources (such as the rest of MDN).



Note:
Last updated: December 2024 (see changelog).
Don't know where to get started?
Never coded before?

Our Getting started modules provide setup tutorials and essential concepts and background information for complete beginners. You should start here if you are a complete beginner (i.e., you've not installed a code editor or written any code yet).

Want to master the essentials?

Our Core modules provide a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer.

Beyond the basics?

Our Extension modules cover useful additional skills to learn as you start to expand your knowledge and develop specialisms. Go onto these after you finish our Core.

Working at a school?

Use our modules to guide your teaching, check out our Educators page for more ideas, or enroll your students in Scrimba's Frontend Developer Career PathMDN learning partner.

Getting our code examplesThe code examples you'll encounter in the Learning Area are all available on GitHub:

The easiest way to get them is to download a ZIP of the latest main code branch.
If you are familiar with Git and GitHub, you could also choose to clone the repository.
Contact usIf you want to get in touch with us about anything, use the communication channels. We'd love to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.
If you're interested in helping develop/improve the content, take a look at how you can help and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.See also
The Frontend Developer Career Path MDN learning partner

Scrimba's Frontend Developer Career Path teaches all you need to know to be a competent front-end web developer, with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job! Many of the course components are available as standalone free versions.

Codecademy

A great interactive site for learning programming languages from scratch.

freeCodeCamp.org

Interactive site with tutorials and projects to learn web development.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 28, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nLearn web developmentThe essential skill set for new front-end developersWelcome to MDN Learning Web Development (also known as Learn). This resource provides a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer, along with challenges and further recommended resources.About Learn web development

Teaches the essential skills and knowledge every front-end developer needs for career success and industry relevance, as defined in the MDN Curriculum.


Created by the MDN community and refined with insights from students, educators, and developers from the broader web community.


Designed to take you from "beginner" to "comfortable" (not "beginner" to "expert"), giving you enough knowledge to use more advanced resources (such as the rest of MDN).



Note:
Last updated: December 2024 (see changelog).
Don't know where to get started?
Never coded before?

Our Getting started modules provide setup tutorials and essential concepts and background information for complete beginners. You should start here if you are a complete beginner (i.e., you've not installed a code editor or written any code yet).

Want to master the essentials?

Our Core modules provide a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer.

Beyond the basics?

Our Extension modules cover useful additional skills to learn as you start to expand your knowledge and develop specialisms. Go onto these after you finish our Core.

Working at a school?

Use our modules to guide your teaching, check out our Educators page for more ideas, or enroll your students in Scrimba's Frontend Developer Career PathMDN learning partner.

Getting our code examplesThe code examples you'll encounter in the Learning Area are all available on GitHub:

The easiest way to get them is to download a ZIP of the latest main code branch.
If you are familiar with Git and GitHub, you could also choose to clone the repository.
Contact usIf you want to get in touch with us about anything, use the communication channels. We'd love to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.
If you're interested in helping develop/improve the content, take a look at how you can help and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.See also
The Frontend Developer Career Path MDN learning partner

Scrimba's Frontend Developer Career Path teaches all you need to know to be a competent front-end web developer, with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job! Many of the course components are available as standalone free versions.

Codecademy

A great interactive site for learning programming languages from scratch.

freeCodeCamp.org

Interactive site with tutorials and projects to learn web development.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 28, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nStructuring content with HTML Overview: Core learning modules Next  
HTML is the technology that defines the content and structure of any website. Written properly, it should also define the semantics (meaning) of the content in a machine-readable way, which is vital for accessibility, search engine optimization, and making use of the built-in features browsers provide for content to work optimally. This module covers the basics of the language, before looking at key areas such as document structure, links, lists, images, forms, and more.PrerequisitesBefore starting this module, you don't need any previous HTML knowledge, but you should have at least basic familiarity with using computers and using the web passively (i.e., just looking at it and consuming content). You should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). Both are parts of our Getting started with the web complete beginner's module.

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
Basic HTML syntax

Covers the absolute basics of HTML, to get you started — we define elements, attributes, and other important terms, and show where they fit in the language. We also show how a typical HTML page is structured and how an HTML element is structured, and explain other important basic language features. Along the way, we'll play with some HTML to get you interested!

What's in the head? Web page metadata

The head of an HTML document is the part that is not displayed in the web browser when the page is loaded. It contains metadata information such as the page <title>, links to CSS (if you want to style your HTML content with CSS), links to custom favicons, and metadata (data about the HTML, such as who wrote it, and important keywords that describe the document).

Headings and paragraphs

One of HTML's main jobs is to give text structure so that a browser can display an HTML document the way its developer intends. This article explains how HTML can be used to provide fundamental page structure by defining headings and paragraphs.

Emphasis and importance

The previous article looked at why semantics are important in HTML, and focused on headings and paragraphs. This article continues on the theme of semantics, looking at HTML elements that apply emphasis and importance to text (parallel to italics and bold text in print media).

Lists

Lists are everywhere in life—from your shopping list to the list of directions you subconsciously follow to get to your house every day, to the lists of instructions you are following in these tutorials! It may not surprise you that HTML has a convenient set of elements that allows us to define different types of list. On the web, we have three types of lists: unordered, ordered, and description lists. This lesson shows you how to use the different types.

Structuring documents

In addition to defining individual parts of your page (such as "a paragraph" or "an image"), HTML also boasts a number of block level elements used to define areas of your website (such as "the header", "the navigation menu", "the main content column"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure.

Advanced text features

There are many other elements in HTML for defining text semantics, which we didn't get to in the Emphasis and importance article. The elements described in this article are less known, but still useful to know about (and this is still not a complete list by any means). Here you'll learn about marking up quotations, computer code and other related text, subscript and superscript, contact information, and more.

Creating links

Links (also known as hyperlinks) are really important — they are what makes the Web a web. This article shows the syntax required to make a link, and discusses link best practices.

Marking up a letter Challenge

We all learn to write a letter sooner or later; it is also a useful example to test our text formatting skills. In this challenge, you'll have a letter to mark up as a test for your HTML text formatting skills, as well as hyperlinks and proper use of the HTML <head> element.

Structuring a page of content Challenge

Structuring a page of content ready for laying it out using CSS is a very important skill to master, so in this challenge you'll be tested on your ability to think about how a page might end up looking, and choose appropriate structural semantics to build a layout on top of.

HTML images

In the beginning, the web was just text, and it was really quite boring. Fortunately, it wasn't too long before the ability to embed images (and other more interesting types of content) inside web pages was added. In this article we'll look at how to use the <img> element in depth, including the basics, annotating it with captions using <figure>, and detailing how it relates to CSS background images.

HTML video and audio

Now that we are comfortable with adding simple images to a webpage, the next step is to start adding video and audio players to your HTML documents! In this article we'll look at doing just that with the <video> and <audio> elements; we'll then finish off by looking at how to add captions/subtitles to your videos.

Mozilla splash page Challenge

In this challenge, we'll test your knowledge of some of the techniques discussed in the last couple of lessons, getting you to add some images and video to a funky splash page all about Mozilla!

HTML table basics

This article gets you started with HTML tables, covering the very basics such as rows, cells, headings, making cells span multiple columns and rows, and how to group together all the cells in a column for styling purposes.

HTML table accessibility

In this article we look at more HTML table accessibility features such as captions/summaries, grouping your rows into table head, body and footer sections, and scoping columns and rows.

Structuring a planet data table Challenge

In this challenge, we provide you with some data on the planets in our solar system. Your job is to structure it into an accessible HTML table.

Forms and buttons in HTML

HTML forms and buttons are powerful tools for interacting with users — most commonly they are used for collecting data from users or allowing them to control a user interface. In this article we provide an introduction to the basics of forms and buttons.

Debugging HTML

Writing HTML is fine, but what if something goes wrong, and you can't work out where the error in the code is? This article will introduce you to some tools that can help you find and fix errors in HTML.

Test your skills: HTML

This page lists HTML tests you can try so you can verify if you've understood the content in this module.

Additional tutorialsThese tutorials are not part of the learning pathway, but they are interesting nonetheless — you should consider these as stretch goals, to optionally study when you are done with the main Core articles.

Including vector graphics in HTML

Vector graphics are very useful in many circumstances — they have small file sizes and are highly scalable, so they don't pixelate when zoomed in or blown up to a large size. In this article we'll show you how to include one in your webpage.

From object to iframe — general embedding technologies

Developers commonly think of embedding media such as images, video and audio into web pages. In this article we take somewhat of a sideways step, looking at some elements that allow you to embed a wide variety of content types into your webpages: the <iframe>, <embed> and <object> elements. <iframe>s are for embedding other web pages, and the other two allow you to embed external resources such as PDF files.

See also
Learn HTML and CSS, Scrimba MDN learning partner

Scrimba's Learn HTML and CSS course teaches you HTML and CSS through building and deploying five awesome projects, with fun interactive lessons and challenges taught by knowledgeable teachers.

Learn HTML, Codecademy

Another useful resource for learning HTML basics.

The basics of semantic HTML, Scrimba MDN learning partner

This interactive lesson provides a useful description of HTML, with particular emphasis on why the semantic aspect of it is important.


 Overview: Core learning modules Next\n\nStructuring content with HTML Overview: Core learning modules Next  
HTML is the technology that defines the content and structure of any website. Written properly, it should also define the semantics (meaning) of the content in a machine-readable way, which is vital for accessibility, search engine optimization, and making use of the built-in features browsers provide for content to work optimally. This module covers the basics of the language, before looking at key areas such as document structure, links, lists, images, forms, and more.PrerequisitesBefore starting this module, you don't need any previous HTML knowledge, but you should have at least basic familiarity with using computers and using the web passively (i.e., just looking at it and consuming content). You should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). Both are parts of our Getting started with the web complete beginner's module.

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
Basic HTML syntax

Covers the absolute basics of HTML, to get you started — we define elements, attributes, and other important terms, and show where they fit in the language. We also show how a typical HTML page is structured and how an HTML element is structured, and explain other important basic language features. Along the way, we'll play with some HTML to get you interested!

What's in the head? Web page metadata

The head of an HTML document is the part that is not displayed in the web browser when the page is loaded. It contains metadata information such as the page <title>, links to CSS (if you want to style your HTML content with CSS), links to custom favicons, and metadata (data about the HTML, such as who wrote it, and important keywords that describe the document).

Headings and paragraphs

One of HTML's main jobs is to give text structure so that a browser can display an HTML document the way its developer intends. This article explains how HTML can be used to provide fundamental page structure by defining headings and paragraphs.

Emphasis and importance

The previous article looked at why semantics are important in HTML, and focused on headings and paragraphs. This article continues on the theme of semantics, looking at HTML elements that apply emphasis and importance to text (parallel to italics and bold text in print media).

Lists

Lists are everywhere in life—from your shopping list to the list of directions you subconsciously follow to get to your house every day, to the lists of instructions you are following in these tutorials! It may not surprise you that HTML has a convenient set of elements that allows us to define different types of list. On the web, we have three types of lists: unordered, ordered, and description lists. This lesson shows you how to use the different types.

Structuring documents

In addition to defining individual parts of your page (such as "a paragraph" or "an image"), HTML also boasts a number of block level elements used to define areas of your website (such as "the header", "the navigation menu", "the main content column"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure.

Advanced text features

There are many other elements in HTML for defining text semantics, which we didn't get to in the Emphasis and importance article. The elements described in this article are less known, but still useful to know about (and this is still not a complete list by any means). Here you'll learn about marking up quotations, computer code and other related text, subscript and superscript, contact information, and more.

Creating links

Links (also known as hyperlinks) are really important — they are what makes the Web a web. This article shows the syntax required to make a link, and discusses link best practices.

Marking up a letter Challenge

We all learn to write a letter sooner or later; it is also a useful example to test our text formatting skills. In this challenge, you'll have a letter to mark up as a test for your HTML text formatting skills, as well as hyperlinks and proper use of the HTML <head> element.

Structuring a page of content Challenge

Structuring a page of content ready for laying it out using CSS is a very important skill to master, so in this challenge you'll be tested on your ability to think about how a page might end up looking, and choose appropriate structural semantics to build a layout on top of.

HTML images

In the beginning, the web was just text, and it was really quite boring. Fortunately, it wasn't too long before the ability to embed images (and other more interesting types of content) inside web pages was added. In this article we'll look at how to use the <img> element in depth, including the basics, annotating it with captions using <figure>, and detailing how it relates to CSS background images.

HTML video and audio

Now that we are comfortable with adding simple images to a webpage, the next step is to start adding video and audio players to your HTML documents! In this article we'll look at doing just that with the <video> and <audio> elements; we'll then finish off by looking at how to add captions/subtitles to your videos.

Mozilla splash page Challenge

In this challenge, we'll test your knowledge of some of the techniques discussed in the last couple of lessons, getting you to add some images and video to a funky splash page all about Mozilla!

HTML table basics

This article gets you started with HTML tables, covering the very basics such as rows, cells, headings, making cells span multiple columns and rows, and how to group together all the cells in a column for styling purposes.

HTML table accessibility

In this article we look at more HTML table accessibility features such as captions/summaries, grouping your rows into table head, body and footer sections, and scoping columns and rows.

Structuring a planet data table Challenge

In this challenge, we provide you with some data on the planets in our solar system. Your job is to structure it into an accessible HTML table.

Forms and buttons in HTML

HTML forms and buttons are powerful tools for interacting with users — most commonly they are used for collecting data from users or allowing them to control a user interface. In this article we provide an introduction to the basics of forms and buttons.

Debugging HTML

Writing HTML is fine, but what if something goes wrong, and you can't work out where the error in the code is? This article will introduce you to some tools that can help you find and fix errors in HTML.

Test your skills: HTML

This page lists HTML tests you can try so you can verify if you've understood the content in this module.

Additional tutorialsThese tutorials are not part of the learning pathway, but they are interesting nonetheless — you should consider these as stretch goals, to optionally study when you are done with the main Core articles.

Including vector graphics in HTML

Vector graphics are very useful in many circumstances — they have small file sizes and are highly scalable, so they don't pixelate when zoomed in or blown up to a large size. In this article we'll show you how to include one in your webpage.

From object to iframe — general embedding technologies

Developers commonly think of embedding media such as images, video and audio into web pages. In this article we take somewhat of a sideways step, looking at some elements that allow you to embed a wide variety of content types into your webpages: the <iframe>, <embed> and <object> elements. <iframe>s are for embedding other web pages, and the other two allow you to embed external resources such as PDF files.

See also
Learn HTML and CSS, Scrimba MDN learning partner

Scrimba's Learn HTML and CSS course teaches you HTML and CSS through building and deploying five awesome projects, with fun interactive lessons and challenges taught by knowledgeable teachers.

Learn HTML, Codecademy

Another useful resource for learning HTML basics.

The basics of semantic HTML, Scrimba MDN learning partner

This interactive lesson provides a useful description of HTML, with particular emphasis on why the semantic aspect of it is important.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 18, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nStructuring content with HTML Overview: Core learning modules Next  
HTML is the technology that defines the content and structure of any website. Written properly, it should also define the semantics (meaning) of the content in a machine-readable way, which is vital for accessibility, search engine optimization, and making use of the built-in features browsers provide for content to work optimally. This module covers the basics of the language, before looking at key areas such as document structure, links, lists, images, forms, and more.PrerequisitesBefore starting this module, you don't need any previous HTML knowledge, but you should have at least basic familiarity with using computers and using the web passively (i.e., just looking at it and consuming content). You should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). Both are parts of our Getting started with the web complete beginner's module.

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
Basic HTML syntax

Covers the absolute basics of HTML, to get you started — we define elements, attributes, and other important terms, and show where they fit in the language. We also show how a typical HTML page is structured and how an HTML element is structured, and explain other important basic language features. Along the way, we'll play with some HTML to get you interested!

What's in the head? Web page metadata

The head of an HTML document is the part that is not displayed in the web browser when the page is loaded. It contains metadata information such as the page <title>, links to CSS (if you want to style your HTML content with CSS), links to custom favicons, and metadata (data about the HTML, such as who wrote it, and important keywords that describe the document).

Headings and paragraphs

One of HTML's main jobs is to give text structure so that a browser can display an HTML document the way its developer intends. This article explains how HTML can be used to provide fundamental page structure by defining headings and paragraphs.

Emphasis and importance

The previous article looked at why semantics are important in HTML, and focused on headings and paragraphs. This article continues on the theme of semantics, looking at HTML elements that apply emphasis and importance to text (parallel to italics and bold text in print media).

Lists

Lists are everywhere in life—from your shopping list to the list of directions you subconsciously follow to get to your house every day, to the lists of instructions you are following in these tutorials! It may not surprise you that HTML has a convenient set of elements that allows us to define different types of list. On the web, we have three types of lists: unordered, ordered, and description lists. This lesson shows you how to use the different types.

Structuring documents

In addition to defining individual parts of your page (such as "a paragraph" or "an image"), HTML also boasts a number of block level elements used to define areas of your website (such as "the header", "the navigation menu", "the main content column"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure.

Advanced text features

There are many other elements in HTML for defining text semantics, which we didn't get to in the Emphasis and importance article. The elements described in this article are less known, but still useful to know about (and this is still not a complete list by any means). Here you'll learn about marking up quotations, computer code and other related text, subscript and superscript, contact information, and more.

Creating links

Links (also known as hyperlinks) are really important — they are what makes the Web a web. This article shows the syntax required to make a link, and discusses link best practices.

Marking up a letter Challenge

We all learn to write a letter sooner or later; it is also a useful example to test our text formatting skills. In this challenge, you'll have a letter to mark up as a test for your HTML text formatting skills, as well as hyperlinks and proper use of the HTML <head> element.

Structuring a page of content Challenge

Structuring a page of content ready for laying it out using CSS is a very important skill to master, so in this challenge you'll be tested on your ability to think about how a page might end up looking, and choose appropriate structural semantics to build a layout on top of.

HTML images

In the beginning, the web was just text, and it was really quite boring. Fortunately, it wasn't too long before the ability to embed images (and other more interesting types of content) inside web pages was added. In this article we'll look at how to use the <img> element in depth, including the basics, annotating it with captions using <figure>, and detailing how it relates to CSS background images.

HTML video and audio

Now that we are comfortable with adding simple images to a webpage, the next step is to start adding video and audio players to your HTML documents! In this article we'll look at doing just that with the <video> and <audio> elements; we'll then finish off by looking at how to add captions/subtitles to your videos.

Mozilla splash page Challenge

In this challenge, we'll test your knowledge of some of the techniques discussed in the last couple of lessons, getting you to add some images and video to a funky splash page all about Mozilla!

HTML table basics

This article gets you started with HTML tables, covering the very basics such as rows, cells, headings, making cells span multiple columns and rows, and how to group together all the cells in a column for styling purposes.

HTML table accessibility

In this article we look at more HTML table accessibility features such as captions/summaries, grouping your rows into table head, body and footer sections, and scoping columns and rows.

Structuring a planet data table Challenge

In this challenge, we provide you with some data on the planets in our solar system. Your job is to structure it into an accessible HTML table.

Forms and buttons in HTML

HTML forms and buttons are powerful tools for interacting with users — most commonly they are used for collecting data from users or allowing them to control a user interface. In this article we provide an introduction to the basics of forms and buttons.

Debugging HTML

Writing HTML is fine, but what if something goes wrong, and you can't work out where the error in the code is? This article will introduce you to some tools that can help you find and fix errors in HTML.

Test your skills: HTML

This page lists HTML tests you can try so you can verify if you've understood the content in this module.

Additional tutorialsThese tutorials are not part of the learning pathway, but they are interesting nonetheless — you should consider these as stretch goals, to optionally study when you are done with the main Core articles.

Including vector graphics in HTML

Vector graphics are very useful in many circumstances — they have small file sizes and are highly scalable, so they don't pixelate when zoomed in or blown up to a large size. In this article we'll show you how to include one in your webpage.

From object to iframe — general embedding technologies

Developers commonly think of embedding media such as images, video and audio into web pages. In this article we take somewhat of a sideways step, looking at some elements that allow you to embed a wide variety of content types into your webpages: the <iframe>, <embed> and <object> elements. <iframe>s are for embedding other web pages, and the other two allow you to embed external resources such as PDF files.

See also
Learn HTML and CSS, Scrimba MDN learning partner

Scrimba's Learn HTML and CSS course teaches you HTML and CSS through building and deploying five awesome projects, with fun interactive lessons and challenges taught by knowledgeable teachers.

Learn HTML, Codecademy

Another useful resource for learning HTML basics.

The basics of semantic HTML, Scrimba MDN learning partner

This interactive lesson provides a useful description of HTML, with particular emphasis on why the semantic aspect of it is important.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 18, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nCSS styling basics Overview: Core learning modules Next  
CSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides all the CSS fundamentals you'll need for now, including syntax, features, and techniques.PrerequisitesBefore starting this module, you should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). You should also be familiar with HTML (work through our Structuring content with HTML module if not).

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
What is CSS?

CSS allows you to create great-looking web pages, but how does it work under the hood? This article explains what CSS, what the basic syntax looks like, and how your browser applies CSS to HTML to style it.

Getting started with CSS

In this article, we will take a simple HTML document and apply CSS to it, learning some practical details of the language along the way. We will also review the CSS syntax features you've not looked at yet.

Styling a biography page Challenge

In this challenge you will style a simple bio page, testing you on some of the skills you learned in the last couple of lessons including writing selectors and text styling.

Basic CSS selectors

In this article we'll recap some selector fundamentals, including the basic type, class, and ID selectors.

Attribute selectors

As you know from your study of HTML, elements can have attributes that give further detail about the element being marked up. In CSS you can use attribute selectors to target elements with certain attributes. This lesson will show you how to use these very useful selectors.

Pseudo-classes and pseudo-elements

The next set of selectors we will look at are referred to as pseudo-classes and pseudo-elements. There are a large number of these, and they often serve quite specific purposes. Once you know how to use them, you can look through the different types to see if there is something which works for the task you are trying to achieve.

Combinators

The final selectors we will look at are called combinators. Combinators are used to combine other selectors in a way that allows us to select elements based on their location in the DOM relative to other elements (for example, child or sibling).

The box model

Everything in CSS has a box around it, and understanding these boxes is key to being able to create more complex layouts with CSS, or to align items with other items. In this lesson, we will take a look at the CSS Box model. You'll get an understanding of how it works and the terminology that relates to it.

Handling conflicts

The aim of this lesson is to develop your understanding of some of the most fundamental concepts of CSS — the cascade, specificity, and inheritance — which control how CSS is applied to HTML and how conflicts between style declarations are resolved.

Values and units

CSS rules contain declarations, which in turn are composed of properties and values. Each property used in CSS has a value type that describes what kind of values it is allowed to have. In this lesson, we will take a look at some of the most frequently used value types, what they are, and how they work.

Sizing items in CSS

Understanding how big the different features in your design will be is important. In this lesson we will summarize the various ways elements get a size via CSS and define a few terms about sizing that will help you in the future.

Backgrounds and borders

In this lesson, we will take a look at some of the creative things you can do with CSS backgrounds and borders. From adding gradients, background images, and rounded corners, backgrounds and borders are the answer to a lot of styling questions in CSS.

Overflowing content

Overflow is what happens when there is too much content to fit inside an element box. In this lesson, you will learn how to manage overflow using CSS.

Images, media, and form elements

In this lesson we will take a look at how certain special elements are treated in CSS. Images, other media, and form elements behave a little differently from regular boxes in terms of your ability to style them with CSS. Understanding what is and isn't possible can save some frustration, and this lesson will highlight some of the main things that you need to know.

Styling tables

Styling an HTML table isn't the most glamorous job in the world, but sometimes we all have to do it. This article explains how to make HTML tables look good, with some specific table styling techniques highlighted.

Debugging CSS

This article will give you guidance on how to go about debugging a CSS problem, and show you how the DevTools included in all modern browsers can help you to find out what is going on.

Challenge: Fundamental CSS comprehension Challenge

This challenge provides a number of related exercises that must be completed in order to create the final design — a business card/gamer card/social media profile.

Challenge: Creating fancy letterheaded paper Challenge

If you want to make the right impression, writing a letter on nice letterheaded paper can be a really good start. In this challenge you will create an online template to achieve such a look.

Challenge: A cool-looking box Challenge

In this challenge, you'll get some more practice in creating cool-looking boxes by trying to create an eye-catching box.

Additional tutorialsThese tutorials are not part of the learning pathway, but they are interesting nonetheless — you should consider these as stretch goals, to optionally study when you are done with the main Core articles.

Advanced styling effects

This article acts as a box of tricks, providing an introduction to some interesting advanced styling features such as box shadows, blend modes, and filters.

Cascade layers

This lesson aims to introduce you to cascade layers, a more advanced feature that builds on the fundamental concepts of the CSS cascade and CSS specificity.

Handling different text directions

In recent years, CSS has evolved in order to better support different directionality of content, including right-to-left but also top-to-bottom content (such as Japanese) — these different directionalities are called writing modes. As you progress in your study and begin to work with layout, an understanding of writing modes will be very helpful to you, therefore we will introduce them in this article.

Organizing CSS

As you start to work on larger stylesheets and big projects you will discover that maintaining a huge CSS file can be challenging. In this article we will take a brief look at some best practices for writing your CSS to make it easily maintainable, and some of the solutions you will find in use by others to help improve maintainability.

See also
Learn HTML and CSS, Scrimba MDN learning partner

Scrimba's Learn HTML and CSS course teaches you HTML and CSS through building and deploying five awesome projects, with fun interactive lessons and challenges taught by knowledgeable teachers.

Write your first lines of CSS!, Scrimba MDN learning partner

This interactive lesson provides a useful introduction to CSS syntax.


 Overview: Core learning modules Next\n\nCSS styling basics Overview: Core learning modules Next  
CSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides all the CSS fundamentals you'll need for now, including syntax, features, and techniques.PrerequisitesBefore starting this module, you should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). You should also be familiar with HTML (work through our Structuring content with HTML module if not).

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
What is CSS?

CSS allows you to create great-looking web pages, but how does it work under the hood? This article explains what CSS, what the basic syntax looks like, and how your browser applies CSS to HTML to style it.

Getting started with CSS

In this article, we will take a simple HTML document and apply CSS to it, learning some practical details of the language along the way. We will also review the CSS syntax features you've not looked at yet.

Styling a biography page Challenge

In this challenge you will style a simple bio page, testing you on some of the skills you learned in the last couple of lessons including writing selectors and text styling.

Basic CSS selectors

In this article we'll recap some selector fundamentals, including the basic type, class, and ID selectors.

Attribute selectors

As you know from your study of HTML, elements can have attributes that give further detail about the element being marked up. In CSS you can use attribute selectors to target elements with certain attributes. This lesson will show you how to use these very useful selectors.

Pseudo-classes and pseudo-elements

The next set of selectors we will look at are referred to as pseudo-classes and pseudo-elements. There are a large number of these, and they often serve quite specific purposes. Once you know how to use them, you can look through the different types to see if there is something which works for the task you are trying to achieve.

Combinators

The final selectors we will look at are called combinators. Combinators are used to combine other selectors in a way that allows us to select elements based on their location in the DOM relative to other elements (for example, child or sibling).

The box model

Everything in CSS has a box around it, and understanding these boxes is key to being able to create more complex layouts with CSS, or to align items with other items. In this lesson, we will take a look at the CSS Box model. You'll get an understanding of how it works and the terminology that relates to it.

Handling conflicts

The aim of this lesson is to develop your understanding of some of the most fundamental concepts of CSS — the cascade, specificity, and inheritance — which control how CSS is applied to HTML and how conflicts between style declarations are resolved.

Values and units

CSS rules contain declarations, which in turn are composed of properties and values. Each property used in CSS has a value type that describes what kind of values it is allowed to have. In this lesson, we will take a look at some of the most frequently used value types, what they are, and how they work.

Sizing items in CSS

Understanding how big the different features in your design will be is important. In this lesson we will summarize the various ways elements get a size via CSS and define a few terms about sizing that will help you in the future.

Backgrounds and borders

In this lesson, we will take a look at some of the creative things you can do with CSS backgrounds and borders. From adding gradients, background images, and rounded corners, backgrounds and borders are the answer to a lot of styling questions in CSS.

Overflowing content

Overflow is what happens when there is too much content to fit inside an element box. In this lesson, you will learn how to manage overflow using CSS.

Images, media, and form elements

In this lesson we will take a look at how certain special elements are treated in CSS. Images, other media, and form elements behave a little differently from regular boxes in terms of your ability to style them with CSS. Understanding what is and isn't possible can save some frustration, and this lesson will highlight some of the main things that you need to know.

Styling tables

Styling an HTML table isn't the most glamorous job in the world, but sometimes we all have to do it. This article explains how to make HTML tables look good, with some specific table styling techniques highlighted.

Debugging CSS

This article will give you guidance on how to go about debugging a CSS problem, and show you how the DevTools included in all modern browsers can help you to find out what is going on.

Challenge: Fundamental CSS comprehension Challenge

This challenge provides a number of related exercises that must be completed in order to create the final design — a business card/gamer card/social media profile.

Challenge: Creating fancy letterheaded paper Challenge

If you want to make the right impression, writing a letter on nice letterheaded paper can be a really good start. In this challenge you will create an online template to achieve such a look.

Challenge: A cool-looking box Challenge

In this challenge, you'll get some more practice in creating cool-looking boxes by trying to create an eye-catching box.

Additional tutorialsThese tutorials are not part of the learning pathway, but they are interesting nonetheless — you should consider these as stretch goals, to optionally study when you are done with the main Core articles.

Advanced styling effects

This article acts as a box of tricks, providing an introduction to some interesting advanced styling features such as box shadows, blend modes, and filters.

Cascade layers

This lesson aims to introduce you to cascade layers, a more advanced feature that builds on the fundamental concepts of the CSS cascade and CSS specificity.

Handling different text directions

In recent years, CSS has evolved in order to better support different directionality of content, including right-to-left but also top-to-bottom content (such as Japanese) — these different directionalities are called writing modes. As you progress in your study and begin to work with layout, an understanding of writing modes will be very helpful to you, therefore we will introduce them in this article.

Organizing CSS

As you start to work on larger stylesheets and big projects you will discover that maintaining a huge CSS file can be challenging. In this article we will take a brief look at some best practices for writing your CSS to make it easily maintainable, and some of the solutions you will find in use by others to help improve maintainability.

See also
Learn HTML and CSS, Scrimba MDN learning partner

Scrimba's Learn HTML and CSS course teaches you HTML and CSS through building and deploying five awesome projects, with fun interactive lessons and challenges taught by knowledgeable teachers.

Write your first lines of CSS!, Scrimba MDN learning partner

This interactive lesson provides a useful introduction to CSS syntax.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 27, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCSS styling basics Overview: Core learning modules Next  
CSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides all the CSS fundamentals you'll need for now, including syntax, features, and techniques.PrerequisitesBefore starting this module, you should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). You should also be familiar with HTML (work through our Structuring content with HTML module if not).

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
What is CSS?

CSS allows you to create great-looking web pages, but how does it work under the hood? This article explains what CSS, what the basic syntax looks like, and how your browser applies CSS to HTML to style it.

Getting started with CSS

In this article, we will take a simple HTML document and apply CSS to it, learning some practical details of the language along the way. We will also review the CSS syntax features you've not looked at yet.

Styling a biography page Challenge

In this challenge you will style a simple bio page, testing you on some of the skills you learned in the last couple of lessons including writing selectors and text styling.

Basic CSS selectors

In this article we'll recap some selector fundamentals, including the basic type, class, and ID selectors.

Attribute selectors

As you know from your study of HTML, elements can have attributes that give further detail about the element being marked up. In CSS you can use attribute selectors to target elements with certain attributes. This lesson will show you how to use these very useful selectors.

Pseudo-classes and pseudo-elements

The next set of selectors we will look at are referred to as pseudo-classes and pseudo-elements. There are a large number of these, and they often serve quite specific purposes. Once you know how to use them, you can look through the different types to see if there is something which works for the task you are trying to achieve.

Combinators

The final selectors we will look at are called combinators. Combinators are used to combine other selectors in a way that allows us to select elements based on their location in the DOM relative to other elements (for example, child or sibling).

The box model

Everything in CSS has a box around it, and understanding these boxes is key to being able to create more complex layouts with CSS, or to align items with other items. In this lesson, we will take a look at the CSS Box model. You'll get an understanding of how it works and the terminology that relates to it.

Handling conflicts

The aim of this lesson is to develop your understanding of some of the most fundamental concepts of CSS — the cascade, specificity, and inheritance — which control how CSS is applied to HTML and how conflicts between style declarations are resolved.

Values and units

CSS rules contain declarations, which in turn are composed of properties and values. Each property used in CSS has a value type that describes what kind of values it is allowed to have. In this lesson, we will take a look at some of the most frequently used value types, what they are, and how they work.

Sizing items in CSS

Understanding how big the different features in your design will be is important. In this lesson we will summarize the various ways elements get a size via CSS and define a few terms about sizing that will help you in the future.

Backgrounds and borders

In this lesson, we will take a look at some of the creative things you can do with CSS backgrounds and borders. From adding gradients, background images, and rounded corners, backgrounds and borders are the answer to a lot of styling questions in CSS.

Overflowing content

Overflow is what happens when there is too much content to fit inside an element box. In this lesson, you will learn how to manage overflow using CSS.

Images, media, and form elements

In this lesson we will take a look at how certain special elements are treated in CSS. Images, other media, and form elements behave a little differently from regular boxes in terms of your ability to style them with CSS. Understanding what is and isn't possible can save some frustration, and this lesson will highlight some of the main things that you need to know.

Styling tables

Styling an HTML table isn't the most glamorous job in the world, but sometimes we all have to do it. This article explains how to make HTML tables look good, with some specific table styling techniques highlighted.

Debugging CSS

This article will give you guidance on how to go about debugging a CSS problem, and show you how the DevTools included in all modern browsers can help you to find out what is going on.

Challenge: Fundamental CSS comprehension Challenge

This challenge provides a number of related exercises that must be completed in order to create the final design — a business card/gamer card/social media profile.

Challenge: Creating fancy letterheaded paper Challenge

If you want to make the right impression, writing a letter on nice letterheaded paper can be a really good start. In this challenge you will create an online template to achieve such a look.

Challenge: A cool-looking box Challenge

In this challenge, you'll get some more practice in creating cool-looking boxes by trying to create an eye-catching box.

Additional tutorialsThese tutorials are not part of the learning pathway, but they are interesting nonetheless — you should consider these as stretch goals, to optionally study when you are done with the main Core articles.

Advanced styling effects

This article acts as a box of tricks, providing an introduction to some interesting advanced styling features such as box shadows, blend modes, and filters.

Cascade layers

This lesson aims to introduce you to cascade layers, a more advanced feature that builds on the fundamental concepts of the CSS cascade and CSS specificity.

Handling different text directions

In recent years, CSS has evolved in order to better support different directionality of content, including right-to-left but also top-to-bottom content (such as Japanese) — these different directionalities are called writing modes. As you progress in your study and begin to work with layout, an understanding of writing modes will be very helpful to you, therefore we will introduce them in this article.

Organizing CSS

As you start to work on larger stylesheets and big projects you will discover that maintaining a huge CSS file can be challenging. In this article we will take a brief look at some best practices for writing your CSS to make it easily maintainable, and some of the solutions you will find in use by others to help improve maintainability.

See also
Learn HTML and CSS, Scrimba MDN learning partner

Scrimba's Learn HTML and CSS course teaches you HTML and CSS through building and deploying five awesome projects, with fun interactive lessons and challenges taught by knowledgeable teachers.

Write your first lines of CSS!, Scrimba MDN learning partner

This interactive lesson provides a useful introduction to CSS syntax.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 27, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDynamic scripting with JavaScript Overview: Core learning modules Next  
JavaScript is a huge topic, with so many different features, styles, and techniques to learn, and so many APIs and tools built on top of it. This module focuses mostly on the essentials of the core language, plus some key surrounding topics — learning these topics will give you a solid basis to work from.PrerequisitesBefore starting this module, you don't need any previous JavaScript knowledge, but you should have worked through the previous modules in the course. You should at least know HTML and the basic fundamentals of CSS.

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
What is JavaScript?

Welcome to the MDN beginner's JavaScript course! In this first article we will look at JavaScript from a high level, answering questions such as "what is it?", and "what is it doing?", and making sure you are comfortable with JavaScript's purpose.

A first splash into JavaScript

Now you've learned something about the theory of JavaScript, and what you can do with it, we are going to give you a crash course on the basic features of JavaScript via a completely practical tutorial. Here you'll build up a simple "Guess the number" game, step by step.

What went wrong? Troubleshooting JavaScript

When you built up the "Guess the number" game in the previous article, you may have found that it didn't work. Never fear — this article aims to save you from tearing your hair out over such problems by providing you with some simple tips on how to find and fix errors in JavaScript programs.

Storing the information you need — Variables

After reading the last couple of articles you should now know what JavaScript is, what it can do for you, how you use it alongside other web technologies, and what its main features look like from a high level. In this article, we will get down to the real basics, looking at how to work with the most basic building blocks of JavaScript — Variables.

Basic math in JavaScript — numbers and operators

At this point in the course, we discuss maths in JavaScript — how we can combine operators and other features to successfully manipulate numbers to do our bidding.

Handling text — strings in JavaScript

Next, we'll turn our attention to strings — this is what pieces of text are called in programming. In this article, we'll look at all the common things that you really ought to know about strings when learning JavaScript, such as creating strings, escaping quotes in strings, and joining them together.

Useful string methods

Now we've looked at the very basics of strings, let's move up a gear and start thinking about what useful operations we can do on strings with built-in methods, such as finding the length of a text string, joining and splitting strings, substituting one character in a string for another, and more.

Arrays

In this lesson we'll look at arrays — a neat way of storing a list of data items under a single variable name. Here we look at why this is useful, then explore how to create an array, retrieve, add, and remove items stored in an array, and more besides.

Challenge: Silly story generator Challenge

In this challenge, you'll be tasked with taking some of the knowledge you've picked up in this module's articles and applying it to creating a fun app that generates random silly stories. Have fun!

Making decisions in your code — conditionals

In any programming language, the code needs to make decisions and carry out actions accordingly depending on different inputs. For example, in a game, if the player's number of lives is 0, then it's game over. In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is nighttime. In this article, we'll explore how so-called conditional statements work in JavaScript.

Looping code

Programming languages are very useful for rapidly completing repetitive tasks, from multiple basic calculations to just about any other situation where you've got a lot of similar items of work to complete. Here we'll look at the loop structures available in JavaScript that handle such needs.

Functions — reusable blocks of code

Another essential concept in coding is functions, which allow you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command — rather than having to type out the same code multiple times. In this article we'll explore fundamental concepts behind functions such as basic syntax, how to invoke and define them, scope, and parameters.

Build your own function

With most of the essential theory dealt with in the previous article, this article provides practical experience. Here you will get some practice building your own, custom function. Along the way, we'll also explain some useful details of dealing with functions.

Function return values

There's one last essential concept about functions for us to discuss — return values. Some functions don't return a significant value, but others do. It's important to understand what their values are, how to use them in your code, and how to make functions return useful values. We'll cover all of these below.

Introduction to events

In this article, we discuss some important concepts surrounding events, and look at the fundamentals of how they work in browsers.

Event bubbling

This article introduces the concepts of event bubbling, event capture, and event delegation, which are all about what happens when you add a listener to an element that contains another element, and an event then happens to the contained element.

Challenge: Image gallery Challenge

Now that we've looked at the fundamental building blocks of JavaScript, we'll test your knowledge of loops, functions, conditionals and events by getting you to build a fairly common item you'll see on a lot of websites — a JavaScript-powered image gallery.

Object basics

In this article, we'll look at fundamental JavaScript object syntax, and revisit some JavaScript features that we've already seen earlier in the course, reiterating the fact that many of the features you've already dealt with are objects.

DOM scripting introduction

When writing web pages and apps, one of the most common things you'll want to do is change the document structure in some way. This is usually done by manipulating the Document Object Model (DOM) via a set of built-in browser APIs for controlling HTML and styling information. In this article we'll introduce you to DOM scripting.

Making network requests with JavaScript

Another very common task in modern websites and applications is making network requests to retrieve individual data items from the server to update sections of a webpage without having to load an entire new page. This seemingly small detail has had a huge impact on the performance and behavior of sites, so in this article, we'll explain the concept and look at technologies that make it possible.

Working with JSON

JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa). You'll come across it quite often, so in this article, we give you all you need to work with JSON using JavaScript, including parsing JSON so you can access data within it, and creating JSON.

JavaScript debugging and error handling

In this lesson, we will return to the subject of debugging JavaScript (which we first looked at in What went wrong?). Here we will delve deeper into techniques for tracking down errors, but also look at how to code defensively and handle errors in your code, avoiding problems in the first place.

Test your skills: JavaScript

This page lists JavaScript tests you can try so you can verify if you've understood the content in this module.

See also
Scrimba: Learn JavaScript MDN learning partner

Scrimba's Learn JavaScript course teaches you JavaScript through solving 140+ interactive coding challenges, building projects including a game, a browser extension, and even a mobile app. Scrimba features fun interactive lessons taught by knowledgeable teachers.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.


 Overview: Core learning modules Next\n\nDynamic scripting with JavaScript Overview: Core learning modules Next  
JavaScript is a huge topic, with so many different features, styles, and techniques to learn, and so many APIs and tools built on top of it. This module focuses mostly on the essentials of the core language, plus some key surrounding topics — learning these topics will give you a solid basis to work from.PrerequisitesBefore starting this module, you don't need any previous JavaScript knowledge, but you should have worked through the previous modules in the course. You should at least know HTML and the basic fundamentals of CSS.

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
What is JavaScript?

Welcome to the MDN beginner's JavaScript course! In this first article we will look at JavaScript from a high level, answering questions such as "what is it?", and "what is it doing?", and making sure you are comfortable with JavaScript's purpose.

A first splash into JavaScript

Now you've learned something about the theory of JavaScript, and what you can do with it, we are going to give you a crash course on the basic features of JavaScript via a completely practical tutorial. Here you'll build up a simple "Guess the number" game, step by step.

What went wrong? Troubleshooting JavaScript

When you built up the "Guess the number" game in the previous article, you may have found that it didn't work. Never fear — this article aims to save you from tearing your hair out over such problems by providing you with some simple tips on how to find and fix errors in JavaScript programs.

Storing the information you need — Variables

After reading the last couple of articles you should now know what JavaScript is, what it can do for you, how you use it alongside other web technologies, and what its main features look like from a high level. In this article, we will get down to the real basics, looking at how to work with the most basic building blocks of JavaScript — Variables.

Basic math in JavaScript — numbers and operators

At this point in the course, we discuss maths in JavaScript — how we can combine operators and other features to successfully manipulate numbers to do our bidding.

Handling text — strings in JavaScript

Next, we'll turn our attention to strings — this is what pieces of text are called in programming. In this article, we'll look at all the common things that you really ought to know about strings when learning JavaScript, such as creating strings, escaping quotes in strings, and joining them together.

Useful string methods

Now we've looked at the very basics of strings, let's move up a gear and start thinking about what useful operations we can do on strings with built-in methods, such as finding the length of a text string, joining and splitting strings, substituting one character in a string for another, and more.

Arrays

In this lesson we'll look at arrays — a neat way of storing a list of data items under a single variable name. Here we look at why this is useful, then explore how to create an array, retrieve, add, and remove items stored in an array, and more besides.

Challenge: Silly story generator Challenge

In this challenge, you'll be tasked with taking some of the knowledge you've picked up in this module's articles and applying it to creating a fun app that generates random silly stories. Have fun!

Making decisions in your code — conditionals

In any programming language, the code needs to make decisions and carry out actions accordingly depending on different inputs. For example, in a game, if the player's number of lives is 0, then it's game over. In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is nighttime. In this article, we'll explore how so-called conditional statements work in JavaScript.

Looping code

Programming languages are very useful for rapidly completing repetitive tasks, from multiple basic calculations to just about any other situation where you've got a lot of similar items of work to complete. Here we'll look at the loop structures available in JavaScript that handle such needs.

Functions — reusable blocks of code

Another essential concept in coding is functions, which allow you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command — rather than having to type out the same code multiple times. In this article we'll explore fundamental concepts behind functions such as basic syntax, how to invoke and define them, scope, and parameters.

Build your own function

With most of the essential theory dealt with in the previous article, this article provides practical experience. Here you will get some practice building your own, custom function. Along the way, we'll also explain some useful details of dealing with functions.

Function return values

There's one last essential concept about functions for us to discuss — return values. Some functions don't return a significant value, but others do. It's important to understand what their values are, how to use them in your code, and how to make functions return useful values. We'll cover all of these below.

Introduction to events

In this article, we discuss some important concepts surrounding events, and look at the fundamentals of how they work in browsers.

Event bubbling

This article introduces the concepts of event bubbling, event capture, and event delegation, which are all about what happens when you add a listener to an element that contains another element, and an event then happens to the contained element.

Challenge: Image gallery Challenge

Now that we've looked at the fundamental building blocks of JavaScript, we'll test your knowledge of loops, functions, conditionals and events by getting you to build a fairly common item you'll see on a lot of websites — a JavaScript-powered image gallery.

Object basics

In this article, we'll look at fundamental JavaScript object syntax, and revisit some JavaScript features that we've already seen earlier in the course, reiterating the fact that many of the features you've already dealt with are objects.

DOM scripting introduction

When writing web pages and apps, one of the most common things you'll want to do is change the document structure in some way. This is usually done by manipulating the Document Object Model (DOM) via a set of built-in browser APIs for controlling HTML and styling information. In this article we'll introduce you to DOM scripting.

Making network requests with JavaScript

Another very common task in modern websites and applications is making network requests to retrieve individual data items from the server to update sections of a webpage without having to load an entire new page. This seemingly small detail has had a huge impact on the performance and behavior of sites, so in this article, we'll explain the concept and look at technologies that make it possible.

Working with JSON

JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa). You'll come across it quite often, so in this article, we give you all you need to work with JSON using JavaScript, including parsing JSON so you can access data within it, and creating JSON.

JavaScript debugging and error handling

In this lesson, we will return to the subject of debugging JavaScript (which we first looked at in What went wrong?). Here we will delve deeper into techniques for tracking down errors, but also look at how to code defensively and handle errors in your code, avoiding problems in the first place.

Test your skills: JavaScript

This page lists JavaScript tests you can try so you can verify if you've understood the content in this module.

See also
Scrimba: Learn JavaScript MDN learning partner

Scrimba's Learn JavaScript course teaches you JavaScript through solving 140+ interactive coding challenges, building projects including a game, a browser extension, and even a mobile app. Scrimba features fun interactive lessons taught by knowledgeable teachers.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 15, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDynamic scripting with JavaScript Overview: Core learning modules Next  
JavaScript is a huge topic, with so many different features, styles, and techniques to learn, and so many APIs and tools built on top of it. This module focuses mostly on the essentials of the core language, plus some key surrounding topics — learning these topics will give you a solid basis to work from.PrerequisitesBefore starting this module, you don't need any previous JavaScript knowledge, but you should have worked through the previous modules in the course. You should at least know HTML and the basic fundamentals of CSS.

Note:
If you are working on a computer/tablet/other device where you don't have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch.
Tutorials and challenges
What is JavaScript?

Welcome to the MDN beginner's JavaScript course! In this first article we will look at JavaScript from a high level, answering questions such as "what is it?", and "what is it doing?", and making sure you are comfortable with JavaScript's purpose.

A first splash into JavaScript

Now you've learned something about the theory of JavaScript, and what you can do with it, we are going to give you a crash course on the basic features of JavaScript via a completely practical tutorial. Here you'll build up a simple "Guess the number" game, step by step.

What went wrong? Troubleshooting JavaScript

When you built up the "Guess the number" game in the previous article, you may have found that it didn't work. Never fear — this article aims to save you from tearing your hair out over such problems by providing you with some simple tips on how to find and fix errors in JavaScript programs.

Storing the information you need — Variables

After reading the last couple of articles you should now know what JavaScript is, what it can do for you, how you use it alongside other web technologies, and what its main features look like from a high level. In this article, we will get down to the real basics, looking at how to work with the most basic building blocks of JavaScript — Variables.

Basic math in JavaScript — numbers and operators

At this point in the course, we discuss maths in JavaScript — how we can combine operators and other features to successfully manipulate numbers to do our bidding.

Handling text — strings in JavaScript

Next, we'll turn our attention to strings — this is what pieces of text are called in programming. In this article, we'll look at all the common things that you really ought to know about strings when learning JavaScript, such as creating strings, escaping quotes in strings, and joining them together.

Useful string methods

Now we've looked at the very basics of strings, let's move up a gear and start thinking about what useful operations we can do on strings with built-in methods, such as finding the length of a text string, joining and splitting strings, substituting one character in a string for another, and more.

Arrays

In this lesson we'll look at arrays — a neat way of storing a list of data items under a single variable name. Here we look at why this is useful, then explore how to create an array, retrieve, add, and remove items stored in an array, and more besides.

Challenge: Silly story generator Challenge

In this challenge, you'll be tasked with taking some of the knowledge you've picked up in this module's articles and applying it to creating a fun app that generates random silly stories. Have fun!

Making decisions in your code — conditionals

In any programming language, the code needs to make decisions and carry out actions accordingly depending on different inputs. For example, in a game, if the player's number of lives is 0, then it's game over. In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is nighttime. In this article, we'll explore how so-called conditional statements work in JavaScript.

Looping code

Programming languages are very useful for rapidly completing repetitive tasks, from multiple basic calculations to just about any other situation where you've got a lot of similar items of work to complete. Here we'll look at the loop structures available in JavaScript that handle such needs.

Functions — reusable blocks of code

Another essential concept in coding is functions, which allow you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command — rather than having to type out the same code multiple times. In this article we'll explore fundamental concepts behind functions such as basic syntax, how to invoke and define them, scope, and parameters.

Build your own function

With most of the essential theory dealt with in the previous article, this article provides practical experience. Here you will get some practice building your own, custom function. Along the way, we'll also explain some useful details of dealing with functions.

Function return values

There's one last essential concept about functions for us to discuss — return values. Some functions don't return a significant value, but others do. It's important to understand what their values are, how to use them in your code, and how to make functions return useful values. We'll cover all of these below.

Introduction to events

In this article, we discuss some important concepts surrounding events, and look at the fundamentals of how they work in browsers.

Event bubbling

This article introduces the concepts of event bubbling, event capture, and event delegation, which are all about what happens when you add a listener to an element that contains another element, and an event then happens to the contained element.

Challenge: Image gallery Challenge

Now that we've looked at the fundamental building blocks of JavaScript, we'll test your knowledge of loops, functions, conditionals and events by getting you to build a fairly common item you'll see on a lot of websites — a JavaScript-powered image gallery.

Object basics

In this article, we'll look at fundamental JavaScript object syntax, and revisit some JavaScript features that we've already seen earlier in the course, reiterating the fact that many of the features you've already dealt with are objects.

DOM scripting introduction

When writing web pages and apps, one of the most common things you'll want to do is change the document structure in some way. This is usually done by manipulating the Document Object Model (DOM) via a set of built-in browser APIs for controlling HTML and styling information. In this article we'll introduce you to DOM scripting.

Making network requests with JavaScript

Another very common task in modern websites and applications is making network requests to retrieve individual data items from the server to update sections of a webpage without having to load an entire new page. This seemingly small detail has had a huge impact on the performance and behavior of sites, so in this article, we'll explain the concept and look at technologies that make it possible.

Working with JSON

JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa). You'll come across it quite often, so in this article, we give you all you need to work with JSON using JavaScript, including parsing JSON so you can access data within it, and creating JSON.

JavaScript debugging and error handling

In this lesson, we will return to the subject of debugging JavaScript (which we first looked at in What went wrong?). Here we will delve deeper into techniques for tracking down errors, but also look at how to code defensively and handle errors in your code, avoiding problems in the first place.

Test your skills: JavaScript

This page lists JavaScript tests you can try so you can verify if you've understood the content in this module.

See also
Scrimba: Learn JavaScript MDN learning partner

Scrimba's Learn JavaScript course teaches you JavaScript through solving 140+ interactive coding challenges, building projects including a game, a browser extension, and even a mobile app. Scrimba features fun interactive lessons taught by knowledgeable teachers.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 15, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAccessibility on the web Overview: Core learning modules Next  
Access to web content such as public services, education, e-commerce sites, and entertainment is a human right. No one should be excluded based on disability, race, geography, or other human characteristics. This module discusses the best practices and techniques you should learn to make your websites as accessible as possible.PrerequisitesYou should be familiar with HTML, CSS, and JavaScript before starting this module.

Note:
If you are working on a computer/tablet/other devices where you don't have the ability to create your own files, you can try out most of the code examples in an online coding program such as JS Bin or Glitch.
Tutorials and challenges
What is accessibility?

This article starts off the module with a good look at what accessibility is — this includes what groups of people we need to consider and why, what tools different people use to interact with the web, and how we can make accessibility part of our web development workflow.

Accessibility tooling and assistive technology

Next we turn our attention to accessibility tooling, providing information on the kinds of tools you can use to help solve accessibility issues, and the assistive technologies used by people with disabilities as they browse the web. You'll be using these tools throughout subsequent articles.

HTML: A good basis for accessibility

A great deal of web content can be made accessible just by making sure the correct HTML elements are always used for the correct purpose. This article looks in detail at how HTML can be used to ensure maximum accessibility.

CSS and JavaScript accessibility best practices

CSS and JavaScript, when used properly, also have the potential to allow for accessible web experiences, but if misused they can significantly harm accessibility. This article outlines some CSS and JavaScript best practices that should be considered to ensure that even complex content is as accessible as possible.

WAI-ARIA basics

Following on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and use to let users know what is going on. Here we'll show how to use it at a basic level to improve accessibility.

Accessible multimedia

Another category of content that can create accessibility problems is multimedia — video, audio, and image content need to be given proper textual alternatives, so they can be understood by assistive technologies and their users. This article shows how.

Mobile accessibility

With web access on mobile devices being so popular, and popular platforms such as iOS and Android having fully-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. This article looks at mobile-specific accessibility considerations.

Accessibility troubleshooting Challenge

In this challenge, we present to you a simple site with several accessibility issues that you need to diagnose and fix.

See also
Start Building Accessible Web Applications Today

An excellent series of video tutorials by Marcy Sutton.

Deque University resources

Includes code examples, screen reader references, and other useful resources.

WebAIM resources

Includes guides, checklists, tools, and more.

Web Accessibility Evaluation Tools List

Includes a list of web accessibility evaluation tools.

Learn Accessible Web Design MDN learning partner

Scrimba's Learn Accessible Web Design course teaches you how to write accessible HTML by solving interactive coding challenges and fixing a real-world website.


 Overview: Core learning modules Next\n\nAccessibility on the web Overview: Core learning modules Next  
Access to web content such as public services, education, e-commerce sites, and entertainment is a human right. No one should be excluded based on disability, race, geography, or other human characteristics. This module discusses the best practices and techniques you should learn to make your websites as accessible as possible.PrerequisitesYou should be familiar with HTML, CSS, and JavaScript before starting this module.

Note:
If you are working on a computer/tablet/other devices where you don't have the ability to create your own files, you can try out most of the code examples in an online coding program such as JS Bin or Glitch.
Tutorials and challenges
What is accessibility?

This article starts off the module with a good look at what accessibility is — this includes what groups of people we need to consider and why, what tools different people use to interact with the web, and how we can make accessibility part of our web development workflow.

Accessibility tooling and assistive technology

Next we turn our attention to accessibility tooling, providing information on the kinds of tools you can use to help solve accessibility issues, and the assistive technologies used by people with disabilities as they browse the web. You'll be using these tools throughout subsequent articles.

HTML: A good basis for accessibility

A great deal of web content can be made accessible just by making sure the correct HTML elements are always used for the correct purpose. This article looks in detail at how HTML can be used to ensure maximum accessibility.

CSS and JavaScript accessibility best practices

CSS and JavaScript, when used properly, also have the potential to allow for accessible web experiences, but if misused they can significantly harm accessibility. This article outlines some CSS and JavaScript best practices that should be considered to ensure that even complex content is as accessible as possible.

WAI-ARIA basics

Following on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and use to let users know what is going on. Here we'll show how to use it at a basic level to improve accessibility.

Accessible multimedia

Another category of content that can create accessibility problems is multimedia — video, audio, and image content need to be given proper textual alternatives, so they can be understood by assistive technologies and their users. This article shows how.

Mobile accessibility

With web access on mobile devices being so popular, and popular platforms such as iOS and Android having fully-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. This article looks at mobile-specific accessibility considerations.

Accessibility troubleshooting Challenge

In this challenge, we present to you a simple site with several accessibility issues that you need to diagnose and fix.

See also
Start Building Accessible Web Applications Today

An excellent series of video tutorials by Marcy Sutton.

Deque University resources

Includes code examples, screen reader references, and other useful resources.

WebAIM resources

Includes guides, checklists, tools, and more.

Web Accessibility Evaluation Tools List

Includes a list of web accessibility evaluation tools.

Learn Accessible Web Design MDN learning partner

Scrimba's Learn Accessible Web Design course teaches you how to write accessible HTML by solving interactive coding challenges and fixing a real-world website.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 15, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAccessibility on the web Overview: Core learning modules Next  
Access to web content such as public services, education, e-commerce sites, and entertainment is a human right. No one should be excluded based on disability, race, geography, or other human characteristics. This module discusses the best practices and techniques you should learn to make your websites as accessible as possible.PrerequisitesYou should be familiar with HTML, CSS, and JavaScript before starting this module.

Note:
If you are working on a computer/tablet/other devices where you don't have the ability to create your own files, you can try out most of the code examples in an online coding program such as JS Bin or Glitch.
Tutorials and challenges
What is accessibility?

This article starts off the module with a good look at what accessibility is — this includes what groups of people we need to consider and why, what tools different people use to interact with the web, and how we can make accessibility part of our web development workflow.

Accessibility tooling and assistive technology

Next we turn our attention to accessibility tooling, providing information on the kinds of tools you can use to help solve accessibility issues, and the assistive technologies used by people with disabilities as they browse the web. You'll be using these tools throughout subsequent articles.

HTML: A good basis for accessibility

A great deal of web content can be made accessible just by making sure the correct HTML elements are always used for the correct purpose. This article looks in detail at how HTML can be used to ensure maximum accessibility.

CSS and JavaScript accessibility best practices

CSS and JavaScript, when used properly, also have the potential to allow for accessible web experiences, but if misused they can significantly harm accessibility. This article outlines some CSS and JavaScript best practices that should be considered to ensure that even complex content is as accessible as possible.

WAI-ARIA basics

Following on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and use to let users know what is going on. Here we'll show how to use it at a basic level to improve accessibility.

Accessible multimedia

Another category of content that can create accessibility problems is multimedia — video, audio, and image content need to be given proper textual alternatives, so they can be understood by assistive technologies and their users. This article shows how.

Mobile accessibility

With web access on mobile devices being so popular, and popular platforms such as iOS and Android having fully-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. This article looks at mobile-specific accessibility considerations.

Accessibility troubleshooting Challenge

In this challenge, we present to you a simple site with several accessibility issues that you need to diagnose and fix.

See also
Start Building Accessible Web Applications Today

An excellent series of video tutorials by Marcy Sutton.

Deque University resources

Includes code examples, screen reader references, and other useful resources.

WebAIM resources

Includes guides, checklists, tools, and more.

Web Accessibility Evaluation Tools List

Includes a list of web accessibility evaluation tools.

Learn Accessible Web Design MDN learning partner

Scrimba's Learn Accessible Web Design course teaches you how to write accessible HTML by solving interactive coding challenges and fixing a real-world website.


 Overview: Core learning modules Next  Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 15, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nMore MDN. Your MDN.Support MDN and make it your own.Get startedWhat's includedGo ads freeEnjoy MDN ads-free with an MDN Plus subscription.Support MDN and enjoy a focused, ad-free experience alongside other features such as curated collections, custom web platform updates, offline access, and more. Subscribers to paid tiers of MDN Plus have the option to browse MDN without ads.Learn more →AI HelpGet real-time assistance and support.No need to scroll through page after page to find your answers. Introducing an AI assistant that can answer all your web development questions in real time. Powered by OpenAI GPT-4o and GPT-4o mini.Learn more →PlaygroundWrite,Test and Share your code.Your playground to learn and share your amazing work with the world. By simply logging in, you can now spread your creativity far and wide.Learn more →UpdatesCompatibility changes at a glance.Filter and sort updates that matter most to build your projectThe Web doesn't have a changelog, but MDN can help. You can personalize and filter compatibility changes based on browsers or the tech category you are interested in whether that is JavaScript, CSS, etc.Learn more →CollectionsBuild your perfect library. Or let us build it for you.No more haphazard hunting through the vast virtual library: unleash your inner curator and collect your favorite articles in one place for convenient consultation.Learn more →Loading available plans…* Do you need MDN Plus for your company? Let us know and we’ll get back to you when it becomes available.\n\nMore MDN. Your MDN.Support MDN and make it your own.Get startedWhat's includedGo ads freeEnjoy MDN ads-free with an MDN Plus subscription.Support MDN and enjoy a focused, ad-free experience alongside other features such as curated collections, custom web platform updates, offline access, and more. Subscribers to paid tiers of MDN Plus have the option to browse MDN without ads.Learn more →AI HelpGet real-time assistance and support.No need to scroll through page after page to find your answers. Introducing an AI assistant that can answer all your web development questions in real time. Powered by OpenAI GPT-4o and GPT-4o mini.Learn more →PlaygroundWrite,Test and Share your code.Your playground to learn and share your amazing work with the world. By simply logging in, you can now spread your creativity far and wide.Learn more →UpdatesCompatibility changes at a glance.Filter and sort updates that matter most to build your projectThe Web doesn't have a changelog, but MDN can help. You can personalize and filter compatibility changes based on browsers or the tech category you are interested in whether that is JavaScript, CSS, etc.Learn more →CollectionsBuild your perfect library. Or let us build it for you.No more haphazard hunting through the vast virtual library: unleash your inner curator and collect your favorite articles in one place for convenient consultation.Learn more →Loading available plans…* Do you need MDN Plus for your company? Let us know and we’ll get back to you when it becomes available.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverview

More MDN. Your MDN. Get started.
This page is an overview of the MDN Plus documentation and related resources.

MDN Plus is a premium subscription service launched by Mozilla. The service
allows users to customize their MDN Web Docs experience through premium features
such as Collections, filtering Updates and MDN Offline.
Learn more about MDN Plus on our website or in this
blogpost.\n\nOverview

More MDN. Your MDN. Get started.
This page is an overview of the MDN Plus documentation and related resources.

MDN Plus is a premium subscription service launched by Mozilla. The service
allows users to customize their MDN Web Docs experience through premium features
such as Collections, filtering Updates and MDN Offline.
Learn more about MDN Plus on our website or in this
blogpost.\n\nOverview

More MDN. Your MDN. Get started.
This page is an overview of the MDN Plus documentation and related resources.

MDN Plus is a premium subscription service launched by Mozilla. The service
allows users to customize their MDN Web Docs experience through premium features
such as Collections, filtering Updates and MDN Offline.
Learn more about MDN Plus on our website or in this
blogpost.\n\n\n\nFrequently asked questionsWhat is MDN Plus?MDN Plus is a premium subscription service launched in March 2022 by Mozilla.
The service allows users to customize their MDN Web Docs experience through
premium features such as Updates,
Collections and
MDN Offline.Why are we working on premium features on MDN?The extensive research we have done in 2020 and 2021 showed us that MDN users
would appreciate a customized experience on MDN. We’ve got information on what
you would find useful and what you would be interested in. All the premium
features we propose today reflect that feedback. MDN Plus is an initial step
towards making the experience on the site more interactive and helpful for our
users.How much does MDN Plus cost?A three-tiered pricing model has been put in place in order to try and
accommodate our users’ needs as much as possible:

MDN Core - A free plan, for those ones who want to try out a limited version
of the premium features.
MDN Plus 5 - A $5/month or $50/year plan that offers unlimited access to the
premium features included in MDN Plus.
MDN Supporter 10 - A $10/month or $100/year plan for users who want to
support MDN with a higher amount. On top of the MDN Plus premium features, MDN
supporters will be able to contribute and shape the product moving forward, by
having early access to premium features and a direct feedback channel with the
MDN team.

Subscribing for a yearly plan activates a 20% discount for all the paid options.Can I upgrade/downgrade my plan?Currently, you can only upgrade your plan. For getting a downgrade, please
cancel your current subscription first and then activate the new one.What is happening with the existing MDN Web Docs?Nothing. We will continue to develop & maintain our web documentation that will
remain free and accessible for everyone. There will be no change there. Even
more, we believe that MDN Web Docs will benefit from MDN Plus, as we plan to
reinvest part of the gains from MDN Plus and improve our documentation as well
as the overall user experience on the website.Are we violating any OS license obligation by adding a paid product to MDN?MDN content is made available under a CC BY-SA 2.5 license. That license doesn't
preclude Mozilla (or other users of MDN content) from having a paid product. MDN
Plus adds premium features like updates and collections on top of the free
content. Regular users can still access and reuse MDN content under the Creative
Commons license.Where will the money from MDN Plus go?Since its beginning in 2005, MDN Web Docs has been a project hosted and provided
by Mozilla. Mozilla covers the cost of infrastructure, development and
maintenance of the MDN platform, including a team of engineers and its own team
of dedicated writers.
Mozilla wants MDN Plus to help ensure that MDN's open source content continues
to be supported into the future. MDN Plus has been built only with Mozilla
resources, and any revenue generated by MDN Plus will stay within Mozilla. We
are looking into ways to reinvest some of these additional funds into open
source projects contributing to MDN but it is still in the early stages.Does the launch of MDN Plus impact the relationship with partners like OWD?The existence of a new subscription model will not detract from MDN's current
free Web Docs offering in any way. The current experience of accessing web
documentation will not change for users who do not wish to sign up for a premium
subscription. Open Web Docs (OWD) and Mozilla will continue to work closely
together on MDN for the best possible web platform documentation for everyone.
For more information about how our organizations work together, please check
this article.What regions is MDN Plus available in?The free version of MDN Plus is available worldwide. Anyone can create an MDN
Plus account and try out a limited version of the premium features. As for the
paid plans, they are currently available as follows: in the United States,
Canada (since March 24th, 2022), Austria, Belgium, Finland, France, the United
Kingdom, Germany, Ireland, Italy, Malaysia, the Netherlands, New Zealand, Puerto
Rico, Sweden, Singapore, Switzerland, Spain (since April 28th, 2022), Estonia,
Greece, Latvia, Lithuania, Portugal, Slovakia and Slovenia (since June 15th,
2022). We are working on expanding this list even further.I have an idea for MDN Plus, who should I contact?In case you have an idea you would like to share about MDN Plus, you can add
your suggestions to our mdn-community
repo.
If a subscriber, you can also leave us feedback by accessing the ‘Feedback’
option in the user menu.\n\nFrequently asked questionsWhat is MDN Plus?MDN Plus is a premium subscription service launched in March 2022 by Mozilla.
The service allows users to customize their MDN Web Docs experience through
premium features such as Updates,
Collections and
MDN Offline.Why are we working on premium features on MDN?The extensive research we have done in 2020 and 2021 showed us that MDN users
would appreciate a customized experience on MDN. We’ve got information on what
you would find useful and what you would be interested in. All the premium
features we propose today reflect that feedback. MDN Plus is an initial step
towards making the experience on the site more interactive and helpful for our
users.How much does MDN Plus cost?A three-tiered pricing model has been put in place in order to try and
accommodate our users’ needs as much as possible:

MDN Core - A free plan, for those ones who want to try out a limited version
of the premium features.
MDN Plus 5 - A $5/month or $50/year plan that offers unlimited access to the
premium features included in MDN Plus.
MDN Supporter 10 - A $10/month or $100/year plan for users who want to
support MDN with a higher amount. On top of the MDN Plus premium features, MDN
supporters will be able to contribute and shape the product moving forward, by
having early access to premium features and a direct feedback channel with the
MDN team.

Subscribing for a yearly plan activates a 20% discount for all the paid options.Can I upgrade/downgrade my plan?Currently, you can only upgrade your plan. For getting a downgrade, please
cancel your current subscription first and then activate the new one.What is happening with the existing MDN Web Docs?Nothing. We will continue to develop & maintain our web documentation that will
remain free and accessible for everyone. There will be no change there. Even
more, we believe that MDN Web Docs will benefit from MDN Plus, as we plan to
reinvest part of the gains from MDN Plus and improve our documentation as well
as the overall user experience on the website.Are we violating any OS license obligation by adding a paid product to MDN?MDN content is made available under a CC BY-SA 2.5 license. That license doesn't
preclude Mozilla (or other users of MDN content) from having a paid product. MDN
Plus adds premium features like updates and collections on top of the free
content. Regular users can still access and reuse MDN content under the Creative
Commons license.Where will the money from MDN Plus go?Since its beginning in 2005, MDN Web Docs has been a project hosted and provided
by Mozilla. Mozilla covers the cost of infrastructure, development and
maintenance of the MDN platform, including a team of engineers and its own team
of dedicated writers.
Mozilla wants MDN Plus to help ensure that MDN's open source content continues
to be supported into the future. MDN Plus has been built only with Mozilla
resources, and any revenue generated by MDN Plus will stay within Mozilla. We
are looking into ways to reinvest some of these additional funds into open
source projects contributing to MDN but it is still in the early stages.Does the launch of MDN Plus impact the relationship with partners like OWD?The existence of a new subscription model will not detract from MDN's current
free Web Docs offering in any way. The current experience of accessing web
documentation will not change for users who do not wish to sign up for a premium
subscription. Open Web Docs (OWD) and Mozilla will continue to work closely
together on MDN for the best possible web platform documentation for everyone.
For more information about how our organizations work together, please check
this article.What regions is MDN Plus available in?The free version of MDN Plus is available worldwide. Anyone can create an MDN
Plus account and try out a limited version of the premium features. As for the
paid plans, they are currently available as follows: in the United States,
Canada (since March 24th, 2022), Austria, Belgium, Finland, France, the United
Kingdom, Germany, Ireland, Italy, Malaysia, the Netherlands, New Zealand, Puerto
Rico, Sweden, Singapore, Switzerland, Spain (since April 28th, 2022), Estonia,
Greece, Latvia, Lithuania, Portugal, Slovakia and Slovenia (since June 15th,
2022). We are working on expanding this list even further.I have an idea for MDN Plus, who should I contact?In case you have an idea you would like to share about MDN Plus, you can add
your suggestions to our mdn-community
repo.
If a subscriber, you can also leave us feedback by accessing the ‘Feedback’
option in the user menu.\n\nFrequently asked questionsWhat is MDN Plus?MDN Plus is a premium subscription service launched in March 2022 by Mozilla.
The service allows users to customize their MDN Web Docs experience through
premium features such as Updates,
Collections and
MDN Offline.Why are we working on premium features on MDN?The extensive research we have done in 2020 and 2021 showed us that MDN users
would appreciate a customized experience on MDN. We’ve got information on what
you would find useful and what you would be interested in. All the premium
features we propose today reflect that feedback. MDN Plus is an initial step
towards making the experience on the site more interactive and helpful for our
users.How much does MDN Plus cost?A three-tiered pricing model has been put in place in order to try and
accommodate our users’ needs as much as possible:

MDN Core - A free plan, for those ones who want to try out a limited version
of the premium features.
MDN Plus 5 - A $5/month or $50/year plan that offers unlimited access to the
premium features included in MDN Plus.
MDN Supporter 10 - A $10/month or $100/year plan for users who want to
support MDN with a higher amount. On top of the MDN Plus premium features, MDN
supporters will be able to contribute and shape the product moving forward, by
having early access to premium features and a direct feedback channel with the
MDN team.

Subscribing for a yearly plan activates a 20% discount for all the paid options.Can I upgrade/downgrade my plan?Currently, you can only upgrade your plan. For getting a downgrade, please
cancel your current subscription first and then activate the new one.What is happening with the existing MDN Web Docs?Nothing. We will continue to develop & maintain our web documentation that will
remain free and accessible for everyone. There will be no change there. Even
more, we believe that MDN Web Docs will benefit from MDN Plus, as we plan to
reinvest part of the gains from MDN Plus and improve our documentation as well
as the overall user experience on the website.Are we violating any OS license obligation by adding a paid product to MDN?MDN content is made available under a CC BY-SA 2.5 license. That license doesn't
preclude Mozilla (or other users of MDN content) from having a paid product. MDN
Plus adds premium features like updates and collections on top of the free
content. Regular users can still access and reuse MDN content under the Creative
Commons license.Where will the money from MDN Plus go?Since its beginning in 2005, MDN Web Docs has been a project hosted and provided
by Mozilla. Mozilla covers the cost of infrastructure, development and
maintenance of the MDN platform, including a team of engineers and its own team
of dedicated writers.
Mozilla wants MDN Plus to help ensure that MDN's open source content continues
to be supported into the future. MDN Plus has been built only with Mozilla
resources, and any revenue generated by MDN Plus will stay within Mozilla. We
are looking into ways to reinvest some of these additional funds into open
source projects contributing to MDN but it is still in the early stages.Does the launch of MDN Plus impact the relationship with partners like OWD?The existence of a new subscription model will not detract from MDN's current
free Web Docs offering in any way. The current experience of accessing web
documentation will not change for users who do not wish to sign up for a premium
subscription. Open Web Docs (OWD) and Mozilla will continue to work closely
together on MDN for the best possible web platform documentation for everyone.
For more information about how our organizations work together, please check
this article.What regions is MDN Plus available in?The free version of MDN Plus is available worldwide. Anyone can create an MDN
Plus account and try out a limited version of the premium features. As for the
paid plans, they are currently available as follows: in the United States,
Canada (since March 24th, 2022), Austria, Belgium, Finland, France, the United
Kingdom, Germany, Ireland, Italy, Malaysia, the Netherlands, New Zealand, Puerto
Rico, Sweden, Singapore, Switzerland, Spain (since April 28th, 2022), Estonia,
Greece, Latvia, Lithuania, Portugal, Slovakia and Slovenia (since June 15th,
2022). We are working on expanding this list even further.I have an idea for MDN Plus, who should I contact?In case you have an idea you would like to share about MDN Plus, you can add
your suggestions to our mdn-community
repo.
If a subscriber, you can also leave us feedback by accessing the ‘Feedback’
option in the user menu.\n\n\n\nMDN CurriculumThe essential skillset for new front-end developersThe MDN Curriculum provides a structured guide to the essential skills and practices for being a successful front-end developer, along with recommended learning resources.
Last updated: February 2024About the curriculum
Beginner's level
Self-paced
Free

Defines the essential skills and knowledge every front-end developer needs for career success and industry relevance.
Created by Mozilla and refined with insights from students, educators, and developers from the broader web community.
Includes learning resource recommendations covering every curriculum topic, helping you become job-ready.
Learn moreLearn our curriculum with Scrimba's interactive Frontend Developer Career Path.ModulesGetting started1. Soft skillsDevelop a great attitude towards learning, researching, and collaborating to enhance your chances of success.Best Practices2. Environment setupFamiliarize yourself with your development environment and the tools you'll use to build websites.ToolingLet's beginCore1. Web standardsUnderstand how the web works at a high level, and the process for creating web technologies.Web Standards & Semantics2. Semantic HTMLLearn the fundamentals of HTML, the language used to define and structure web content.Web Standards & Semantics3. CSS fundamentalsDive into the fundamentals of CSS, the language you'll use to style and layout websites.Styling4. CSS text stylingFocus on using CSS to style text and apply custom web fonts.Styling5. CSS layoutLearn modern techniques for creating flexible layouts that work on a wide variety of devices.Styling6. JavaScript fundamentalsFocus on the core JavaScript language and fundamental surrounding topics.Scripting7. AccessibilityUnderstand the need for universal access to web content and how to write accessible code.Best Practices8. Design for developersAppreciate basic design theory, how to speak design language, and what makes websites look good.Best Practices9. Version controlUnderstand why version control is necessary, and use GitHub to store code and collaborate with others.ToolingLet's beginExtensions1. Transform & animate CSSAdd animations to your toolbox to enhance user experience and perceived performance.Web Standards & Semantics2. Custom JS objectsCreate custom JavaScript objects to gain a deeper understanding of object-oriented programming.Scripting3. Web APIsStudy common WebAPIs in depth to appreciate how WebAPIs work in general.Scripting4. PerformanceExplore how to create performant, fast-loading websites and enhance perceived performance.Best Practices5. Security and privacyLearn how to protect data from unauthorized access and how to treat user data responsibly.Best Practices6. TestingExplore the need for testing, and learn how to implement common test types.Best Practices7. JavaScript frameworksStudy the features of popular JavaScript frameworks, and use them to implement common use cases.Tooling8. CSS toolingLook at popular CSS tooling and understand what code problems they can solve.Tooling9. Other tooling typesUnderstand the purpose and usage of other tooling types commonly found in a web project.ToolingLet's beginLearn the curriculum with Scrimba and become job readyScrimba's Frontend Developer Career Path teaches the MDN Curriculum Core with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job!Find out moreHow can youboost your employability with the MDNCurriculum?Learn about research collaboration and other essential soft skills.Balance between modern tooling and long-term best practices.Get access to high-quality recommended resources.Get guidance from trusted voices.Don't know where toget started? 

Starting out with coding?
Begin with our "Getting started" and "Core" modules to grasp the essential skills for web development.
Core modules


Beyond the basics?
Dive deeper with our "Extensions" modules to develop specialized skills.
Extensions modules


Seeking employment?
Our "Soft skills" module, part of "Getting started", offers crucial insights to help you land your job.
Getting started modules


Working at a school?
Use our modules to guide your teaching, or enroll your students in Scrimba's Frontend Path.
Frontend Path\n\nMDN CurriculumThe essential skillset for new front-end developersThe MDN Curriculum provides a structured guide to the essential skills and practices for being a successful front-end developer, along with recommended learning resources.
Last updated: February 2024About the curriculum
Beginner's level
Self-paced
Free

Defines the essential skills and knowledge every front-end developer needs for career success and industry relevance.
Created by Mozilla and refined with insights from students, educators, and developers from the broader web community.
Includes learning resource recommendations covering every curriculum topic, helping you become job-ready.
Learn moreLearn our curriculum with Scrimba's interactive Frontend Developer Career Path.ModulesGetting started1. Soft skillsDevelop a great attitude towards learning, researching, and collaborating to enhance your chances of success.Best Practices2. Environment setupFamiliarize yourself with your development environment and the tools you'll use to build websites.ToolingLet's beginCore1. Web standardsUnderstand how the web works at a high level, and the process for creating web technologies.Web Standards & Semantics2. Semantic HTMLLearn the fundamentals of HTML, the language used to define and structure web content.Web Standards & Semantics3. CSS fundamentalsDive into the fundamentals of CSS, the language you'll use to style and layout websites.Styling4. CSS text stylingFocus on using CSS to style text and apply custom web fonts.Styling5. CSS layoutLearn modern techniques for creating flexible layouts that work on a wide variety of devices.Styling6. JavaScript fundamentalsFocus on the core JavaScript language and fundamental surrounding topics.Scripting7. AccessibilityUnderstand the need for universal access to web content and how to write accessible code.Best Practices8. Design for developersAppreciate basic design theory, how to speak design language, and what makes websites look good.Best Practices9. Version controlUnderstand why version control is necessary, and use GitHub to store code and collaborate with others.ToolingLet's beginExtensions1. Transform & animate CSSAdd animations to your toolbox to enhance user experience and perceived performance.Web Standards & Semantics2. Custom JS objectsCreate custom JavaScript objects to gain a deeper understanding of object-oriented programming.Scripting3. Web APIsStudy common WebAPIs in depth to appreciate how WebAPIs work in general.Scripting4. PerformanceExplore how to create performant, fast-loading websites and enhance perceived performance.Best Practices5. Security and privacyLearn how to protect data from unauthorized access and how to treat user data responsibly.Best Practices6. TestingExplore the need for testing, and learn how to implement common test types.Best Practices7. JavaScript frameworksStudy the features of popular JavaScript frameworks, and use them to implement common use cases.Tooling8. CSS toolingLook at popular CSS tooling and understand what code problems they can solve.Tooling9. Other tooling typesUnderstand the purpose and usage of other tooling types commonly found in a web project.ToolingLet's beginLearn the curriculum with Scrimba and become job readyScrimba's Frontend Developer Career Path teaches the MDN Curriculum Core with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job!Find out moreHow can youboost your employability with the MDNCurriculum?Learn about research collaboration and other essential soft skills.Balance between modern tooling and long-term best practices.Get access to high-quality recommended resources.Get guidance from trusted voices.Don't know where toget started? 

Starting out with coding?
Begin with our "Getting started" and "Core" modules to grasp the essential skills for web development.
Core modules


Beyond the basics?
Dive deeper with our "Extensions" modules to develop specialized skills.
Extensions modules


Seeking employment?
Our "Soft skills" module, part of "Getting started", offers crucial insights to help you land your job.
Getting started modules


Working at a school?
Use our modules to guide your teaching, or enroll your students in Scrimba's Frontend Path.
Frontend Path\n\nMDN CurriculumThe essential skillset for new front-end developersThe MDN Curriculum provides a structured guide to the essential skills and practices for being a successful front-end developer, along with recommended learning resources.
Last updated: February 2024About the curriculum
Beginner's level
Self-paced
Free

Defines the essential skills and knowledge every front-end developer needs for career success and industry relevance.
Created by Mozilla and refined with insights from students, educators, and developers from the broader web community.
Includes learning resource recommendations covering every curriculum topic, helping you become job-ready.
Learn moreLearn our curriculum with Scrimba's interactive Frontend Developer Career Path.ModulesGetting started1. Soft skillsDevelop a great attitude towards learning, researching, and collaborating to enhance your chances of success.Best Practices2. Environment setupFamiliarize yourself with your development environment and the tools you'll use to build websites.ToolingLet's beginCore1. Web standardsUnderstand how the web works at a high level, and the process for creating web technologies.Web Standards & Semantics2. Semantic HTMLLearn the fundamentals of HTML, the language used to define and structure web content.Web Standards & Semantics3. CSS fundamentalsDive into the fundamentals of CSS, the language you'll use to style and layout websites.Styling4. CSS text stylingFocus on using CSS to style text and apply custom web fonts.Styling5. CSS layoutLearn modern techniques for creating flexible layouts that work on a wide variety of devices.Styling6. JavaScript fundamentalsFocus on the core JavaScript language and fundamental surrounding topics.Scripting7. AccessibilityUnderstand the need for universal access to web content and how to write accessible code.Best Practices8. Design for developersAppreciate basic design theory, how to speak design language, and what makes websites look good.Best Practices9. Version controlUnderstand why version control is necessary, and use GitHub to store code and collaborate with others.ToolingLet's beginExtensions1. Transform & animate CSSAdd animations to your toolbox to enhance user experience and perceived performance.Web Standards & Semantics2. Custom JS objectsCreate custom JavaScript objects to gain a deeper understanding of object-oriented programming.Scripting3. Web APIsStudy common WebAPIs in depth to appreciate how WebAPIs work in general.Scripting4. PerformanceExplore how to create performant, fast-loading websites and enhance perceived performance.Best Practices5. Security and privacyLearn how to protect data from unauthorized access and how to treat user data responsibly.Best Practices6. TestingExplore the need for testing, and learn how to implement common test types.Best Practices7. JavaScript frameworksStudy the features of popular JavaScript frameworks, and use them to implement common use cases.Tooling8. CSS toolingLook at popular CSS tooling and understand what code problems they can solve.Tooling9. Other tooling typesUnderstand the purpose and usage of other tooling types commonly found in a web project.ToolingLet's beginLearn the curriculum with Scrimba and become job readyScrimba's Frontend Developer Career Path teaches the MDN Curriculum Core with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job!Find out moreHow can youboost your employability with the MDNCurriculum?Learn about research collaboration and other essential soft skills.Balance between modern tooling and long-term best practices.Get access to high-quality recommended resources.Get guidance from trusted voices.Don't know where toget started? 

Starting out with coding?
Begin with our "Getting started" and "Core" modules to grasp the essential skills for web development.
Core modules


Beyond the basics?
Dive deeper with our "Extensions" modules to develop specialized skills.
Extensions modules


Seeking employment?
Our "Soft skills" module, part of "Getting started", offers crucial insights to help you land your job.
Getting started modules


Working at a school?
Use our modules to guide your teaching, or enroll your students in Scrimba's Frontend Path.
Frontend Path\n\n\n\nColor models for humans and devicesPolina GurtovaiaMay 6, 202517 minute readImages help bring more color and life to the web. This post describes how images are represented by humans and on different devices, with details about color spaces and vision theory.Read more →Default styles for h1 elements are changingSimon PietersApril 11, 20254 minute readBrowsers are starting to roll out changes in default UA styles for nested section headings. This post describes the incoming changes, how to identify if it's an issue on your websites, and hints for conformant and better-structured pages.
Read more →Implications of Global Privacy ControlLola OdelolaMarch 15, 20255 minute readGlobal Privacy Control (GPC) is on the way to becoming a formal privacy standard with the recent publication of its first working draft. Let's take a look at what the implications are for developers and users.Read more →JavaScript Temporal is comingBrian SmithJanuary 24, 20255 minute readA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
Read more →Fix your website's Largest Contentful Paint by optimizing image loadingDebugBearJanuary 13, 202510 minute readLearn techniques to improve the Largest Contentful Paint metric, a part of Core Web Vitals, for your website.
SponsoredRead more →MDN 2024 content projectsVadim MakeevJanuary 8, 20259 minute readLet's have a look at MDN Web Docs content projects in 2024, with highlights of our top picks and recommended reading, and at what's next on MDN for 2025.
Read more →A new learning experience on MDNRuth JohnDecember 20, 20244 minute readThere's a new Learn Web Development section on MDN that merges the MDN Curriculum with the Learn section. Here's the background to these changes, what's new, and what you can expect to see in the future.
Read more →Countdown to the holidays with daily coding challengesSonal SoodDecember 1, 20242 minute readJoin JavaScriptmas this December for daily coding challenges designed to boost your skills and bring festive fun. Solve challenges on Scrimba, learn something new, and take part for a chance to win exciting prizes!
Read more →Monitoring and optimizing website performanceDebugBearNovember 11, 202412 minute readLearn about reading network request waterfalls, identifying common network performance issues, and optimizing page rendering.
SponsoredRead more →How to land your first developer jobPer BorgenNovember 1, 202411 minute readHere are six effective strategies for landing your first developer job. These are especially relevant if you're self-taught or breaking into the tech industry without a traditional CS degree.
SponsoredRead more →Introducing the new MDN Community pagePranshu KhannaOctober 15, 20245 minute readWe are thrilled to announce the new MDN community page that will be a hub to recognize our contributors and a place for contributors to get involved.
Read more →Fixing your website's JavaScript performanceDebugBearOctober 9, 20249 minute readLearn about lesser-known web performance bottlenecks connected to excessive JavaScript usage, like long tasks, large bundle sizes, and hydration issues.
SponsoredRead more →Get back to school! Supercharge your learning with MDN and ScrimbaHermina CondeiSeptember 12, 20242 minute readFor many of us, the holidays are over, and the time has come to focus.  Now is an ideal time to dive into learning web development, and you're in luck — MDN and Scrimba are offering a 30% discount on select courses for the next month!
Read more →Efficient data handling with the Streams APIVultrSeptember 6, 20246 minute readThis post demonstrates how to use the Streams API in a web application to fetch and transform text on the fly.  By processing the data as it arrives, this approach enhances performance, responsiveness, and resource efficiency.
SponsoredRead more →Locale-sensitive text segmentation in JavaScript with Intl.SegmenterBrian SmithSeptember 3, 20245 minute readLearn how to use Intl.Segmenter for locale-sensitive text segmentation in JavaScript to simplify localization, count words or sentences in different languages, and more.Read more →Optimize your workflow with Git stashGitLabAugust 28, 20248 minute readLearn how to use Git stash to break down large commits. Discover a better approach for saving work when switching branches.SponsoredRead more →How to debug mobile apps across devicesLambdaTestAugust 7, 20248 minute readThis post explores what mobile app debugging is, commonly used techniques, and how you can debug mobile apps on multiple devices.SponsoredRead more →Exclusive accordions using the HTML details elementBrian SmithAugust 5, 20243 minute readThe 'name' attribute of the HTML details element is gaining more support across browsers. Learn how this feature allows creating exclusive accordions without scripting widgets from scratch.Read more →Exploring the Broadcast Channel API for cross-tab communicationVultrJuly 12, 20244 minute readThis article explains how to use the Broadcast Channel API to build synchronized and interconnected web applications.SponsoredRead more →MDN partners with Scrimba to enhance web development learningHermina CondeiJuly 9, 20246 minute readWe have chosen Scrimba as a course partner for the MDN Curriculum. This blog post explores what the partnership means practically, and how we will provide an even better web education experience together.Read more →Introducing the MDN HTTP ObservatoryHermina CondeiJuly 2, 20247 minute readFirst released in 2016, the HTTP Observatory became popular in the web community with a combination of helpful security audits and educational material. Fast forward to 2024, and we are delighted to announce that Observatory's new home is MDN. Read on to find out more about what this entails, and give the HTTP Observatory a warm welcome!Read more →Static Site Generation (SSG) with Next.jsVultrJune 28, 20247 minute readThis guide explains how to use Static Site Generation in Next.js to build scalable and secure web applications with fast loading times and a focus on performance.SponsoredRead more →New JavaScript Set methodsBrian SmithJune 24, 20245 minute readNew JavaScript Set methods are landing across browsers. Learn about sets, how you can use these methods to compare different sets, create new sets with specific properties, and more.Read more →Securing APIs: Express rate limit and slow downVultrMay 28, 20246 minute readThis guide introduces you to rate limits and slow down mechanisms. Learn how to apply slow down and rate limit mechanisms in Express applications.SponsoredRead more →Using the Page Visibility APIBrian SmithMay 10, 20246 minute readThis post takes a look at what page visibility is, how you can use the Page Visibility API in your applications, and describes pitfalls to avoid if you build features around this functionality.Read more →A year of publishing the MDN BlogThe MDN TeamMay 3, 20245 minute readWe've been writing about web development and the web platform on the MDN Blog since May 2023. Here's our highlights and top posts along with our favorites.Read more →Setting up service workers on VultrVultrApril 23, 20246 minute readThis guide introduces you to service workers and their lifecycle. Learn how to deploy a project using service workers with HTTPS on Vultr.SponsoredRead more →Interop 2023: MDN updatesBrian SmithMarch 27, 20246 minute readInterop 2023 has successfully concluded, and the Interop 2024 project is now officially underway. Learn what Interop is, discover the updates from Interop 2023 now on MDN, and find out what's coming to the web next.Read more →Testing JavaScript with Jest on VultrVultrMarch 22, 20247 minute readThis guide introduces you to the common types of tests and the testing conventions. Learn how to test JavaScript with Jest on Vultr.SponsoredRead more →Creating color palettes with the CSS color-mix() functionMichelle BarkerMarch 8, 20247 minute readWorking with colors on the web just got more interesting! In this article, we’ll explore how to use the CSS color-mix() function to create variations in color palettes.Read more →Modernizing conventional test automation with TestGridTestGridFebruary 29, 202412 minute readThis post reflects on the conventional test automation methods using Selenium and Appium. Learn how you can use TestGrid's unified testing platform to enhance the conventional methods and also leverage the modern codeless testing techniques.SponsoredRead more →Lift-off: The MDN Curriculum launchHermina CondeiFebruary 27, 20246 minute readThe long-awaited MDN Curriculum is now live on MDN, providing a structured guide to the essential front-end development skills and best practices for industry newcomers. Learn all the key details in this article.Read more →Creating effective technical documentationDipika BhattacharyaFebruary 13, 20247 minute readThis article provides an overview of the core components required for creating effective technical documentation. Learn the best practices to make your documentation clear, consistent, and well-structured.Read more →Leveraging Bun on Vultr: A superior Node.js alternativeVultrJanuary 17, 20245 minute readThis guide explains Bun functionalities as a runtime package manager and a bundler. It also explains the benefits of built-in Bun APIs and how to use Bun's Vultr marketplace application.SponsoredRead more →Border images in CSS: A key focus area for Interop 2023Dipika BhattacharyaDecember 19, 202310 minute readAligning with Interop 2023's emphasis on cross-browser consistency, this post walks you through various `border-image` properties that you can control to create captivating web designs. Learn how to use custom graphics for enhancing the look of your websites that appear consistent across different browsers.Read more →Build AI-powered applications using OpenLLM and Vultr Cloud GPUVultrDecember 12, 20237 minute readLearn how to build AI-powered apps using OpenLLM and Vultr Cloud GPU. This guide shows how to generate API responses using a Large Language Model. It also covers instructions for setting up an Nginx server and implementing SSL security.SponsoredRead more →Saying goodbye to third-party cookies in 2024Chris MillsDecember 8, 20238 minute readThe tail end of 2023 welcomes positive news for web privacy, as Chrome announces it is to join Firefox and Safari in deprecating third-party cookies in 2024. Find out more details about these changes, and what they mean for web developers.Read more →Baseline's evolution on MDNVadim MakeevDecember 5, 20234 minute readToday we're updating the Baseline widgets and introducing a new one, along with the updated definition of Baseline.Read more →Developer essentials: JavaScript console methodsBrian SmithNovember 30, 20236 minute readThe JavaScript console is an essential tool for web development. Learn new and fun ways to use the console to display data and debug your code.Read more →Getting started with CSS container queriesMichelle BarkerNovember 16, 20238 minute readCSS container queries are a powerful new tool for our CSS layout toolbox. In this post we'll dive into the practicalities of building a layout with container queries.Read more →Deploying Node.js applications with PM2 on VultrVultrNovember 8, 20237 minute readLearn how to deploy a Node.js application on Vultr using PM2 to create persistent services. This guide shows how to efficiently use resources via PM2 cluster mode. It also covers Nginx server setup and SSL security.SponsoredRead more →VS Code: Tips and tricks for beginnersDipika BhattacharyaNovember 7, 20238 minute readDiscover essential tips and tricks for using Visual Studio Code (VS Code), a powerful IDE. Learn how to leverage its integrated editing features and Git support, and explore a few extensions.Read more →Coming Soon: MDN Observatory 2.0The MDN TeamOctober 25, 20232 minute readObservatory 2.0 is launching soon as part of the Mozilla Developer Network as the MDN Observatory with new security scoring standards and other exciting updates.Read more →Optimizing DevSecOps workflows with GitLab's conditional CI/CD pipelinesGitLabOctober 23, 20238 minute readThis guide explores the various types of CI/CD pipelines and helps you understand their specific use cases. Learn how to leverage rules to create highly efficient DevSecOps workflows.SponsoredRead more →Introduction to web sustainabilityMichelle BarkerOctober 11, 20238 minute readWhat can web designers and developers do to build a more sustainable web? This post explores the environmental impacts of web technologies and looks at some of the ways we can build greener websites.Read more →Migrating from GitHub to GitLab seamlessly: A step-by-step guideGitLabOctober 5, 20239 minute readThinking about making the move from GitHub to GitLab? This guide demystifies the migration process, addressing common concerns for DevSecOps teams that are looking to seamlessly transition between the two platforms. This post provides a step-by-step guided tutorial on how to migrate your data from GitHub into GitLab.SponsoredRead more →Announcing the MDN front-end developer curriculumThe MDN TeamAugust 14, 20235 minute readMDN has created a curriculum for aspiring front-end developers to build a rewarding and successful career. Take a look at the curriculum, who it's for, and the research it's based on.Read more →Creating custom easing effects in CSS animations using the linear() functionMichelle BarkerAugust 1, 202310 minute readThe new CSS linear() timing function enables custom easing in animations. Explore how linear() works compared with other timing functions used for easing, with practical examples.Read more →Securing your CDN: Why and how should you use SRITerence EdenJuly 21, 20234 minute readRelying on external resources for your website is always fraught with risks. Learn how to protect your website and its visitors by using SRI to secure third-party content.Read more →Scroll progress animations in CSSMichelle BarkerJuly 14, 20237 minute readScroll-driven animations are coming to CSS! In this post, we'll look at a few types of animations and learn how to link them to the scroll progress of a container.Read more →Reflections on AI Explain: A postmortemThe MDN TeamJuly 11, 202310 minute readWe recently launched a feature called AI Explain, but we have rolled this back for now. In this post, we look into the story behind AI Explain: its development, launch, and the reasons that led us to press the pause button.Read more →Developer essentials: How to search code using grepBrian SmithJuly 3, 20239 minute readgrep is a powerful tool for searching code from the terminal. This post will show you how to use grep and why it's an essential developer tool.Read more →Introducing AI Help (Beta): Your Companion for Web DevelopmentHermina CondeiJune 27, 20233 minute readWe're introducing an AI assistant powered by MDN and OpenAI GPT 3.5 to answer all your web development questions in real time.Read more →Learn how to use hue in CSS colors with HSLBrian SmithJune 26, 20237 minute readHues are a bright way to define colors in CSS. Learn about hues, color wheels, how to use color functions, and how you can create vibrant color palettes for your website using hue.Read more →Introducing the MDN Playground: Bring your code to life!Florian DiemingerJune 22, 20236 minute readMDN is launching a code Playground. Users can prototype ideas and expand all live samples into an interactive experience.Read more →MDN doc updates: CSS selectors & media queries, WebGPU & WebTransport APIs, Progressive web appsDipika BhattacharyaJune 13, 20236 minute readDiscover CSS :lang(), experimental media queries, manipulating graphics with WebGPU, client-server communication with WebTransport, ECMAScript module support, and more.Read more →How to draw any regular shape with just one JavaScript functionRuth JohnMay 26, 20234 minute readLearn how to use JavaScript to draw any regular shape to a HTML canvas with a single function, and how to modify it to draw multiple shapes.Read more →New reference pages on MDN for JavaScript regular expressionsBrian SmithMay 23, 20235 minute readSee the latest updates to the MDN reference pages about JavaScript regular expressions, including new sections on sub-features and browser compatibility information.Read more →Celebrating Global Accessibility Awareness DaySchalk NeethlingMay 18, 20236 minute readIn celebration of Global Accessibility Awareness Day in 2023, we share some tools and guidelines to help you make the web more accessible.Read more →Using HTML landmark roles to improve accessibilitySchalk NeethlingMay 15, 202311 minute readLearn what HTML landmark roles are, how they improve accessibility, and how you can include them on your website effectively.Read more →Introducing Baseline: a unified view of stable web featuresHermina CondeiMay 10, 20233 minute readMDN leads the way in implementing WebDX community group's efforts, delivering a clear and simple baseline for the web platform to developers.Read more →How :not() chains multiple selectorsDipika BhattacharyaMay 5, 20234 minute readLearn how the CSS `:not()` pseudo-class behaves when multiple selectors are passed as argument.Read more →New functions, gradients, and hues in CSS colors (Level 4)Brian SmithMay 3, 20239 minute readLearn what's new in CSS Colors Module Level 4, including color spaces, color functions, fancy gradients, and support for wide-gamut displays.Read more →Welcome to the MDN blogRuth JohnMay 3, 20232 minute readThe MDN blog publishes web development news, tutorials, and insights as an extension of MDN Web Docs, helping you discover, learn, and create for the web.Read more →\n\nBlog it betterColor models for humans and devicesPolina GurtovaiaMay 6, 202517 minute readImages help bring more color and life to the web. This post describes how images are represented by humans and on different devices, with details about color spaces and vision theory.Read more →Default styles for h1 elements are changingSimon PietersApril 11, 20254 minute readBrowsers are starting to roll out changes in default UA styles for nested section headings. This post describes the incoming changes, how to identify if it's an issue on your websites, and hints for conformant and better-structured pages.
Read more →Implications of Global Privacy ControlLola OdelolaMarch 15, 20255 minute readGlobal Privacy Control (GPC) is on the way to becoming a formal privacy standard with the recent publication of its first working draft. Let's take a look at what the implications are for developers and users.Read more →JavaScript Temporal is comingBrian SmithJanuary 24, 20255 minute readA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
Read more →Fix your website's Largest Contentful Paint by optimizing image loadingDebugBearJanuary 13, 202510 minute readLearn techniques to improve the Largest Contentful Paint metric, a part of Core Web Vitals, for your website.
SponsoredRead more →MDN 2024 content projectsVadim MakeevJanuary 8, 20259 minute readLet's have a look at MDN Web Docs content projects in 2024, with highlights of our top picks and recommended reading, and at what's next on MDN for 2025.
Read more →A new learning experience on MDNRuth JohnDecember 20, 20244 minute readThere's a new Learn Web Development section on MDN that merges the MDN Curriculum with the Learn section. Here's the background to these changes, what's new, and what you can expect to see in the future.
Read more →Countdown to the holidays with daily coding challengesSonal SoodDecember 1, 20242 minute readJoin JavaScriptmas this December for daily coding challenges designed to boost your skills and bring festive fun. Solve challenges on Scrimba, learn something new, and take part for a chance to win exciting prizes!
Read more →Monitoring and optimizing website performanceDebugBearNovember 11, 202412 minute readLearn about reading network request waterfalls, identifying common network performance issues, and optimizing page rendering.
SponsoredRead more →How to land your first developer jobPer BorgenNovember 1, 202411 minute readHere are six effective strategies for landing your first developer job. These are especially relevant if you're self-taught or breaking into the tech industry without a traditional CS degree.
SponsoredRead more →Introducing the new MDN Community pagePranshu KhannaOctober 15, 20245 minute readWe are thrilled to announce the new MDN community page that will be a hub to recognize our contributors and a place for contributors to get involved.
Read more →Fixing your website's JavaScript performanceDebugBearOctober 9, 20249 minute readLearn about lesser-known web performance bottlenecks connected to excessive JavaScript usage, like long tasks, large bundle sizes, and hydration issues.
SponsoredRead more →Get back to school! Supercharge your learning with MDN and ScrimbaHermina CondeiSeptember 12, 20242 minute readFor many of us, the holidays are over, and the time has come to focus.  Now is an ideal time to dive into learning web development, and you're in luck — MDN and Scrimba are offering a 30% discount on select courses for the next month!
Read more →Efficient data handling with the Streams APIVultrSeptember 6, 20246 minute readThis post demonstrates how to use the Streams API in a web application to fetch and transform text on the fly.  By processing the data as it arrives, this approach enhances performance, responsiveness, and resource efficiency.
SponsoredRead more →Locale-sensitive text segmentation in JavaScript with Intl.SegmenterBrian SmithSeptember 3, 20245 minute readLearn how to use Intl.Segmenter for locale-sensitive text segmentation in JavaScript to simplify localization, count words or sentences in different languages, and more.Read more →Optimize your workflow with Git stashGitLabAugust 28, 20248 minute readLearn how to use Git stash to break down large commits. Discover a better approach for saving work when switching branches.SponsoredRead more →How to debug mobile apps across devicesLambdaTestAugust 7, 20248 minute readThis post explores what mobile app debugging is, commonly used techniques, and how you can debug mobile apps on multiple devices.SponsoredRead more →Exclusive accordions using the HTML details elementBrian SmithAugust 5, 20243 minute readThe 'name' attribute of the HTML details element is gaining more support across browsers. Learn how this feature allows creating exclusive accordions without scripting widgets from scratch.Read more →Exploring the Broadcast Channel API for cross-tab communicationVultrJuly 12, 20244 minute readThis article explains how to use the Broadcast Channel API to build synchronized and interconnected web applications.SponsoredRead more →MDN partners with Scrimba to enhance web development learningHermina CondeiJuly 9, 20246 minute readWe have chosen Scrimba as a course partner for the MDN Curriculum. This blog post explores what the partnership means practically, and how we will provide an even better web education experience together.Read more →Introducing the MDN HTTP ObservatoryHermina CondeiJuly 2, 20247 minute readFirst released in 2016, the HTTP Observatory became popular in the web community with a combination of helpful security audits and educational material. Fast forward to 2024, and we are delighted to announce that Observatory's new home is MDN. Read on to find out more about what this entails, and give the HTTP Observatory a warm welcome!Read more →Static Site Generation (SSG) with Next.jsVultrJune 28, 20247 minute readThis guide explains how to use Static Site Generation in Next.js to build scalable and secure web applications with fast loading times and a focus on performance.SponsoredRead more →New JavaScript Set methodsBrian SmithJune 24, 20245 minute readNew JavaScript Set methods are landing across browsers. Learn about sets, how you can use these methods to compare different sets, create new sets with specific properties, and more.Read more →Securing APIs: Express rate limit and slow downVultrMay 28, 20246 minute readThis guide introduces you to rate limits and slow down mechanisms. Learn how to apply slow down and rate limit mechanisms in Express applications.SponsoredRead more →Using the Page Visibility APIBrian SmithMay 10, 20246 minute readThis post takes a look at what page visibility is, how you can use the Page Visibility API in your applications, and describes pitfalls to avoid if you build features around this functionality.Read more →A year of publishing the MDN BlogThe MDN TeamMay 3, 20245 minute readWe've been writing about web development and the web platform on the MDN Blog since May 2023. Here's our highlights and top posts along with our favorites.Read more →Setting up service workers on VultrVultrApril 23, 20246 minute readThis guide introduces you to service workers and their lifecycle. Learn how to deploy a project using service workers with HTTPS on Vultr.SponsoredRead more →Interop 2023: MDN updatesBrian SmithMarch 27, 20246 minute readInterop 2023 has successfully concluded, and the Interop 2024 project is now officially underway. Learn what Interop is, discover the updates from Interop 2023 now on MDN, and find out what's coming to the web next.Read more →Testing JavaScript with Jest on VultrVultrMarch 22, 20247 minute readThis guide introduces you to the common types of tests and the testing conventions. Learn how to test JavaScript with Jest on Vultr.SponsoredRead more →Creating color palettes with the CSS color-mix() functionMichelle BarkerMarch 8, 20247 minute readWorking with colors on the web just got more interesting! In this article, we’ll explore how to use the CSS color-mix() function to create variations in color palettes.Read more →Modernizing conventional test automation with TestGridTestGridFebruary 29, 202412 minute readThis post reflects on the conventional test automation methods using Selenium and Appium. Learn how you can use TestGrid's unified testing platform to enhance the conventional methods and also leverage the modern codeless testing techniques.SponsoredRead more →Lift-off: The MDN Curriculum launchHermina CondeiFebruary 27, 20246 minute readThe long-awaited MDN Curriculum is now live on MDN, providing a structured guide to the essential front-end development skills and best practices for industry newcomers. Learn all the key details in this article.Read more →Creating effective technical documentationDipika BhattacharyaFebruary 13, 20247 minute readThis article provides an overview of the core components required for creating effective technical documentation. Learn the best practices to make your documentation clear, consistent, and well-structured.Read more →Leveraging Bun on Vultr: A superior Node.js alternativeVultrJanuary 17, 20245 minute readThis guide explains Bun functionalities as a runtime package manager and a bundler. It also explains the benefits of built-in Bun APIs and how to use Bun's Vultr marketplace application.SponsoredRead more →Border images in CSS: A key focus area for Interop 2023Dipika BhattacharyaDecember 19, 202310 minute readAligning with Interop 2023's emphasis on cross-browser consistency, this post walks you through various `border-image` properties that you can control to create captivating web designs. Learn how to use custom graphics for enhancing the look of your websites that appear consistent across different browsers.Read more →Build AI-powered applications using OpenLLM and Vultr Cloud GPUVultrDecember 12, 20237 minute readLearn how to build AI-powered apps using OpenLLM and Vultr Cloud GPU. This guide shows how to generate API responses using a Large Language Model. It also covers instructions for setting up an Nginx server and implementing SSL security.SponsoredRead more →Saying goodbye to third-party cookies in 2024Chris MillsDecember 8, 20238 minute readThe tail end of 2023 welcomes positive news for web privacy, as Chrome announces it is to join Firefox and Safari in deprecating third-party cookies in 2024. Find out more details about these changes, and what they mean for web developers.Read more →Baseline's evolution on MDNVadim MakeevDecember 5, 20234 minute readToday we're updating the Baseline widgets and introducing a new one, along with the updated definition of Baseline.Read more →Developer essentials: JavaScript console methodsBrian SmithNovember 30, 20236 minute readThe JavaScript console is an essential tool for web development. Learn new and fun ways to use the console to display data and debug your code.Read more →Getting started with CSS container queriesMichelle BarkerNovember 16, 20238 minute readCSS container queries are a powerful new tool for our CSS layout toolbox. In this post we'll dive into the practicalities of building a layout with container queries.Read more →Deploying Node.js applications with PM2 on VultrVultrNovember 8, 20237 minute readLearn how to deploy a Node.js application on Vultr using PM2 to create persistent services. This guide shows how to efficiently use resources via PM2 cluster mode. It also covers Nginx server setup and SSL security.SponsoredRead more →VS Code: Tips and tricks for beginnersDipika BhattacharyaNovember 7, 20238 minute readDiscover essential tips and tricks for using Visual Studio Code (VS Code), a powerful IDE. Learn how to leverage its integrated editing features and Git support, and explore a few extensions.Read more →Coming Soon: MDN Observatory 2.0The MDN TeamOctober 25, 20232 minute readObservatory 2.0 is launching soon as part of the Mozilla Developer Network as the MDN Observatory with new security scoring standards and other exciting updates.Read more →Optimizing DevSecOps workflows with GitLab's conditional CI/CD pipelinesGitLabOctober 23, 20238 minute readThis guide explores the various types of CI/CD pipelines and helps you understand their specific use cases. Learn how to leverage rules to create highly efficient DevSecOps workflows.SponsoredRead more →Introduction to web sustainabilityMichelle BarkerOctober 11, 20238 minute readWhat can web designers and developers do to build a more sustainable web? This post explores the environmental impacts of web technologies and looks at some of the ways we can build greener websites.Read more →Migrating from GitHub to GitLab seamlessly: A step-by-step guideGitLabOctober 5, 20239 minute readThinking about making the move from GitHub to GitLab? This guide demystifies the migration process, addressing common concerns for DevSecOps teams that are looking to seamlessly transition between the two platforms. This post provides a step-by-step guided tutorial on how to migrate your data from GitHub into GitLab.SponsoredRead more →Announcing the MDN front-end developer curriculumThe MDN TeamAugust 14, 20235 minute readMDN has created a curriculum for aspiring front-end developers to build a rewarding and successful career. Take a look at the curriculum, who it's for, and the research it's based on.Read more →Creating custom easing effects in CSS animations using the linear() functionMichelle BarkerAugust 1, 202310 minute readThe new CSS linear() timing function enables custom easing in animations. Explore how linear() works compared with other timing functions used for easing, with practical examples.Read more →Securing your CDN: Why and how should you use SRITerence EdenJuly 21, 20234 minute readRelying on external resources for your website is always fraught with risks. Learn how to protect your website and its visitors by using SRI to secure third-party content.Read more →Scroll progress animations in CSSMichelle BarkerJuly 14, 20237 minute readScroll-driven animations are coming to CSS! In this post, we'll look at a few types of animations and learn how to link them to the scroll progress of a container.Read more →Reflections on AI Explain: A postmortemThe MDN TeamJuly 11, 202310 minute readWe recently launched a feature called AI Explain, but we have rolled this back for now. In this post, we look into the story behind AI Explain: its development, launch, and the reasons that led us to press the pause button.Read more →Developer essentials: How to search code using grepBrian SmithJuly 3, 20239 minute readgrep is a powerful tool for searching code from the terminal. This post will show you how to use grep and why it's an essential developer tool.Read more →Introducing AI Help (Beta): Your Companion for Web DevelopmentHermina CondeiJune 27, 20233 minute readWe're introducing an AI assistant powered by MDN and OpenAI GPT 3.5 to answer all your web development questions in real time.Read more →Learn how to use hue in CSS colors with HSLBrian SmithJune 26, 20237 minute readHues are a bright way to define colors in CSS. Learn about hues, color wheels, how to use color functions, and how you can create vibrant color palettes for your website using hue.Read more →Introducing the MDN Playground: Bring your code to life!Florian DiemingerJune 22, 20236 minute readMDN is launching a code Playground. Users can prototype ideas and expand all live samples into an interactive experience.Read more →MDN doc updates: CSS selectors & media queries, WebGPU & WebTransport APIs, Progressive web appsDipika BhattacharyaJune 13, 20236 minute readDiscover CSS :lang(), experimental media queries, manipulating graphics with WebGPU, client-server communication with WebTransport, ECMAScript module support, and more.Read more →How to draw any regular shape with just one JavaScript functionRuth JohnMay 26, 20234 minute readLearn how to use JavaScript to draw any regular shape to a HTML canvas with a single function, and how to modify it to draw multiple shapes.Read more →New reference pages on MDN for JavaScript regular expressionsBrian SmithMay 23, 20235 minute readSee the latest updates to the MDN reference pages about JavaScript regular expressions, including new sections on sub-features and browser compatibility information.Read more →Celebrating Global Accessibility Awareness DaySchalk NeethlingMay 18, 20236 minute readIn celebration of Global Accessibility Awareness Day in 2023, we share some tools and guidelines to help you make the web more accessible.Read more →Using HTML landmark roles to improve accessibilitySchalk NeethlingMay 15, 202311 minute readLearn what HTML landmark roles are, how they improve accessibility, and how you can include them on your website effectively.Read more →Introducing Baseline: a unified view of stable web featuresHermina CondeiMay 10, 20233 minute readMDN leads the way in implementing WebDX community group's efforts, delivering a clear and simple baseline for the web platform to developers.Read more →How :not() chains multiple selectorsDipika BhattacharyaMay 5, 20234 minute readLearn how the CSS `:not()` pseudo-class behaves when multiple selectors are passed as argument.Read more →New functions, gradients, and hues in CSS colors (Level 4)Brian SmithMay 3, 20239 minute readLearn what's new in CSS Colors Module Level 4, including color spaces, color functions, fancy gradients, and support for wide-gamut displays.Read more →Welcome to the MDN blogRuth JohnMay 3, 20232 minute readThe MDN blog publishes web development news, tutorials, and insights as an extension of MDN Web Docs, helping you discover, learn, and create for the web.Read more →\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackHinweis: Diese Funktion ist in Web Workers verfügbar.
Das AbortController-Interface stellt ein Controller-Objekt dar, das Ihnen ermöglicht, eine oder mehrere Web-Anfragen bei Bedarf abzubrechen.
Sie können ein neues AbortController-Objekt mit dem AbortController()-Konstruktor erstellen. Die Kommunikation mit einer asynchronen Operation erfolgt über ein AbortSignal-Objekt.Konstruktor
AbortController()

Erstellt eine neue Instanz eines AbortController-Objekts.

Instanz-Eigenschaften
AbortController.signal Schreibgeschützt

Gibt eine Instanz eines AbortSignal-Objekts zurück, das zur Kommunikation mit oder zum Abbruch einer asynchronen Operation verwendet werden kann.

Instanz-Methoden
AbortController.abort()

Bricht eine asynchrone Operation ab, bevor sie abgeschlossen ist. Dies kann fetch-Anfragen, den Verbrauch von Antwortinhalten und Strömen abbrechen.

Beispiele
Hinweis:
Es gibt zusätzliche Beispiele in der AbortSignal Referenz.

Im folgenden Beispiel versuchen wir, ein Video mit der Fetch API herunterzuladen.
Zunächst erstellen wir einen Controller mit dem AbortController()-Konstruktor und greifen dann auf ein zugehöriges AbortSignal-Objekt über die AbortController.signal-Eigenschaft zu.
Wenn die fetch-Anfrage gestartet wird, übergeben wir das AbortSignal als Option innerhalb des Optionsobjekts der Anfrage (das {signal} unten). Dies verknüpft das Signal und den Controller mit der fetch-Anfrage und ermöglicht es uns, sie durch Aufrufen von AbortController.abort() abzubrechen, wie unten im zweiten Ereignis-Listener zu sehen ist.
Wenn abort() aufgerufen wird, lehnt das fetch()-Promise mit einem DOMException namens AbortError ab.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

Wenn die Anfrage nach dem fetch()-Aufruf abgebrochen wird, aber bevor der Antwortkörper gelesen wurde, wird der Versuch, den Antwortkörper zu lesen, mit einer AbortError-Ausnahme abgelehnt.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

Ein voll funktionsfähiges Beispiel finden Sie auf GitHub; Sie können es auch live ansehen.SpezifikationenSpecificationDOM # interface-abortcontrollerBrowser-KompatibilitätSiehe auch
Fetch API
Abortable Fetch von Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackHinweis: Diese Funktion ist in Web Workers verfügbar.
Das AbortController-Interface stellt ein Controller-Objekt dar, das Ihnen ermöglicht, eine oder mehrere Web-Anfragen bei Bedarf abzubrechen.
Sie können ein neues AbortController-Objekt mit dem AbortController()-Konstruktor erstellen. Die Kommunikation mit einer asynchronen Operation erfolgt über ein AbortSignal-Objekt.Konstruktor
AbortController()

Erstellt eine neue Instanz eines AbortController-Objekts.

Instanz-Eigenschaften
AbortController.signal Schreibgeschützt

Gibt eine Instanz eines AbortSignal-Objekts zurück, das zur Kommunikation mit oder zum Abbruch einer asynchronen Operation verwendet werden kann.

Instanz-Methoden
AbortController.abort()

Bricht eine asynchrone Operation ab, bevor sie abgeschlossen ist. Dies kann fetch-Anfragen, den Verbrauch von Antwortinhalten und Strömen abbrechen.

Beispiele
Hinweis:
Es gibt zusätzliche Beispiele in der AbortSignal Referenz.

Im folgenden Beispiel versuchen wir, ein Video mit der Fetch API herunterzuladen.
Zunächst erstellen wir einen Controller mit dem AbortController()-Konstruktor und greifen dann auf ein zugehöriges AbortSignal-Objekt über die AbortController.signal-Eigenschaft zu.
Wenn die fetch-Anfrage gestartet wird, übergeben wir das AbortSignal als Option innerhalb des Optionsobjekts der Anfrage (das {signal} unten). Dies verknüpft das Signal und den Controller mit der fetch-Anfrage und ermöglicht es uns, sie durch Aufrufen von AbortController.abort() abzubrechen, wie unten im zweiten Ereignis-Listener zu sehen ist.
Wenn abort() aufgerufen wird, lehnt das fetch()-Promise mit einem DOMException namens AbortError ab.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

Wenn die Anfrage nach dem fetch()-Aufruf abgebrochen wird, aber bevor der Antwortkörper gelesen wurde, wird der Versuch, den Antwortkörper zu lesen, mit einer AbortError-Ausnahme abgelehnt.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

Ein voll funktionsfähiges Beispiel finden Sie auf GitHub; Sie können es auch live ansehen.SpezifikationenSpecificationDOM # interface-abortcontrollerBrowser-KompatibilitätSiehe auch
Fetch API
Abortable Fetch von Jake Archibald
MDN-Feedback-BoxWar diese Übersetzung hilfreich?JaNeinDiese Seite wurde automatisch aus dem Englischen übersetzt.Übersetzung auf GitHub anzeigen • Fehler mit dieser Übersetzung melden\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackHinweis: Diese Funktion ist in Web Workers verfügbar.
Das AbortController-Interface stellt ein Controller-Objekt dar, das Ihnen ermöglicht, eine oder mehrere Web-Anfragen bei Bedarf abzubrechen.
Sie können ein neues AbortController-Objekt mit dem AbortController()-Konstruktor erstellen. Die Kommunikation mit einer asynchronen Operation erfolgt über ein AbortSignal-Objekt.Konstruktor
AbortController()

Erstellt eine neue Instanz eines AbortController-Objekts.

Instanz-Eigenschaften
AbortController.signal Schreibgeschützt

Gibt eine Instanz eines AbortSignal-Objekts zurück, das zur Kommunikation mit oder zum Abbruch einer asynchronen Operation verwendet werden kann.

Instanz-Methoden
AbortController.abort()

Bricht eine asynchrone Operation ab, bevor sie abgeschlossen ist. Dies kann fetch-Anfragen, den Verbrauch von Antwortinhalten und Strömen abbrechen.

Beispiele
Hinweis:
Es gibt zusätzliche Beispiele in der AbortSignal Referenz.

Im folgenden Beispiel versuchen wir, ein Video mit der Fetch API herunterzuladen.
Zunächst erstellen wir einen Controller mit dem AbortController()-Konstruktor und greifen dann auf ein zugehöriges AbortSignal-Objekt über die AbortController.signal-Eigenschaft zu.
Wenn die fetch-Anfrage gestartet wird, übergeben wir das AbortSignal als Option innerhalb des Optionsobjekts der Anfrage (das {signal} unten). Dies verknüpft das Signal und den Controller mit der fetch-Anfrage und ermöglicht es uns, sie durch Aufrufen von AbortController.abort() abzubrechen, wie unten im zweiten Ereignis-Listener zu sehen ist.
Wenn abort() aufgerufen wird, lehnt das fetch()-Promise mit einem DOMException namens AbortError ab.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

Wenn die Anfrage nach dem fetch()-Aufruf abgebrochen wird, aber bevor der Antwortkörper gelesen wurde, wird der Versuch, den Antwortkörper zu lesen, mit einer AbortError-Ausnahme abgelehnt.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

Ein voll funktionsfähiges Beispiel finden Sie auf GitHub; Sie können es auch live ansehen.SpezifikationenSpecificationDOM # interface-abortcontrollerBrowser-KompatibilitätSiehe auch
Fetch API
Abortable Fetch von Jake Archibald
MDN-Feedback-BoxWar diese Übersetzung hilfreich?JaNeinDiese Seite wurde automatisch aus dem Englischen übersetzt.Übersetzung auf GitHub anzeigen • Fehler mit dieser Übersetzung melden\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackメモ: この機能はウェブワーカー内で利用可能です。
AbortController インターフェイスは 1 つ以上のウェブリクエストをいつでも中断することを可能にするコントローラーオブジェクトを表します。
新しい AbortController オブジェクトは、 AbortController() コンストラクターを使って新しく生成することができます。非同期操作の通信は、AbortSignal オブジェクトを使って行われます。コンストラクター
AbortController()

新しい AbortController オブジェクトインスタンスを生成します。

インスタンスプロパティ
AbortController.signal 読取専用

AbortSignal オブジェクトのインスタンスを返します。 このオブジェクトは、非同期操作の通信や中断に使用します。

インスタンスメソッド
AbortController.abort()

非同期操作が完了する前に中断します。これは、フェッチリクエストや、あらゆるレスポンス本体やストリームを中断することができます。

例
メモ:
他の例が AbortSignal のリファレンスにあります。

この後の短いコードで、フェッチ API を使用して動画をダウンロードします。
まず AbortController() コンストラクターを使ってコントローラーを生成し、 AbortController.signal プロパティを使用して関連する AbortSignal オブジェクトへの参照を取得します。
フェッチリクエストが行われると、リクエストのオプションオブジェクト（下記 {signal} を参照）の内部のオプションとして AbortSignal を渡します。これによりシグナルと読み込みリクエストのコントローラーは関連付き、 AbortController.abort() を呼び出すことで下記の 2 つ目のイベントリスナーに見られるように中断が許可されます。
abort() が呼び出されると、fetch() のプロミスは AbortError という名前の DOMException で拒否されます。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

fetch() が履行された後で、レスポンス本体を読み込む前にリクエストが中止された場合、レスポンス本体を読み込もうとすると AbortError 例外が発生して拒否されます。
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // 次の行で `AbortError` が発生する
  const text = await response.text();
  console.log(text);
}

GitHub に完全に動作する例があります。また、ライブでの実行も確認してください。仕様書SpecificationDOM # interface-abortcontrollerブラウザーの互換性関連情報
フェッチ API
Abortable Fetch (Jake Archibald)（英語）\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackメモ: この機能はウェブワーカー内で利用可能です。
AbortController インターフェイスは 1 つ以上のウェブリクエストをいつでも中断することを可能にするコントローラーオブジェクトを表します。
新しい AbortController オブジェクトは、 AbortController() コンストラクターを使って新しく生成することができます。非同期操作の通信は、AbortSignal オブジェクトを使って行われます。コンストラクター
AbortController()

新しい AbortController オブジェクトインスタンスを生成します。

インスタンスプロパティ
AbortController.signal 読取専用

AbortSignal オブジェクトのインスタンスを返します。 このオブジェクトは、非同期操作の通信や中断に使用します。

インスタンスメソッド
AbortController.abort()

非同期操作が完了する前に中断します。これは、フェッチリクエストや、あらゆるレスポンス本体やストリームを中断することができます。

例
メモ:
他の例が AbortSignal のリファレンスにあります。

この後の短いコードで、フェッチ API を使用して動画をダウンロードします。
まず AbortController() コンストラクターを使ってコントローラーを生成し、 AbortController.signal プロパティを使用して関連する AbortSignal オブジェクトへの参照を取得します。
フェッチリクエストが行われると、リクエストのオプションオブジェクト（下記 {signal} を参照）の内部のオプションとして AbortSignal を渡します。これによりシグナルと読み込みリクエストのコントローラーは関連付き、 AbortController.abort() を呼び出すことで下記の 2 つ目のイベントリスナーに見られるように中断が許可されます。
abort() が呼び出されると、fetch() のプロミスは AbortError という名前の DOMException で拒否されます。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

fetch() が履行された後で、レスポンス本体を読み込む前にリクエストが中止された場合、レスポンス本体を読み込もうとすると AbortError 例外が発生して拒否されます。
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // 次の行で `AbortError` が発生する
  const text = await response.text();
  console.log(text);
}

GitHub に完全に動作する例があります。また、ライブでの実行も確認してください。仕様書SpecificationDOM # interface-abortcontrollerブラウザーの互換性関連情報
フェッチ API
Abortable Fetch (Jake Archibald)（英語）
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2024年7月28日 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackメモ: この機能はウェブワーカー内で利用可能です。
AbortController インターフェイスは 1 つ以上のウェブリクエストをいつでも中断することを可能にするコントローラーオブジェクトを表します。
新しい AbortController オブジェクトは、 AbortController() コンストラクターを使って新しく生成することができます。非同期操作の通信は、AbortSignal オブジェクトを使って行われます。コンストラクター
AbortController()

新しい AbortController オブジェクトインスタンスを生成します。

インスタンスプロパティ
AbortController.signal 読取専用

AbortSignal オブジェクトのインスタンスを返します。 このオブジェクトは、非同期操作の通信や中断に使用します。

インスタンスメソッド
AbortController.abort()

非同期操作が完了する前に中断します。これは、フェッチリクエストや、あらゆるレスポンス本体やストリームを中断することができます。

例
メモ:
他の例が AbortSignal のリファレンスにあります。

この後の短いコードで、フェッチ API を使用して動画をダウンロードします。
まず AbortController() コンストラクターを使ってコントローラーを生成し、 AbortController.signal プロパティを使用して関連する AbortSignal オブジェクトへの参照を取得します。
フェッチリクエストが行われると、リクエストのオプションオブジェクト（下記 {signal} を参照）の内部のオプションとして AbortSignal を渡します。これによりシグナルと読み込みリクエストのコントローラーは関連付き、 AbortController.abort() を呼び出すことで下記の 2 つ目のイベントリスナーに見られるように中断が許可されます。
abort() が呼び出されると、fetch() のプロミスは AbortError という名前の DOMException で拒否されます。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

fetch() が履行された後で、レスポンス本体を読み込む前にリクエストが中止された場合、レスポンス本体を読み込もうとすると AbortError 例外が発生して拒否されます。
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // 次の行で `AbortError` が発生する
  const text = await response.text();
  console.log(text);
}

GitHub に完全に動作する例があります。また、ライブでの実行も確認してください。仕様書SpecificationDOM # interface-abortcontrollerブラウザーの互換性関連情報
フェッチ API
Abortable Fetch (Jake Archibald)（英語）
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2024年7月28日 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackExperimental: 이 기능은 실험적인 기능입니다.프로덕션 환경에서 사용하기 전에 브라우저 호환성 표를 주의 깊게 확인하세요.
AbortController 인터페이스는 하나 이상의 웹 요청을 취소할 수 있게 해준다.
AbortController.AbortController() 생성자를 사용해 새로운 AbortController 를 생성한다. AbortSignal 객체를 사용해 DOM 요청과의 통신이 완료된다.생성자
AbortController()

새로운 AbortController 객체 인터페이스를 생성한다.

프로퍼티
AbortController.signal 읽기 전용

DOM 요청과 통신하거나 취소하는데 사용되는 AbortSignal 객체 인터페이스를 반환한다.

메소드
AbortController.abort()

DOM 요청이 완료되기 전에 취소한다. 이를 통해 fetch 요청, 모든 응답 Body 소비, 스트림을 취소할 수 있다.

예제다음 스니펫에서는 Fetch API를 사용해 비디오를 다운로드하는 것을 목표로 한다.
먼저 AbortController() 생성자를 사용해 컨트롤러를 AbortController.signal 프로퍼티를 사용해 AbortSignal 객체와 관계된 참조를 얻는다.
Fetch 요청을 시작할 때, 요청의 옵션 객체 내부에 AbortSignal 옵션을 전달한다(아래의 {signal} 참고). 이것은 신호와 컨트롤러를 fetch 요청과 관계짓고, 아래의 두 번째 이벤트 리스너에서 보여주듯이 AbortController.abort()를 호출하여 이를 취소할 수 있게한다.
jsvar controller = new AbortController();
var signal = controller.signal;

var downloadBtn = document.querySelector('.download');
var abortBtn = document.querySelector('.abort');

downloadBtn.addEventListener('click', fetchVideo);

abortBtn.addEventListener('click', function() {
  controller.abort();
  console.log('Download aborted');
});

function fetchVideo() {
  ...
  fetch(url, {signal}).then(function(response) {
    ...
  }).catch(function(e) {
    reports.textContent = 'Download error: ' + e.message;
  })
}


참고: abort()가 호출되면, fetch() promise는 AbortError으로 명명된 DOMException과 함께 reject된다.

동작하는 완전한 예제는 GitHub에서 확인 할 수 있다 — abort-api 참고(라이브 실행도 확인할 수 있다).명세SpecificationDOM # interface-abortcontroller브라우저 호환성함께 보기
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackExperimental: 이 기능은 실험적인 기능입니다.프로덕션 환경에서 사용하기 전에 브라우저 호환성 표를 주의 깊게 확인하세요.
AbortController 인터페이스는 하나 이상의 웹 요청을 취소할 수 있게 해준다.
AbortController.AbortController() 생성자를 사용해 새로운 AbortController 를 생성한다. AbortSignal 객체를 사용해 DOM 요청과의 통신이 완료된다.생성자
AbortController()

새로운 AbortController 객체 인터페이스를 생성한다.

프로퍼티
AbortController.signal 읽기 전용

DOM 요청과 통신하거나 취소하는데 사용되는 AbortSignal 객체 인터페이스를 반환한다.

메소드
AbortController.abort()

DOM 요청이 완료되기 전에 취소한다. 이를 통해 fetch 요청, 모든 응답 Body 소비, 스트림을 취소할 수 있다.

예제다음 스니펫에서는 Fetch API를 사용해 비디오를 다운로드하는 것을 목표로 한다.
먼저 AbortController() 생성자를 사용해 컨트롤러를 AbortController.signal 프로퍼티를 사용해 AbortSignal 객체와 관계된 참조를 얻는다.
Fetch 요청을 시작할 때, 요청의 옵션 객체 내부에 AbortSignal 옵션을 전달한다(아래의 {signal} 참고). 이것은 신호와 컨트롤러를 fetch 요청과 관계짓고, 아래의 두 번째 이벤트 리스너에서 보여주듯이 AbortController.abort()를 호출하여 이를 취소할 수 있게한다.
jsvar controller = new AbortController();
var signal = controller.signal;

var downloadBtn = document.querySelector('.download');
var abortBtn = document.querySelector('.abort');

downloadBtn.addEventListener('click', fetchVideo);

abortBtn.addEventListener('click', function() {
  controller.abort();
  console.log('Download aborted');
});

function fetchVideo() {
  ...
  fetch(url, {signal}).then(function(response) {
    ...
  }).catch(function(e) {
    reports.textContent = 'Download error: ' + e.message;
  })
}


참고: abort()가 호출되면, fetch() promise는 AbortError으로 명명된 DOMException과 함께 reject된다.

동작하는 완전한 예제는 GitHub에서 확인 할 수 있다 — abort-api 참고(라이브 실행도 확인할 수 있다).명세SpecificationDOM # interface-abortcontroller브라우저 호환성함께 보기
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2024년 12월 17일 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackExperimental: 이 기능은 실험적인 기능입니다.프로덕션 환경에서 사용하기 전에 브라우저 호환성 표를 주의 깊게 확인하세요.
AbortController 인터페이스는 하나 이상의 웹 요청을 취소할 수 있게 해준다.
AbortController.AbortController() 생성자를 사용해 새로운 AbortController 를 생성한다. AbortSignal 객체를 사용해 DOM 요청과의 통신이 완료된다.생성자
AbortController()

새로운 AbortController 객체 인터페이스를 생성한다.

프로퍼티
AbortController.signal 읽기 전용

DOM 요청과 통신하거나 취소하는데 사용되는 AbortSignal 객체 인터페이스를 반환한다.

메소드
AbortController.abort()

DOM 요청이 완료되기 전에 취소한다. 이를 통해 fetch 요청, 모든 응답 Body 소비, 스트림을 취소할 수 있다.

예제다음 스니펫에서는 Fetch API를 사용해 비디오를 다운로드하는 것을 목표로 한다.
먼저 AbortController() 생성자를 사용해 컨트롤러를 AbortController.signal 프로퍼티를 사용해 AbortSignal 객체와 관계된 참조를 얻는다.
Fetch 요청을 시작할 때, 요청의 옵션 객체 내부에 AbortSignal 옵션을 전달한다(아래의 {signal} 참고). 이것은 신호와 컨트롤러를 fetch 요청과 관계짓고, 아래의 두 번째 이벤트 리스너에서 보여주듯이 AbortController.abort()를 호출하여 이를 취소할 수 있게한다.
jsvar controller = new AbortController();
var signal = controller.signal;

var downloadBtn = document.querySelector('.download');
var abortBtn = document.querySelector('.abort');

downloadBtn.addEventListener('click', fetchVideo);

abortBtn.addEventListener('click', function() {
  controller.abort();
  console.log('Download aborted');
});

function fetchVideo() {
  ...
  fetch(url, {signal}).then(function(response) {
    ...
  }).catch(function(e) {
    reports.textContent = 'Download error: ' + e.message;
  })
}


참고: abort()가 호출되면, fetch() promise는 AbortError으로 명명된 DOMException과 함께 reject된다.

동작하는 완전한 예제는 GitHub에서 확인 할 수 있다 — abort-api 참고(라이브 실행도 확인할 수 있다).명세SpecificationDOM # interface-abortcontroller브라우저 호환성함께 보기
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2024년 12월 17일 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackЭкспериментальная возможность: Это экспериментальная технологияТак как спецификация этой технологии ещё не стабилизировалась, смотрите таблицу совместимости по поводу использования в различных браузерах. Также заметьте, что синтаксис и поведение экспериментальной технологии может измениться в будущих версиях браузеров, вслед за изменениями спецификации.
Интерфейс AbortController представляет объект контроллера, который позволяет вам при необходимости обрывать один и более DOM запросов.
Вы можете создать новый объект AbortController используя конструктор AbortController.AbortController(). Взаимодействие с DOM запросами сделано с использованием объекта AbortSignal.Конструктор
AbortController.AbortController()

Создаёт новый экземпляр AbortController.

Свойства
AbortController.signal Только для чтения 

Возвращает экземпляр AbortSignal, который может быть использован для коммуникаций/остановки DOM запросов.

Методы
AbortController.abort()

Прерывает DOM запрос до момента его завершения. Это даёт возможность обрывать fetch запросы, потребителей любых ответов с Body и потоки.

ПримерыВ текущем фрагменте мы пытаемся скачать видео используя Fetch API.
Для начала мы создадим контроллер используя конструктор AbortController(), затем возьмём ссылку на ассоциированный с ним объект AbortSignal используя свойство AbortController.signal.
При инициализации fetch запроса, мы передаём AbortSignal в качестве параметра (смотрите ниже {signal}). Это ассоциирует сигнал и контроллер с fetch запросом и даёт нам возможность остановить запрос вызовом метода AbortController.abort(), что можно увидеть во втором addEventListener.
jsvar controller = new AbortController();
var signal = controller.signal;

var downloadBtn = document.querySelector('.download');
var abortBtn = document.querySelector('.abort');

downloadBtn.addEventListener('click', fetchVideo);

abortBtn.addEventListener('click', function() {
  controller.abort();
  console.log('Download aborted');
});

function fetchVideo() {
  ...
  fetch(url, {signal}).then(function(response) {
    ...
  }).catch(function(e) {
    reports.textContent = 'Download error: ' + e.message;
  })
}


Примечание:
При вызове abort(), промис fetch() будет отклонён с AbortError.

Вы можете найти полный рабочий пример на GitHub — смотрите abort-api (и живой пример).СпецификацииSpecificationDOM # interface-abortcontrollerСовместимость с браузерамиСмотрите также
Fetch API
Abortable Fetch от Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackЭкспериментальная возможность: Это экспериментальная технологияТак как спецификация этой технологии ещё не стабилизировалась, смотрите таблицу совместимости по поводу использования в различных браузерах. Также заметьте, что синтаксис и поведение экспериментальной технологии может измениться в будущих версиях браузеров, вслед за изменениями спецификации.
Интерфейс AbortController представляет объект контроллера, который позволяет вам при необходимости обрывать один и более DOM запросов.
Вы можете создать новый объект AbortController используя конструктор AbortController.AbortController(). Взаимодействие с DOM запросами сделано с использованием объекта AbortSignal.Конструктор
AbortController.AbortController()

Создаёт новый экземпляр AbortController.

Свойства
AbortController.signal Только для чтения 

Возвращает экземпляр AbortSignal, который может быть использован для коммуникаций/остановки DOM запросов.

Методы
AbortController.abort()

Прерывает DOM запрос до момента его завершения. Это даёт возможность обрывать fetch запросы, потребителей любых ответов с Body и потоки.

ПримерыВ текущем фрагменте мы пытаемся скачать видео используя Fetch API.
Для начала мы создадим контроллер используя конструктор AbortController(), затем возьмём ссылку на ассоциированный с ним объект AbortSignal используя свойство AbortController.signal.
При инициализации fetch запроса, мы передаём AbortSignal в качестве параметра (смотрите ниже {signal}). Это ассоциирует сигнал и контроллер с fetch запросом и даёт нам возможность остановить запрос вызовом метода AbortController.abort(), что можно увидеть во втором addEventListener.
jsvar controller = new AbortController();
var signal = controller.signal;

var downloadBtn = document.querySelector('.download');
var abortBtn = document.querySelector('.abort');

downloadBtn.addEventListener('click', fetchVideo);

abortBtn.addEventListener('click', function() {
  controller.abort();
  console.log('Download aborted');
});

function fetchVideo() {
  ...
  fetch(url, {signal}).then(function(response) {
    ...
  }).catch(function(e) {
    reports.textContent = 'Download error: ' + e.message;
  })
}


Примечание:
При вызове abort(), промис fetch() будет отклонён с AbortError.

Вы можете найти полный рабочий пример на GitHub — смотрите abort-api (и живой пример).СпецификацииSpecificationDOM # interface-abortcontrollerСовместимость с браузерамиСмотрите также
Fetch API
Abortable Fetch от Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 17 дек. 2024 г. by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackЭкспериментальная возможность: Это экспериментальная технологияТак как спецификация этой технологии ещё не стабилизировалась, смотрите таблицу совместимости по поводу использования в различных браузерах. Также заметьте, что синтаксис и поведение экспериментальной технологии может измениться в будущих версиях браузеров, вслед за изменениями спецификации.
Интерфейс AbortController представляет объект контроллера, который позволяет вам при необходимости обрывать один и более DOM запросов.
Вы можете создать новый объект AbortController используя конструктор AbortController.AbortController(). Взаимодействие с DOM запросами сделано с использованием объекта AbortSignal.Конструктор
AbortController.AbortController()

Создаёт новый экземпляр AbortController.

Свойства
AbortController.signal Только для чтения 

Возвращает экземпляр AbortSignal, который может быть использован для коммуникаций/остановки DOM запросов.

Методы
AbortController.abort()

Прерывает DOM запрос до момента его завершения. Это даёт возможность обрывать fetch запросы, потребителей любых ответов с Body и потоки.

ПримерыВ текущем фрагменте мы пытаемся скачать видео используя Fetch API.
Для начала мы создадим контроллер используя конструктор AbortController(), затем возьмём ссылку на ассоциированный с ним объект AbortSignal используя свойство AbortController.signal.
При инициализации fetch запроса, мы передаём AbortSignal в качестве параметра (смотрите ниже {signal}). Это ассоциирует сигнал и контроллер с fetch запросом и даёт нам возможность остановить запрос вызовом метода AbortController.abort(), что можно увидеть во втором addEventListener.
jsvar controller = new AbortController();
var signal = controller.signal;

var downloadBtn = document.querySelector('.download');
var abortBtn = document.querySelector('.abort');

downloadBtn.addEventListener('click', fetchVideo);

abortBtn.addEventListener('click', function() {
  controller.abort();
  console.log('Download aborted');
});

function fetchVideo() {
  ...
  fetch(url, {signal}).then(function(response) {
    ...
  }).catch(function(e) {
    reports.textContent = 'Download error: ' + e.message;
  })
}


Примечание:
При вызове abort(), промис fetch() будет отклонён с AbortError.

Вы можете найти полный рабочий пример на GitHub — смотрите abort-api (и живой пример).СпецификацииSpecificationDOM # interface-abortcontrollerСовместимость с браузерамиСмотрите также
Fetch API
Abortable Fetch от Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 17 дек. 2024 г. by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedback备注： 此特性在 Web Worker 中可用。
AbortController 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。
你可以使用 AbortController() 构造函数创建一个新的 AbortController 对象。使用 AbortSignal 对象可以完成与异步操作的通信。构造函数
AbortController()

创建一个新的 AbortController 对象实例。

实例属性
AbortController.signal 只读 

返回一个 AbortSignal 对象实例，可以用它来和异步操作进行通信或者中止这个操作。

实例方法
AbortController.abort()

中止一个尚未完成的异步操作。这能够中止 fetch 请求及任何响应体和流的使用。

示例
备注： AbortSignal 中还有其他额外的示例。

在下面的代码片段中，我们想通过 Fetch API 下载一段视频。
我们先使用 AbortController() 构造函数创建一个控制器，然后使用 AbortController.signal 属性获取其关联 AbortSignal 对象的引用。
当 fetch 请求初始化时，我们将 AbortSignal 作为一个选项传递进入请求的选项对象中（下面的 {signal}）。这将 signal 和 controller 与 fetch 请求相关联，并且允许我们通过调用 AbortController.abort() 去中止它，如下面的第二个事件监听器。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("中止下载");
  }
});

function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;
  fetch(url, { signal })
    .then((response) => {
      console.log("下载完成", response);
    })
    .catch((err) => {
      console.error(`下载错误：${err.message}`);
    });
}


备注：
当 abort() 被调用时，这个 fetch() promise 将 reject 一个名为 AbortError 的 DOMException。

你可以在 GitHub 上找到这个示例的完整源代码（也可以在线运行）。规范SpecificationDOM # interface-abortcontroller浏览器兼容性参见
Fetch API
Jake Archibald 的可中止的 Fetch\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedback备注： 此特性在 Web Worker 中可用。
AbortController 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。
你可以使用 AbortController() 构造函数创建一个新的 AbortController 对象。使用 AbortSignal 对象可以完成与异步操作的通信。构造函数
AbortController()

创建一个新的 AbortController 对象实例。

实例属性
AbortController.signal 只读 

返回一个 AbortSignal 对象实例，可以用它来和异步操作进行通信或者中止这个操作。

实例方法
AbortController.abort()

中止一个尚未完成的异步操作。这能够中止 fetch 请求及任何响应体和流的使用。

示例
备注： AbortSignal 中还有其他额外的示例。

在下面的代码片段中，我们想通过 Fetch API 下载一段视频。
我们先使用 AbortController() 构造函数创建一个控制器，然后使用 AbortController.signal 属性获取其关联 AbortSignal 对象的引用。
当 fetch 请求初始化时，我们将 AbortSignal 作为一个选项传递进入请求的选项对象中（下面的 {signal}）。这将 signal 和 controller 与 fetch 请求相关联，并且允许我们通过调用 AbortController.abort() 去中止它，如下面的第二个事件监听器。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("中止下载");
  }
});

function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;
  fetch(url, { signal })
    .then((response) => {
      console.log("下载完成", response);
    })
    .catch((err) => {
      console.error(`下载错误：${err.message}`);
    });
}


备注：
当 abort() 被调用时，这个 fetch() promise 将 reject 一个名为 AbortError 的 DOMException。

你可以在 GitHub 上找到这个示例的完整源代码（也可以在线运行）。规范SpecificationDOM # interface-abortcontroller浏览器兼容性参见
Fetch API
Jake Archibald 的可中止的 Fetch
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2024年12月13日 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedback备注： 此特性在 Web Worker 中可用。
AbortController 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。
你可以使用 AbortController() 构造函数创建一个新的 AbortController 对象。使用 AbortSignal 对象可以完成与异步操作的通信。构造函数
AbortController()

创建一个新的 AbortController 对象实例。

实例属性
AbortController.signal 只读 

返回一个 AbortSignal 对象实例，可以用它来和异步操作进行通信或者中止这个操作。

实例方法
AbortController.abort()

中止一个尚未完成的异步操作。这能够中止 fetch 请求及任何响应体和流的使用。

示例
备注： AbortSignal 中还有其他额外的示例。

在下面的代码片段中，我们想通过 Fetch API 下载一段视频。
我们先使用 AbortController() 构造函数创建一个控制器，然后使用 AbortController.signal 属性获取其关联 AbortSignal 对象的引用。
当 fetch 请求初始化时，我们将 AbortSignal 作为一个选项传递进入请求的选项对象中（下面的 {signal}）。这将 signal 和 controller 与 fetch 请求相关联，并且允许我们通过调用 AbortController.abort() 去中止它，如下面的第二个事件监听器。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("中止下载");
  }
});

function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;
  fetch(url, { signal })
    .then((response) => {
      console.log("下载完成", response);
    })
    .catch((err) => {
      console.error(`下载错误：${err.message}`);
    });
}


备注：
当 abort() 被调用时，这个 fetch() promise 将 reject 一个名为 AbortError 的 DOMException。

你可以在 GitHub 上找到这个示例的完整源代码（也可以在线运行）。规范SpecificationDOM # interface-abortcontroller浏览器兼容性参见
Fetch API
Jake Archibald 的可中止的 Fetch
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2024年12月13日 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedback備註： 此功能可在 Web Worker 中使用。
AbortController 介面表示一個控制器物件，允許你在需要時中止一個或多個 Web 請求。
你可以使用 AbortController() 建構子來建立新的 AbortController 物件。與非同步操作的通訊是透過 AbortSignal 物件完成的。建構子
AbortController()

建立一個新的 AbortController 物件實例。

實例屬性
AbortController.signal Read only

回傳一個 AbortSignal 物件實例，可用於與非同步操作進行通訊或中止操作。

實例方法
AbortController.abort()

在非同步操作完成之前中止該操作。這可以中止 fetch 請求、任何回應主體的消耗以及串流。

範例
備註：
在 AbortSignal 參考中有更多範例。

在以下範例中，我們嘗試使用 Fetch API 下載一個影片。
我們首先使用 AbortController() 建構子建立一個控制器，然後使用 AbortController.signal 屬性獲取其關聯的 AbortSignal 物件。
當 fetch 請求初始化時，我們將 AbortSignal 作為選項的一部分（如下的 {signal}）傳遞到請求的選項物件中。這將信號和控制器與 fetch 請求關聯起來，並允許我們通過調用 AbortController.abort() 來中止它，如以下第二個事件監聽器所示。
當 abort() 被調用時，fetch() 的 promise 會以名為 AbortError 的 DOMException 被拒絕。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("下載已中止");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("下載完成", response);
    // 進一步處理回應
  } catch (err) {
    console.error(`下載錯誤：${err.message}`);
  }
}

如果在 fetch() 呼叫兌現後但在回應主體被讀取之前中止請求，那麼嘗試讀取回應主體將會以 AbortError 例外被拒絕。
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // 下一行將拋出 `AbortError`
  const text = await response.text();
  console.log(text);
}

你可以在 GitHub 上找到完整的範例；你也可以查看線上運行範例。規範SpecificationDOM # interface-abortcontroller瀏覽器相容性參見
Fetch API
Abortable Fetch，来自 Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedback備註： 此功能可在 Web Worker 中使用。
AbortController 介面表示一個控制器物件，允許你在需要時中止一個或多個 Web 請求。
你可以使用 AbortController() 建構子來建立新的 AbortController 物件。與非同步操作的通訊是透過 AbortSignal 物件完成的。建構子
AbortController()

建立一個新的 AbortController 物件實例。

實例屬性
AbortController.signal Read only

回傳一個 AbortSignal 物件實例，可用於與非同步操作進行通訊或中止操作。

實例方法
AbortController.abort()

在非同步操作完成之前中止該操作。這可以中止 fetch 請求、任何回應主體的消耗以及串流。

範例
備註：
在 AbortSignal 參考中有更多範例。

在以下範例中，我們嘗試使用 Fetch API 下載一個影片。
我們首先使用 AbortController() 建構子建立一個控制器，然後使用 AbortController.signal 屬性獲取其關聯的 AbortSignal 物件。
當 fetch 請求初始化時，我們將 AbortSignal 作為選項的一部分（如下的 {signal}）傳遞到請求的選項物件中。這將信號和控制器與 fetch 請求關聯起來，並允許我們通過調用 AbortController.abort() 來中止它，如以下第二個事件監聽器所示。
當 abort() 被調用時，fetch() 的 promise 會以名為 AbortError 的 DOMException 被拒絕。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("下載已中止");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("下載完成", response);
    // 進一步處理回應
  } catch (err) {
    console.error(`下載錯誤：${err.message}`);
  }
}

如果在 fetch() 呼叫兌現後但在回應主體被讀取之前中止請求，那麼嘗試讀取回應主體將會以 AbortError 例外被拒絕。
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // 下一行將拋出 `AbortError`
  const text = await response.text();
  console.log(text);
}

你可以在 GitHub 上找到完整的範例；你也可以查看線上運行範例。規範SpecificationDOM # interface-abortcontroller瀏覽器相容性參見
Fetch API
Abortable Fetch，来自 Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2025年4月30日 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedback備註： 此功能可在 Web Worker 中使用。
AbortController 介面表示一個控制器物件，允許你在需要時中止一個或多個 Web 請求。
你可以使用 AbortController() 建構子來建立新的 AbortController 物件。與非同步操作的通訊是透過 AbortSignal 物件完成的。建構子
AbortController()

建立一個新的 AbortController 物件實例。

實例屬性
AbortController.signal Read only

回傳一個 AbortSignal 物件實例，可用於與非同步操作進行通訊或中止操作。

實例方法
AbortController.abort()

在非同步操作完成之前中止該操作。這可以中止 fetch 請求、任何回應主體的消耗以及串流。

範例
備註：
在 AbortSignal 參考中有更多範例。

在以下範例中，我們嘗試使用 Fetch API 下載一個影片。
我們首先使用 AbortController() 建構子建立一個控制器，然後使用 AbortController.signal 屬性獲取其關聯的 AbortSignal 物件。
當 fetch 請求初始化時，我們將 AbortSignal 作為選項的一部分（如下的 {signal}）傳遞到請求的選項物件中。這將信號和控制器與 fetch 請求關聯起來，並允許我們通過調用 AbortController.abort() 來中止它，如以下第二個事件監聽器所示。
當 abort() 被調用時，fetch() 的 promise 會以名為 AbortError 的 DOMException 被拒絕。
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("下載已中止");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("下載完成", response);
    // 進一步處理回應
  } catch (err) {
    console.error(`下載錯誤：${err.message}`);
  }
}

如果在 fetch() 呼叫兌現後但在回應主體被讀取之前中止請求，那麼嘗試讀取回應主體將會以 AbortError 例外被拒絕。
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // 下一行將拋出 `AbortError`
  const text = await response.text();
  console.log(text);
}

你可以在 GitHub 上找到完整的範例；你也可以查看線上運行範例。規範SpecificationDOM # interface-abortcontroller瀏覽器相容性參見
Fetch API
Abortable Fetch，来自 Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on 2025年4月30日 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortControllerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
You can create a new AbortController object using the AbortController() constructor. Communicating with an asynchronous operation is done using an AbortSignal object.Constructor
AbortController()

Creates a new AbortController object instance.

Instance properties
AbortController.signal Read only

Returns an AbortSignal object instance, which can be used to communicate with, or to abort, an asynchronous operation.

Instance methods
AbortController.abort()

Aborts an asynchronous operation before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.

Examples
Note:
There are additional examples in the AbortSignal reference.

In the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # interface-abortcontrollerBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDocument Object Model (DOM)The Document Object Model (DOM) connects web pages to scripts or programming languages by representing the structure of a document—such as the HTML representing a web page—in memory. Usually it refers to JavaScript, even though modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language.
The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects. DOM methods allow programmatic access to the tree. With them, you can change the document's structure, style, or content.
Nodes can also have event handlers attached to them. Once an event is triggered, the event handlers get executed.
To learn more about what the DOM is and how it represents documents, see our article Introduction to the DOM.DOM interfaces
AbortController
AbortSignal
AbstractRange
Attr
CDATASection
CharacterData
Comment
CustomEvent
Document
DocumentFragment
DocumentType
DOMError 
Deprecated

DOMException
DOMImplementation
DOMParser
DOMPoint
DOMPointReadOnly
DOMRect
DOMTokenList
Element
Event
EventTarget
HTMLCollection
MutationObserver
MutationRecord
NamedNodeMap
Node
NodeIterator
NodeList
ProcessingInstruction
Range
StaticRange
Text
TextDecoder
TextEncoder
TimeRanges
TreeWalker
XMLDocument
Obsolete DOM interfacesThe Document Object Model has been highly simplified. To achieve this, the following interfaces in the different DOM level 3 or earlier specifications have been removed. They are no longer available to web developers.

DOMConfiguration
DOMErrorHandler
DOMImplementationList
DOMImplementationRegistry
DOMImplementationSource
DOMLocator
DOMObject
DOMSettableTokenList
DOMUserData
ElementTraversal
Entity
EntityReference
NameList
Notation
TypeInfo
UserDataHandler
HTML DOMA document containing HTML is described using the Document interface, which is extended by the HTML specification to include various HTML-specific features. In particular, the Element interface is enhanced to become HTMLElement and various subclasses, each representing one of (or a family of closely related) elements.
The HTML DOM API provides access to various browser features such as tabs and windows, CSS styles and stylesheets, browser history, etc. These interfaces are discussed further in the HTML DOM API documentation.SVG DOMSimilarly, a document containing SVG is also described using the Document interface, which is extended by the SVG specification to include various SVG-specific features. In particular, the Element interface is enhanced to become SVGElement and various subclasses, each representing an element or a family of closely related elements. These interfaces are discussed further in the SVG API documentation.SpecificationsSpecificationDOM See also
DOM Examples
CSS Object Model (CSSOM)\n\nDocument Object Model (DOM)The Document Object Model (DOM) connects web pages to scripts or programming languages by representing the structure of a document—such as the HTML representing a web page—in memory. Usually it refers to JavaScript, even though modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language.
The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects. DOM methods allow programmatic access to the tree. With them, you can change the document's structure, style, or content.
Nodes can also have event handlers attached to them. Once an event is triggered, the event handlers get executed.
To learn more about what the DOM is and how it represents documents, see our article Introduction to the DOM.DOM interfaces
AbortController
AbortSignal
AbstractRange
Attr
CDATASection
CharacterData
Comment
CustomEvent
Document
DocumentFragment
DocumentType
DOMError 
Deprecated

DOMException
DOMImplementation
DOMParser
DOMPoint
DOMPointReadOnly
DOMRect
DOMTokenList
Element
Event
EventTarget
HTMLCollection
MutationObserver
MutationRecord
NamedNodeMap
Node
NodeIterator
NodeList
ProcessingInstruction
Range
StaticRange
Text
TextDecoder
TextEncoder
TimeRanges
TreeWalker
XMLDocument
Obsolete DOM interfacesThe Document Object Model has been highly simplified. To achieve this, the following interfaces in the different DOM level 3 or earlier specifications have been removed. They are no longer available to web developers.

DOMConfiguration
DOMErrorHandler
DOMImplementationList
DOMImplementationRegistry
DOMImplementationSource
DOMLocator
DOMObject
DOMSettableTokenList
DOMUserData
ElementTraversal
Entity
EntityReference
NameList
Notation
TypeInfo
UserDataHandler
HTML DOMA document containing HTML is described using the Document interface, which is extended by the HTML specification to include various HTML-specific features. In particular, the Element interface is enhanced to become HTMLElement and various subclasses, each representing one of (or a family of closely related) elements.
The HTML DOM API provides access to various browser features such as tabs and windows, CSS styles and stylesheets, browser history, etc. These interfaces are discussed further in the HTML DOM API documentation.SVG DOMSimilarly, a document containing SVG is also described using the Document interface, which is extended by the SVG specification to include various SVG-specific features. In particular, the Element interface is enhanced to become SVGElement and various subclasses, each representing an element or a family of closely related elements. These interfaces are discussed further in the SVG API documentation.SpecificationsSpecificationDOM See also
DOM Examples
CSS Object Model (CSSOM)
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 17, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDocument Object Model (DOM)The Document Object Model (DOM) connects web pages to scripts or programming languages by representing the structure of a document—such as the HTML representing a web page—in memory. Usually it refers to JavaScript, even though modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language.
The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects. DOM methods allow programmatic access to the tree. With them, you can change the document's structure, style, or content.
Nodes can also have event handlers attached to them. Once an event is triggered, the event handlers get executed.
To learn more about what the DOM is and how it represents documents, see our article Introduction to the DOM.DOM interfaces
AbortController
AbortSignal
AbstractRange
Attr
CDATASection
CharacterData
Comment
CustomEvent
Document
DocumentFragment
DocumentType
DOMError 
Deprecated

DOMException
DOMImplementation
DOMParser
DOMPoint
DOMPointReadOnly
DOMRect
DOMTokenList
Element
Event
EventTarget
HTMLCollection
MutationObserver
MutationRecord
NamedNodeMap
Node
NodeIterator
NodeList
ProcessingInstruction
Range
StaticRange
Text
TextDecoder
TextEncoder
TimeRanges
TreeWalker
XMLDocument
Obsolete DOM interfacesThe Document Object Model has been highly simplified. To achieve this, the following interfaces in the different DOM level 3 or earlier specifications have been removed. They are no longer available to web developers.

DOMConfiguration
DOMErrorHandler
DOMImplementationList
DOMImplementationRegistry
DOMImplementationSource
DOMLocator
DOMObject
DOMSettableTokenList
DOMUserData
ElementTraversal
Entity
EntityReference
NameList
Notation
TypeInfo
UserDataHandler
HTML DOMA document containing HTML is described using the Document interface, which is extended by the HTML specification to include various HTML-specific features. In particular, the Element interface is enhanced to become HTMLElement and various subclasses, each representing one of (or a family of closely related) elements.
The HTML DOM API provides access to various browser features such as tabs and windows, CSS styles and stylesheets, browser history, etc. These interfaces are discussed further in the HTML DOM API documentation.SVG DOMSimilarly, a document containing SVG is also described using the Document interface, which is extended by the SVG specification to include various SVG-specific features. In particular, the Element interface is enhanced to become SVGElement and various subclasses, each representing an element or a family of closely related elements. These interfaces are discussed further in the SVG API documentation.SpecificationsSpecificationDOM See also
DOM Examples
CSS Object Model (CSSOM)
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 17, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortController: AbortController() constructorBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController() constructor creates a new AbortController object instance.Syntaxjsnew AbortController()
ParametersNone.ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the { signal } below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-abortcontroller①Browser compatibilitySee also
Fetch API\n\nAbortController: AbortController() constructorBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController() constructor creates a new AbortController object instance.Syntaxjsnew AbortController()
ParametersNone.ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the { signal } below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-abortcontroller①Browser compatibilitySee also
Fetch API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortController: AbortController() constructorBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortController() constructor creates a new AbortController object instance.Syntaxjsnew AbortController()
ParametersNone.ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the { signal } below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-abortcontroller①Browser compatibilitySee also
Fetch API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortController: signal propertyBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The signal read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort an asynchronous operation as desired.ValueAn AbortSignal object instance.ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-signal②Browser compatibilitySee also
Fetch API\n\nAbortController: signal propertyBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The signal read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort an asynchronous operation as desired.ValueAn AbortSignal object instance.ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-signal②Browser compatibilitySee also
Fetch API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortController: signal propertyBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The signal read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort an asynchronous operation as desired.ValueAn AbortSignal object instance.ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-signal②Browser compatibilitySee also
Fetch API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortController: abort() methodBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The abort() method of the AbortController interface aborts an asynchronous operation before it has completed.
This is able to abort fetch requests, the consumption of any response bodies, or streams.Syntaxjsabort()
abort(reason)
Parameters
reason Optional

The reason why the operation was aborted, which can be any JavaScript value.
If not specified, the reason is set to "AbortError" DOMException.

Return valueNone (undefined).ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an Error of type DOMException, with name AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-abortcontroller①Browser compatibilitySee also
Fetch API\n\nAbortController: abort() methodBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The abort() method of the AbortController interface aborts an asynchronous operation before it has completed.
This is able to abort fetch requests, the consumption of any response bodies, or streams.Syntaxjsabort()
abort(reason)
Parameters
reason Optional

The reason why the operation was aborted, which can be any JavaScript value.
If not specified, the reason is set to "AbortError" DOMException.

Return valueNone (undefined).ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an Error of type DOMException, with name AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-abortcontroller①Browser compatibilitySee also
Fetch API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortController: abort() methodBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2019.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The abort() method of the AbortController interface aborts an asynchronous operation before it has completed.
This is able to abort fetch requests, the consumption of any response bodies, or streams.Syntaxjsabort()
abort(reason)
Parameters
reason Optional

The reason why the operation was aborted, which can be any JavaScript value.
If not specified, the reason is set to "AbortError" DOMException.

Return valueNone (undefined).ExamplesIn the following snippet, we aim to download a video using the Fetch API.
We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.
jsconst controller = new AbortController();
const signal = controller.signal;

const url = "video.mp4";
const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  controller.abort();
  console.log("Download aborted");
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log("Download complete", response);
    })
    .catch((err) => {
      console.error(`Download error: ${err.message}`);
    });
}


Note:
When abort() is called, the fetch() promise rejects with an Error of type DOMException, with name AbortError.

You can find a full working example on GitHub; you can also see it running live.SpecificationsSpecificationDOM # ref-for-dom-abortcontroller-abortcontroller①Browser compatibilitySee also
Fetch API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbortSignalBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since April 2018.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortSignal interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an AbortController object.
Instance propertiesAlso inherits properties from its parent interface, EventTarget.

AbortSignal.aborted Read only

A Boolean that indicates whether the request(s) the signal is communicating with is/are aborted (true) or not (false).

AbortSignal.reason Read only

A JavaScript value providing the abort reason, once the signal has aborted.

Static methodsAlso inherits methods from its parent interface, EventTarget.

AbortSignal.abort()

Returns an AbortSignal instance that is already set as aborted.

AbortSignal.any()

Returns an AbortSignal that aborts when any of the given abort signals abort.

AbortSignal.timeout()

Returns an AbortSignal instance that will automatically abort after a specified time.

Instance methodsAlso inherits methods from its parent interface, EventTarget.

AbortSignal.throwIfAborted()

Throws the signal's abort reason if the signal has been aborted; otherwise it does nothing.

EventsAlso inherits events from its parent interface, EventTarget.
Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.

abort

Invoked when the asynchronous operations the signal is communicating with is/are aborted.
Also available via the onabort property.

ExamplesAborting a fetch operation using an explicit signalThe following snippet shows how we might use a signal to abort downloading a video using the Fetch API.
We first create an abort controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request, and allows us to abort it by calling AbortController.abort().
Below you can see that the fetch operation is aborted in the second event listener, which triggered when the abort button (abortBtn) is clicked.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.Aborting a fetch operation with a timeoutIf you need to abort the operation on timeout then you can use the static AbortSignal.timeout() method.
This returns an AbortSignal that will automatically timeout after a certain number of milliseconds.
The code snippet below shows how you would either succeed in downloading a file, or handle a timeout error after 5 seconds.
Note that when there is a timeout the fetch() promise rejects with a TimeoutError DOMException.
This allows code to differentiate between timeouts (for which user notification is probably required), and user aborts.
jsconst url = "video.mp4";

try {
  const res = await fetch(url, { signal: AbortSignal.timeout(5000) });
  const result = await res.blob();
  // …
} catch (err) {
  if (err.name === "TimeoutError") {
    console.error("Timeout: It took more than 5 seconds to get the result!");
  } else if (err.name === "AbortError") {
    console.error(
      "Fetch aborted by user action (browser stop button, closing tab, etc.",
    );
  } else {
    // A network error, or some other problem.
    console.error(`Error: type: ${err.name}, message: ${err.message}`);
  }
}
Aborting a fetch with timeout or explicit abortIf you want to abort from multiple signals, you can use AbortSignal.any() to combine them into a single signal. The following example shows this using fetch:
jstry {
  const controller = new AbortController();
  const timeoutSignal = AbortSignal.timeout(5000);
  const res = await fetch(url, {
    // This will abort the fetch when either signal is aborted
    signal: AbortSignal.any([controller.signal, timeoutSignal]),
  });
  const body = await res.json();
} catch (e) {
  if (e.name === "AbortError") {
    // Notify the user of abort.
  } else if (e.name === "TimeoutError") {
    // Notify the user of timeout
  } else {
    // A network error, or some other problem.
    console.log(`Type: ${e.name}, Message: ${e.message}`);
  }
}


Note:
Unlike when using AbortSignal.timeout(), there is no way to tell whether the final abort was caused by a timeout.
Implementing an abortable APIAn API that needs to support aborting can accept an AbortSignal object, and use its state to trigger abort signal handling when needed.
A Promise-based API should respond to the abort signal by rejecting any unsettled promise with the AbortSignal abort reason.
For example, consider the following myCoolPromiseAPI, which takes a signal and returns a promise.
The promise is rejected immediately if the signal is already aborted, or if the abort event is detected.
Otherwise it completes normally and then resolves the promise.
jsfunction myCoolPromiseAPI(/* …, */ { signal }) {
  return new Promise((resolve, reject) => {
    // If the signal is already aborted, immediately throw in order to reject the promise.
    if (signal.aborted) {
      reject(signal.reason);
      return;
    }

    // Perform the main purpose of the API
    // Call resolve(result) when done.

    // Watch for 'abort' signals
    signal.addEventListener("abort", () => {
      // Stop the main operation
      // Reject the promise with the abort reason.
      reject(signal.reason);
    });
  });
}

The API might then be used as shown.
Note that AbortController.abort() is called to abort the operation.
jsconst controller = new AbortController();
const signal = controller.signal;

startSpinner();

myCoolPromiseAPI({ /* …, */ signal })
  .then((result) => {})
  .catch((err) => {
    if (err.name === "AbortError") return;
    showUserErrorMessage();
  })
  .then(() => stopSpinner());

controller.abort();

APIs that do not return promises might react in a similar manner.
In some cases it may make sense to absorb the signal.SpecificationsSpecificationDOM # interface-AbortSignalBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald\n\nAbortSignalBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since April 2018.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortSignal interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an AbortController object.
Instance propertiesAlso inherits properties from its parent interface, EventTarget.

AbortSignal.aborted Read only

A Boolean that indicates whether the request(s) the signal is communicating with is/are aborted (true) or not (false).

AbortSignal.reason Read only

A JavaScript value providing the abort reason, once the signal has aborted.

Static methodsAlso inherits methods from its parent interface, EventTarget.

AbortSignal.abort()

Returns an AbortSignal instance that is already set as aborted.

AbortSignal.any()

Returns an AbortSignal that aborts when any of the given abort signals abort.

AbortSignal.timeout()

Returns an AbortSignal instance that will automatically abort after a specified time.

Instance methodsAlso inherits methods from its parent interface, EventTarget.

AbortSignal.throwIfAborted()

Throws the signal's abort reason if the signal has been aborted; otherwise it does nothing.

EventsAlso inherits events from its parent interface, EventTarget.
Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.

abort

Invoked when the asynchronous operations the signal is communicating with is/are aborted.
Also available via the onabort property.

ExamplesAborting a fetch operation using an explicit signalThe following snippet shows how we might use a signal to abort downloading a video using the Fetch API.
We first create an abort controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request, and allows us to abort it by calling AbortController.abort().
Below you can see that the fetch operation is aborted in the second event listener, which triggered when the abort button (abortBtn) is clicked.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.Aborting a fetch operation with a timeoutIf you need to abort the operation on timeout then you can use the static AbortSignal.timeout() method.
This returns an AbortSignal that will automatically timeout after a certain number of milliseconds.
The code snippet below shows how you would either succeed in downloading a file, or handle a timeout error after 5 seconds.
Note that when there is a timeout the fetch() promise rejects with a TimeoutError DOMException.
This allows code to differentiate between timeouts (for which user notification is probably required), and user aborts.
jsconst url = "video.mp4";

try {
  const res = await fetch(url, { signal: AbortSignal.timeout(5000) });
  const result = await res.blob();
  // …
} catch (err) {
  if (err.name === "TimeoutError") {
    console.error("Timeout: It took more than 5 seconds to get the result!");
  } else if (err.name === "AbortError") {
    console.error(
      "Fetch aborted by user action (browser stop button, closing tab, etc.",
    );
  } else {
    // A network error, or some other problem.
    console.error(`Error: type: ${err.name}, message: ${err.message}`);
  }
}
Aborting a fetch with timeout or explicit abortIf you want to abort from multiple signals, you can use AbortSignal.any() to combine them into a single signal. The following example shows this using fetch:
jstry {
  const controller = new AbortController();
  const timeoutSignal = AbortSignal.timeout(5000);
  const res = await fetch(url, {
    // This will abort the fetch when either signal is aborted
    signal: AbortSignal.any([controller.signal, timeoutSignal]),
  });
  const body = await res.json();
} catch (e) {
  if (e.name === "AbortError") {
    // Notify the user of abort.
  } else if (e.name === "TimeoutError") {
    // Notify the user of timeout
  } else {
    // A network error, or some other problem.
    console.log(`Type: ${e.name}, Message: ${e.message}`);
  }
}


Note:
Unlike when using AbortSignal.timeout(), there is no way to tell whether the final abort was caused by a timeout.
Implementing an abortable APIAn API that needs to support aborting can accept an AbortSignal object, and use its state to trigger abort signal handling when needed.
A Promise-based API should respond to the abort signal by rejecting any unsettled promise with the AbortSignal abort reason.
For example, consider the following myCoolPromiseAPI, which takes a signal and returns a promise.
The promise is rejected immediately if the signal is already aborted, or if the abort event is detected.
Otherwise it completes normally and then resolves the promise.
jsfunction myCoolPromiseAPI(/* …, */ { signal }) {
  return new Promise((resolve, reject) => {
    // If the signal is already aborted, immediately throw in order to reject the promise.
    if (signal.aborted) {
      reject(signal.reason);
      return;
    }

    // Perform the main purpose of the API
    // Call resolve(result) when done.

    // Watch for 'abort' signals
    signal.addEventListener("abort", () => {
      // Stop the main operation
      // Reject the promise with the abort reason.
      reject(signal.reason);
    });
  });
}

The API might then be used as shown.
Note that AbortController.abort() is called to abort the operation.
jsconst controller = new AbortController();
const signal = controller.signal;

startSpinner();

myCoolPromiseAPI({ /* …, */ signal })
  .then((result) => {})
  .catch((err) => {
    if (err.name === "AbortError") return;
    showUserErrorMessage();
  })
  .then(() => stopSpinner());

controller.abort();

APIs that do not return promises might react in a similar manner.
In some cases it may make sense to absorb the signal.SpecificationsSpecificationDOM # interface-AbortSignalBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 12, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbortSignalBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since April 2018.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The AbortSignal interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an AbortController object.
Instance propertiesAlso inherits properties from its parent interface, EventTarget.

AbortSignal.aborted Read only

A Boolean that indicates whether the request(s) the signal is communicating with is/are aborted (true) or not (false).

AbortSignal.reason Read only

A JavaScript value providing the abort reason, once the signal has aborted.

Static methodsAlso inherits methods from its parent interface, EventTarget.

AbortSignal.abort()

Returns an AbortSignal instance that is already set as aborted.

AbortSignal.any()

Returns an AbortSignal that aborts when any of the given abort signals abort.

AbortSignal.timeout()

Returns an AbortSignal instance that will automatically abort after a specified time.

Instance methodsAlso inherits methods from its parent interface, EventTarget.

AbortSignal.throwIfAborted()

Throws the signal's abort reason if the signal has been aborted; otherwise it does nothing.

EventsAlso inherits events from its parent interface, EventTarget.
Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.

abort

Invoked when the asynchronous operations the signal is communicating with is/are aborted.
Also available via the onabort property.

ExamplesAborting a fetch operation using an explicit signalThe following snippet shows how we might use a signal to abort downloading a video using the Fetch API.
We first create an abort controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.
When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request, and allows us to abort it by calling AbortController.abort().
Below you can see that the fetch operation is aborted in the second event listener, which triggered when the abort button (abortBtn) is clicked.
When abort() is called, the fetch() promise rejects with a DOMException named AbortError.
jslet controller;
const url = "video.mp4";

const downloadBtn = document.querySelector(".download");
const abortBtn = document.querySelector(".abort");

downloadBtn.addEventListener("click", fetchVideo);

abortBtn.addEventListener("click", () => {
  if (controller) {
    controller.abort();
    console.log("Download aborted");
  }
});

async function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;

  try {
    const response = await fetch(url, { signal });
    console.log("Download complete", response);
    // process response further
  } catch (err) {
    console.error(`Download error: ${err.message}`);
  }
}

If the request is aborted after the fetch() call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an AbortError exception.
jsasync function get() {
  const controller = new AbortController();
  const request = new Request("https://example.org/get", {
    signal: controller.signal,
  });

  const response = await fetch(request);
  controller.abort();
  // The next line will throw `AbortError`
  const text = await response.text();
  console.log(text);
}

You can find a full working example on GitHub; you can also see it running live.Aborting a fetch operation with a timeoutIf you need to abort the operation on timeout then you can use the static AbortSignal.timeout() method.
This returns an AbortSignal that will automatically timeout after a certain number of milliseconds.
The code snippet below shows how you would either succeed in downloading a file, or handle a timeout error after 5 seconds.
Note that when there is a timeout the fetch() promise rejects with a TimeoutError DOMException.
This allows code to differentiate between timeouts (for which user notification is probably required), and user aborts.
jsconst url = "video.mp4";

try {
  const res = await fetch(url, { signal: AbortSignal.timeout(5000) });
  const result = await res.blob();
  // …
} catch (err) {
  if (err.name === "TimeoutError") {
    console.error("Timeout: It took more than 5 seconds to get the result!");
  } else if (err.name === "AbortError") {
    console.error(
      "Fetch aborted by user action (browser stop button, closing tab, etc.",
    );
  } else {
    // A network error, or some other problem.
    console.error(`Error: type: ${err.name}, message: ${err.message}`);
  }
}
Aborting a fetch with timeout or explicit abortIf you want to abort from multiple signals, you can use AbortSignal.any() to combine them into a single signal. The following example shows this using fetch:
jstry {
  const controller = new AbortController();
  const timeoutSignal = AbortSignal.timeout(5000);
  const res = await fetch(url, {
    // This will abort the fetch when either signal is aborted
    signal: AbortSignal.any([controller.signal, timeoutSignal]),
  });
  const body = await res.json();
} catch (e) {
  if (e.name === "AbortError") {
    // Notify the user of abort.
  } else if (e.name === "TimeoutError") {
    // Notify the user of timeout
  } else {
    // A network error, or some other problem.
    console.log(`Type: ${e.name}, Message: ${e.message}`);
  }
}


Note:
Unlike when using AbortSignal.timeout(), there is no way to tell whether the final abort was caused by a timeout.
Implementing an abortable APIAn API that needs to support aborting can accept an AbortSignal object, and use its state to trigger abort signal handling when needed.
A Promise-based API should respond to the abort signal by rejecting any unsettled promise with the AbortSignal abort reason.
For example, consider the following myCoolPromiseAPI, which takes a signal and returns a promise.
The promise is rejected immediately if the signal is already aborted, or if the abort event is detected.
Otherwise it completes normally and then resolves the promise.
jsfunction myCoolPromiseAPI(/* …, */ { signal }) {
  return new Promise((resolve, reject) => {
    // If the signal is already aborted, immediately throw in order to reject the promise.
    if (signal.aborted) {
      reject(signal.reason);
      return;
    }

    // Perform the main purpose of the API
    // Call resolve(result) when done.

    // Watch for 'abort' signals
    signal.addEventListener("abort", () => {
      // Stop the main operation
      // Reject the promise with the abort reason.
      reject(signal.reason);
    });
  });
}

The API might then be used as shown.
Note that AbortController.abort() is called to abort the operation.
jsconst controller = new AbortController();
const signal = controller.signal;

startSpinner();

myCoolPromiseAPI({ /* …, */ signal })
  .then((result) => {})
  .catch((err) => {
    if (err.name === "AbortError") return;
    showUserErrorMessage();
  })
  .then(() => stopSpinner());

controller.abort();

APIs that do not return promises might react in a similar manner.
In some cases it may make sense to absorb the signal.SpecificationsSpecificationDOM # interface-AbortSignalBrowser compatibilitySee also
Fetch API
Abortable Fetch by Jake Archibald
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 12, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAbstractRangeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since April 2021.Learn moreSee full compatibilityReport feedbackThe AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.

Note:
As an abstract interface, you will not directly instantiate an object of type AbstractRange. Instead, you will use the Range or StaticRange interfaces. To understand the difference between those two interfaces, and how to choose which is appropriate for your needs, consult each interface's documentation.
Instance properties
collapsed Read only

A Boolean value which is true if the range is collapsed. A collapsed range is a range whose start position and end position are the same, resulting in a zero-character-long range.

endContainer Read only

The Node object in which the end of the range, as specified by the endOffset property, is located.

endOffset Read only

An integer value indicating the offset, in characters, from the beginning of the node's contents to the last character of the range represented by the range object. This value must be less than the length of the endContainer node.

startContainer Read only

The DOM Node in which the beginning of the range, as specified by the startOffset property, is located.

startOffset Read only

An integer value indicating the offset, in characters, from the beginning of the node's contents to the first character of the contents referred to by the range object. This value must be less than the length of the node indicated in startContainer.

Instance methodsThe AbstractRange interface doesn't provide any methods.Usage notesRange typesAll ranges of content within a document are described using instances of interfaces based on AbstractRange. There are two such interfaces:

Range

The Range interface has been around for a long time and has only recently been redefined to be based upon AbstractRange as the need arose to define other forms of range data. Range provides methods that allow you to alter the range's endpoints, as well as methods to compare ranges, detect intersections between ranges, and so forth.

StaticRange

A StaticRange is a basic range which cannot be changed once it's been created. Specifically, as the node tree mutates and changes, the range does not. This is useful when you need to specify a range that will only be used once, since it avoids the performance and resource impact of the more complex Range interface.

Contents of elementsWhen trying to access the contents of an element, keep in mind that the element itself is a node, but so is any text inside it. In order to set a range endpoint within the text of an element, be sure to find the text node inside the element:
jsconst startElem = document.querySelector("p");
const endElem = startElem.querySelector("span");
const range = document.createRange();

range.setStart(startElem, 0);
range.setEnd(endElem, endElem.childNodes[0].length / 2);
const contents = range.cloneContents();

document.body.appendChild(contents);

This example creates a new range, range, and sets its starting point to the third child node of the first element. The end point is set to be the middle of the first child of the span, and then the range is used to copy the contents of the range.Ranges and the hierarchy of the DOMIn order to define a range of characters within a document in a way that is able to span across zero or more node boundaries, and which is as resilient as possible to changes to the DOM, you can't specify the offset to the first and last characters in the HTML. There are a few good reasons for that.
First, after your page is loaded, the browser isn't thinking in terms of HTML. Once it's been loaded, the page is a tree of DOM Node objects, so you need to specify the beginning and ending locations of a range in terms of nodes and positions within nodes.
Second, in order to support the mutability of the DOM tree as much as possible, you need a way to represent positions relative to nodes in the tree, rather than global positions within the entire document. By defining points within the document as offsets within a given node, those positions remain consistent with the content even as nodes are added to, removed from, or moved around within the DOM tree—within reason. There are fairly obvious limitations (such as if a node is moved to be after the endpoint of a range, or if the content of a node is heavily altered), but it's far better than nothing.
Third, using node-relative positions to define the start and end positions will generally be easier to make perform well. Rather than having to negotiate the DOM figuring out what your global offset refers to, the user agent (browser) can instead go directly to the node indicated by the starting position and start from there, working its way forward until it reaches the given offset into the ending node.
To illustrate this, consider the HTML below:
html<div class="container">
  <div class="header">
    <img src="" class="sitelogo" />
    <h1>The Ultimate Website</h1>
  </div>
  <article>
    <section class="entry" id="entry1">
      <h2>Section 1: An interesting thing…</h2>
      <p>A <em>very</em> interesting thing happened on the way to the forum…</p>
      <aside class="callout">
        <h2>Aside</h2>
        <p>An interesting aside to share with you…</p>
      </aside>
    </section>
  </article>
  <pre id="log"></pre>
</div>

After loading the HTML and constructing the DOM representation of the document, the resulting DOM tree looks like this:

In this diagram, the nodes representing HTML elements are shown in green. Each row beneath them shows the next layer of depth into the DOM tree. Blue nodes are text nodes, containing the text that gets shown onscreen. Each element's contents are linked below it in the tree, potentially spawning a series of branches below as elements include other elements and text nodes.
If you want to create a range that incorporates the contents of the <p> element whose contents are "A <em>very</em> interesting thing happened on the way to the forum…", you can do so like this:
jsconst pRange = document.createRange();
pRange.selectNodeContents(document.querySelector("#entry1 p"));

Since we wish to select the entire contents of the <p> element, including its descendants, this works perfectly.
If we wish to instead copy the text "An interesting thing…" from the <section>'s heading (an h2 element) through the end of the letters "ve" in the <em> within the paragraph below it, the following code would work:
jsconst range = document.createRange();
const startNode = document.querySelector("section h2").childNodes[0];
range.setStart(startNode, 11);

const endNode = document.querySelector("#entry1 p em").childNodes[0];
range.setEnd(endNode, 2);

const fragment = range.cloneContents();

Here an interesting problem arises—we are capturing content from multiple nodes located at different levels of the DOM hierarchy, and then only part of one of them. What should the result look like?
As it turns out, the DOM specification fortunately addresses this exact issue. For example, in this case, we're calling cloneContents() on the range to create a new DocumentFragment object providing a DOM subtree which replicates the contents of the specified range. To do this, cloneContents() constructs all the nodes needed to preserve the structure of the indicated range, but no more than necessary.
In this example, the start of the specified range is found within the text node below the section's heading, which means that the new DocumentFragment will need to contain an h2 and, below it, a text node.
The range's end is located below the <p> element, so that will be needed within the new fragment. So will the text node containing the word "A", since that's included in the range. Finally, an <em> and a text node below it will be added below the <p> as well.
The contents of the text nodes are then determined by the offsets into those text nodes given when calling setStart() and setEnd(). Given the offset of 11 into the heading's text, that node will contain "An interesting thing…". Similarly, the last text node will contain "ve", given the request for the first two characters of the ending node.
The resulting document fragment looks like this:

Notice especially that the contents of this fragment are all below the shared common parent of the topmost nodes within it. The parent <section> is not needed to replicate the cloned content, so it isn't included.ExampleConsider this simple HTML fragment of HTML.
html<p><strong>This</strong> is a paragraph.</p>

Imagine using a Range to extract the word "paragraph" from this. The code to do that looks like the following:
jsconst paraNode = document.querySelector("p");
const paraTextNode = paraNode.childNodes[1];

const range = document.createRange();
range.setStart(paraTextNode, 6);
range.setEnd(paraTextNode, paraTextNode.length - 1);

const fragment = range.cloneContents();
document.body.appendChild(fragment);

First we get references to the paragraph node itself as well as to the second child node within the paragraph. The first child is the <strong> element. The second child is the text node " is a paragraph.".
With the text node reference in hand, we create a new Range object by calling createRange() on the Document itself. We set the starting position of the range to the sixth character of the text node's string, and the end position to the length of the text node's string minus one. This sets the range to encompass the word "paragraph".
We then finish up by calling cloneContents() on the Range to create a new DocumentFragment object which contains the portion of the document encompassed by the range. After that, we use appendChild() to add that fragment at the end of the document's body, as obtained from document.body.
The result looks like this:
SpecificationsSpecificationDOM # interface-abstractrangeBrowser compatibility\n\nAbstractRangeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since April 2021.Learn moreSee full compatibilityReport feedbackThe AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.

Note:
As an abstract interface, you will not directly instantiate an object of type AbstractRange. Instead, you will use the Range or StaticRange interfaces. To understand the difference between those two interfaces, and how to choose which is appropriate for your needs, consult each interface's documentation.
Instance properties
collapsed Read only

A Boolean value which is true if the range is collapsed. A collapsed range is a range whose start position and end position are the same, resulting in a zero-character-long range.

endContainer Read only

The Node object in which the end of the range, as specified by the endOffset property, is located.

endOffset Read only

An integer value indicating the offset, in characters, from the beginning of the node's contents to the last character of the range represented by the range object. This value must be less than the length of the endContainer node.

startContainer Read only

The DOM Node in which the beginning of the range, as specified by the startOffset property, is located.

startOffset Read only

An integer value indicating the offset, in characters, from the beginning of the node's contents to the first character of the contents referred to by the range object. This value must be less than the length of the node indicated in startContainer.

Instance methodsThe AbstractRange interface doesn't provide any methods.Usage notesRange typesAll ranges of content within a document are described using instances of interfaces based on AbstractRange. There are two such interfaces:

Range

The Range interface has been around for a long time and has only recently been redefined to be based upon AbstractRange as the need arose to define other forms of range data. Range provides methods that allow you to alter the range's endpoints, as well as methods to compare ranges, detect intersections between ranges, and so forth.

StaticRange

A StaticRange is a basic range which cannot be changed once it's been created. Specifically, as the node tree mutates and changes, the range does not. This is useful when you need to specify a range that will only be used once, since it avoids the performance and resource impact of the more complex Range interface.

Contents of elementsWhen trying to access the contents of an element, keep in mind that the element itself is a node, but so is any text inside it. In order to set a range endpoint within the text of an element, be sure to find the text node inside the element:
jsconst startElem = document.querySelector("p");
const endElem = startElem.querySelector("span");
const range = document.createRange();

range.setStart(startElem, 0);
range.setEnd(endElem, endElem.childNodes[0].length / 2);
const contents = range.cloneContents();

document.body.appendChild(contents);

This example creates a new range, range, and sets its starting point to the third child node of the first element. The end point is set to be the middle of the first child of the span, and then the range is used to copy the contents of the range.Ranges and the hierarchy of the DOMIn order to define a range of characters within a document in a way that is able to span across zero or more node boundaries, and which is as resilient as possible to changes to the DOM, you can't specify the offset to the first and last characters in the HTML. There are a few good reasons for that.
First, after your page is loaded, the browser isn't thinking in terms of HTML. Once it's been loaded, the page is a tree of DOM Node objects, so you need to specify the beginning and ending locations of a range in terms of nodes and positions within nodes.
Second, in order to support the mutability of the DOM tree as much as possible, you need a way to represent positions relative to nodes in the tree, rather than global positions within the entire document. By defining points within the document as offsets within a given node, those positions remain consistent with the content even as nodes are added to, removed from, or moved around within the DOM tree—within reason. There are fairly obvious limitations (such as if a node is moved to be after the endpoint of a range, or if the content of a node is heavily altered), but it's far better than nothing.
Third, using node-relative positions to define the start and end positions will generally be easier to make perform well. Rather than having to negotiate the DOM figuring out what your global offset refers to, the user agent (browser) can instead go directly to the node indicated by the starting position and start from there, working its way forward until it reaches the given offset into the ending node.
To illustrate this, consider the HTML below:
html<div class="container">
  <div class="header">
    <img src="" class="sitelogo" />
    <h1>The Ultimate Website</h1>
  </div>
  <article>
    <section class="entry" id="entry1">
      <h2>Section 1: An interesting thing…</h2>
      <p>A <em>very</em> interesting thing happened on the way to the forum…</p>
      <aside class="callout">
        <h2>Aside</h2>
        <p>An interesting aside to share with you…</p>
      </aside>
    </section>
  </article>
  <pre id="log"></pre>
</div>

After loading the HTML and constructing the DOM representation of the document, the resulting DOM tree looks like this:

In this diagram, the nodes representing HTML elements are shown in green. Each row beneath them shows the next layer of depth into the DOM tree. Blue nodes are text nodes, containing the text that gets shown onscreen. Each element's contents are linked below it in the tree, potentially spawning a series of branches below as elements include other elements and text nodes.
If you want to create a range that incorporates the contents of the <p> element whose contents are "A <em>very</em> interesting thing happened on the way to the forum…", you can do so like this:
jsconst pRange = document.createRange();
pRange.selectNodeContents(document.querySelector("#entry1 p"));

Since we wish to select the entire contents of the <p> element, including its descendants, this works perfectly.
If we wish to instead copy the text "An interesting thing…" from the <section>'s heading (an h2 element) through the end of the letters "ve" in the <em> within the paragraph below it, the following code would work:
jsconst range = document.createRange();
const startNode = document.querySelector("section h2").childNodes[0];
range.setStart(startNode, 11);

const endNode = document.querySelector("#entry1 p em").childNodes[0];
range.setEnd(endNode, 2);

const fragment = range.cloneContents();

Here an interesting problem arises—we are capturing content from multiple nodes located at different levels of the DOM hierarchy, and then only part of one of them. What should the result look like?
As it turns out, the DOM specification fortunately addresses this exact issue. For example, in this case, we're calling cloneContents() on the range to create a new DocumentFragment object providing a DOM subtree which replicates the contents of the specified range. To do this, cloneContents() constructs all the nodes needed to preserve the structure of the indicated range, but no more than necessary.
In this example, the start of the specified range is found within the text node below the section's heading, which means that the new DocumentFragment will need to contain an h2 and, below it, a text node.
The range's end is located below the <p> element, so that will be needed within the new fragment. So will the text node containing the word "A", since that's included in the range. Finally, an <em> and a text node below it will be added below the <p> as well.
The contents of the text nodes are then determined by the offsets into those text nodes given when calling setStart() and setEnd(). Given the offset of 11 into the heading's text, that node will contain "An interesting thing…". Similarly, the last text node will contain "ve", given the request for the first two characters of the ending node.
The resulting document fragment looks like this:

Notice especially that the contents of this fragment are all below the shared common parent of the topmost nodes within it. The parent <section> is not needed to replicate the cloned content, so it isn't included.ExampleConsider this simple HTML fragment of HTML.
html<p><strong>This</strong> is a paragraph.</p>

Imagine using a Range to extract the word "paragraph" from this. The code to do that looks like the following:
jsconst paraNode = document.querySelector("p");
const paraTextNode = paraNode.childNodes[1];

const range = document.createRange();
range.setStart(paraTextNode, 6);
range.setEnd(paraTextNode, paraTextNode.length - 1);

const fragment = range.cloneContents();
document.body.appendChild(fragment);

First we get references to the paragraph node itself as well as to the second child node within the paragraph. The first child is the <strong> element. The second child is the text node " is a paragraph.".
With the text node reference in hand, we create a new Range object by calling createRange() on the Document itself. We set the starting position of the range to the sixth character of the text node's string, and the end position to the length of the text node's string minus one. This sets the range to encompass the word "paragraph".
We then finish up by calling cloneContents() on the Range to create a new DocumentFragment object which contains the portion of the document encompassed by the range. After that, we use appendChild() to add that fragment at the end of the document's body, as obtained from document.body.
The result looks like this:
SpecificationsSpecificationDOM # interface-abstractrangeBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 8, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAbstractRangeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since April 2021.Learn moreSee full compatibilityReport feedbackThe AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.

Note:
As an abstract interface, you will not directly instantiate an object of type AbstractRange. Instead, you will use the Range or StaticRange interfaces. To understand the difference between those two interfaces, and how to choose which is appropriate for your needs, consult each interface's documentation.
Instance properties
collapsed Read only

A Boolean value which is true if the range is collapsed. A collapsed range is a range whose start position and end position are the same, resulting in a zero-character-long range.

endContainer Read only

The Node object in which the end of the range, as specified by the endOffset property, is located.

endOffset Read only

An integer value indicating the offset, in characters, from the beginning of the node's contents to the last character of the range represented by the range object. This value must be less than the length of the endContainer node.

startContainer Read only

The DOM Node in which the beginning of the range, as specified by the startOffset property, is located.

startOffset Read only

An integer value indicating the offset, in characters, from the beginning of the node's contents to the first character of the contents referred to by the range object. This value must be less than the length of the node indicated in startContainer.

Instance methodsThe AbstractRange interface doesn't provide any methods.Usage notesRange typesAll ranges of content within a document are described using instances of interfaces based on AbstractRange. There are two such interfaces:

Range

The Range interface has been around for a long time and has only recently been redefined to be based upon AbstractRange as the need arose to define other forms of range data. Range provides methods that allow you to alter the range's endpoints, as well as methods to compare ranges, detect intersections between ranges, and so forth.

StaticRange

A StaticRange is a basic range which cannot be changed once it's been created. Specifically, as the node tree mutates and changes, the range does not. This is useful when you need to specify a range that will only be used once, since it avoids the performance and resource impact of the more complex Range interface.

Contents of elementsWhen trying to access the contents of an element, keep in mind that the element itself is a node, but so is any text inside it. In order to set a range endpoint within the text of an element, be sure to find the text node inside the element:
jsconst startElem = document.querySelector("p");
const endElem = startElem.querySelector("span");
const range = document.createRange();

range.setStart(startElem, 0);
range.setEnd(endElem, endElem.childNodes[0].length / 2);
const contents = range.cloneContents();

document.body.appendChild(contents);

This example creates a new range, range, and sets its starting point to the third child node of the first element. The end point is set to be the middle of the first child of the span, and then the range is used to copy the contents of the range.Ranges and the hierarchy of the DOMIn order to define a range of characters within a document in a way that is able to span across zero or more node boundaries, and which is as resilient as possible to changes to the DOM, you can't specify the offset to the first and last characters in the HTML. There are a few good reasons for that.
First, after your page is loaded, the browser isn't thinking in terms of HTML. Once it's been loaded, the page is a tree of DOM Node objects, so you need to specify the beginning and ending locations of a range in terms of nodes and positions within nodes.
Second, in order to support the mutability of the DOM tree as much as possible, you need a way to represent positions relative to nodes in the tree, rather than global positions within the entire document. By defining points within the document as offsets within a given node, those positions remain consistent with the content even as nodes are added to, removed from, or moved around within the DOM tree—within reason. There are fairly obvious limitations (such as if a node is moved to be after the endpoint of a range, or if the content of a node is heavily altered), but it's far better than nothing.
Third, using node-relative positions to define the start and end positions will generally be easier to make perform well. Rather than having to negotiate the DOM figuring out what your global offset refers to, the user agent (browser) can instead go directly to the node indicated by the starting position and start from there, working its way forward until it reaches the given offset into the ending node.
To illustrate this, consider the HTML below:
html<div class="container">
  <div class="header">
    <img src="" class="sitelogo" />
    <h1>The Ultimate Website</h1>
  </div>
  <article>
    <section class="entry" id="entry1">
      <h2>Section 1: An interesting thing…</h2>
      <p>A <em>very</em> interesting thing happened on the way to the forum…</p>
      <aside class="callout">
        <h2>Aside</h2>
        <p>An interesting aside to share with you…</p>
      </aside>
    </section>
  </article>
  <pre id="log"></pre>
</div>

After loading the HTML and constructing the DOM representation of the document, the resulting DOM tree looks like this:

In this diagram, the nodes representing HTML elements are shown in green. Each row beneath them shows the next layer of depth into the DOM tree. Blue nodes are text nodes, containing the text that gets shown onscreen. Each element's contents are linked below it in the tree, potentially spawning a series of branches below as elements include other elements and text nodes.
If you want to create a range that incorporates the contents of the <p> element whose contents are "A <em>very</em> interesting thing happened on the way to the forum…", you can do so like this:
jsconst pRange = document.createRange();
pRange.selectNodeContents(document.querySelector("#entry1 p"));

Since we wish to select the entire contents of the <p> element, including its descendants, this works perfectly.
If we wish to instead copy the text "An interesting thing…" from the <section>'s heading (an h2 element) through the end of the letters "ve" in the <em> within the paragraph below it, the following code would work:
jsconst range = document.createRange();
const startNode = document.querySelector("section h2").childNodes[0];
range.setStart(startNode, 11);

const endNode = document.querySelector("#entry1 p em").childNodes[0];
range.setEnd(endNode, 2);

const fragment = range.cloneContents();

Here an interesting problem arises—we are capturing content from multiple nodes located at different levels of the DOM hierarchy, and then only part of one of them. What should the result look like?
As it turns out, the DOM specification fortunately addresses this exact issue. For example, in this case, we're calling cloneContents() on the range to create a new DocumentFragment object providing a DOM subtree which replicates the contents of the specified range. To do this, cloneContents() constructs all the nodes needed to preserve the structure of the indicated range, but no more than necessary.
In this example, the start of the specified range is found within the text node below the section's heading, which means that the new DocumentFragment will need to contain an h2 and, below it, a text node.
The range's end is located below the <p> element, so that will be needed within the new fragment. So will the text node containing the word "A", since that's included in the range. Finally, an <em> and a text node below it will be added below the <p> as well.
The contents of the text nodes are then determined by the offsets into those text nodes given when calling setStart() and setEnd(). Given the offset of 11 into the heading's text, that node will contain "An interesting thing…". Similarly, the last text node will contain "ve", given the request for the first two characters of the ending node.
The resulting document fragment looks like this:

Notice especially that the contents of this fragment are all below the shared common parent of the topmost nodes within it. The parent <section> is not needed to replicate the cloned content, so it isn't included.ExampleConsider this simple HTML fragment of HTML.
html<p><strong>This</strong> is a paragraph.</p>

Imagine using a Range to extract the word "paragraph" from this. The code to do that looks like the following:
jsconst paraNode = document.querySelector("p");
const paraTextNode = paraNode.childNodes[1];

const range = document.createRange();
range.setStart(paraTextNode, 6);
range.setEnd(paraTextNode, paraTextNode.length - 1);

const fragment = range.cloneContents();
document.body.appendChild(fragment);

First we get references to the paragraph node itself as well as to the second child node within the paragraph. The first child is the <strong> element. The second child is the text node " is a paragraph.".
With the text node reference in hand, we create a new Range object by calling createRange() on the Document itself. We set the starting position of the range to the sixth character of the text node's string, and the end position to the length of the text node's string minus one. This sets the range to encompass the word "paragraph".
We then finish up by calling cloneContents() on the Range to create a new DocumentFragment object which contains the portion of the document encompassed by the range. After that, we use appendChild() to add that fragment at the end of the document's body, as obtained from document.body.
The result looks like this:
SpecificationsSpecificationDOM # interface-abstractrangeBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 8, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAttrBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe Attr interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., Element.getAttribute()), but some cases may require interacting with Attr instances (e.g., Element.getAttributeNode()).

The core idea of an object of type Attr is the association between a name and a value. An attribute may also be part of a namespace and, in this case, it also has a URI identifying the namespace, and a prefix that is an abbreviation for the namespace.
The name is deemed local when it ignores the eventual namespace prefix and deemed qualified when it includes the prefix of the namespace, if any, separated from the local name by a colon (:). We have three cases: an attribute outside of a namespace, an attribute inside a namespace without a prefix defined, an attribute inside a namespace with a prefix:



Attribute
Namespace name
Namespace prefix
Attribute local name
Attribute qualified name




myAttr
none
none
myAttr
myAttr


myAttr
mynamespace
none
myAttr
myAttr


myAttr
mynamespace
myns
myAttr
myns:myAttr




Note:
This interface represents only attributes present in the tree representation of the Element, being a SVG, an HTML or a MathML element. It doesn't represent the property of an interface associated with such element, such as HTMLTableElement for a <table> element. (See this article for more information about attributes and how they are reflected into properties.)
Instance propertiesThis interface also inherits the properties of its parent interfaces, Node and EventTarget.

localName Read only

A string representing the local part of the qualified name of the attribute.

name Read only

The attribute's qualified name. If the attribute is not in a namespace, it will be the same as localName property.

namespaceURI Read only

A string representing the URI of the namespace of the attribute, or null if there is no namespace.

ownerElement Read only

The Element the attribute belongs to.

prefix Read only

A string representing the namespace prefix of the attribute, or null if a namespace without prefix or no namespace are specified.

specified Read only 
Deprecated


This property always returns true.

value

The attribute's value, a string that can be set and get using this property.

Instance methodsThis interface has no specific methods, but inherits the methods of its parent interfaces, Node and EventTarget.SpecificationsSpecificationDOM # interface-attrBrowser compatibilitySee also
Other nodes are CDATASection, CharacterData, Comment, Document, Element, ProcessingInstruction, and Text.\n\nAttrBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe Attr interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., Element.getAttribute()), but some cases may require interacting with Attr instances (e.g., Element.getAttributeNode()).

The core idea of an object of type Attr is the association between a name and a value. An attribute may also be part of a namespace and, in this case, it also has a URI identifying the namespace, and a prefix that is an abbreviation for the namespace.
The name is deemed local when it ignores the eventual namespace prefix and deemed qualified when it includes the prefix of the namespace, if any, separated from the local name by a colon (:). We have three cases: an attribute outside of a namespace, an attribute inside a namespace without a prefix defined, an attribute inside a namespace with a prefix:



Attribute
Namespace name
Namespace prefix
Attribute local name
Attribute qualified name




myAttr
none
none
myAttr
myAttr


myAttr
mynamespace
none
myAttr
myAttr


myAttr
mynamespace
myns
myAttr
myns:myAttr




Note:
This interface represents only attributes present in the tree representation of the Element, being a SVG, an HTML or a MathML element. It doesn't represent the property of an interface associated with such element, such as HTMLTableElement for a <table> element. (See this article for more information about attributes and how they are reflected into properties.)
Instance propertiesThis interface also inherits the properties of its parent interfaces, Node and EventTarget.

localName Read only

A string representing the local part of the qualified name of the attribute.

name Read only

The attribute's qualified name. If the attribute is not in a namespace, it will be the same as localName property.

namespaceURI Read only

A string representing the URI of the namespace of the attribute, or null if there is no namespace.

ownerElement Read only

The Element the attribute belongs to.

prefix Read only

A string representing the namespace prefix of the attribute, or null if a namespace without prefix or no namespace are specified.

specified Read only 
Deprecated


This property always returns true.

value

The attribute's value, a string that can be set and get using this property.

Instance methodsThis interface has no specific methods, but inherits the methods of its parent interfaces, Node and EventTarget.SpecificationsSpecificationDOM # interface-attrBrowser compatibilitySee also
Other nodes are CDATASection, CharacterData, Comment, Document, Element, ProcessingInstruction, and Text.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAttrBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe Attr interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., Element.getAttribute()), but some cases may require interacting with Attr instances (e.g., Element.getAttributeNode()).

The core idea of an object of type Attr is the association between a name and a value. An attribute may also be part of a namespace and, in this case, it also has a URI identifying the namespace, and a prefix that is an abbreviation for the namespace.
The name is deemed local when it ignores the eventual namespace prefix and deemed qualified when it includes the prefix of the namespace, if any, separated from the local name by a colon (:). We have three cases: an attribute outside of a namespace, an attribute inside a namespace without a prefix defined, an attribute inside a namespace with a prefix:



Attribute
Namespace name
Namespace prefix
Attribute local name
Attribute qualified name




myAttr
none
none
myAttr
myAttr


myAttr
mynamespace
none
myAttr
myAttr


myAttr
mynamespace
myns
myAttr
myns:myAttr




Note:
This interface represents only attributes present in the tree representation of the Element, being a SVG, an HTML or a MathML element. It doesn't represent the property of an interface associated with such element, such as HTMLTableElement for a <table> element. (See this article for more information about attributes and how they are reflected into properties.)
Instance propertiesThis interface also inherits the properties of its parent interfaces, Node and EventTarget.

localName Read only

A string representing the local part of the qualified name of the attribute.

name Read only

The attribute's qualified name. If the attribute is not in a namespace, it will be the same as localName property.

namespaceURI Read only

A string representing the URI of the namespace of the attribute, or null if there is no namespace.

ownerElement Read only

The Element the attribute belongs to.

prefix Read only

A string representing the namespace prefix of the attribute, or null if a namespace without prefix or no namespace are specified.

specified Read only 
Deprecated


This property always returns true.

value

The attribute's value, a string that can be set and get using this property.

Instance methodsThis interface has no specific methods, but inherits the methods of its parent interfaces, Node and EventTarget.SpecificationsSpecificationDOM # interface-attrBrowser compatibilitySee also
Other nodes are CDATASection, CharacterData, Comment, Document, Element, ProcessingInstruction, and Text.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nCDATASectionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe CDATASection interface represents a CDATA section
that can be used within XML to include extended portions of unescaped text.
When inside a CDATA section, the symbols < and & don't need escaping
as they normally do.
In XML, a CDATA section looks like:
xml<![CDATA[ … ]]>

For example:
xml<foo>
  Here is a CDATA section: <![CDATA[ < > & ]]> with all kinds of unescaped text.
</foo>

The only sequence which is not allowed within a CDATA section is the closing sequence
of a CDATA section itself, ]]>.

Note:
CDATA sections should not be used within HTML. They are considered comments and are not displayed.

Instance propertiesThis interface has no specific properties and implements those of its parent
Text.Instance methodsThis interface has no specific methods and implements those of its parent
Text.SpecificationsSpecificationDOM # interface-cdatasectionBrowser compatibilitySee also
Document.createCDATASection()\n\nCDATASectionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe CDATASection interface represents a CDATA section
that can be used within XML to include extended portions of unescaped text.
When inside a CDATA section, the symbols < and & don't need escaping
as they normally do.
In XML, a CDATA section looks like:
xml<![CDATA[ … ]]>

For example:
xml<foo>
  Here is a CDATA section: <![CDATA[ < > & ]]> with all kinds of unescaped text.
</foo>

The only sequence which is not allowed within a CDATA section is the closing sequence
of a CDATA section itself, ]]>.

Note:
CDATA sections should not be used within HTML. They are considered comments and are not displayed.

Instance propertiesThis interface has no specific properties and implements those of its parent
Text.Instance methodsThis interface has no specific methods and implements those of its parent
Text.SpecificationsSpecificationDOM # interface-cdatasectionBrowser compatibilitySee also
Document.createCDATASection()
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jan 21, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCDATASectionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe CDATASection interface represents a CDATA section
that can be used within XML to include extended portions of unescaped text.
When inside a CDATA section, the symbols < and & don't need escaping
as they normally do.
In XML, a CDATA section looks like:
xml<![CDATA[ … ]]>

For example:
xml<foo>
  Here is a CDATA section: <![CDATA[ < > & ]]> with all kinds of unescaped text.
</foo>

The only sequence which is not allowed within a CDATA section is the closing sequence
of a CDATA section itself, ]]>.

Note:
CDATA sections should not be used within HTML. They are considered comments and are not displayed.

Instance propertiesThis interface has no specific properties and implements those of its parent
Text.Instance methodsThis interface has no specific methods and implements those of its parent
Text.SpecificationsSpecificationDOM # interface-cdatasectionBrowser compatibilitySee also
Document.createCDATASection()
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jan 21, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nCharacterDataBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any objects of type CharacterData: it is implemented by other interfaces like Text, Comment, CDATASection, or ProcessingInstruction, which aren't abstract.
Instance propertiesThis interface also inherits properties from its parents, Node and EventTarget.

CharacterData.data

A string representing the textual data contained in this object.

CharacterData.length Read only

Returns a number representing the size of the string contained in the object.

CharacterData.nextElementSibling Read only

Returns the first Element that follows this node, and is a sibling.

CharacterData.previousElementSibling Read only

Returns the first Element that precedes this node, and is a sibling.

Instance methodsThis interface also inherits methods from its parents, Node and EventTarget.

CharacterData.after()

Inserts a set of Node objects or strings in the children list of the
CharacterData's parent, just after the CharacterData object.

CharacterData.appendData()

Appends the given string to the CharacterData.data string; when this method returns, data contains the concatenated string.

CharacterData.before()

Inserts a set of Node objects or strings in the children list of the
CharacterData's parent, just before the CharacterData object.

CharacterData.deleteData()

Removes the specified amount of characters, starting at the specified offset, from the CharacterData.data string; when this method returns, data contains the shortened string.

CharacterData.insertData()

Inserts the specified characters, at the specified offset, in the CharacterData.data string; when this method returns, data contains the modified string.

CharacterData.remove()

Removes the object from its parent children list.

CharacterData.replaceData()

Replaces the specified amount of characters, starting at the specified offset, with the specified string; when this method returns, data contains the modified string.

CharacterData.replaceWith()

Replaces the characters in the children list of its parent with a set of Node objects or strings.

CharacterData.substringData()

Returns a string containing the part of CharacterData.data of the specified length and starting at the specified offset.

SpecificationsSpecificationDOM # interface-characterdataBrowser compatibilitySee also
The DOM overview page.
The concrete interfaces implemented it: Text, CDATASection, ProcessingInstruction, and Comment.\n\nCharacterDataBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any objects of type CharacterData: it is implemented by other interfaces like Text, Comment, CDATASection, or ProcessingInstruction, which aren't abstract.
Instance propertiesThis interface also inherits properties from its parents, Node and EventTarget.

CharacterData.data

A string representing the textual data contained in this object.

CharacterData.length Read only

Returns a number representing the size of the string contained in the object.

CharacterData.nextElementSibling Read only

Returns the first Element that follows this node, and is a sibling.

CharacterData.previousElementSibling Read only

Returns the first Element that precedes this node, and is a sibling.

Instance methodsThis interface also inherits methods from its parents, Node and EventTarget.

CharacterData.after()

Inserts a set of Node objects or strings in the children list of the
CharacterData's parent, just after the CharacterData object.

CharacterData.appendData()

Appends the given string to the CharacterData.data string; when this method returns, data contains the concatenated string.

CharacterData.before()

Inserts a set of Node objects or strings in the children list of the
CharacterData's parent, just before the CharacterData object.

CharacterData.deleteData()

Removes the specified amount of characters, starting at the specified offset, from the CharacterData.data string; when this method returns, data contains the shortened string.

CharacterData.insertData()

Inserts the specified characters, at the specified offset, in the CharacterData.data string; when this method returns, data contains the modified string.

CharacterData.remove()

Removes the object from its parent children list.

CharacterData.replaceData()

Replaces the specified amount of characters, starting at the specified offset, with the specified string; when this method returns, data contains the modified string.

CharacterData.replaceWith()

Replaces the characters in the children list of its parent with a set of Node objects or strings.

CharacterData.substringData()

Returns a string containing the part of CharacterData.data of the specified length and starting at the specified offset.

SpecificationsSpecificationDOM # interface-characterdataBrowser compatibilitySee also
The DOM overview page.
The concrete interfaces implemented it: Text, CDATASection, ProcessingInstruction, and Comment.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCharacterDataBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any objects of type CharacterData: it is implemented by other interfaces like Text, Comment, CDATASection, or ProcessingInstruction, which aren't abstract.
Instance propertiesThis interface also inherits properties from its parents, Node and EventTarget.

CharacterData.data

A string representing the textual data contained in this object.

CharacterData.length Read only

Returns a number representing the size of the string contained in the object.

CharacterData.nextElementSibling Read only

Returns the first Element that follows this node, and is a sibling.

CharacterData.previousElementSibling Read only

Returns the first Element that precedes this node, and is a sibling.

Instance methodsThis interface also inherits methods from its parents, Node and EventTarget.

CharacterData.after()

Inserts a set of Node objects or strings in the children list of the
CharacterData's parent, just after the CharacterData object.

CharacterData.appendData()

Appends the given string to the CharacterData.data string; when this method returns, data contains the concatenated string.

CharacterData.before()

Inserts a set of Node objects or strings in the children list of the
CharacterData's parent, just before the CharacterData object.

CharacterData.deleteData()

Removes the specified amount of characters, starting at the specified offset, from the CharacterData.data string; when this method returns, data contains the shortened string.

CharacterData.insertData()

Inserts the specified characters, at the specified offset, in the CharacterData.data string; when this method returns, data contains the modified string.

CharacterData.remove()

Removes the object from its parent children list.

CharacterData.replaceData()

Replaces the specified amount of characters, starting at the specified offset, with the specified string; when this method returns, data contains the modified string.

CharacterData.replaceWith()

Replaces the characters in the children list of its parent with a set of Node objects or strings.

CharacterData.substringData()

Returns a string containing the part of CharacterData.data of the specified length and starting at the specified offset.

SpecificationsSpecificationDOM # interface-characterdataBrowser compatibilitySee also
The DOM overview page.
The concrete interfaces implemented it: Text, CDATASection, ProcessingInstruction, and Comment.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nCommentBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
Comments are represented in HTML and XML as content between <!-- and -->. In XML, like inside SVG or MathML markup, the character sequence -- cannot be used within a comment.
Instance propertiesThis interface has no specific property, but inherits those of its parent, CharacterData, and indirectly those of Node.Constructor
Comment()

Returns a new Comment object with the parameter as its textual content. If not present, its default value is the empty string, ''.

Instance methodsThis interface has no specific method, but inherits those of its parent, CharacterData, and indirectly those of Node.SpecificationsSpecificationDOM # interface-commentBrowser compatibilitySee also
The DOM API\n\nCommentBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
Comments are represented in HTML and XML as content between <!-- and -->. In XML, like inside SVG or MathML markup, the character sequence -- cannot be used within a comment.
Instance propertiesThis interface has no specific property, but inherits those of its parent, CharacterData, and indirectly those of Node.Constructor
Comment()

Returns a new Comment object with the parameter as its textual content. If not present, its default value is the empty string, ''.

Instance methodsThis interface has no specific method, but inherits those of its parent, CharacterData, and indirectly those of Node.SpecificationsSpecificationDOM # interface-commentBrowser compatibilitySee also
The DOM API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Sep 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCommentBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
Comments are represented in HTML and XML as content between <!-- and -->. In XML, like inside SVG or MathML markup, the character sequence -- cannot be used within a comment.
Instance propertiesThis interface has no specific property, but inherits those of its parent, CharacterData, and indirectly those of Node.Constructor
Comment()

Returns a new Comment object with the parameter as its textual content. If not present, its default value is the empty string, ''.

Instance methodsThis interface has no specific method, but inherits those of its parent, CharacterData, and indirectly those of Node.SpecificationsSpecificationDOM # interface-commentBrowser compatibilitySee also
The DOM API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Sep 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nCustomEventBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The CustomEvent interface represents events initialized by an application for any purpose.

Note:
If used to attempt to communicate between a web extension content script and a web page script, a non-string detail property throws with "Permission denied to access property" in Firefox. To avoid this issue clone the object. See Share objects with page scripts for more information.

Constructor
CustomEvent()

Creates a new CustomEvent.

Instance propertiesThis interface inherits properties from its parent, Event.

CustomEvent.detail Read only

Returns any data passed when initializing the event.

Instance methodsThis interface inherits methods from its parent, Event.

CustomEvent.initCustomEvent() 
Deprecated


Initializes a CustomEvent object. If the event has already been dispatched, this method does nothing.

SpecificationsSpecificationDOM # interface-customeventBrowser compatibilitySee also
Window.postMessage()
Creating and triggering events\n\nCustomEventBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The CustomEvent interface represents events initialized by an application for any purpose.

Note:
If used to attempt to communicate between a web extension content script and a web page script, a non-string detail property throws with "Permission denied to access property" in Firefox. To avoid this issue clone the object. See Share objects with page scripts for more information.

Constructor
CustomEvent()

Creates a new CustomEvent.

Instance propertiesThis interface inherits properties from its parent, Event.

CustomEvent.detail Read only

Returns any data passed when initializing the event.

Instance methodsThis interface inherits methods from its parent, Event.

CustomEvent.initCustomEvent() 
Deprecated


Initializes a CustomEvent object. If the event has already been dispatched, this method does nothing.

SpecificationsSpecificationDOM # interface-customeventBrowser compatibilitySee also
Window.postMessage()
Creating and triggering events
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCustomEventBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The CustomEvent interface represents events initialized by an application for any purpose.

Note:
If used to attempt to communicate between a web extension content script and a web page script, a non-string detail property throws with "Permission denied to access property" in Firefox. To avoid this issue clone the object. See Share objects with page scripts for more information.

Constructor
CustomEvent()

Creates a new CustomEvent.

Instance propertiesThis interface inherits properties from its parent, Event.

CustomEvent.detail Read only

Returns any data passed when initializing the event.

Instance methodsThis interface inherits methods from its parent, Event.

CustomEvent.initCustomEvent() 
Deprecated


Initializes a CustomEvent object. If the event has already been dispatched, this method does nothing.

SpecificationsSpecificationDOM # interface-customeventBrowser compatibilitySee also
Window.postMessage()
Creating and triggering events
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMErrorDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.
The DOMError interface describes an error object that contains an error name.Instance properties
DOMError.name Read only 
Deprecated


Returns a string representing one of the error type names (see below).

DOMError.message Read only 
Deprecated


Returns a string representing a message or description associated with the given error type name.

Error types


Type
Description




IndexSizeError
The index is not in the allowed range (e.g., thrown in a range object).


HierarchyRequestError
The node tree hierarchy is not correct.


WrongDocumentError
The object is in the wrong document.


InvalidCharacterError
The string contains invalid characters.


NoModificationAllowedError
The object can not be modified.


NotFoundError
The object can not be found here.


NotSupportedError
The operation is not supported


InvalidStateError
The object is in an invalid state.


SyntaxError
The string did not match the expected pattern.


InvalidModificationError
The object can not be modified in this way.


NamespaceError
The operation is not allowed by Namespaces in XML


InvalidAccessError
The object does not support the operation or argument.


TypeMismatchError
The type of the object does not match the expected type.


SecurityError
The operation is insecure.


NetworkError
A network error occurred.


AbortError
The operation was aborted.


URLMismatchError
The given URL does not match another URL.


QuotaExceededError
The quota has been exceeded.


TimeoutError
The operation timed out.


InvalidNodeTypeError
The node is incorrect or has an incorrect ancestor for this operation.


DataCloneError
The object can not be cloned.


Browser compatibilitySee also
DOMException\n\nDOMErrorDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.
The DOMError interface describes an error object that contains an error name.Instance properties
DOMError.name Read only 
Deprecated


Returns a string representing one of the error type names (see below).

DOMError.message Read only 
Deprecated


Returns a string representing a message or description associated with the given error type name.

Error types


Type
Description




IndexSizeError
The index is not in the allowed range (e.g., thrown in a range object).


HierarchyRequestError
The node tree hierarchy is not correct.


WrongDocumentError
The object is in the wrong document.


InvalidCharacterError
The string contains invalid characters.


NoModificationAllowedError
The object can not be modified.


NotFoundError
The object can not be found here.


NotSupportedError
The operation is not supported


InvalidStateError
The object is in an invalid state.


SyntaxError
The string did not match the expected pattern.


InvalidModificationError
The object can not be modified in this way.


NamespaceError
The operation is not allowed by Namespaces in XML


InvalidAccessError
The object does not support the operation or argument.


TypeMismatchError
The type of the object does not match the expected type.


SecurityError
The operation is insecure.


NetworkError
A network error occurred.


AbortError
The operation was aborted.


URLMismatchError
The given URL does not match another URL.


QuotaExceededError
The quota has been exceeded.


TimeoutError
The operation timed out.


InvalidNodeTypeError
The node is incorrect or has an incorrect ancestor for this operation.


DataCloneError
The object can not be cloned.


Browser compatibilitySee also
DOMException
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMErrorDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.
The DOMError interface describes an error object that contains an error name.Instance properties
DOMError.name Read only 
Deprecated


Returns a string representing one of the error type names (see below).

DOMError.message Read only 
Deprecated


Returns a string representing a message or description associated with the given error type name.

Error types


Type
Description




IndexSizeError
The index is not in the allowed range (e.g., thrown in a range object).


HierarchyRequestError
The node tree hierarchy is not correct.


WrongDocumentError
The object is in the wrong document.


InvalidCharacterError
The string contains invalid characters.


NoModificationAllowedError
The object can not be modified.


NotFoundError
The object can not be found here.


NotSupportedError
The operation is not supported


InvalidStateError
The object is in an invalid state.


SyntaxError
The string did not match the expected pattern.


InvalidModificationError
The object can not be modified in this way.


NamespaceError
The operation is not allowed by Namespaces in XML


InvalidAccessError
The object does not support the operation or argument.


TypeMismatchError
The type of the object does not match the expected type.


SecurityError
The operation is insecure.


NetworkError
A network error occurred.


AbortError
The operation was aborted.


URLMismatchError
The given URL does not match another URL.


QuotaExceededError
The quota has been exceeded.


TimeoutError
The operation timed out.


InvalidNodeTypeError
The node is incorrect or has an incorrect ancestor for this operation.


DataCloneError
The object can not be cloned.


Browser compatibilitySee also
DOMException
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMExceptionBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The DOMException interface represents an abnormal event (called an exception) that occurs as a result of calling a method or accessing a property of a web API. This is how error conditions are described in web APIs.
Each exception has a name, which is a short "PascalCase"-style string identifying the error or abnormal condition.
DOMException is a Serializable object, so it can be cloned with structuredClone() or copied between Workers using postMessage().Constructor
DOMException()

Returns a DOMException object with a specified message and name.

Instance properties
DOMException.code 
Deprecated
 Read only

Returns one of the legacy error code constants, or 0 if none match.

DOMException.message Read only

Returns a string representing a message or description associated with the given error name.

DOMException.name Read only

Returns a string that contains one of the strings associated with an error name.

Error namesCommon error names are listed here. Some APIs define their own sets of names, so this is not necessarily a complete list.
Note that the following deprecated historical errors don't have an error name but instead have only a legacy constant code value and a legacy constant name:

Legacy code value: 2, legacy constant name: DOMSTRING_SIZE_ERR
Legacy code value: 6, legacy constant name: NO_DATA_ALLOWED_ERR
Legacy code value: 16, legacy constant name: VALIDATION_ERR


Note:
Because historically the errors were identified by a numeric value that corresponded with a named variable defined to have that value, some of the entries below indicate the legacy code value and constant name that were used in the past.


IndexSizeError

The index is not in the allowed range. For example, this can be thrown by the Range object. (Legacy code value: 1 and legacy constant name: INDEX_SIZE_ERR)

HierarchyRequestError

The node tree hierarchy is not correct. (Legacy code value: 3 and legacy constant name: HIERARCHY_REQUEST_ERR)

WrongDocumentError

The object is in the wrong Document. (Legacy code value: 4 and legacy constant name: WRONG_DOCUMENT_ERR)

InvalidCharacterError

The string contains invalid characters. (Legacy code value: 5 and legacy constant name: INVALID_CHARACTER_ERR)

NoModificationAllowedError

The object cannot be modified. (Legacy code value: 7 and legacy constant name: NO_MODIFICATION_ALLOWED_ERR)

NotFoundError

The object cannot be found here. (Legacy code value: 8 and legacy constant name: NOT_FOUND_ERR)

NotSupportedError

The operation is not supported. (Legacy code value: 9 and legacy constant name: NOT_SUPPORTED_ERR)

InvalidStateError

The object is in an invalid state. (Legacy code value: 11 and legacy constant name: INVALID_STATE_ERR)

InUseAttributeError

The attribute is in use. (Legacy code value: 10 and legacy constant name: INUSE_ATTRIBUTE_ERR)

SyntaxError

The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR)

InvalidModificationError

The object cannot be modified in this way. (Legacy code value: 13 and legacy constant name: INVALID_MODIFICATION_ERR)

NamespaceError

The operation is not allowed by Namespaces in XML. (Legacy code value: 14 and legacy constant name: NAMESPACE_ERR)

InvalidAccessError

The object does not support the operation or argument. (Legacy code value: 15 and legacy constant name: INVALID_ACCESS_ERR)

TypeMismatchError 
Deprecated


The type of the object does not match the expected type. (Legacy code value: 17 and legacy constant name: TYPE_MISMATCH_ERR) This value is deprecated; the JavaScript TypeError exception is now raised instead of a DOMException with this value.

SecurityError

The operation is insecure. (Legacy code value: 18 and legacy constant name: SECURITY_ERR)

NetworkError 
Experimental


A network error occurred. (Legacy code value: 19 and legacy constant name: NETWORK_ERR)

AbortError 
Experimental


The operation was aborted. (Legacy code value: 20 and legacy constant name: ABORT_ERR)

URLMismatchError 
Experimental


The given URL does not match another URL. (Legacy code value: 21 and legacy constant name: URL_MISMATCH_ERR)

QuotaExceededError 
Experimental


The quota has been exceeded. (Legacy code value: 22 and legacy constant name: QUOTA_EXCEEDED_ERR)

TimeoutError

The operation timed out. (Legacy code value: 23 and legacy constant name: TIMEOUT_ERR)

InvalidNodeTypeError 
Experimental


The node is incorrect or has an incorrect ancestor for this operation. (Legacy code value: 24 and legacy constant name: INVALID_NODE_TYPE_ERR)

DataCloneError 
Experimental


The object can not be cloned. (Legacy code value: 25 and legacy constant name: DATA_CLONE_ERR)

EncodingError 
Experimental


The encoding or decoding operation failed (No legacy code value and constant name).

NotReadableError 
Experimental


The input/output read operation failed (No legacy code value and constant name).

UnknownError 
Experimental


The operation failed for an unknown transient reason (e.g., out of memory) (No legacy code value and constant name).

ConstraintError 
Experimental


A mutation operation in a transaction failed because a constraint was not satisfied (No legacy code value and constant name).

DataError 
Experimental


Provided data is inadequate (No legacy code value and constant name).

TransactionInactiveError 
Experimental


A request was placed against a transaction that is currently not active or is finished (No legacy code value and constant name).

ReadOnlyError 
Experimental


The mutating operation was attempted in a "readonly" transaction (No legacy code value and constant name).

VersionError 
Experimental


An attempt was made to open a database using a lower version than the existing version (No legacy code value and constant name).

OperationError 
Experimental


The operation failed for an operation-specific reason (No legacy code value and constant name).

NotAllowedError

The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission (No legacy code value and constant name).

SpecificationsSpecificationWeb IDL # idl-DOMExceptionBrowser compatibilitySee also
A polyfill of DOMException is available in core-js
DOMError\n\nDOMExceptionBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The DOMException interface represents an abnormal event (called an exception) that occurs as a result of calling a method or accessing a property of a web API. This is how error conditions are described in web APIs.
Each exception has a name, which is a short "PascalCase"-style string identifying the error or abnormal condition.
DOMException is a Serializable object, so it can be cloned with structuredClone() or copied between Workers using postMessage().Constructor
DOMException()

Returns a DOMException object with a specified message and name.

Instance properties
DOMException.code 
Deprecated
 Read only

Returns one of the legacy error code constants, or 0 if none match.

DOMException.message Read only

Returns a string representing a message or description associated with the given error name.

DOMException.name Read only

Returns a string that contains one of the strings associated with an error name.

Error namesCommon error names are listed here. Some APIs define their own sets of names, so this is not necessarily a complete list.
Note that the following deprecated historical errors don't have an error name but instead have only a legacy constant code value and a legacy constant name:

Legacy code value: 2, legacy constant name: DOMSTRING_SIZE_ERR
Legacy code value: 6, legacy constant name: NO_DATA_ALLOWED_ERR
Legacy code value: 16, legacy constant name: VALIDATION_ERR


Note:
Because historically the errors were identified by a numeric value that corresponded with a named variable defined to have that value, some of the entries below indicate the legacy code value and constant name that were used in the past.


IndexSizeError

The index is not in the allowed range. For example, this can be thrown by the Range object. (Legacy code value: 1 and legacy constant name: INDEX_SIZE_ERR)

HierarchyRequestError

The node tree hierarchy is not correct. (Legacy code value: 3 and legacy constant name: HIERARCHY_REQUEST_ERR)

WrongDocumentError

The object is in the wrong Document. (Legacy code value: 4 and legacy constant name: WRONG_DOCUMENT_ERR)

InvalidCharacterError

The string contains invalid characters. (Legacy code value: 5 and legacy constant name: INVALID_CHARACTER_ERR)

NoModificationAllowedError

The object cannot be modified. (Legacy code value: 7 and legacy constant name: NO_MODIFICATION_ALLOWED_ERR)

NotFoundError

The object cannot be found here. (Legacy code value: 8 and legacy constant name: NOT_FOUND_ERR)

NotSupportedError

The operation is not supported. (Legacy code value: 9 and legacy constant name: NOT_SUPPORTED_ERR)

InvalidStateError

The object is in an invalid state. (Legacy code value: 11 and legacy constant name: INVALID_STATE_ERR)

InUseAttributeError

The attribute is in use. (Legacy code value: 10 and legacy constant name: INUSE_ATTRIBUTE_ERR)

SyntaxError

The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR)

InvalidModificationError

The object cannot be modified in this way. (Legacy code value: 13 and legacy constant name: INVALID_MODIFICATION_ERR)

NamespaceError

The operation is not allowed by Namespaces in XML. (Legacy code value: 14 and legacy constant name: NAMESPACE_ERR)

InvalidAccessError

The object does not support the operation or argument. (Legacy code value: 15 and legacy constant name: INVALID_ACCESS_ERR)

TypeMismatchError 
Deprecated


The type of the object does not match the expected type. (Legacy code value: 17 and legacy constant name: TYPE_MISMATCH_ERR) This value is deprecated; the JavaScript TypeError exception is now raised instead of a DOMException with this value.

SecurityError

The operation is insecure. (Legacy code value: 18 and legacy constant name: SECURITY_ERR)

NetworkError 
Experimental


A network error occurred. (Legacy code value: 19 and legacy constant name: NETWORK_ERR)

AbortError 
Experimental


The operation was aborted. (Legacy code value: 20 and legacy constant name: ABORT_ERR)

URLMismatchError 
Experimental


The given URL does not match another URL. (Legacy code value: 21 and legacy constant name: URL_MISMATCH_ERR)

QuotaExceededError 
Experimental


The quota has been exceeded. (Legacy code value: 22 and legacy constant name: QUOTA_EXCEEDED_ERR)

TimeoutError

The operation timed out. (Legacy code value: 23 and legacy constant name: TIMEOUT_ERR)

InvalidNodeTypeError 
Experimental


The node is incorrect or has an incorrect ancestor for this operation. (Legacy code value: 24 and legacy constant name: INVALID_NODE_TYPE_ERR)

DataCloneError 
Experimental


The object can not be cloned. (Legacy code value: 25 and legacy constant name: DATA_CLONE_ERR)

EncodingError 
Experimental


The encoding or decoding operation failed (No legacy code value and constant name).

NotReadableError 
Experimental


The input/output read operation failed (No legacy code value and constant name).

UnknownError 
Experimental


The operation failed for an unknown transient reason (e.g., out of memory) (No legacy code value and constant name).

ConstraintError 
Experimental


A mutation operation in a transaction failed because a constraint was not satisfied (No legacy code value and constant name).

DataError 
Experimental


Provided data is inadequate (No legacy code value and constant name).

TransactionInactiveError 
Experimental


A request was placed against a transaction that is currently not active or is finished (No legacy code value and constant name).

ReadOnlyError 
Experimental


The mutating operation was attempted in a "readonly" transaction (No legacy code value and constant name).

VersionError 
Experimental


An attempt was made to open a database using a lower version than the existing version (No legacy code value and constant name).

OperationError 
Experimental


The operation failed for an operation-specific reason (No legacy code value and constant name).

NotAllowedError

The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission (No legacy code value and constant name).

SpecificationsSpecificationWeb IDL # idl-DOMExceptionBrowser compatibilitySee also
A polyfill of DOMException is available in core-js
DOMError
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMExceptionBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The DOMException interface represents an abnormal event (called an exception) that occurs as a result of calling a method or accessing a property of a web API. This is how error conditions are described in web APIs.
Each exception has a name, which is a short "PascalCase"-style string identifying the error or abnormal condition.
DOMException is a Serializable object, so it can be cloned with structuredClone() or copied between Workers using postMessage().Constructor
DOMException()

Returns a DOMException object with a specified message and name.

Instance properties
DOMException.code 
Deprecated
 Read only

Returns one of the legacy error code constants, or 0 if none match.

DOMException.message Read only

Returns a string representing a message or description associated with the given error name.

DOMException.name Read only

Returns a string that contains one of the strings associated with an error name.

Error namesCommon error names are listed here. Some APIs define their own sets of names, so this is not necessarily a complete list.
Note that the following deprecated historical errors don't have an error name but instead have only a legacy constant code value and a legacy constant name:

Legacy code value: 2, legacy constant name: DOMSTRING_SIZE_ERR
Legacy code value: 6, legacy constant name: NO_DATA_ALLOWED_ERR
Legacy code value: 16, legacy constant name: VALIDATION_ERR


Note:
Because historically the errors were identified by a numeric value that corresponded with a named variable defined to have that value, some of the entries below indicate the legacy code value and constant name that were used in the past.


IndexSizeError

The index is not in the allowed range. For example, this can be thrown by the Range object. (Legacy code value: 1 and legacy constant name: INDEX_SIZE_ERR)

HierarchyRequestError

The node tree hierarchy is not correct. (Legacy code value: 3 and legacy constant name: HIERARCHY_REQUEST_ERR)

WrongDocumentError

The object is in the wrong Document. (Legacy code value: 4 and legacy constant name: WRONG_DOCUMENT_ERR)

InvalidCharacterError

The string contains invalid characters. (Legacy code value: 5 and legacy constant name: INVALID_CHARACTER_ERR)

NoModificationAllowedError

The object cannot be modified. (Legacy code value: 7 and legacy constant name: NO_MODIFICATION_ALLOWED_ERR)

NotFoundError

The object cannot be found here. (Legacy code value: 8 and legacy constant name: NOT_FOUND_ERR)

NotSupportedError

The operation is not supported. (Legacy code value: 9 and legacy constant name: NOT_SUPPORTED_ERR)

InvalidStateError

The object is in an invalid state. (Legacy code value: 11 and legacy constant name: INVALID_STATE_ERR)

InUseAttributeError

The attribute is in use. (Legacy code value: 10 and legacy constant name: INUSE_ATTRIBUTE_ERR)

SyntaxError

The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR)

InvalidModificationError

The object cannot be modified in this way. (Legacy code value: 13 and legacy constant name: INVALID_MODIFICATION_ERR)

NamespaceError

The operation is not allowed by Namespaces in XML. (Legacy code value: 14 and legacy constant name: NAMESPACE_ERR)

InvalidAccessError

The object does not support the operation or argument. (Legacy code value: 15 and legacy constant name: INVALID_ACCESS_ERR)

TypeMismatchError 
Deprecated


The type of the object does not match the expected type. (Legacy code value: 17 and legacy constant name: TYPE_MISMATCH_ERR) This value is deprecated; the JavaScript TypeError exception is now raised instead of a DOMException with this value.

SecurityError

The operation is insecure. (Legacy code value: 18 and legacy constant name: SECURITY_ERR)

NetworkError 
Experimental


A network error occurred. (Legacy code value: 19 and legacy constant name: NETWORK_ERR)

AbortError 
Experimental


The operation was aborted. (Legacy code value: 20 and legacy constant name: ABORT_ERR)

URLMismatchError 
Experimental


The given URL does not match another URL. (Legacy code value: 21 and legacy constant name: URL_MISMATCH_ERR)

QuotaExceededError 
Experimental


The quota has been exceeded. (Legacy code value: 22 and legacy constant name: QUOTA_EXCEEDED_ERR)

TimeoutError

The operation timed out. (Legacy code value: 23 and legacy constant name: TIMEOUT_ERR)

InvalidNodeTypeError 
Experimental


The node is incorrect or has an incorrect ancestor for this operation. (Legacy code value: 24 and legacy constant name: INVALID_NODE_TYPE_ERR)

DataCloneError 
Experimental


The object can not be cloned. (Legacy code value: 25 and legacy constant name: DATA_CLONE_ERR)

EncodingError 
Experimental


The encoding or decoding operation failed (No legacy code value and constant name).

NotReadableError 
Experimental


The input/output read operation failed (No legacy code value and constant name).

UnknownError 
Experimental


The operation failed for an unknown transient reason (e.g., out of memory) (No legacy code value and constant name).

ConstraintError 
Experimental


A mutation operation in a transaction failed because a constraint was not satisfied (No legacy code value and constant name).

DataError 
Experimental


Provided data is inadequate (No legacy code value and constant name).

TransactionInactiveError 
Experimental


A request was placed against a transaction that is currently not active or is finished (No legacy code value and constant name).

ReadOnlyError 
Experimental


The mutating operation was attempted in a "readonly" transaction (No legacy code value and constant name).

VersionError 
Experimental


An attempt was made to open a database using a lower version than the existing version (No legacy code value and constant name).

OperationError 
Experimental


The operation failed for an operation-specific reason (No legacy code value and constant name).

NotAllowedError

The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission (No legacy code value and constant name).

SpecificationsSpecificationWeb IDL # idl-DOMExceptionBrowser compatibilitySee also
A polyfill of DOMException is available in core-js
DOMError
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMImplementationBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.PropertyThis interface has no specific property and doesn't inherit any.Instance methodsNo inherited method.

DOMImplementation.createDocument()

Creates and returns an XMLDocument.

DOMImplementation.createDocumentType()

Creates and returns a DocumentType.

DOMImplementation.createHTMLDocument()

Creates and returns an HTML Document.

DOMImplementation.hasFeature() 
Deprecated


Returns a boolean value indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns true. Old browsers are very inconsistent in their behavior.

SpecificationsSpecificationDOM # interface-domimplementationBrowser compatibilitySee also
The DOM interfaces index.\n\nDOMImplementationBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.PropertyThis interface has no specific property and doesn't inherit any.Instance methodsNo inherited method.

DOMImplementation.createDocument()

Creates and returns an XMLDocument.

DOMImplementation.createDocumentType()

Creates and returns a DocumentType.

DOMImplementation.createHTMLDocument()

Creates and returns an HTML Document.

DOMImplementation.hasFeature() 
Deprecated


Returns a boolean value indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns true. Old browsers are very inconsistent in their behavior.

SpecificationsSpecificationDOM # interface-domimplementationBrowser compatibilitySee also
The DOM interfaces index.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMImplementationBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.PropertyThis interface has no specific property and doesn't inherit any.Instance methodsNo inherited method.

DOMImplementation.createDocument()

Creates and returns an XMLDocument.

DOMImplementation.createDocumentType()

Creates and returns a DocumentType.

DOMImplementation.createHTMLDocument()

Creates and returns an HTML Document.

DOMImplementation.hasFeature() 
Deprecated


Returns a boolean value indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns true. Old browsers are very inconsistent in their behavior.

SpecificationsSpecificationDOM # interface-domimplementationBrowser compatibilitySee also
The DOM interfaces index.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMParserBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMParser interface provides
the ability to parse XML or HTML source code from a
string into a DOM Document.
You can perform the opposite operation—converting a DOM tree into XML or HTML
source—using the XMLSerializer interface.
In the case of an HTML document, you can also replace portions of the DOM with new DOM
trees built from HTML by setting the value of the Element.innerHTML and
outerHTML properties. These properties can also be
read to fetch HTML fragments corresponding to the corresponding DOM subtree.
Note that XMLHttpRequest can parse XML and HTML directly
from a URL-addressable resource, returning a Document in its
response property.

Note:
Be aware that block-level elements
like <p> will be automatically closed if another
block-level element is nested inside and therefore parsed before the closing </p> tag.
Constructor
DOMParser()

Creates a new DOMParser object.

Instance methods
DOMParser.parseFromString()

Parses a string using either the HTML parser or the XML parser, returning an HTMLDocument or XMLDocument.

ExamplesThe documentation for DOMParser.parseFromString(), this interface's only method, contains examples for parsing XML, SVG, and HTML strings.SpecificationsSpecificationHTML # dom-parsing-and-serializationBrowser compatibilitySee also
Parsing and serializing XML
XMLHttpRequest
XMLSerializer
JSON.parse() - counterpart for JSON documents.\n\nDOMParserBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMParser interface provides
the ability to parse XML or HTML source code from a
string into a DOM Document.
You can perform the opposite operation—converting a DOM tree into XML or HTML
source—using the XMLSerializer interface.
In the case of an HTML document, you can also replace portions of the DOM with new DOM
trees built from HTML by setting the value of the Element.innerHTML and
outerHTML properties. These properties can also be
read to fetch HTML fragments corresponding to the corresponding DOM subtree.
Note that XMLHttpRequest can parse XML and HTML directly
from a URL-addressable resource, returning a Document in its
response property.

Note:
Be aware that block-level elements
like <p> will be automatically closed if another
block-level element is nested inside and therefore parsed before the closing </p> tag.
Constructor
DOMParser()

Creates a new DOMParser object.

Instance methods
DOMParser.parseFromString()

Parses a string using either the HTML parser or the XML parser, returning an HTMLDocument or XMLDocument.

ExamplesThe documentation for DOMParser.parseFromString(), this interface's only method, contains examples for parsing XML, SVG, and HTML strings.SpecificationsSpecificationHTML # dom-parsing-and-serializationBrowser compatibilitySee also
Parsing and serializing XML
XMLHttpRequest
XMLSerializer
JSON.parse() - counterpart for JSON documents.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 5, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMParserBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMParser interface provides
the ability to parse XML or HTML source code from a
string into a DOM Document.
You can perform the opposite operation—converting a DOM tree into XML or HTML
source—using the XMLSerializer interface.
In the case of an HTML document, you can also replace portions of the DOM with new DOM
trees built from HTML by setting the value of the Element.innerHTML and
outerHTML properties. These properties can also be
read to fetch HTML fragments corresponding to the corresponding DOM subtree.
Note that XMLHttpRequest can parse XML and HTML directly
from a URL-addressable resource, returning a Document in its
response property.

Note:
Be aware that block-level elements
like <p> will be automatically closed if another
block-level element is nested inside and therefore parsed before the closing </p> tag.
Constructor
DOMParser()

Creates a new DOMParser object.

Instance methods
DOMParser.parseFromString()

Parses a string using either the HTML parser or the XML parser, returning an HTMLDocument or XMLDocument.

ExamplesThe documentation for DOMParser.parseFromString(), this interface's only method, contains examples for parsing XML, SVG, and HTML strings.SpecificationsSpecificationHTML # dom-parsing-and-serializationBrowser compatibilitySee also
Parsing and serializing XML
XMLHttpRequest
XMLSerializer
JSON.parse() - counterpart for JSON documents.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 5, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMPointBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
A DOMPoint object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. DOMPoint is based on DOMPointReadOnly but allows its properties' values to be changed.
In general, a positive x component represents a position to the right of the origin, a positive y component is downward from the origin, and a positive z component extends outward from the screen (in other words, toward the user).
Constructor
DOMPoint()

Creates and returns a new DOMPoint object given the values of zero or more of its coordinate components and optionally the w perspective value. You can also use an existing DOMPoint or DOMPointReadOnly or an object to create a new point by calling the DOMPoint.fromPoint() static method.

Instance propertiesDOMPoint may also inherit properties from its parent, DOMPointReadOnly.

DOMPoint.x

The x coordinate of the DOMPoint.

DOMPoint.y

The y coordinate of the DOMPoint.

DOMPoint.z

The z coordinate of the DOMPoint.

DOMPoint.w

The perspective value of the DOMPoint.

Instance methodsDOMPoint inherits instance methods from its parent, DOMPointReadOnly.Static methodsDOMPoint may also inherit static methods from its parent, DOMPointReadOnly.

DOMPoint.fromPoint()

Creates a new mutable DOMPoint object given an existing point (or an object containing matching properties), which provides the values for its properties.

ExamplesIn the WebXR Device API, DOMPointReadOnly values represent positions and orientations. In the following snippet, the pose of the XR device (such as a VR headset or phone with AR capabilities) can be retrieved by calling using XRFrame.getViewerPose() during an XRSession animation frame, then accessing the resulting XRPose's transform property, which contains two DOMPointReadOnly attributes: position as a vector and orientation as a quaternion.
jsfunction onXRFrame(time, xrFrame) {
  let viewerPose = xrFrame.getViewerPose(xrReferenceSpace);

  if (viewerPose) {
    let position = viewerPose.transform.position;
    let orientation = viewerPose.transform.orientation;

    console.log(
      `XR Viewer Position: {x: ${roundToTwo(position.x)}, y: ${roundToTwo(
        position.y,
      )}, z: ${roundToTwo(position.z)}`,
    );

    console.log(
      `XR Viewer Orientation: {x: ${roundToTwo(orientation.x)}, y: ${roundToTwo(
        orientation.y,
      )}, z: ${roundToTwo(orientation.z)}, w: ${roundToTwo(orientation.w)}`,
    );
  }
}
SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMPointBrowser compatibilitySee also
DOMRect
DOMMatrix\n\nDOMPointBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
A DOMPoint object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. DOMPoint is based on DOMPointReadOnly but allows its properties' values to be changed.
In general, a positive x component represents a position to the right of the origin, a positive y component is downward from the origin, and a positive z component extends outward from the screen (in other words, toward the user).
Constructor
DOMPoint()

Creates and returns a new DOMPoint object given the values of zero or more of its coordinate components and optionally the w perspective value. You can also use an existing DOMPoint or DOMPointReadOnly or an object to create a new point by calling the DOMPoint.fromPoint() static method.

Instance propertiesDOMPoint may also inherit properties from its parent, DOMPointReadOnly.

DOMPoint.x

The x coordinate of the DOMPoint.

DOMPoint.y

The y coordinate of the DOMPoint.

DOMPoint.z

The z coordinate of the DOMPoint.

DOMPoint.w

The perspective value of the DOMPoint.

Instance methodsDOMPoint inherits instance methods from its parent, DOMPointReadOnly.Static methodsDOMPoint may also inherit static methods from its parent, DOMPointReadOnly.

DOMPoint.fromPoint()

Creates a new mutable DOMPoint object given an existing point (or an object containing matching properties), which provides the values for its properties.

ExamplesIn the WebXR Device API, DOMPointReadOnly values represent positions and orientations. In the following snippet, the pose of the XR device (such as a VR headset or phone with AR capabilities) can be retrieved by calling using XRFrame.getViewerPose() during an XRSession animation frame, then accessing the resulting XRPose's transform property, which contains two DOMPointReadOnly attributes: position as a vector and orientation as a quaternion.
jsfunction onXRFrame(time, xrFrame) {
  let viewerPose = xrFrame.getViewerPose(xrReferenceSpace);

  if (viewerPose) {
    let position = viewerPose.transform.position;
    let orientation = viewerPose.transform.orientation;

    console.log(
      `XR Viewer Position: {x: ${roundToTwo(position.x)}, y: ${roundToTwo(
        position.y,
      )}, z: ${roundToTwo(position.z)}`,
    );

    console.log(
      `XR Viewer Orientation: {x: ${roundToTwo(orientation.x)}, y: ${roundToTwo(
        orientation.y,
      )}, z: ${roundToTwo(orientation.z)}, w: ${roundToTwo(orientation.w)}`,
    );
  }
}
SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMPointBrowser compatibilitySee also
DOMRect
DOMMatrix
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 8, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMPointBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
A DOMPoint object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. DOMPoint is based on DOMPointReadOnly but allows its properties' values to be changed.
In general, a positive x component represents a position to the right of the origin, a positive y component is downward from the origin, and a positive z component extends outward from the screen (in other words, toward the user).
Constructor
DOMPoint()

Creates and returns a new DOMPoint object given the values of zero or more of its coordinate components and optionally the w perspective value. You can also use an existing DOMPoint or DOMPointReadOnly or an object to create a new point by calling the DOMPoint.fromPoint() static method.

Instance propertiesDOMPoint may also inherit properties from its parent, DOMPointReadOnly.

DOMPoint.x

The x coordinate of the DOMPoint.

DOMPoint.y

The y coordinate of the DOMPoint.

DOMPoint.z

The z coordinate of the DOMPoint.

DOMPoint.w

The perspective value of the DOMPoint.

Instance methodsDOMPoint inherits instance methods from its parent, DOMPointReadOnly.Static methodsDOMPoint may also inherit static methods from its parent, DOMPointReadOnly.

DOMPoint.fromPoint()

Creates a new mutable DOMPoint object given an existing point (or an object containing matching properties), which provides the values for its properties.

ExamplesIn the WebXR Device API, DOMPointReadOnly values represent positions and orientations. In the following snippet, the pose of the XR device (such as a VR headset or phone with AR capabilities) can be retrieved by calling using XRFrame.getViewerPose() during an XRSession animation frame, then accessing the resulting XRPose's transform property, which contains two DOMPointReadOnly attributes: position as a vector and orientation as a quaternion.
jsfunction onXRFrame(time, xrFrame) {
  let viewerPose = xrFrame.getViewerPose(xrReferenceSpace);

  if (viewerPose) {
    let position = viewerPose.transform.position;
    let orientation = viewerPose.transform.orientation;

    console.log(
      `XR Viewer Position: {x: ${roundToTwo(position.x)}, y: ${roundToTwo(
        position.y,
      )}, z: ${roundToTwo(position.z)}`,
    );

    console.log(
      `XR Viewer Orientation: {x: ${roundToTwo(orientation.x)}, y: ${roundToTwo(
        orientation.y,
      )}, z: ${roundToTwo(orientation.z)}, w: ${roundToTwo(orientation.w)}`,
    );
  }
}
SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMPointBrowser compatibilitySee also
DOMRect
DOMMatrix
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 8, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMPointReadOnlyBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The DOMPointReadOnly interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.
There are two ways to create a new DOMPointReadOnly instance. First, you can use its constructor, passing in the values of the parameters for each dimension and, optionally, the perspective:
js/* 2D */
const point2D = new DOMPointReadOnly(50, 50);

/* 3D */
const point3D = new DOMPointReadOnly(50, 50, 25);

/* 3D with perspective */
const point3DPerspective = new DOMPointReadOnly(100, 100, 100, 1.0);

The other option is to use the static DOMPointReadOnly.fromPoint() method:
jsconst point = DOMPointReadOnly.fromPoint({ x: 100, y: 100, z: 50, w: 1.0 });
Constructor
DOMPointReadOnly()

Creates a new DOMPointReadOnly object given the values of its coordinates and perspective. To create a point using an object, you can instead use DOMPointReadOnly.fromPoint().

Instance properties
DOMPointReadOnly.x Read only

The point's horizontal coordinate, x.

DOMPointReadOnly.y Read only

The point's vertical coordinate, y.

DOMPointReadOnly.z Read only

The point's depth coordinate, z.

DOMPointReadOnly.w Read only

The point's perspective value, w.

Static methods
DOMPointReadOnly.fromPoint()

A static method that creates a new DOMPointReadOnly object given the coordinates provided in the specified object.

Instance methods
matrixTransform()

Applies a matrix transform specified as an object to the DOMPointReadOnly object.

toJSON()

Returns a JSON representation of the DOMPointReadOnly object.

SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMPointBrowser compatibilitySee also
DOMPoint
DOMRect
DOMMatrix\n\nDOMPointReadOnlyBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The DOMPointReadOnly interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.
There are two ways to create a new DOMPointReadOnly instance. First, you can use its constructor, passing in the values of the parameters for each dimension and, optionally, the perspective:
js/* 2D */
const point2D = new DOMPointReadOnly(50, 50);

/* 3D */
const point3D = new DOMPointReadOnly(50, 50, 25);

/* 3D with perspective */
const point3DPerspective = new DOMPointReadOnly(100, 100, 100, 1.0);

The other option is to use the static DOMPointReadOnly.fromPoint() method:
jsconst point = DOMPointReadOnly.fromPoint({ x: 100, y: 100, z: 50, w: 1.0 });
Constructor
DOMPointReadOnly()

Creates a new DOMPointReadOnly object given the values of its coordinates and perspective. To create a point using an object, you can instead use DOMPointReadOnly.fromPoint().

Instance properties
DOMPointReadOnly.x Read only

The point's horizontal coordinate, x.

DOMPointReadOnly.y Read only

The point's vertical coordinate, y.

DOMPointReadOnly.z Read only

The point's depth coordinate, z.

DOMPointReadOnly.w Read only

The point's perspective value, w.

Static methods
DOMPointReadOnly.fromPoint()

A static method that creates a new DOMPointReadOnly object given the coordinates provided in the specified object.

Instance methods
matrixTransform()

Applies a matrix transform specified as an object to the DOMPointReadOnly object.

toJSON()

Returns a JSON representation of the DOMPointReadOnly object.

SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMPointBrowser compatibilitySee also
DOMPoint
DOMRect
DOMMatrix
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 8, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMPointReadOnlyBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The DOMPointReadOnly interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.
There are two ways to create a new DOMPointReadOnly instance. First, you can use its constructor, passing in the values of the parameters for each dimension and, optionally, the perspective:
js/* 2D */
const point2D = new DOMPointReadOnly(50, 50);

/* 3D */
const point3D = new DOMPointReadOnly(50, 50, 25);

/* 3D with perspective */
const point3DPerspective = new DOMPointReadOnly(100, 100, 100, 1.0);

The other option is to use the static DOMPointReadOnly.fromPoint() method:
jsconst point = DOMPointReadOnly.fromPoint({ x: 100, y: 100, z: 50, w: 1.0 });
Constructor
DOMPointReadOnly()

Creates a new DOMPointReadOnly object given the values of its coordinates and perspective. To create a point using an object, you can instead use DOMPointReadOnly.fromPoint().

Instance properties
DOMPointReadOnly.x Read only

The point's horizontal coordinate, x.

DOMPointReadOnly.y Read only

The point's vertical coordinate, y.

DOMPointReadOnly.z Read only

The point's depth coordinate, z.

DOMPointReadOnly.w Read only

The point's perspective value, w.

Static methods
DOMPointReadOnly.fromPoint()

A static method that creates a new DOMPointReadOnly object given the coordinates provided in the specified object.

Instance methods
matrixTransform()

Applies a matrix transform specified as an object to the DOMPointReadOnly object.

toJSON()

Returns a JSON representation of the DOMPointReadOnly object.

SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMPointBrowser compatibilitySee also
DOMPoint
DOMRect
DOMMatrix
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 8, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMRectBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
A DOMRect describes the size and position of a rectangle.
The type of box represented by the DOMRect is specified by the method or property that returned it. For example, Range.getBoundingClientRect() specifies the rectangle that bounds the content of the range using such objects.
It inherits from its parent, DOMRectReadOnly.
Constructor
DOMRect()

Creates a new DOMRect object.

Instance propertiesDOMRect inherits properties from its parent, DOMRectReadOnly. The difference is that they are not read-only anymore.

DOMRect.x

The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).

DOMRect.y

The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).

DOMRect.width

The width of the DOMRect.

DOMRect.height

The height of the DOMRect.

DOMRectReadOnly.top

Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative).

DOMRectReadOnly.right

Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative).

DOMRectReadOnly.bottom

Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative).

DOMRectReadOnly.left

Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative).

Static methodsDOMRect may also inherit static methods from its parent, DOMRectReadOnly.

DOMRect.fromRect()

Creates a new DOMRect object with a given location and dimensions.

Instance methodsDOMRect may inherit methods from its parent, DOMRectReadOnly.SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMRectBrowser compatibilitySee also
DOMPoint\n\nDOMRectBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
A DOMRect describes the size and position of a rectangle.
The type of box represented by the DOMRect is specified by the method or property that returned it. For example, Range.getBoundingClientRect() specifies the rectangle that bounds the content of the range using such objects.
It inherits from its parent, DOMRectReadOnly.
Constructor
DOMRect()

Creates a new DOMRect object.

Instance propertiesDOMRect inherits properties from its parent, DOMRectReadOnly. The difference is that they are not read-only anymore.

DOMRect.x

The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).

DOMRect.y

The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).

DOMRect.width

The width of the DOMRect.

DOMRect.height

The height of the DOMRect.

DOMRectReadOnly.top

Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative).

DOMRectReadOnly.right

Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative).

DOMRectReadOnly.bottom

Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative).

DOMRectReadOnly.left

Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative).

Static methodsDOMRect may also inherit static methods from its parent, DOMRectReadOnly.

DOMRect.fromRect()

Creates a new DOMRect object with a given location and dimensions.

Instance methodsDOMRect may inherit methods from its parent, DOMRectReadOnly.SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMRectBrowser compatibilitySee also
DOMPoint
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Nov 17, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMRectBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
A DOMRect describes the size and position of a rectangle.
The type of box represented by the DOMRect is specified by the method or property that returned it. For example, Range.getBoundingClientRect() specifies the rectangle that bounds the content of the range using such objects.
It inherits from its parent, DOMRectReadOnly.
Constructor
DOMRect()

Creates a new DOMRect object.

Instance propertiesDOMRect inherits properties from its parent, DOMRectReadOnly. The difference is that they are not read-only anymore.

DOMRect.x

The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).

DOMRect.y

The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).

DOMRect.width

The width of the DOMRect.

DOMRect.height

The height of the DOMRect.

DOMRectReadOnly.top

Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative).

DOMRectReadOnly.right

Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative).

DOMRectReadOnly.bottom

Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative).

DOMRectReadOnly.left

Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative).

Static methodsDOMRect may also inherit static methods from its parent, DOMRectReadOnly.

DOMRect.fromRect()

Creates a new DOMRect object with a given location and dimensions.

Instance methodsDOMRect may inherit methods from its parent, DOMRectReadOnly.SpecificationsSpecificationGeometry Interfaces Module Level 1 # DOMRectBrowser compatibilitySee also
DOMPoint
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Nov 17, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDOMTokenListBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList or HTMLLinkElement.relList, and many others.
A DOMTokenList is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.Instance properties
DOMTokenList.length Read only

An integer representing the number of objects stored in the object.

DOMTokenList.value

A stringifier property that returns the value of the list as a string.

Instance methods
DOMTokenList.item()

Returns the item in the list by its index, or null if the index is greater than or equal to the list's length.

DOMTokenList.contains()

Returns true if the list contains the given token, otherwise false.

DOMTokenList.add()

Adds the specified tokens to the list.

DOMTokenList.remove()

Removes the specified tokens from the list.

DOMTokenList.replace()

Replaces the token with another one.

DOMTokenList.supports()

Returns true if the given token is in the associated attribute's supported tokens.

DOMTokenList.toggle()

Removes the token from the list if it exists, or adds it to the list if it doesn't. Returns a boolean indicating whether the token is in the list after the operation.

DOMTokenList.entries()

Returns an iterator, allowing you to go through all key/value pairs contained in this object.

DOMTokenList.forEach()

Executes a provided callback function once for each DOMTokenList element.

DOMTokenList.keys()

Returns an iterator, allowing you to go through all keys of the key/value pairs contained in this object.

DOMTokenList.toString()

Returns the DOMTokenList.value, the space-separated values of the list as a string.

DOMTokenList.values()

Returns an iterator, allowing you to go through all values of the key/value pairs contained in this object.

ExamplesIn the following simple example, we retrieve the list of classes set on a <p> element as a DOMTokenList using Element.classList, add a class using DOMTokenList.add(), and then update the Node.textContent of the <p> to equal the DOMTokenList.
First, the HTML:
html<p class="a b c"></p>

Now the JavaScript:
jslet para = document.querySelector("p");
let classes = para.classList;
para.classList.add("d");
para.textContent = `paragraph classList is "${classes}"`;

The output looks like this:
Trimming of whitespace and removal of duplicatesMethods that modify the DOMTokenList (such as DOMTokenList.add()) automatically trim any excess Whitespace and remove duplicate values from the list. For example:
html<span class="    d   d e f"></span>

jslet span = document.querySelector("span");
let classes = span.classList;
span.classList.add("x");
span.textContent = `span classList is "${classes}"`;

The output looks like this:
SpecificationsSpecificationDOM # interface-domtokenlistBrowser compatibility\n\nDOMTokenListBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList or HTMLLinkElement.relList, and many others.
A DOMTokenList is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.Instance properties
DOMTokenList.length Read only

An integer representing the number of objects stored in the object.

DOMTokenList.value

A stringifier property that returns the value of the list as a string.

Instance methods
DOMTokenList.item()

Returns the item in the list by its index, or null if the index is greater than or equal to the list's length.

DOMTokenList.contains()

Returns true if the list contains the given token, otherwise false.

DOMTokenList.add()

Adds the specified tokens to the list.

DOMTokenList.remove()

Removes the specified tokens from the list.

DOMTokenList.replace()

Replaces the token with another one.

DOMTokenList.supports()

Returns true if the given token is in the associated attribute's supported tokens.

DOMTokenList.toggle()

Removes the token from the list if it exists, or adds it to the list if it doesn't. Returns a boolean indicating whether the token is in the list after the operation.

DOMTokenList.entries()

Returns an iterator, allowing you to go through all key/value pairs contained in this object.

DOMTokenList.forEach()

Executes a provided callback function once for each DOMTokenList element.

DOMTokenList.keys()

Returns an iterator, allowing you to go through all keys of the key/value pairs contained in this object.

DOMTokenList.toString()

Returns the DOMTokenList.value, the space-separated values of the list as a string.

DOMTokenList.values()

Returns an iterator, allowing you to go through all values of the key/value pairs contained in this object.

ExamplesIn the following simple example, we retrieve the list of classes set on a <p> element as a DOMTokenList using Element.classList, add a class using DOMTokenList.add(), and then update the Node.textContent of the <p> to equal the DOMTokenList.
First, the HTML:
html<p class="a b c"></p>

Now the JavaScript:
jslet para = document.querySelector("p");
let classes = para.classList;
para.classList.add("d");
para.textContent = `paragraph classList is "${classes}"`;

The output looks like this:
Trimming of whitespace and removal of duplicatesMethods that modify the DOMTokenList (such as DOMTokenList.add()) automatically trim any excess Whitespace and remove duplicate values from the list. For example:
html<span class="    d   d e f"></span>

jslet span = document.querySelector("span");
let classes = span.classList;
span.classList.add("x");
span.textContent = `span classList is "${classes}"`;

The output looks like this:
SpecificationsSpecificationDOM # interface-domtokenlistBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 21, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDOMTokenListBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList or HTMLLinkElement.relList, and many others.
A DOMTokenList is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.Instance properties
DOMTokenList.length Read only

An integer representing the number of objects stored in the object.

DOMTokenList.value

A stringifier property that returns the value of the list as a string.

Instance methods
DOMTokenList.item()

Returns the item in the list by its index, or null if the index is greater than or equal to the list's length.

DOMTokenList.contains()

Returns true if the list contains the given token, otherwise false.

DOMTokenList.add()

Adds the specified tokens to the list.

DOMTokenList.remove()

Removes the specified tokens from the list.

DOMTokenList.replace()

Replaces the token with another one.

DOMTokenList.supports()

Returns true if the given token is in the associated attribute's supported tokens.

DOMTokenList.toggle()

Removes the token from the list if it exists, or adds it to the list if it doesn't. Returns a boolean indicating whether the token is in the list after the operation.

DOMTokenList.entries()

Returns an iterator, allowing you to go through all key/value pairs contained in this object.

DOMTokenList.forEach()

Executes a provided callback function once for each DOMTokenList element.

DOMTokenList.keys()

Returns an iterator, allowing you to go through all keys of the key/value pairs contained in this object.

DOMTokenList.toString()

Returns the DOMTokenList.value, the space-separated values of the list as a string.

DOMTokenList.values()

Returns an iterator, allowing you to go through all values of the key/value pairs contained in this object.

ExamplesIn the following simple example, we retrieve the list of classes set on a <p> element as a DOMTokenList using Element.classList, add a class using DOMTokenList.add(), and then update the Node.textContent of the <p> to equal the DOMTokenList.
First, the HTML:
html<p class="a b c"></p>

Now the JavaScript:
jslet para = document.querySelector("p");
let classes = para.classList;
para.classList.add("d");
para.textContent = `paragraph classList is "${classes}"`;

The output looks like this:
Trimming of whitespace and removal of duplicatesMethods that modify the DOMTokenList (such as DOMTokenList.add()) automatically trim any excess Whitespace and remove duplicate values from the list. For example:
html<span class="    d   d e f"></span>

jslet span = document.querySelector("span");
let classes = span.classList;
span.classList.add("x");
span.textContent = `span classList is "${classes}"`;

The output looks like this:
SpecificationsSpecificationDOM # interface-domtokenlistBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 21, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDocumentBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.

The Document interface describes the common properties and methods for any kind of document. Depending on the document's type (e.g., HTML, XML, SVG, …), a larger API is available: HTML documents, served with the "text/html" content type, also implement the HTMLDocument interface, whereas XML and SVG documents implement the XMLDocument interface.Constructor
Document()

Creates a new Document object.

Instance propertiesThis interface also inherits from the Node and EventTarget interfaces.

Document.activeElement Read only

Returns the Element that currently has focus.

Document.adoptedStyleSheets

Add an array of constructed stylesheets to be used by the document.
These stylesheets may also be shared with shadow DOM subtrees of the same document.

Document.body

Returns the <body> or <frameset> node of the current document.

Document.characterSet Read only

Returns the character set being used by the document.

Document.childElementCount Read only

Returns the number of child elements of the current document.

Document.children Read only

Returns the child elements of the current document.

Document.compatMode Read only

Indicates whether the document is rendered in quirks or strict mode.

Document.contentType Read only

Returns the Content-Type from the MIME Header of the current document.

Document.currentScript Read only

Returns the <script> element whose script is currently being processed and isn't a JavaScript module.

Document.doctype Read only

Returns the Document Type Definition (DTD) of the current document.

Document.documentElement Read only

Returns the Element that is a direct child of the document. For HTML documents, this is normally the HTMLHtmlElement object representing the document's <html> element.

Document.documentURI Read only

Returns the document location as a string.

Document.embeds Read only

Returns an HTMLCollection of the embedded <embed> elements in the document.

Document.featurePolicy 
Experimental
 Read only

Returns the FeaturePolicy interface with the feature policies applied to the document.

Document.firstElementChild Read only

Returns the first child element of the current document.

Document.fonts

Returns the FontFaceSet interface of the current document.

Document.forms Read only

Returns an HTMLCollection of the <form> elements in the document.

Document.fragmentDirective Read only

Returns the FragmentDirective for the current document.

Document.fullscreenElement Read only

The element that's currently in full screen mode for this document.

Document.head Read only

Returns the <head> element of the current document.

Document.hidden Read only

Returns a Boolean value indicating if the page is considered hidden or not.

Document.images Read only

Returns an HTMLCollection of the images in the document.

Document.implementation Read only

Returns the DOM implementation associated with the current document.

Document.lastElementChild Read only

Returns the last child element of the current document.

Document.links Read only

Returns an HTMLCollection of the hyperlinks in the document.

Document.pictureInPictureElement Read only

Returns the Element currently being presented in picture-in-picture mode in this document.

Document.pictureInPictureEnabled Read only

Returns true if the picture-in-picture feature is enabled.

Document.plugins Read only

Returns an HTMLCollection of the available plugins.

Document.pointerLockElement Read only

Returns the element set as the target for mouse events while the pointer is locked. null if lock is pending, pointer is unlocked, or if the target is in another document.

Document.prerendering Read only 
Experimental


Returns a boolean that indicates whether the document is currently in the process of prerendering, as initiated via the Speculation Rules API.

Document.scripts Read only

Returns an HTMLCollection of the <script> elements in the document.

Document.scrollingElement Read only

Returns a reference to the Element that scrolls the document.

Document.styleSheets Read only

Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a document.

Document.timeline Read only

Returns timeline as a special instance of DocumentTimeline that is automatically created on page load.

Document.visibilityState Read only

Returns a string denoting the visibility state of the document. Possible values are visible, hidden, prerender, and unloaded.

Extensions for HTMLDocumentThe Document interface for HTML documents inherits from the HTMLDocument interface or is extended for such documents.

Document.cookie

Returns a semicolon-separated list of the cookies for that document or sets a single cookie.

Document.defaultView Read only

Returns a reference to the window object.

Document.designMode

Gets/sets the ability to edit the whole document.

Document.dir

Gets/sets directionality (rtl/ltr) of the document.

Document.fullscreenEnabled Read only

Indicates whether fullscreen mode is available.

Document.lastModified Read only

Returns the date on which the document was last modified.

Document.location Read only

Returns the URI of the current document.

Document.readyState Read only

Returns loading status of the document.

Document.referrer Read only

Returns the URI of the page that linked to this page.

Document.title

Sets or gets the title of the current document.

Document.URL Read only

Returns the document location as a string.

Deprecated properties
Document.alinkColor 
Deprecated


Returns or sets the color of active links in the document body.

Document.all 
Deprecated


Provides access to all elements in the document — it returns an HTMLAllCollection rooted at the document node. This is a legacy, non-standard property and should not be used.

Document.anchors 
Deprecated
 Read only

Returns a list of all of the anchors in the document.

Document.applets 
Deprecated
 Read only

Returns an empty HTMLCollection. Legacy property that used to return the list of applets within a document.

Document.bgColor 
Deprecated


Gets/sets the background color of the current document.

Document.charset 
Deprecated
 Read only

Alias of Document.characterSet. Use this property instead.

Document.domain 
Deprecated


Gets/sets the domain of the current document.

Document.fgColor 
Deprecated


Gets/sets the foreground color, or text color, of the current document.

Document.fullscreen 
Deprecated


Returns true when the document is in fullscreen mode.

Document.inputEncoding 
Deprecated
 Read only

Alias of Document.characterSet. Use this property instead.

Document.lastStyleSheetSet 
Deprecated
 Read only 
Non-standard


Returns the name of the style sheet set that was last enabled. Has the value null until the style sheet is changed by setting the value of selectedStyleSheetSet.

Document.linkColor 
Deprecated


Gets/sets the color of hyperlinks in the document.

Document.preferredStyleSheetSet 
Deprecated
 Read only 
Non-standard


Returns the preferred style sheet set as specified by the page author.

Document.rootElement 
Deprecated


Like Document.documentElement, but only for <svg> root elements. Use this property instead.

Document.selectedStyleSheetSet 
Deprecated
 
Non-standard


Returns which style sheet set is currently in use.

Document.styleSheetSets 
Deprecated
 Read only 
Non-standard


Returns a list of the style sheet sets available on the document.

Document.vlinkColor 
Deprecated


Gets/sets the color of visited hyperlinks.

Document.xmlEncoding 
Deprecated


Returns the encoding as determined by the XML declaration.

Document.xmlStandalone 
Deprecated


Returns true if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else false.

Document.xmlVersion 
Deprecated


Returns the version number as specified in the XML declaration or "1.0" if the declaration is absent.

Instance methodsThis interface also inherits from the Node and EventTarget interfaces.

Document.adoptNode()

Adopt node from an external document.

Document.append()

Inserts a set of Node objects or strings after the last child of the document.

Document.browsingTopics() 
Experimental
 
Non-standard


Returns a promise that fulfills with an array of objects representing the top topics for the user, one from each of the last three epochs. By default, the method also causes the browser to record the current page visit as observed by the caller, so the page's hostname can later be used in topics calculation. See the Topics API for more details.

Document.captureEvents() 
Deprecated


See Window.captureEvents.

Document.caretPositionFromPoint()

Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node.

Document.caretRangeFromPoint() 
Non-standard


Gets a Range object for the document fragment under the specified coordinates.

Document.createAttribute()

Creates a new Attr object and returns it.

Document.createAttributeNS()

Creates a new attribute node in a given namespace and returns it.

Document.createCDATASection()

Creates a new CDATA node and returns it.

Document.createComment()

Creates a new comment node and returns it.

Document.createDocumentFragment()

Creates a new document fragment.

Document.createElement()

Creates a new element with the given tag name.

Document.createElementNS()

Creates a new element with the given tag name and namespace URI.

Document.createEvent() 
Deprecated


Creates an event object.

Document.createNodeIterator()

Creates a NodeIterator object.

Document.createProcessingInstruction()

Creates a new ProcessingInstruction object.

Document.createRange()

Creates a Range object.

Document.createTextNode()

Creates a text node.

Document.createTouch() 
Deprecated
 
Non-standard


Creates a Touch object.

Document.createTouchList() 
Deprecated
 
Non-standard


Creates a TouchList object.

Document.createTreeWalker()

Creates a TreeWalker object.

Document.elementFromPoint()

Returns the topmost element at the specified coordinates.

Document.elementsFromPoint()

Returns an array of all elements at the specified coordinates.

Document.enableStyleSheetsForSet() 
Deprecated
 
Non-standard


Enables the style sheets for the specified style sheet set.

Document.exitFullscreen()

Stops document's fullscreen element from being displayed fullscreen.

Document.exitPictureInPicture()

Remove the video from the floating picture-in-picture window back to its original container.

Document.exitPointerLock()

Release the pointer lock.

Document.getAnimations()

Returns an array of all Animation objects currently in effect, whose target elements are descendants of the document.

Document.getBoxQuads() 
Experimental


Returns a list of DOMQuad objects representing the CSS fragments of the node.

Document.getElementById()

Returns an object reference to the identified element.

Document.getElementsByClassName()

Returns a list of elements with the given class name.

Document.getElementsByTagName()

Returns a list of elements with the given tag name.

Document.getElementsByTagNameNS()

Returns a list of elements with the given tag name and namespace.

Document.getSelection()

Returns a Selection object representing the range of text selected by the user, or the current position of the caret.

Document.hasStorageAccess()

Returns a Promise that resolves with a boolean value indicating whether the document has access to unpartitioned cookies.

Document.hasUnpartitionedCookieAccess()

New name for Document.hasStorageAccess().

Document.importNode()

Returns a clone of a node from an external document.

Document.moveBefore() 
Experimental


Moves a given Node inside the Document DOM node as a direct child, before a given reference node, without removing and then inserting the node.

Document.mozSetImageElement() 
Non-standard


Allows you to change the element being used as the background image for a specified element ID.

Document.prepend()

Inserts a set of Node objects or strings before the first child of the document.

Document.querySelector()

Returns the first Element node within the document, in document order, that matches the specified selectors.

Document.querySelectorAll()

Returns a list of all the Element nodes within the document that match the specified selectors.

Document.releaseCapture() 
Non-standard


Releases the current mouse capture if it's on an element in this document.

Document.releaseEvents() 
Deprecated


See Window.releaseEvents().

Document.replaceChildren()

Replaces the existing children of a document with a specified new set of children.

Document.requestStorageAccess()

Allows a document loaded in a third-party context (i.e., embedded in an <iframe>) to request access to unpartitioned cookies, in cases where user agents by default block access to unpartitioned cookies by sites loaded in a third-party context to improve privacy.

Document.requestStorageAccessFor() 
Experimental


Allows top-level sites to request third-party cookie access on behalf of embedded content originating from another site in the same related website set.

Document.startViewTransition()

Starts a new view transition and returns a ViewTransition object to represent it.


The Document interface is extended with the XPathEvaluator interface:

Document.createExpression()

Compiles an XPathExpression which can then be used for (repeated) evaluations.

Document.createNSResolver() 
Deprecated


Returns the input node as-is.

Document.evaluate()

Evaluates an XPath expression.

Extension for HTML documentsThe Document interface for HTML documents inherit from the HTMLDocument interface or is extended for such documents:

Document.clear() 
Deprecated


This method does nothing.

Document.close()

Closes a document stream for writing.

Document.execCommand() 
Deprecated


On an editable document, executes a formatting command.

Document.getElementsByName()

Returns a list of elements with the given name.

Document.hasFocus()

Returns true if the focus is currently located anywhere inside the specified document.

Document.open()

Opens a document stream for writing.

Document.queryCommandEnabled() 
Deprecated
 
Non-standard


Returns true if the formatting command can be executed on the current range.

Document.queryCommandIndeterm() 
Deprecated


Returns true if the formatting command is in an indeterminate state on the current range.

Document.queryCommandState() 
Deprecated
 
Non-standard


Returns true if the formatting command has been executed on the current range.

Document.queryCommandSupported() 
Deprecated
 
Non-standard


Returns true if the formatting command is supported on the current range.

Document.queryCommandValue() 
Deprecated


Returns the current value of the current range for a formatting command.

Document.write() 
Deprecated


Writes text in a document.

Document.writeln()

Writes a line of text in a document.

Static methodsThis interface also inherits from the Node and EventTarget interfaces.

Document.parseHTMLUnsafe()

Creates a new Document object from a string of HTML without performing sanitization.
The string may contain declarative shadow roots.

EventsListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface. In addition to the events listed below, many events can bubble from nodes contained in the document tree.

afterscriptexecute 
Non-standard
 
Deprecated


Fired when a static <script> element finishes executing its script

beforescriptexecute 
Non-standard
 
Deprecated


Fired when a static <script> is about to start executing.

prerenderingchange 
Experimental


Fired on a prerendered document when it is activated (i.e., the user views the page).

securitypolicyviolation

Fired when a content security policy is violated.

visibilitychange

Fired when the content of a tab has become visible or has been hidden.

Clipboard events
copy

Fired when the user initiates a copy action through the browser's user interface.

cut

Fired when the user initiates a cut action through the browser's user interface.

paste

Fired when the user initiates a paste action through the browser's user interface.

Fullscreen events
fullscreenchange

Fired when the Document transitions into or out of fullscreen mode.

fullscreenerror

Fired if an error occurs while attempting to switch into or out of fullscreen mode.

Load & unload events
DOMContentLoaded

Fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.

readystatechange

Fired when the readyState attribute of a document has changed.

Pointer lock events
pointerlockchange

Fired when the pointer is locked/unlocked.

pointerlockerror

Fired when locking the pointer failed.

Scroll events
scroll

Fired when the document view or an element has been scrolled.

scrollend

Fired when the document view or an element has completed scrolling.

scrollsnapchange 
Experimental


Fired on the scroll container at the end of a scrolling operation when a new scroll snap target has been selected.

scrollsnapchanging 
Experimental


Fired on the scroll container when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.

Selection events
selectionchange

Fired when the current text selection on a document is changed.

Bubbled eventsNot all events that bubble can reach the Document object. Only the following do and can be listened for on the Document object:

abort
auxclick
beforeinput
beforematch
beforetoggle
blur
cancel
canplay
canplaythrough
change
click
close
contextlost
contextmenu
contextrestored
copy
cuechange
cut
dblclick
drag
dragend
dragenter
dragleave
dragover
dragstart
drop
durationchange
emptied
ended
error
focus
formdata
input
invalid
keydown
keypress
keyup
load
loadeddata
loadedmetadata
loadstart
mousedown
mouseenter
mouseleave
mousemove
mouseout
mouseover
mouseup
paste
pause
play
playing
progress
ratechange
reset
resize
scroll
scrollend
securitypolicyviolation
seeked
seeking
select
slotchange
stalled
submit
suspend
timeupdate
toggle
volumechange
waiting
wheel
SpecificationsSpecificationDOM # interface-documentHTML # the-document-objectCSSOM View Module # extensions-to-the-document-interfacePointer Lock 2.0 # extensions-to-the-document-interfaceSelection API # extensions-to-document-interfaceBrowser compatibility\n\nDocumentBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.

The Document interface describes the common properties and methods for any kind of document. Depending on the document's type (e.g., HTML, XML, SVG, …), a larger API is available: HTML documents, served with the "text/html" content type, also implement the HTMLDocument interface, whereas XML and SVG documents implement the XMLDocument interface.Constructor
Document()

Creates a new Document object.

Instance propertiesThis interface also inherits from the Node and EventTarget interfaces.

Document.activeElement Read only

Returns the Element that currently has focus.

Document.adoptedStyleSheets

Add an array of constructed stylesheets to be used by the document.
These stylesheets may also be shared with shadow DOM subtrees of the same document.

Document.body

Returns the <body> or <frameset> node of the current document.

Document.characterSet Read only

Returns the character set being used by the document.

Document.childElementCount Read only

Returns the number of child elements of the current document.

Document.children Read only

Returns the child elements of the current document.

Document.compatMode Read only

Indicates whether the document is rendered in quirks or strict mode.

Document.contentType Read only

Returns the Content-Type from the MIME Header of the current document.

Document.currentScript Read only

Returns the <script> element whose script is currently being processed and isn't a JavaScript module.

Document.doctype Read only

Returns the Document Type Definition (DTD) of the current document.

Document.documentElement Read only

Returns the Element that is a direct child of the document. For HTML documents, this is normally the HTMLHtmlElement object representing the document's <html> element.

Document.documentURI Read only

Returns the document location as a string.

Document.embeds Read only

Returns an HTMLCollection of the embedded <embed> elements in the document.

Document.featurePolicy 
Experimental
 Read only

Returns the FeaturePolicy interface with the feature policies applied to the document.

Document.firstElementChild Read only

Returns the first child element of the current document.

Document.fonts

Returns the FontFaceSet interface of the current document.

Document.forms Read only

Returns an HTMLCollection of the <form> elements in the document.

Document.fragmentDirective Read only

Returns the FragmentDirective for the current document.

Document.fullscreenElement Read only

The element that's currently in full screen mode for this document.

Document.head Read only

Returns the <head> element of the current document.

Document.hidden Read only

Returns a Boolean value indicating if the page is considered hidden or not.

Document.images Read only

Returns an HTMLCollection of the images in the document.

Document.implementation Read only

Returns the DOM implementation associated with the current document.

Document.lastElementChild Read only

Returns the last child element of the current document.

Document.links Read only

Returns an HTMLCollection of the hyperlinks in the document.

Document.pictureInPictureElement Read only

Returns the Element currently being presented in picture-in-picture mode in this document.

Document.pictureInPictureEnabled Read only

Returns true if the picture-in-picture feature is enabled.

Document.plugins Read only

Returns an HTMLCollection of the available plugins.

Document.pointerLockElement Read only

Returns the element set as the target for mouse events while the pointer is locked. null if lock is pending, pointer is unlocked, or if the target is in another document.

Document.prerendering Read only 
Experimental


Returns a boolean that indicates whether the document is currently in the process of prerendering, as initiated via the Speculation Rules API.

Document.scripts Read only

Returns an HTMLCollection of the <script> elements in the document.

Document.scrollingElement Read only

Returns a reference to the Element that scrolls the document.

Document.styleSheets Read only

Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a document.

Document.timeline Read only

Returns timeline as a special instance of DocumentTimeline that is automatically created on page load.

Document.visibilityState Read only

Returns a string denoting the visibility state of the document. Possible values are visible, hidden, prerender, and unloaded.

Extensions for HTMLDocumentThe Document interface for HTML documents inherits from the HTMLDocument interface or is extended for such documents.

Document.cookie

Returns a semicolon-separated list of the cookies for that document or sets a single cookie.

Document.defaultView Read only

Returns a reference to the window object.

Document.designMode

Gets/sets the ability to edit the whole document.

Document.dir

Gets/sets directionality (rtl/ltr) of the document.

Document.fullscreenEnabled Read only

Indicates whether fullscreen mode is available.

Document.lastModified Read only

Returns the date on which the document was last modified.

Document.location Read only

Returns the URI of the current document.

Document.readyState Read only

Returns loading status of the document.

Document.referrer Read only

Returns the URI of the page that linked to this page.

Document.title

Sets or gets the title of the current document.

Document.URL Read only

Returns the document location as a string.

Deprecated properties
Document.alinkColor 
Deprecated


Returns or sets the color of active links in the document body.

Document.all 
Deprecated


Provides access to all elements in the document — it returns an HTMLAllCollection rooted at the document node. This is a legacy, non-standard property and should not be used.

Document.anchors 
Deprecated
 Read only

Returns a list of all of the anchors in the document.

Document.applets 
Deprecated
 Read only

Returns an empty HTMLCollection. Legacy property that used to return the list of applets within a document.

Document.bgColor 
Deprecated


Gets/sets the background color of the current document.

Document.charset 
Deprecated
 Read only

Alias of Document.characterSet. Use this property instead.

Document.domain 
Deprecated


Gets/sets the domain of the current document.

Document.fgColor 
Deprecated


Gets/sets the foreground color, or text color, of the current document.

Document.fullscreen 
Deprecated


Returns true when the document is in fullscreen mode.

Document.inputEncoding 
Deprecated
 Read only

Alias of Document.characterSet. Use this property instead.

Document.lastStyleSheetSet 
Deprecated
 Read only 
Non-standard


Returns the name of the style sheet set that was last enabled. Has the value null until the style sheet is changed by setting the value of selectedStyleSheetSet.

Document.linkColor 
Deprecated


Gets/sets the color of hyperlinks in the document.

Document.preferredStyleSheetSet 
Deprecated
 Read only 
Non-standard


Returns the preferred style sheet set as specified by the page author.

Document.rootElement 
Deprecated


Like Document.documentElement, but only for <svg> root elements. Use this property instead.

Document.selectedStyleSheetSet 
Deprecated
 
Non-standard


Returns which style sheet set is currently in use.

Document.styleSheetSets 
Deprecated
 Read only 
Non-standard


Returns a list of the style sheet sets available on the document.

Document.vlinkColor 
Deprecated


Gets/sets the color of visited hyperlinks.

Document.xmlEncoding 
Deprecated


Returns the encoding as determined by the XML declaration.

Document.xmlStandalone 
Deprecated


Returns true if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else false.

Document.xmlVersion 
Deprecated


Returns the version number as specified in the XML declaration or "1.0" if the declaration is absent.

Instance methodsThis interface also inherits from the Node and EventTarget interfaces.

Document.adoptNode()

Adopt node from an external document.

Document.append()

Inserts a set of Node objects or strings after the last child of the document.

Document.browsingTopics() 
Experimental
 
Non-standard


Returns a promise that fulfills with an array of objects representing the top topics for the user, one from each of the last three epochs. By default, the method also causes the browser to record the current page visit as observed by the caller, so the page's hostname can later be used in topics calculation. See the Topics API for more details.

Document.captureEvents() 
Deprecated


See Window.captureEvents.

Document.caretPositionFromPoint()

Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node.

Document.caretRangeFromPoint() 
Non-standard


Gets a Range object for the document fragment under the specified coordinates.

Document.createAttribute()

Creates a new Attr object and returns it.

Document.createAttributeNS()

Creates a new attribute node in a given namespace and returns it.

Document.createCDATASection()

Creates a new CDATA node and returns it.

Document.createComment()

Creates a new comment node and returns it.

Document.createDocumentFragment()

Creates a new document fragment.

Document.createElement()

Creates a new element with the given tag name.

Document.createElementNS()

Creates a new element with the given tag name and namespace URI.

Document.createEvent() 
Deprecated


Creates an event object.

Document.createNodeIterator()

Creates a NodeIterator object.

Document.createProcessingInstruction()

Creates a new ProcessingInstruction object.

Document.createRange()

Creates a Range object.

Document.createTextNode()

Creates a text node.

Document.createTouch() 
Deprecated
 
Non-standard


Creates a Touch object.

Document.createTouchList() 
Deprecated
 
Non-standard


Creates a TouchList object.

Document.createTreeWalker()

Creates a TreeWalker object.

Document.elementFromPoint()

Returns the topmost element at the specified coordinates.

Document.elementsFromPoint()

Returns an array of all elements at the specified coordinates.

Document.enableStyleSheetsForSet() 
Deprecated
 
Non-standard


Enables the style sheets for the specified style sheet set.

Document.exitFullscreen()

Stops document's fullscreen element from being displayed fullscreen.

Document.exitPictureInPicture()

Remove the video from the floating picture-in-picture window back to its original container.

Document.exitPointerLock()

Release the pointer lock.

Document.getAnimations()

Returns an array of all Animation objects currently in effect, whose target elements are descendants of the document.

Document.getBoxQuads() 
Experimental


Returns a list of DOMQuad objects representing the CSS fragments of the node.

Document.getElementById()

Returns an object reference to the identified element.

Document.getElementsByClassName()

Returns a list of elements with the given class name.

Document.getElementsByTagName()

Returns a list of elements with the given tag name.

Document.getElementsByTagNameNS()

Returns a list of elements with the given tag name and namespace.

Document.getSelection()

Returns a Selection object representing the range of text selected by the user, or the current position of the caret.

Document.hasStorageAccess()

Returns a Promise that resolves with a boolean value indicating whether the document has access to unpartitioned cookies.

Document.hasUnpartitionedCookieAccess()

New name for Document.hasStorageAccess().

Document.importNode()

Returns a clone of a node from an external document.

Document.moveBefore() 
Experimental


Moves a given Node inside the Document DOM node as a direct child, before a given reference node, without removing and then inserting the node.

Document.mozSetImageElement() 
Non-standard


Allows you to change the element being used as the background image for a specified element ID.

Document.prepend()

Inserts a set of Node objects or strings before the first child of the document.

Document.querySelector()

Returns the first Element node within the document, in document order, that matches the specified selectors.

Document.querySelectorAll()

Returns a list of all the Element nodes within the document that match the specified selectors.

Document.releaseCapture() 
Non-standard


Releases the current mouse capture if it's on an element in this document.

Document.releaseEvents() 
Deprecated


See Window.releaseEvents().

Document.replaceChildren()

Replaces the existing children of a document with a specified new set of children.

Document.requestStorageAccess()

Allows a document loaded in a third-party context (i.e., embedded in an <iframe>) to request access to unpartitioned cookies, in cases where user agents by default block access to unpartitioned cookies by sites loaded in a third-party context to improve privacy.

Document.requestStorageAccessFor() 
Experimental


Allows top-level sites to request third-party cookie access on behalf of embedded content originating from another site in the same related website set.

Document.startViewTransition()

Starts a new view transition and returns a ViewTransition object to represent it.


The Document interface is extended with the XPathEvaluator interface:

Document.createExpression()

Compiles an XPathExpression which can then be used for (repeated) evaluations.

Document.createNSResolver() 
Deprecated


Returns the input node as-is.

Document.evaluate()

Evaluates an XPath expression.

Extension for HTML documentsThe Document interface for HTML documents inherit from the HTMLDocument interface or is extended for such documents:

Document.clear() 
Deprecated


This method does nothing.

Document.close()

Closes a document stream for writing.

Document.execCommand() 
Deprecated


On an editable document, executes a formatting command.

Document.getElementsByName()

Returns a list of elements with the given name.

Document.hasFocus()

Returns true if the focus is currently located anywhere inside the specified document.

Document.open()

Opens a document stream for writing.

Document.queryCommandEnabled() 
Deprecated
 
Non-standard


Returns true if the formatting command can be executed on the current range.

Document.queryCommandIndeterm() 
Deprecated


Returns true if the formatting command is in an indeterminate state on the current range.

Document.queryCommandState() 
Deprecated
 
Non-standard


Returns true if the formatting command has been executed on the current range.

Document.queryCommandSupported() 
Deprecated
 
Non-standard


Returns true if the formatting command is supported on the current range.

Document.queryCommandValue() 
Deprecated


Returns the current value of the current range for a formatting command.

Document.write() 
Deprecated


Writes text in a document.

Document.writeln()

Writes a line of text in a document.

Static methodsThis interface also inherits from the Node and EventTarget interfaces.

Document.parseHTMLUnsafe()

Creates a new Document object from a string of HTML without performing sanitization.
The string may contain declarative shadow roots.

EventsListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface. In addition to the events listed below, many events can bubble from nodes contained in the document tree.

afterscriptexecute 
Non-standard
 
Deprecated


Fired when a static <script> element finishes executing its script

beforescriptexecute 
Non-standard
 
Deprecated


Fired when a static <script> is about to start executing.

prerenderingchange 
Experimental


Fired on a prerendered document when it is activated (i.e., the user views the page).

securitypolicyviolation

Fired when a content security policy is violated.

visibilitychange

Fired when the content of a tab has become visible or has been hidden.

Clipboard events
copy

Fired when the user initiates a copy action through the browser's user interface.

cut

Fired when the user initiates a cut action through the browser's user interface.

paste

Fired when the user initiates a paste action through the browser's user interface.

Fullscreen events
fullscreenchange

Fired when the Document transitions into or out of fullscreen mode.

fullscreenerror

Fired if an error occurs while attempting to switch into or out of fullscreen mode.

Load & unload events
DOMContentLoaded

Fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.

readystatechange

Fired when the readyState attribute of a document has changed.

Pointer lock events
pointerlockchange

Fired when the pointer is locked/unlocked.

pointerlockerror

Fired when locking the pointer failed.

Scroll events
scroll

Fired when the document view or an element has been scrolled.

scrollend

Fired when the document view or an element has completed scrolling.

scrollsnapchange 
Experimental


Fired on the scroll container at the end of a scrolling operation when a new scroll snap target has been selected.

scrollsnapchanging 
Experimental


Fired on the scroll container when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.

Selection events
selectionchange

Fired when the current text selection on a document is changed.

Bubbled eventsNot all events that bubble can reach the Document object. Only the following do and can be listened for on the Document object:

abort
auxclick
beforeinput
beforematch
beforetoggle
blur
cancel
canplay
canplaythrough
change
click
close
contextlost
contextmenu
contextrestored
copy
cuechange
cut
dblclick
drag
dragend
dragenter
dragleave
dragover
dragstart
drop
durationchange
emptied
ended
error
focus
formdata
input
invalid
keydown
keypress
keyup
load
loadeddata
loadedmetadata
loadstart
mousedown
mouseenter
mouseleave
mousemove
mouseout
mouseover
mouseup
paste
pause
play
playing
progress
ratechange
reset
resize
scroll
scrollend
securitypolicyviolation
seeked
seeking
select
slotchange
stalled
submit
suspend
timeupdate
toggle
volumechange
waiting
wheel
SpecificationsSpecificationDOM # interface-documentHTML # the-document-objectCSSOM View Module # extensions-to-the-document-interfacePointer Lock 2.0 # extensions-to-the-document-interfaceSelection API # extensions-to-document-interfaceBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 18, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDocumentBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.

The Document interface describes the common properties and methods for any kind of document. Depending on the document's type (e.g., HTML, XML, SVG, …), a larger API is available: HTML documents, served with the "text/html" content type, also implement the HTMLDocument interface, whereas XML and SVG documents implement the XMLDocument interface.Constructor
Document()

Creates a new Document object.

Instance propertiesThis interface also inherits from the Node and EventTarget interfaces.

Document.activeElement Read only

Returns the Element that currently has focus.

Document.adoptedStyleSheets

Add an array of constructed stylesheets to be used by the document.
These stylesheets may also be shared with shadow DOM subtrees of the same document.

Document.body

Returns the <body> or <frameset> node of the current document.

Document.characterSet Read only

Returns the character set being used by the document.

Document.childElementCount Read only

Returns the number of child elements of the current document.

Document.children Read only

Returns the child elements of the current document.

Document.compatMode Read only

Indicates whether the document is rendered in quirks or strict mode.

Document.contentType Read only

Returns the Content-Type from the MIME Header of the current document.

Document.currentScript Read only

Returns the <script> element whose script is currently being processed and isn't a JavaScript module.

Document.doctype Read only

Returns the Document Type Definition (DTD) of the current document.

Document.documentElement Read only

Returns the Element that is a direct child of the document. For HTML documents, this is normally the HTMLHtmlElement object representing the document's <html> element.

Document.documentURI Read only

Returns the document location as a string.

Document.embeds Read only

Returns an HTMLCollection of the embedded <embed> elements in the document.

Document.featurePolicy 
Experimental
 Read only

Returns the FeaturePolicy interface with the feature policies applied to the document.

Document.firstElementChild Read only

Returns the first child element of the current document.

Document.fonts

Returns the FontFaceSet interface of the current document.

Document.forms Read only

Returns an HTMLCollection of the <form> elements in the document.

Document.fragmentDirective Read only

Returns the FragmentDirective for the current document.

Document.fullscreenElement Read only

The element that's currently in full screen mode for this document.

Document.head Read only

Returns the <head> element of the current document.

Document.hidden Read only

Returns a Boolean value indicating if the page is considered hidden or not.

Document.images Read only

Returns an HTMLCollection of the images in the document.

Document.implementation Read only

Returns the DOM implementation associated with the current document.

Document.lastElementChild Read only

Returns the last child element of the current document.

Document.links Read only

Returns an HTMLCollection of the hyperlinks in the document.

Document.pictureInPictureElement Read only

Returns the Element currently being presented in picture-in-picture mode in this document.

Document.pictureInPictureEnabled Read only

Returns true if the picture-in-picture feature is enabled.

Document.plugins Read only

Returns an HTMLCollection of the available plugins.

Document.pointerLockElement Read only

Returns the element set as the target for mouse events while the pointer is locked. null if lock is pending, pointer is unlocked, or if the target is in another document.

Document.prerendering Read only 
Experimental


Returns a boolean that indicates whether the document is currently in the process of prerendering, as initiated via the Speculation Rules API.

Document.scripts Read only

Returns an HTMLCollection of the <script> elements in the document.

Document.scrollingElement Read only

Returns a reference to the Element that scrolls the document.

Document.styleSheets Read only

Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a document.

Document.timeline Read only

Returns timeline as a special instance of DocumentTimeline that is automatically created on page load.

Document.visibilityState Read only

Returns a string denoting the visibility state of the document. Possible values are visible, hidden, prerender, and unloaded.

Extensions for HTMLDocumentThe Document interface for HTML documents inherits from the HTMLDocument interface or is extended for such documents.

Document.cookie

Returns a semicolon-separated list of the cookies for that document or sets a single cookie.

Document.defaultView Read only

Returns a reference to the window object.

Document.designMode

Gets/sets the ability to edit the whole document.

Document.dir

Gets/sets directionality (rtl/ltr) of the document.

Document.fullscreenEnabled Read only

Indicates whether fullscreen mode is available.

Document.lastModified Read only

Returns the date on which the document was last modified.

Document.location Read only

Returns the URI of the current document.

Document.readyState Read only

Returns loading status of the document.

Document.referrer Read only

Returns the URI of the page that linked to this page.

Document.title

Sets or gets the title of the current document.

Document.URL Read only

Returns the document location as a string.

Deprecated properties
Document.alinkColor 
Deprecated


Returns or sets the color of active links in the document body.

Document.all 
Deprecated


Provides access to all elements in the document — it returns an HTMLAllCollection rooted at the document node. This is a legacy, non-standard property and should not be used.

Document.anchors 
Deprecated
 Read only

Returns a list of all of the anchors in the document.

Document.applets 
Deprecated
 Read only

Returns an empty HTMLCollection. Legacy property that used to return the list of applets within a document.

Document.bgColor 
Deprecated


Gets/sets the background color of the current document.

Document.charset 
Deprecated
 Read only

Alias of Document.characterSet. Use this property instead.

Document.domain 
Deprecated


Gets/sets the domain of the current document.

Document.fgColor 
Deprecated


Gets/sets the foreground color, or text color, of the current document.

Document.fullscreen 
Deprecated


Returns true when the document is in fullscreen mode.

Document.inputEncoding 
Deprecated
 Read only

Alias of Document.characterSet. Use this property instead.

Document.lastStyleSheetSet 
Deprecated
 Read only 
Non-standard


Returns the name of the style sheet set that was last enabled. Has the value null until the style sheet is changed by setting the value of selectedStyleSheetSet.

Document.linkColor 
Deprecated


Gets/sets the color of hyperlinks in the document.

Document.preferredStyleSheetSet 
Deprecated
 Read only 
Non-standard


Returns the preferred style sheet set as specified by the page author.

Document.rootElement 
Deprecated


Like Document.documentElement, but only for <svg> root elements. Use this property instead.

Document.selectedStyleSheetSet 
Deprecated
 
Non-standard


Returns which style sheet set is currently in use.

Document.styleSheetSets 
Deprecated
 Read only 
Non-standard


Returns a list of the style sheet sets available on the document.

Document.vlinkColor 
Deprecated


Gets/sets the color of visited hyperlinks.

Document.xmlEncoding 
Deprecated


Returns the encoding as determined by the XML declaration.

Document.xmlStandalone 
Deprecated


Returns true if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else false.

Document.xmlVersion 
Deprecated


Returns the version number as specified in the XML declaration or "1.0" if the declaration is absent.

Instance methodsThis interface also inherits from the Node and EventTarget interfaces.

Document.adoptNode()

Adopt node from an external document.

Document.append()

Inserts a set of Node objects or strings after the last child of the document.

Document.browsingTopics() 
Experimental
 
Non-standard


Returns a promise that fulfills with an array of objects representing the top topics for the user, one from each of the last three epochs. By default, the method also causes the browser to record the current page visit as observed by the caller, so the page's hostname can later be used in topics calculation. See the Topics API for more details.

Document.captureEvents() 
Deprecated


See Window.captureEvents.

Document.caretPositionFromPoint()

Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node.

Document.caretRangeFromPoint() 
Non-standard


Gets a Range object for the document fragment under the specified coordinates.

Document.createAttribute()

Creates a new Attr object and returns it.

Document.createAttributeNS()

Creates a new attribute node in a given namespace and returns it.

Document.createCDATASection()

Creates a new CDATA node and returns it.

Document.createComment()

Creates a new comment node and returns it.

Document.createDocumentFragment()

Creates a new document fragment.

Document.createElement()

Creates a new element with the given tag name.

Document.createElementNS()

Creates a new element with the given tag name and namespace URI.

Document.createEvent() 
Deprecated


Creates an event object.

Document.createNodeIterator()

Creates a NodeIterator object.

Document.createProcessingInstruction()

Creates a new ProcessingInstruction object.

Document.createRange()

Creates a Range object.

Document.createTextNode()

Creates a text node.

Document.createTouch() 
Deprecated
 
Non-standard


Creates a Touch object.

Document.createTouchList() 
Deprecated
 
Non-standard


Creates a TouchList object.

Document.createTreeWalker()

Creates a TreeWalker object.

Document.elementFromPoint()

Returns the topmost element at the specified coordinates.

Document.elementsFromPoint()

Returns an array of all elements at the specified coordinates.

Document.enableStyleSheetsForSet() 
Deprecated
 
Non-standard


Enables the style sheets for the specified style sheet set.

Document.exitFullscreen()

Stops document's fullscreen element from being displayed fullscreen.

Document.exitPictureInPicture()

Remove the video from the floating picture-in-picture window back to its original container.

Document.exitPointerLock()

Release the pointer lock.

Document.getAnimations()

Returns an array of all Animation objects currently in effect, whose target elements are descendants of the document.

Document.getBoxQuads() 
Experimental


Returns a list of DOMQuad objects representing the CSS fragments of the node.

Document.getElementById()

Returns an object reference to the identified element.

Document.getElementsByClassName()

Returns a list of elements with the given class name.

Document.getElementsByTagName()

Returns a list of elements with the given tag name.

Document.getElementsByTagNameNS()

Returns a list of elements with the given tag name and namespace.

Document.getSelection()

Returns a Selection object representing the range of text selected by the user, or the current position of the caret.

Document.hasStorageAccess()

Returns a Promise that resolves with a boolean value indicating whether the document has access to unpartitioned cookies.

Document.hasUnpartitionedCookieAccess()

New name for Document.hasStorageAccess().

Document.importNode()

Returns a clone of a node from an external document.

Document.moveBefore() 
Experimental


Moves a given Node inside the Document DOM node as a direct child, before a given reference node, without removing and then inserting the node.

Document.mozSetImageElement() 
Non-standard


Allows you to change the element being used as the background image for a specified element ID.

Document.prepend()

Inserts a set of Node objects or strings before the first child of the document.

Document.querySelector()

Returns the first Element node within the document, in document order, that matches the specified selectors.

Document.querySelectorAll()

Returns a list of all the Element nodes within the document that match the specified selectors.

Document.releaseCapture() 
Non-standard


Releases the current mouse capture if it's on an element in this document.

Document.releaseEvents() 
Deprecated


See Window.releaseEvents().

Document.replaceChildren()

Replaces the existing children of a document with a specified new set of children.

Document.requestStorageAccess()

Allows a document loaded in a third-party context (i.e., embedded in an <iframe>) to request access to unpartitioned cookies, in cases where user agents by default block access to unpartitioned cookies by sites loaded in a third-party context to improve privacy.

Document.requestStorageAccessFor() 
Experimental


Allows top-level sites to request third-party cookie access on behalf of embedded content originating from another site in the same related website set.

Document.startViewTransition()

Starts a new view transition and returns a ViewTransition object to represent it.


The Document interface is extended with the XPathEvaluator interface:

Document.createExpression()

Compiles an XPathExpression which can then be used for (repeated) evaluations.

Document.createNSResolver() 
Deprecated


Returns the input node as-is.

Document.evaluate()

Evaluates an XPath expression.

Extension for HTML documentsThe Document interface for HTML documents inherit from the HTMLDocument interface or is extended for such documents:

Document.clear() 
Deprecated


This method does nothing.

Document.close()

Closes a document stream for writing.

Document.execCommand() 
Deprecated


On an editable document, executes a formatting command.

Document.getElementsByName()

Returns a list of elements with the given name.

Document.hasFocus()

Returns true if the focus is currently located anywhere inside the specified document.

Document.open()

Opens a document stream for writing.

Document.queryCommandEnabled() 
Deprecated
 
Non-standard


Returns true if the formatting command can be executed on the current range.

Document.queryCommandIndeterm() 
Deprecated


Returns true if the formatting command is in an indeterminate state on the current range.

Document.queryCommandState() 
Deprecated
 
Non-standard


Returns true if the formatting command has been executed on the current range.

Document.queryCommandSupported() 
Deprecated
 
Non-standard


Returns true if the formatting command is supported on the current range.

Document.queryCommandValue() 
Deprecated


Returns the current value of the current range for a formatting command.

Document.write() 
Deprecated


Writes text in a document.

Document.writeln()

Writes a line of text in a document.

Static methodsThis interface also inherits from the Node and EventTarget interfaces.

Document.parseHTMLUnsafe()

Creates a new Document object from a string of HTML without performing sanitization.
The string may contain declarative shadow roots.

EventsListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface. In addition to the events listed below, many events can bubble from nodes contained in the document tree.

afterscriptexecute 
Non-standard
 
Deprecated


Fired when a static <script> element finishes executing its script

beforescriptexecute 
Non-standard
 
Deprecated


Fired when a static <script> is about to start executing.

prerenderingchange 
Experimental


Fired on a prerendered document when it is activated (i.e., the user views the page).

securitypolicyviolation

Fired when a content security policy is violated.

visibilitychange

Fired when the content of a tab has become visible or has been hidden.

Clipboard events
copy

Fired when the user initiates a copy action through the browser's user interface.

cut

Fired when the user initiates a cut action through the browser's user interface.

paste

Fired when the user initiates a paste action through the browser's user interface.

Fullscreen events
fullscreenchange

Fired when the Document transitions into or out of fullscreen mode.

fullscreenerror

Fired if an error occurs while attempting to switch into or out of fullscreen mode.

Load & unload events
DOMContentLoaded

Fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.

readystatechange

Fired when the readyState attribute of a document has changed.

Pointer lock events
pointerlockchange

Fired when the pointer is locked/unlocked.

pointerlockerror

Fired when locking the pointer failed.

Scroll events
scroll

Fired when the document view or an element has been scrolled.

scrollend

Fired when the document view or an element has completed scrolling.

scrollsnapchange 
Experimental


Fired on the scroll container at the end of a scrolling operation when a new scroll snap target has been selected.

scrollsnapchanging 
Experimental


Fired on the scroll container when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.

Selection events
selectionchange

Fired when the current text selection on a document is changed.

Bubbled eventsNot all events that bubble can reach the Document object. Only the following do and can be listened for on the Document object:

abort
auxclick
beforeinput
beforematch
beforetoggle
blur
cancel
canplay
canplaythrough
change
click
close
contextlost
contextmenu
contextrestored
copy
cuechange
cut
dblclick
drag
dragend
dragenter
dragleave
dragover
dragstart
drop
durationchange
emptied
ended
error
focus
formdata
input
invalid
keydown
keypress
keyup
load
loadeddata
loadedmetadata
loadstart
mousedown
mouseenter
mouseleave
mousemove
mouseout
mouseover
mouseup
paste
pause
play
playing
progress
ratechange
reset
resize
scroll
scrollend
securitypolicyviolation
seeked
seeking
select
slotchange
stalled
submit
suspend
timeupdate
toggle
volumechange
waiting
wheel
SpecificationsSpecificationDOM # interface-documentHTML # the-document-objectCSSOM View Module # extensions-to-the-document-interfacePointer Lock 2.0 # extensions-to-the-document-interfaceSelection API # extensions-to-document-interfaceBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 18, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDocumentFragmentBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe DocumentFragment interface represents a minimal document object that has no parent.
It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document.
Constructor
DocumentFragment()

Creates and returns a new DocumentFragment object.

Instance propertiesThis interface has no specific properties, but inherits those of its parent, Node.

DocumentFragment.childElementCount Read only

Returns the amount of child elements the DocumentFragment has.

DocumentFragment.children Read only

Returns a live HTMLCollection containing all objects of type Element that are children of the DocumentFragment object.

DocumentFragment.firstElementChild Read only

Returns the Element that is the first child of the DocumentFragment object, or null if there is none.

DocumentFragment.lastElementChild Read only

Returns the Element that is the last child of the DocumentFragment object, or null if there is none.

Instance methodsThis interface inherits the methods of its parent, Node.

DocumentFragment.append()

Inserts a set of Node objects or strings after the last child of the document fragment.

DocumentFragment.prepend()

Inserts a set of Node objects or strings before the first child of the document fragment.

DocumentFragment.querySelector()

Returns the first Element node within the DocumentFragment, in document order, that matches the specified selectors.

DocumentFragment.querySelectorAll()

Returns a NodeList of all the Element nodes within the DocumentFragment that match the specified selectors.

DocumentFragment.moveBefore() 
Experimental


Moves a given Node inside the invoking DocumentFragment as a direct child, before a given reference node, without removing and then inserting the node.

DocumentFragment.replaceChildren()

Replaces the existing children of a DocumentFragment with a specified new set of children.

DocumentFragment.getElementById()

Returns the first Element node within the DocumentFragment, in document order, that matches the specified ID. Functionally equivalent to Document.getElementById().

Usage notesA common use for DocumentFragment is to create one, assemble a DOM subtree within it, then append or insert the fragment into the DOM using Node interface methods such as appendChild(), append(), or insertBefore(). Doing this moves the fragment's nodes into the DOM, leaving behind an empty DocumentFragment.
This interface is also of great use with Web components: <template> elements contain a DocumentFragment in their HTMLTemplateElement.content property.
An empty DocumentFragment can be created using the document.createDocumentFragment() method or the constructor.PerformanceThe performance benefit of DocumentFragment is often overstated. In fact, in some engines, using a DocumentFragment is slower than appending to the document in a loop as demonstrated in this benchmark. However, the difference between these examples is so marginal that it's better to optimize for readability than performance.ExampleHTMLhtml<ul></ul>
JavaScriptjsconst ul = document.querySelector("ul");
const fruits = ["Apple", "Orange", "Banana", "Melon"];

const fragment = new DocumentFragment();

for (const fruit of fruits) {
  const li = document.createElement("li");
  li.textContent = fruit;
  fragment.append(li);
}

ul.append(fragment);
ResultSpecificationsSpecificationDOM # interface-documentfragmentBrowser compatibility\n\nDocumentFragmentBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe DocumentFragment interface represents a minimal document object that has no parent.
It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document.
Constructor
DocumentFragment()

Creates and returns a new DocumentFragment object.

Instance propertiesThis interface has no specific properties, but inherits those of its parent, Node.

DocumentFragment.childElementCount Read only

Returns the amount of child elements the DocumentFragment has.

DocumentFragment.children Read only

Returns a live HTMLCollection containing all objects of type Element that are children of the DocumentFragment object.

DocumentFragment.firstElementChild Read only

Returns the Element that is the first child of the DocumentFragment object, or null if there is none.

DocumentFragment.lastElementChild Read only

Returns the Element that is the last child of the DocumentFragment object, or null if there is none.

Instance methodsThis interface inherits the methods of its parent, Node.

DocumentFragment.append()

Inserts a set of Node objects or strings after the last child of the document fragment.

DocumentFragment.prepend()

Inserts a set of Node objects or strings before the first child of the document fragment.

DocumentFragment.querySelector()

Returns the first Element node within the DocumentFragment, in document order, that matches the specified selectors.

DocumentFragment.querySelectorAll()

Returns a NodeList of all the Element nodes within the DocumentFragment that match the specified selectors.

DocumentFragment.moveBefore() 
Experimental


Moves a given Node inside the invoking DocumentFragment as a direct child, before a given reference node, without removing and then inserting the node.

DocumentFragment.replaceChildren()

Replaces the existing children of a DocumentFragment with a specified new set of children.

DocumentFragment.getElementById()

Returns the first Element node within the DocumentFragment, in document order, that matches the specified ID. Functionally equivalent to Document.getElementById().

Usage notesA common use for DocumentFragment is to create one, assemble a DOM subtree within it, then append or insert the fragment into the DOM using Node interface methods such as appendChild(), append(), or insertBefore(). Doing this moves the fragment's nodes into the DOM, leaving behind an empty DocumentFragment.
This interface is also of great use with Web components: <template> elements contain a DocumentFragment in their HTMLTemplateElement.content property.
An empty DocumentFragment can be created using the document.createDocumentFragment() method or the constructor.PerformanceThe performance benefit of DocumentFragment is often overstated. In fact, in some engines, using a DocumentFragment is slower than appending to the document in a loop as demonstrated in this benchmark. However, the difference between these examples is so marginal that it's better to optimize for readability than performance.ExampleHTMLhtml<ul></ul>
JavaScriptjsconst ul = document.querySelector("ul");
const fruits = ["Apple", "Orange", "Banana", "Melon"];

const fragment = new DocumentFragment();

for (const fruit of fruits) {
  const li = document.createElement("li");
  li.textContent = fruit;
  fragment.append(li);
}

ul.append(fragment);
ResultSpecificationsSpecificationDOM # interface-documentfragmentBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 18, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDocumentFragmentBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe DocumentFragment interface represents a minimal document object that has no parent.
It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document.
Constructor
DocumentFragment()

Creates and returns a new DocumentFragment object.

Instance propertiesThis interface has no specific properties, but inherits those of its parent, Node.

DocumentFragment.childElementCount Read only

Returns the amount of child elements the DocumentFragment has.

DocumentFragment.children Read only

Returns a live HTMLCollection containing all objects of type Element that are children of the DocumentFragment object.

DocumentFragment.firstElementChild Read only

Returns the Element that is the first child of the DocumentFragment object, or null if there is none.

DocumentFragment.lastElementChild Read only

Returns the Element that is the last child of the DocumentFragment object, or null if there is none.

Instance methodsThis interface inherits the methods of its parent, Node.

DocumentFragment.append()

Inserts a set of Node objects or strings after the last child of the document fragment.

DocumentFragment.prepend()

Inserts a set of Node objects or strings before the first child of the document fragment.

DocumentFragment.querySelector()

Returns the first Element node within the DocumentFragment, in document order, that matches the specified selectors.

DocumentFragment.querySelectorAll()

Returns a NodeList of all the Element nodes within the DocumentFragment that match the specified selectors.

DocumentFragment.moveBefore() 
Experimental


Moves a given Node inside the invoking DocumentFragment as a direct child, before a given reference node, without removing and then inserting the node.

DocumentFragment.replaceChildren()

Replaces the existing children of a DocumentFragment with a specified new set of children.

DocumentFragment.getElementById()

Returns the first Element node within the DocumentFragment, in document order, that matches the specified ID. Functionally equivalent to Document.getElementById().

Usage notesA common use for DocumentFragment is to create one, assemble a DOM subtree within it, then append or insert the fragment into the DOM using Node interface methods such as appendChild(), append(), or insertBefore(). Doing this moves the fragment's nodes into the DOM, leaving behind an empty DocumentFragment.
This interface is also of great use with Web components: <template> elements contain a DocumentFragment in their HTMLTemplateElement.content property.
An empty DocumentFragment can be created using the document.createDocumentFragment() method or the constructor.PerformanceThe performance benefit of DocumentFragment is often overstated. In fact, in some engines, using a DocumentFragment is slower than appending to the document in a loop as demonstrated in this benchmark. However, the difference between these examples is so marginal that it's better to optimize for readability than performance.ExampleHTMLhtml<ul></ul>
JavaScriptjsconst ul = document.querySelector("ul");
const fruits = ["Apple", "Orange", "Banana", "Melon"];

const fragment = new DocumentFragment();

for (const fruit of fruits) {
  const li = document.createElement("li");
  li.textContent = fruit;
  fragment.append(li);
}

ul.append(fragment);
ResultSpecificationsSpecificationDOM # interface-documentfragmentBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 18, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nDocumentTypeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DocumentType interface represents a Node containing a doctype.
Instance propertiesInherits properties from its parent, Node.

DocumentType.name Read only

The type of the document. It is always "html" for HTML documents, but will vary for XML documents.

DocumentType.publicId Read only

A string with an identifier of the type of document. Empty if the doctype given specifies no public ID.

DocumentType.systemId Read only

A string containing the URL to the associated DTD. Empty if the doctype given specifies no system ID.

Instance methodsInherits methods from its parent, Node.

DocumentType.after()

Inserts a set of Node objects or strings in the children list of the
object's parent, just after this node.

DocumentType.before()

Inserts a set of Node objects or strings in the children list of the
object's parent, just before this node.

DocumentType.remove()

Removes this object from its parent children list.

DocumentType.replaceWith()

Replaces the document type with a set of given nodes.

SpecificationsSpecificationDOM # interface-documenttypeBrowser compatibilitySee also
The DOM interfaces index.
DOMImplementation.createDocumentType() to create a new DocumentType node.\n\nDocumentTypeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DocumentType interface represents a Node containing a doctype.
Instance propertiesInherits properties from its parent, Node.

DocumentType.name Read only

The type of the document. It is always "html" for HTML documents, but will vary for XML documents.

DocumentType.publicId Read only

A string with an identifier of the type of document. Empty if the doctype given specifies no public ID.

DocumentType.systemId Read only

A string containing the URL to the associated DTD. Empty if the doctype given specifies no system ID.

Instance methodsInherits methods from its parent, Node.

DocumentType.after()

Inserts a set of Node objects or strings in the children list of the
object's parent, just after this node.

DocumentType.before()

Inserts a set of Node objects or strings in the children list of the
object's parent, just before this node.

DocumentType.remove()

Removes this object from its parent children list.

DocumentType.replaceWith()

Replaces the document type with a set of given nodes.

SpecificationsSpecificationDOM # interface-documenttypeBrowser compatibilitySee also
The DOM interfaces index.
DOMImplementation.createDocumentType() to create a new DocumentType node.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nDocumentTypeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe DocumentType interface represents a Node containing a doctype.
Instance propertiesInherits properties from its parent, Node.

DocumentType.name Read only

The type of the document. It is always "html" for HTML documents, but will vary for XML documents.

DocumentType.publicId Read only

A string with an identifier of the type of document. Empty if the doctype given specifies no public ID.

DocumentType.systemId Read only

A string containing the URL to the associated DTD. Empty if the doctype given specifies no system ID.

Instance methodsInherits methods from its parent, Node.

DocumentType.after()

Inserts a set of Node objects or strings in the children list of the
object's parent, just after this node.

DocumentType.before()

Inserts a set of Node objects or strings in the children list of the
object's parent, just before this node.

DocumentType.remove()

Removes this object from its parent children list.

DocumentType.replaceWith()

Replaces the document type with a set of given nodes.

SpecificationsSpecificationDOM # interface-documenttypeBrowser compatibilitySee also
The DOM interfaces index.
DOMImplementation.createDocumentType() to create a new DocumentType node.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Oct 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nElementBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackElement is the most general base class from which all element objects (i.e., objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
For example, the HTMLElement interface is the base interface for HTML elements. Similarly, the SVGElement interface is the basis for all SVG elements, and the MathMLElement interface is the base interface for MathML elements. Most functionality is specified further down the class hierarchy.
Languages outside the realm of the Web platform, like XUL through the XULElement interface, also implement Element.
Instance propertiesElement inherits properties from its parent interface, Node, and by extension that interface's parent, EventTarget.

Element.assignedSlot Read only

Returns a HTMLSlotElement representing the <slot> the node is inserted in.

Element.attributes Read only

Returns a NamedNodeMap object containing the assigned attributes of the corresponding HTML element.

Element.childElementCount Read only

Returns the number of child elements of this element.

Element.children Read only

Returns the child elements of this element.

Element.classList Read only

Returns a DOMTokenList containing the list of class attributes.

Element.className

A string representing the class of the element.

Element.clientHeight Read only

Returns a number representing the inner height of the element.

Element.clientLeft Read only

Returns a number representing the width of the left border of the element.

Element.clientTop Read only

Returns a number representing the width of the top border of the element.

Element.clientWidth Read only

Returns a number representing the inner width of the element.

Element.currentCSSZoom Read only

A number indicating the effective zoom size of the element, or 1.0 if the element is not rendered.

Element.elementTiming 
Experimental


A string reflecting the elementtiming attribute which marks an element for observation in the PerformanceElementTiming API.

Element.firstElementChild Read only

Returns the first child element of this element.

Element.id

A string representing the id of the element.

Element.innerHTML

A string representing the markup of the element's content.

Element.lastElementChild Read only

Returns the last child element of this element.

Element.localName Read only

A string representing the local part of the qualified name of the element.

Element.namespaceURI Read only

The namespace URI of the element, or null if it is no namespace.

Element.nextElementSibling Read only

An Element, the element immediately following the given one in the tree, or null if there's no sibling node.

Element.outerHTML

A string representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.

Element.part

Represents the part identifier(s) of the element (i.e., set using the part attribute), returned as a DOMTokenList.

Element.prefix Read only

A string representing the namespace prefix of the element, or null if no prefix is specified.

Element.previousElementSibling Read only

An Element, the element immediately preceding the given one in the tree, or null if there is no sibling element.

Element.scrollHeight Read only

Returns a number representing the scroll view height of an element.

Element.scrollLeft

A number representing the left scroll offset of the element.

Element.scrollLeftMax 
Non-standard
 Read only

Returns a number representing the maximum left scroll offset possible for the element.

Element.scrollTop

A number representing number of pixels the top of the element is scrolled vertically.

Element.scrollTopMax 
Non-standard
 Read only

Returns a number representing the maximum top scroll offset possible for the element.

Element.scrollWidth Read only

Returns a number representing the scroll view width of the element.

Element.shadowRoot Read only

Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.

Element.slot

Returns the name of the shadow DOM slot the element is inserted in.

Element.tagName Read only

Returns a string with the name of the tag for the given element.

Instance properties included from ARIAThe Element interface also includes the following properties.

Element.ariaAtomic

A string reflecting the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.

Element.ariaAutoComplete

A string reflecting the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.

Element.ariaBrailleLabel

A string reflecting the aria-braillelabel attribute, which defines the braille label of the element.

Element.ariaBrailleRoleDescription

A string reflecting the aria-brailleroledescription attribute, which defines the ARIA braille role description of the element.

Element.ariaBusy

A string reflecting the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.

Element.ariaChecked

A string reflecting the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.

Element.ariaColCount

A string reflecting the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.

Element.ariaColIndex

A string reflecting the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.

Element.ariaColIndexText

A string reflecting the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.

Element.ariaColSpan

A string reflecting the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.

Element.ariaCurrent

A string reflecting the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.

Element.ariaDescription

A string reflecting the aria-description attribute, which defines a string value that describes or annotates the current element.

Element.ariaDisabled

A string reflecting the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.

Element.ariaExpanded

A string reflecting the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.

Element.ariaHasPopup

A string reflecting the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.

Element.ariaHidden

A string reflecting the aria-hidden attribute, which indicates whether the element is exposed to an accessibility API.

Element.ariaInvalid

A string reflecting the aria-invalid attribute, which indicates the entered value does not conform to the format expected by the application.

Element.ariaKeyShortcuts

A string reflecting the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.

Element.ariaLabel

A string reflecting the aria-label attribute, which defines a string value that labels the current element.

Element.ariaLevel

A string reflecting the aria-level attribute, which defines the hierarchical level of an element within a structure.

Element.ariaLive

A string reflecting the aria-live attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.

Element.ariaModal

A string reflecting the aria-modal attribute, which indicates whether an element is modal when displayed.

Element.ariaMultiline

A string reflecting the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.

Element.ariaMultiSelectable

A string reflecting the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.

Element.ariaOrientation

A string reflecting the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.

Element.ariaPlaceholder

A string reflecting the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.

Element.ariaPosInSet

A string reflecting the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.

Element.ariaPressed

A string reflecting the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.

Element.ariaReadOnly

A string reflecting the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.

Element.ariaRelevant 
Non-standard


A string reflecting the aria-relevant attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an aria-live region are relevant and should be announced.

Element.ariaRequired

A string reflecting the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.

Element.ariaRoleDescription

A string reflecting the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.

Element.ariaRowCount

A string reflecting the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.

Element.ariaRowIndex

A string reflecting the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.

Element.ariaRowIndexText

A string reflecting the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.

Element.ariaRowSpan

A string reflecting the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.

Element.ariaSelected

A string reflecting the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.

Element.ariaSetSize

A string reflecting the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.

Element.ariaSort

A string reflecting the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.

Element.ariaValueMax

A string reflecting the aria-valueMax attribute, which defines the maximum allowed value for a range widget.

Element.ariaValueMin

A string reflecting the aria-valueMin attribute, which defines the minimum allowed value for a range widget.

Element.ariaValueNow

A string reflecting the aria-valueNow attribute, which defines the current value for a range widget.

Element.ariaValueText

A string reflecting the aria-valuetext attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.

Element.role

A string reflecting the explicitly set role attribute, which provides the semantic role of the element.


Instance properties reflected from ARIA element references
The properties reflect the elements specified by id reference in the corresponding attributes, but with some caveats. See Reflected element references in the Reflected attributes guide for more information.

Element.ariaActiveDescendantElement

An element that represents the current active element when focus is on a composite widget, combobox, textbox, group, or application.
Reflects the aria-activedescendant attribute.

Element.ariaControlsElements

An array of elements whose contents or presence are controlled by the element it is applied to.
Reflects the aria-controls attribute.

Element.ariaDescribedByElements

An array of elements that contain the accessible description for the element it is applied to.
Reflects the aria-describedby attribute.

Element.ariaDetailsElements

An array of elements that provide accessible details for the element it is applied to.
Reflects the aria-details attribute.

Element.ariaErrorMessageElements

An array of elements that provide an error message for the element it is applied to.
Reflects the aria-errormessage attribute.

Element.ariaFlowToElements

An array of elements that identify the next element (or elements) in an alternate reading order of content, overriding the general default reading order at the user's discretion.
Reflects the aria-flowto attribute.

Element.ariaLabelledByElements

An array of elements that provide the accessible name for the element it is applied to.
Reflects the aria-labelledby attribute.

Element.ariaOwnsElements

An array of elements owned by the element this is applied to.
This is used to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship.
Reflects the aria-owns attribute.

Instance methodsElement inherits methods from its parents Node, and its own parent, EventTarget.

Element.after()

Inserts a set of Node objects or strings in the children list of the Element's parent, just after the Element.

Element.animate()

A shortcut method to create and run an animation on an element. Returns the created Animation object instance.

Element.append()

Inserts a set of Node objects or strings after the last child of the element.

Element.attachShadow()

Attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.

Element.before()

Inserts a set of Node objects or strings in the children list of the Element's parent, just before the Element.

Element.checkVisibility()

Returns whether an element is expected to be visible or not based on configurable checks.

Element.closest()

Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.

Element.computedStyleMap()

Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.

Element.getAnimations()

Returns an array of Animation objects currently active on the element.

Element.getAttribute()

Retrieves the value of the named attribute from the current node and returns it as a string.

Element.getAttributeNames()

Returns an array of attribute names from the current element.

Element.getAttributeNode()

Retrieves the node representation of the named attribute from the current node and returns it as an Attr.

Element.getAttributeNodeNS()

Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an Attr.

Element.getAttributeNS()

Retrieves the value of the attribute with the specified namespace and name from the current node and returns it as a string.

Element.getBoundingClientRect()

Returns the size of an element and its position relative to the viewport.

Element.getBoxQuads() 
Experimental


Returns a list of DOMQuad objects representing the CSS fragments of the node.

Element.getClientRects()

Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.

Element.getElementsByClassName()

Returns a live HTMLCollection that contains all descendants of the current element that possess the list of classes given in the parameter.

Element.getElementsByTagName()

Returns a live HTMLCollection containing all descendant elements, of a particular tag name, from the current element.

Element.getElementsByTagNameNS()

Returns a live HTMLCollection containing all descendant elements, of a particular tag name and namespace, from the current element.

Element.getHTML()

Returns the DOM content of the element as an HTML string, optionally including any shadow DOM.

Element.hasAttribute()

Returns a boolean value indicating if the element has the specified attribute or not.

Element.hasAttributeNS()

Returns a boolean value indicating if the element has the specified attribute, in the specified namespace, or not.

Element.hasAttributes()

Returns a boolean value indicating if the element has one or more HTML attributes present.

Element.hasPointerCapture()

Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.

Element.insertAdjacentElement()

Inserts a given element node at a given position relative to the element it is invoked upon.

Element.insertAdjacentHTML()

Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.

Element.insertAdjacentText()

Inserts a given text node at a given position relative to the element it is invoked upon.

Element.matches()

Returns a boolean value indicating whether or not the element would be selected by the specified selector string.

Element.moveBefore() 
Experimental


Moves a given Node inside the invoking node as a direct child, before a given reference node, without removing and then inserting the node.

Element.prepend()

Inserts a set of Node objects or strings before the first child of the element.

Element.querySelector()

Returns the first Node which matches the specified selector string relative to the element.

Element.querySelectorAll()

Returns a NodeList of nodes which match the specified selector string relative to the element.

Element.releasePointerCapture()

Releases (stops) pointer capture that was previously set for a specific PointerEvent.

Element.remove()

Removes the element from the children list of its parent.

Element.removeAttribute()

Removes the named attribute from the current node.

Element.removeAttributeNode()

Removes the node representation of the named attribute from the current node.

Element.removeAttributeNS()

Removes the attribute with the specified name and namespace, from the current node.

Element.replaceChildren()

Replaces the existing children of a Node with a specified new set of children.

Element.replaceWith()

Replaces the element in the children list of its parent with a set of Node objects or strings.

Element.requestFullscreen()

Asynchronously asks the browser to make the element fullscreen.

Element.requestPointerLock()

Allows to asynchronously ask for the pointer to be locked on the given element.

Element.scroll()

Scrolls to a particular set of coordinates inside a given element.

Element.scrollBy()

Scrolls an element by the given amount.

Element.scrollIntoView()

Scrolls the page until the element gets into the view.

Element.scrollIntoViewIfNeeded() 
Non-standard


Scrolls the current element into the visible area of the browser window if it's not already within the visible area of the browser window. Use the standard Element.scrollIntoView() instead.

Element.scrollTo()

Scrolls to a particular set of coordinates inside a given element.

Element.setAttribute()

Sets the value of a named attribute of the current node.

Element.setAttributeNode()

Sets the node representation of the named attribute from the current node.

Element.setAttributeNodeNS()

Sets the node representation of the attribute with the specified name and namespace, from the current node.

Element.setAttributeNS()

Sets the value of the attribute with the specified name and namespace, from the current node.

Element.setCapture() 
Non-standard
 
Deprecated


Sets up mouse event capture, redirecting all mouse events to this element.

Element.setHTMLUnsafe()

Parses a string of HTML into a document fragment, without sanitization, which then replaces the element's original subtree in the DOM. The HTML string may include declarative shadow roots, which would be parsed as template elements if the HTML was set using Element.innerHTML.

Element.setPointerCapture()

Designates a specific element as the capture target of future pointer events.

Element.toggleAttribute()

Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.

EventsListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.

afterscriptexecute 
Non-standard
 
Deprecated


Fired when a script has been executed.

beforeinput

Fired when the value of an input element is about to be modified.

beforematch

Fires on an element that is in the hidden until found state, when the browser is about to reveal its content because the user has found the content through the "find in page" feature or through fragment navigation.

beforescriptexecute 
Non-standard
 
Deprecated


Fired when a script is about to be executed.

beforexrselect 
Experimental


Fired before WebXR select events (select, selectstart, selectend) are dispatched.

contentvisibilityautostatechange

Fires on any element with content-visibility: auto set on it when it starts or stops being relevant to the user and skipping its contents.

input

Fires when an element's value is changed as a direct result of a user action.

securitypolicyviolation

Fired when a Content Security Policy is violated.

wheel

Fired when the user rotates a wheel button on a pointing device (typically a mouse).

Animation events
animationcancel

Fired when an animation unexpectedly aborts.

animationend

Fired when an animation has completed normally.

animationiteration

Fired when an animation iteration has completed.

animationstart

Fired when an animation starts.

Clipboard events
copy

Fired when the user initiates a copy action through the browser's user interface.

cut

Fired when the user initiates a cut action through the browser's user interface.

paste

Fired when the user initiates a paste action through the browser's user interface.

Composition events
compositionend

Fired when a text composition system such as an input method editor completes or cancels the current composition session.

compositionstart

Fired when a text composition system such as an input method editor starts a new composition session.

compositionupdate

Fired when a new character is received in the context of a text composition session controlled by a text composition system such as an input method editor.

Focus events
blur

Fired when an element has lost focus.

focus

Fired when an element has gained focus.

focusin

Fired when an element has gained focus, after focus.

focusout

Fired when an element has lost focus, after blur.

Fullscreen events
fullscreenchange

Sent to an Element when it transitions into or out of fullscreen mode.

fullscreenerror

Sent to an Element if an error occurs while attempting to switch it into or out of fullscreen mode.

Keyboard events
keydown

Fired when a key is pressed.

keypress 
Deprecated


Fired when a key that produces a character value is pressed down.

keyup

Fired when a key is released.

Mouse events
auxclick

Fired when a non-primary pointing device button (e.g., any mouse button other than the left button) has been pressed and released on an element.

click

Fired when a pointing device button (e.g., a mouse's primary button) is pressed and released on a single element.

contextmenu

Fired when the user attempts to open a context menu.

dblclick

Fired when a pointing device button (e.g., a mouse's primary button) is clicked twice on a single element.

DOMActivate 
Deprecated


Occurs when an element is activated, for instance, through a mouse click or a keypress.

DOMMouseScroll 
Deprecated
 
Non-standard


Occurs when mouse wheel or similar device is operated and the accumulated scroll amount is over 1 line or 1 page since last event.

mousedown

Fired when a pointing device button is pressed on an element.

mouseenter

Fired when a pointing device (usually a mouse) is moved over the element that has the listener attached.

mouseleave

Fired when the pointer of a pointing device (usually a mouse) is moved out of an element that has the listener attached to it.

mousemove

Fired when a pointing device (usually a mouse) is moved while over an element.

mouseout

Fired when a pointing device (usually a mouse) is moved off the element to which the listener is attached or off one of its children.

mouseover

Fired when a pointing device is moved onto the element to which the listener is attached or onto one of its children.

mouseup

Fired when a pointing device button is released on an element.

mousewheel 
Deprecated
 
Non-standard


Fired when a mouse wheel or similar device is operated.

MozMousePixelScroll 
Deprecated
 
Non-standard


Fired when a mouse wheel or similar device is operated.

webkitmouseforcechanged 
Non-standard


Fired each time the amount of pressure changes on the trackpad touch screen.

webkitmouseforcedown 
Non-standard


Fired after the mousedown event as soon as sufficient pressure has been applied to qualify as a "force click".

webkitmouseforcewillbegin 
Non-standard


Fired before the mousedown event.

webkitmouseforceup 
Non-standard


Fired after the webkitmouseforcedown event as soon as the pressure has been reduced sufficiently to end the "force click".

Pointer events
gotpointercapture

Fired when an element captures a pointer using setPointerCapture().

lostpointercapture

Fired when a captured pointer is released.

pointercancel

Fired when a pointer event is canceled.

pointerdown

Fired when a pointer becomes active.

pointerenter

Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants.

pointerleave

Fired when a pointer is moved out of the hit test boundaries of an element.

pointermove

Fired when a pointer changes coordinates.

pointerout

Fired when a pointer is moved out of the hit test boundaries of an element (among other reasons).

pointerover

Fired when a pointer is moved into an element's hit test boundaries.

pointerrawupdate 
Experimental


Fired when a pointer changes any properties that don't fire pointerdown or pointerup events.

pointerup

Fired when a pointer is no longer active.

Scroll events
scroll

Fired when the document view or an element has been scrolled.

scrollend

Fires when the document view has completed scrolling.

scrollsnapchange 
Experimental


Fired on the scroll container at the end of a scrolling operation when a new scroll snap target has been selected.

scrollsnapchanging 
Experimental


Fired on the scroll container when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.

Touch events
gesturechange 
Non-standard


Fired when digits move during a touch gesture.

gestureend 
Non-standard


Fired when there are no longer multiple fingers contacting the touch surface, thus ending the gesture.

gesturestart 
Non-standard


Fired when multiple fingers contact the touch surface, thus starting a new gesture.

touchcancel

Fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).

touchend

Fired when one or more touch points are removed from the touch surface.

touchmove

Fired when one or more touch points are moved along the touch surface.

touchstart

Fired when one or more touch points are placed on the touch surface.

Transition events
transitioncancel

An Event fired when a CSS transition has been cancelled.

transitionend

An Event fired when a CSS transition has finished playing.

transitionrun

An Event fired when a CSS transition is created (i.e., when it is added to a set of running transitions), though not necessarily started.

transitionstart

An Event fired when a CSS transition has started transitioning.

SpecificationsSpecificationDOM # interface-elementPointer Events # extensions-to-the-element-interfaceFullscreen API # apiDOM Parsing and Serialization # extensions-to-the-element-interfaceCSSOM View Module # extension-to-the-element-interfaceBrowser compatibility\n\nElementBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackElement is the most general base class from which all element objects (i.e., objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
For example, the HTMLElement interface is the base interface for HTML elements. Similarly, the SVGElement interface is the basis for all SVG elements, and the MathMLElement interface is the base interface for MathML elements. Most functionality is specified further down the class hierarchy.
Languages outside the realm of the Web platform, like XUL through the XULElement interface, also implement Element.
Instance propertiesElement inherits properties from its parent interface, Node, and by extension that interface's parent, EventTarget.

Element.assignedSlot Read only

Returns a HTMLSlotElement representing the <slot> the node is inserted in.

Element.attributes Read only

Returns a NamedNodeMap object containing the assigned attributes of the corresponding HTML element.

Element.childElementCount Read only

Returns the number of child elements of this element.

Element.children Read only

Returns the child elements of this element.

Element.classList Read only

Returns a DOMTokenList containing the list of class attributes.

Element.className

A string representing the class of the element.

Element.clientHeight Read only

Returns a number representing the inner height of the element.

Element.clientLeft Read only

Returns a number representing the width of the left border of the element.

Element.clientTop Read only

Returns a number representing the width of the top border of the element.

Element.clientWidth Read only

Returns a number representing the inner width of the element.

Element.currentCSSZoom Read only

A number indicating the effective zoom size of the element, or 1.0 if the element is not rendered.

Element.elementTiming 
Experimental


A string reflecting the elementtiming attribute which marks an element for observation in the PerformanceElementTiming API.

Element.firstElementChild Read only

Returns the first child element of this element.

Element.id

A string representing the id of the element.

Element.innerHTML

A string representing the markup of the element's content.

Element.lastElementChild Read only

Returns the last child element of this element.

Element.localName Read only

A string representing the local part of the qualified name of the element.

Element.namespaceURI Read only

The namespace URI of the element, or null if it is no namespace.

Element.nextElementSibling Read only

An Element, the element immediately following the given one in the tree, or null if there's no sibling node.

Element.outerHTML

A string representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.

Element.part

Represents the part identifier(s) of the element (i.e., set using the part attribute), returned as a DOMTokenList.

Element.prefix Read only

A string representing the namespace prefix of the element, or null if no prefix is specified.

Element.previousElementSibling Read only

An Element, the element immediately preceding the given one in the tree, or null if there is no sibling element.

Element.scrollHeight Read only

Returns a number representing the scroll view height of an element.

Element.scrollLeft

A number representing the left scroll offset of the element.

Element.scrollLeftMax 
Non-standard
 Read only

Returns a number representing the maximum left scroll offset possible for the element.

Element.scrollTop

A number representing number of pixels the top of the element is scrolled vertically.

Element.scrollTopMax 
Non-standard
 Read only

Returns a number representing the maximum top scroll offset possible for the element.

Element.scrollWidth Read only

Returns a number representing the scroll view width of the element.

Element.shadowRoot Read only

Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.

Element.slot

Returns the name of the shadow DOM slot the element is inserted in.

Element.tagName Read only

Returns a string with the name of the tag for the given element.

Instance properties included from ARIAThe Element interface also includes the following properties.

Element.ariaAtomic

A string reflecting the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.

Element.ariaAutoComplete

A string reflecting the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.

Element.ariaBrailleLabel

A string reflecting the aria-braillelabel attribute, which defines the braille label of the element.

Element.ariaBrailleRoleDescription

A string reflecting the aria-brailleroledescription attribute, which defines the ARIA braille role description of the element.

Element.ariaBusy

A string reflecting the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.

Element.ariaChecked

A string reflecting the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.

Element.ariaColCount

A string reflecting the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.

Element.ariaColIndex

A string reflecting the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.

Element.ariaColIndexText

A string reflecting the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.

Element.ariaColSpan

A string reflecting the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.

Element.ariaCurrent

A string reflecting the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.

Element.ariaDescription

A string reflecting the aria-description attribute, which defines a string value that describes or annotates the current element.

Element.ariaDisabled

A string reflecting the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.

Element.ariaExpanded

A string reflecting the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.

Element.ariaHasPopup

A string reflecting the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.

Element.ariaHidden

A string reflecting the aria-hidden attribute, which indicates whether the element is exposed to an accessibility API.

Element.ariaInvalid

A string reflecting the aria-invalid attribute, which indicates the entered value does not conform to the format expected by the application.

Element.ariaKeyShortcuts

A string reflecting the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.

Element.ariaLabel

A string reflecting the aria-label attribute, which defines a string value that labels the current element.

Element.ariaLevel

A string reflecting the aria-level attribute, which defines the hierarchical level of an element within a structure.

Element.ariaLive

A string reflecting the aria-live attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.

Element.ariaModal

A string reflecting the aria-modal attribute, which indicates whether an element is modal when displayed.

Element.ariaMultiline

A string reflecting the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.

Element.ariaMultiSelectable

A string reflecting the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.

Element.ariaOrientation

A string reflecting the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.

Element.ariaPlaceholder

A string reflecting the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.

Element.ariaPosInSet

A string reflecting the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.

Element.ariaPressed

A string reflecting the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.

Element.ariaReadOnly

A string reflecting the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.

Element.ariaRelevant 
Non-standard


A string reflecting the aria-relevant attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an aria-live region are relevant and should be announced.

Element.ariaRequired

A string reflecting the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.

Element.ariaRoleDescription

A string reflecting the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.

Element.ariaRowCount

A string reflecting the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.

Element.ariaRowIndex

A string reflecting the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.

Element.ariaRowIndexText

A string reflecting the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.

Element.ariaRowSpan

A string reflecting the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.

Element.ariaSelected

A string reflecting the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.

Element.ariaSetSize

A string reflecting the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.

Element.ariaSort

A string reflecting the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.

Element.ariaValueMax

A string reflecting the aria-valueMax attribute, which defines the maximum allowed value for a range widget.

Element.ariaValueMin

A string reflecting the aria-valueMin attribute, which defines the minimum allowed value for a range widget.

Element.ariaValueNow

A string reflecting the aria-valueNow attribute, which defines the current value for a range widget.

Element.ariaValueText

A string reflecting the aria-valuetext attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.

Element.role

A string reflecting the explicitly set role attribute, which provides the semantic role of the element.


Instance properties reflected from ARIA element references
The properties reflect the elements specified by id reference in the corresponding attributes, but with some caveats. See Reflected element references in the Reflected attributes guide for more information.

Element.ariaActiveDescendantElement

An element that represents the current active element when focus is on a composite widget, combobox, textbox, group, or application.
Reflects the aria-activedescendant attribute.

Element.ariaControlsElements

An array of elements whose contents or presence are controlled by the element it is applied to.
Reflects the aria-controls attribute.

Element.ariaDescribedByElements

An array of elements that contain the accessible description for the element it is applied to.
Reflects the aria-describedby attribute.

Element.ariaDetailsElements

An array of elements that provide accessible details for the element it is applied to.
Reflects the aria-details attribute.

Element.ariaErrorMessageElements

An array of elements that provide an error message for the element it is applied to.
Reflects the aria-errormessage attribute.

Element.ariaFlowToElements

An array of elements that identify the next element (or elements) in an alternate reading order of content, overriding the general default reading order at the user's discretion.
Reflects the aria-flowto attribute.

Element.ariaLabelledByElements

An array of elements that provide the accessible name for the element it is applied to.
Reflects the aria-labelledby attribute.

Element.ariaOwnsElements

An array of elements owned by the element this is applied to.
This is used to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship.
Reflects the aria-owns attribute.

Instance methodsElement inherits methods from its parents Node, and its own parent, EventTarget.

Element.after()

Inserts a set of Node objects or strings in the children list of the Element's parent, just after the Element.

Element.animate()

A shortcut method to create and run an animation on an element. Returns the created Animation object instance.

Element.append()

Inserts a set of Node objects or strings after the last child of the element.

Element.attachShadow()

Attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.

Element.before()

Inserts a set of Node objects or strings in the children list of the Element's parent, just before the Element.

Element.checkVisibility()

Returns whether an element is expected to be visible or not based on configurable checks.

Element.closest()

Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.

Element.computedStyleMap()

Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.

Element.getAnimations()

Returns an array of Animation objects currently active on the element.

Element.getAttribute()

Retrieves the value of the named attribute from the current node and returns it as a string.

Element.getAttributeNames()

Returns an array of attribute names from the current element.

Element.getAttributeNode()

Retrieves the node representation of the named attribute from the current node and returns it as an Attr.

Element.getAttributeNodeNS()

Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an Attr.

Element.getAttributeNS()

Retrieves the value of the attribute with the specified namespace and name from the current node and returns it as a string.

Element.getBoundingClientRect()

Returns the size of an element and its position relative to the viewport.

Element.getBoxQuads() 
Experimental


Returns a list of DOMQuad objects representing the CSS fragments of the node.

Element.getClientRects()

Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.

Element.getElementsByClassName()

Returns a live HTMLCollection that contains all descendants of the current element that possess the list of classes given in the parameter.

Element.getElementsByTagName()

Returns a live HTMLCollection containing all descendant elements, of a particular tag name, from the current element.

Element.getElementsByTagNameNS()

Returns a live HTMLCollection containing all descendant elements, of a particular tag name and namespace, from the current element.

Element.getHTML()

Returns the DOM content of the element as an HTML string, optionally including any shadow DOM.

Element.hasAttribute()

Returns a boolean value indicating if the element has the specified attribute or not.

Element.hasAttributeNS()

Returns a boolean value indicating if the element has the specified attribute, in the specified namespace, or not.

Element.hasAttributes()

Returns a boolean value indicating if the element has one or more HTML attributes present.

Element.hasPointerCapture()

Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.

Element.insertAdjacentElement()

Inserts a given element node at a given position relative to the element it is invoked upon.

Element.insertAdjacentHTML()

Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.

Element.insertAdjacentText()

Inserts a given text node at a given position relative to the element it is invoked upon.

Element.matches()

Returns a boolean value indicating whether or not the element would be selected by the specified selector string.

Element.moveBefore() 
Experimental


Moves a given Node inside the invoking node as a direct child, before a given reference node, without removing and then inserting the node.

Element.prepend()

Inserts a set of Node objects or strings before the first child of the element.

Element.querySelector()

Returns the first Node which matches the specified selector string relative to the element.

Element.querySelectorAll()

Returns a NodeList of nodes which match the specified selector string relative to the element.

Element.releasePointerCapture()

Releases (stops) pointer capture that was previously set for a specific PointerEvent.

Element.remove()

Removes the element from the children list of its parent.

Element.removeAttribute()

Removes the named attribute from the current node.

Element.removeAttributeNode()

Removes the node representation of the named attribute from the current node.

Element.removeAttributeNS()

Removes the attribute with the specified name and namespace, from the current node.

Element.replaceChildren()

Replaces the existing children of a Node with a specified new set of children.

Element.replaceWith()

Replaces the element in the children list of its parent with a set of Node objects or strings.

Element.requestFullscreen()

Asynchronously asks the browser to make the element fullscreen.

Element.requestPointerLock()

Allows to asynchronously ask for the pointer to be locked on the given element.

Element.scroll()

Scrolls to a particular set of coordinates inside a given element.

Element.scrollBy()

Scrolls an element by the given amount.

Element.scrollIntoView()

Scrolls the page until the element gets into the view.

Element.scrollIntoViewIfNeeded() 
Non-standard


Scrolls the current element into the visible area of the browser window if it's not already within the visible area of the browser window. Use the standard Element.scrollIntoView() instead.

Element.scrollTo()

Scrolls to a particular set of coordinates inside a given element.

Element.setAttribute()

Sets the value of a named attribute of the current node.

Element.setAttributeNode()

Sets the node representation of the named attribute from the current node.

Element.setAttributeNodeNS()

Sets the node representation of the attribute with the specified name and namespace, from the current node.

Element.setAttributeNS()

Sets the value of the attribute with the specified name and namespace, from the current node.

Element.setCapture() 
Non-standard
 
Deprecated


Sets up mouse event capture, redirecting all mouse events to this element.

Element.setHTMLUnsafe()

Parses a string of HTML into a document fragment, without sanitization, which then replaces the element's original subtree in the DOM. The HTML string may include declarative shadow roots, which would be parsed as template elements if the HTML was set using Element.innerHTML.

Element.setPointerCapture()

Designates a specific element as the capture target of future pointer events.

Element.toggleAttribute()

Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.

EventsListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.

afterscriptexecute 
Non-standard
 
Deprecated


Fired when a script has been executed.

beforeinput

Fired when the value of an input element is about to be modified.

beforematch

Fires on an element that is in the hidden until found state, when the browser is about to reveal its content because the user has found the content through the "find in page" feature or through fragment navigation.

beforescriptexecute 
Non-standard
 
Deprecated


Fired when a script is about to be executed.

beforexrselect 
Experimental


Fired before WebXR select events (select, selectstart, selectend) are dispatched.

contentvisibilityautostatechange

Fires on any element with content-visibility: auto set on it when it starts or stops being relevant to the user and skipping its contents.

input

Fires when an element's value is changed as a direct result of a user action.

securitypolicyviolation

Fired when a Content Security Policy is violated.

wheel

Fired when the user rotates a wheel button on a pointing device (typically a mouse).

Animation events
animationcancel

Fired when an animation unexpectedly aborts.

animationend

Fired when an animation has completed normally.

animationiteration

Fired when an animation iteration has completed.

animationstart

Fired when an animation starts.

Clipboard events
copy

Fired when the user initiates a copy action through the browser's user interface.

cut

Fired when the user initiates a cut action through the browser's user interface.

paste

Fired when the user initiates a paste action through the browser's user interface.

Composition events
compositionend

Fired when a text composition system such as an input method editor completes or cancels the current composition session.

compositionstart

Fired when a text composition system such as an input method editor starts a new composition session.

compositionupdate

Fired when a new character is received in the context of a text composition session controlled by a text composition system such as an input method editor.

Focus events
blur

Fired when an element has lost focus.

focus

Fired when an element has gained focus.

focusin

Fired when an element has gained focus, after focus.

focusout

Fired when an element has lost focus, after blur.

Fullscreen events
fullscreenchange

Sent to an Element when it transitions into or out of fullscreen mode.

fullscreenerror

Sent to an Element if an error occurs while attempting to switch it into or out of fullscreen mode.

Keyboard events
keydown

Fired when a key is pressed.

keypress 
Deprecated


Fired when a key that produces a character value is pressed down.

keyup

Fired when a key is released.

Mouse events
auxclick

Fired when a non-primary pointing device button (e.g., any mouse button other than the left button) has been pressed and released on an element.

click

Fired when a pointing device button (e.g., a mouse's primary button) is pressed and released on a single element.

contextmenu

Fired when the user attempts to open a context menu.

dblclick

Fired when a pointing device button (e.g., a mouse's primary button) is clicked twice on a single element.

DOMActivate 
Deprecated


Occurs when an element is activated, for instance, through a mouse click or a keypress.

DOMMouseScroll 
Deprecated
 
Non-standard


Occurs when mouse wheel or similar device is operated and the accumulated scroll amount is over 1 line or 1 page since last event.

mousedown

Fired when a pointing device button is pressed on an element.

mouseenter

Fired when a pointing device (usually a mouse) is moved over the element that has the listener attached.

mouseleave

Fired when the pointer of a pointing device (usually a mouse) is moved out of an element that has the listener attached to it.

mousemove

Fired when a pointing device (usually a mouse) is moved while over an element.

mouseout

Fired when a pointing device (usually a mouse) is moved off the element to which the listener is attached or off one of its children.

mouseover

Fired when a pointing device is moved onto the element to which the listener is attached or onto one of its children.

mouseup

Fired when a pointing device button is released on an element.

mousewheel 
Deprecated
 
Non-standard


Fired when a mouse wheel or similar device is operated.

MozMousePixelScroll 
Deprecated
 
Non-standard


Fired when a mouse wheel or similar device is operated.

webkitmouseforcechanged 
Non-standard


Fired each time the amount of pressure changes on the trackpad touch screen.

webkitmouseforcedown 
Non-standard


Fired after the mousedown event as soon as sufficient pressure has been applied to qualify as a "force click".

webkitmouseforcewillbegin 
Non-standard


Fired before the mousedown event.

webkitmouseforceup 
Non-standard


Fired after the webkitmouseforcedown event as soon as the pressure has been reduced sufficiently to end the "force click".

Pointer events
gotpointercapture

Fired when an element captures a pointer using setPointerCapture().

lostpointercapture

Fired when a captured pointer is released.

pointercancel

Fired when a pointer event is canceled.

pointerdown

Fired when a pointer becomes active.

pointerenter

Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants.

pointerleave

Fired when a pointer is moved out of the hit test boundaries of an element.

pointermove

Fired when a pointer changes coordinates.

pointerout

Fired when a pointer is moved out of the hit test boundaries of an element (among other reasons).

pointerover

Fired when a pointer is moved into an element's hit test boundaries.

pointerrawupdate 
Experimental


Fired when a pointer changes any properties that don't fire pointerdown or pointerup events.

pointerup

Fired when a pointer is no longer active.

Scroll events
scroll

Fired when the document view or an element has been scrolled.

scrollend

Fires when the document view has completed scrolling.

scrollsnapchange 
Experimental


Fired on the scroll container at the end of a scrolling operation when a new scroll snap target has been selected.

scrollsnapchanging 
Experimental


Fired on the scroll container when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.

Touch events
gesturechange 
Non-standard


Fired when digits move during a touch gesture.

gestureend 
Non-standard


Fired when there are no longer multiple fingers contacting the touch surface, thus ending the gesture.

gesturestart 
Non-standard


Fired when multiple fingers contact the touch surface, thus starting a new gesture.

touchcancel

Fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).

touchend

Fired when one or more touch points are removed from the touch surface.

touchmove

Fired when one or more touch points are moved along the touch surface.

touchstart

Fired when one or more touch points are placed on the touch surface.

Transition events
transitioncancel

An Event fired when a CSS transition has been cancelled.

transitionend

An Event fired when a CSS transition has finished playing.

transitionrun

An Event fired when a CSS transition is created (i.e., when it is added to a set of running transitions), though not necessarily started.

transitionstart

An Event fired when a CSS transition has started transitioning.

SpecificationsSpecificationDOM # interface-elementPointer Events # extensions-to-the-element-interfaceFullscreen API # apiDOM Parsing and Serialization # extensions-to-the-element-interfaceCSSOM View Module # extension-to-the-element-interfaceBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 9, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nElementBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackElement is the most general base class from which all element objects (i.e., objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
For example, the HTMLElement interface is the base interface for HTML elements. Similarly, the SVGElement interface is the basis for all SVG elements, and the MathMLElement interface is the base interface for MathML elements. Most functionality is specified further down the class hierarchy.
Languages outside the realm of the Web platform, like XUL through the XULElement interface, also implement Element.
Instance propertiesElement inherits properties from its parent interface, Node, and by extension that interface's parent, EventTarget.

Element.assignedSlot Read only

Returns a HTMLSlotElement representing the <slot> the node is inserted in.

Element.attributes Read only

Returns a NamedNodeMap object containing the assigned attributes of the corresponding HTML element.

Element.childElementCount Read only

Returns the number of child elements of this element.

Element.children Read only

Returns the child elements of this element.

Element.classList Read only

Returns a DOMTokenList containing the list of class attributes.

Element.className

A string representing the class of the element.

Element.clientHeight Read only

Returns a number representing the inner height of the element.

Element.clientLeft Read only

Returns a number representing the width of the left border of the element.

Element.clientTop Read only

Returns a number representing the width of the top border of the element.

Element.clientWidth Read only

Returns a number representing the inner width of the element.

Element.currentCSSZoom Read only

A number indicating the effective zoom size of the element, or 1.0 if the element is not rendered.

Element.elementTiming 
Experimental


A string reflecting the elementtiming attribute which marks an element for observation in the PerformanceElementTiming API.

Element.firstElementChild Read only

Returns the first child element of this element.

Element.id

A string representing the id of the element.

Element.innerHTML

A string representing the markup of the element's content.

Element.lastElementChild Read only

Returns the last child element of this element.

Element.localName Read only

A string representing the local part of the qualified name of the element.

Element.namespaceURI Read only

The namespace URI of the element, or null if it is no namespace.

Element.nextElementSibling Read only

An Element, the element immediately following the given one in the tree, or null if there's no sibling node.

Element.outerHTML

A string representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.

Element.part

Represents the part identifier(s) of the element (i.e., set using the part attribute), returned as a DOMTokenList.

Element.prefix Read only

A string representing the namespace prefix of the element, or null if no prefix is specified.

Element.previousElementSibling Read only

An Element, the element immediately preceding the given one in the tree, or null if there is no sibling element.

Element.scrollHeight Read only

Returns a number representing the scroll view height of an element.

Element.scrollLeft

A number representing the left scroll offset of the element.

Element.scrollLeftMax 
Non-standard
 Read only

Returns a number representing the maximum left scroll offset possible for the element.

Element.scrollTop

A number representing number of pixels the top of the element is scrolled vertically.

Element.scrollTopMax 
Non-standard
 Read only

Returns a number representing the maximum top scroll offset possible for the element.

Element.scrollWidth Read only

Returns a number representing the scroll view width of the element.

Element.shadowRoot Read only

Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.

Element.slot

Returns the name of the shadow DOM slot the element is inserted in.

Element.tagName Read only

Returns a string with the name of the tag for the given element.

Instance properties included from ARIAThe Element interface also includes the following properties.

Element.ariaAtomic

A string reflecting the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.

Element.ariaAutoComplete

A string reflecting the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.

Element.ariaBrailleLabel

A string reflecting the aria-braillelabel attribute, which defines the braille label of the element.

Element.ariaBrailleRoleDescription

A string reflecting the aria-brailleroledescription attribute, which defines the ARIA braille role description of the element.

Element.ariaBusy

A string reflecting the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.

Element.ariaChecked

A string reflecting the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.

Element.ariaColCount

A string reflecting the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.

Element.ariaColIndex

A string reflecting the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.

Element.ariaColIndexText

A string reflecting the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.

Element.ariaColSpan

A string reflecting the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.

Element.ariaCurrent

A string reflecting the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.

Element.ariaDescription

A string reflecting the aria-description attribute, which defines a string value that describes or annotates the current element.

Element.ariaDisabled

A string reflecting the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.

Element.ariaExpanded

A string reflecting the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.

Element.ariaHasPopup

A string reflecting the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.

Element.ariaHidden

A string reflecting the aria-hidden attribute, which indicates whether the element is exposed to an accessibility API.

Element.ariaInvalid

A string reflecting the aria-invalid attribute, which indicates the entered value does not conform to the format expected by the application.

Element.ariaKeyShortcuts

A string reflecting the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.

Element.ariaLabel

A string reflecting the aria-label attribute, which defines a string value that labels the current element.

Element.ariaLevel

A string reflecting the aria-level attribute, which defines the hierarchical level of an element within a structure.

Element.ariaLive

A string reflecting the aria-live attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.

Element.ariaModal

A string reflecting the aria-modal attribute, which indicates whether an element is modal when displayed.

Element.ariaMultiline

A string reflecting the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.

Element.ariaMultiSelectable

A string reflecting the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.

Element.ariaOrientation

A string reflecting the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.

Element.ariaPlaceholder

A string reflecting the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.

Element.ariaPosInSet

A string reflecting the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.

Element.ariaPressed

A string reflecting the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.

Element.ariaReadOnly

A string reflecting the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.

Element.ariaRelevant 
Non-standard


A string reflecting the aria-relevant attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an aria-live region are relevant and should be announced.

Element.ariaRequired

A string reflecting the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.

Element.ariaRoleDescription

A string reflecting the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.

Element.ariaRowCount

A string reflecting the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.

Element.ariaRowIndex

A string reflecting the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.

Element.ariaRowIndexText

A string reflecting the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.

Element.ariaRowSpan

A string reflecting the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.

Element.ariaSelected

A string reflecting the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.

Element.ariaSetSize

A string reflecting the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.

Element.ariaSort

A string reflecting the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.

Element.ariaValueMax

A string reflecting the aria-valueMax attribute, which defines the maximum allowed value for a range widget.

Element.ariaValueMin

A string reflecting the aria-valueMin attribute, which defines the minimum allowed value for a range widget.

Element.ariaValueNow

A string reflecting the aria-valueNow attribute, which defines the current value for a range widget.

Element.ariaValueText

A string reflecting the aria-valuetext attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.

Element.role

A string reflecting the explicitly set role attribute, which provides the semantic role of the element.


Instance properties reflected from ARIA element references
The properties reflect the elements specified by id reference in the corresponding attributes, but with some caveats. See Reflected element references in the Reflected attributes guide for more information.

Element.ariaActiveDescendantElement

An element that represents the current active element when focus is on a composite widget, combobox, textbox, group, or application.
Reflects the aria-activedescendant attribute.

Element.ariaControlsElements

An array of elements whose contents or presence are controlled by the element it is applied to.
Reflects the aria-controls attribute.

Element.ariaDescribedByElements

An array of elements that contain the accessible description for the element it is applied to.
Reflects the aria-describedby attribute.

Element.ariaDetailsElements

An array of elements that provide accessible details for the element it is applied to.
Reflects the aria-details attribute.

Element.ariaErrorMessageElements

An array of elements that provide an error message for the element it is applied to.
Reflects the aria-errormessage attribute.

Element.ariaFlowToElements

An array of elements that identify the next element (or elements) in an alternate reading order of content, overriding the general default reading order at the user's discretion.
Reflects the aria-flowto attribute.

Element.ariaLabelledByElements

An array of elements that provide the accessible name for the element it is applied to.
Reflects the aria-labelledby attribute.

Element.ariaOwnsElements

An array of elements owned by the element this is applied to.
This is used to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship.
Reflects the aria-owns attribute.

Instance methodsElement inherits methods from its parents Node, and its own parent, EventTarget.

Element.after()

Inserts a set of Node objects or strings in the children list of the Element's parent, just after the Element.

Element.animate()

A shortcut method to create and run an animation on an element. Returns the created Animation object instance.

Element.append()

Inserts a set of Node objects or strings after the last child of the element.

Element.attachShadow()

Attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.

Element.before()

Inserts a set of Node objects or strings in the children list of the Element's parent, just before the Element.

Element.checkVisibility()

Returns whether an element is expected to be visible or not based on configurable checks.

Element.closest()

Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.

Element.computedStyleMap()

Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.

Element.getAnimations()

Returns an array of Animation objects currently active on the element.

Element.getAttribute()

Retrieves the value of the named attribute from the current node and returns it as a string.

Element.getAttributeNames()

Returns an array of attribute names from the current element.

Element.getAttributeNode()

Retrieves the node representation of the named attribute from the current node and returns it as an Attr.

Element.getAttributeNodeNS()

Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an Attr.

Element.getAttributeNS()

Retrieves the value of the attribute with the specified namespace and name from the current node and returns it as a string.

Element.getBoundingClientRect()

Returns the size of an element and its position relative to the viewport.

Element.getBoxQuads() 
Experimental


Returns a list of DOMQuad objects representing the CSS fragments of the node.

Element.getClientRects()

Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.

Element.getElementsByClassName()

Returns a live HTMLCollection that contains all descendants of the current element that possess the list of classes given in the parameter.

Element.getElementsByTagName()

Returns a live HTMLCollection containing all descendant elements, of a particular tag name, from the current element.

Element.getElementsByTagNameNS()

Returns a live HTMLCollection containing all descendant elements, of a particular tag name and namespace, from the current element.

Element.getHTML()

Returns the DOM content of the element as an HTML string, optionally including any shadow DOM.

Element.hasAttribute()

Returns a boolean value indicating if the element has the specified attribute or not.

Element.hasAttributeNS()

Returns a boolean value indicating if the element has the specified attribute, in the specified namespace, or not.

Element.hasAttributes()

Returns a boolean value indicating if the element has one or more HTML attributes present.

Element.hasPointerCapture()

Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.

Element.insertAdjacentElement()

Inserts a given element node at a given position relative to the element it is invoked upon.

Element.insertAdjacentHTML()

Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.

Element.insertAdjacentText()

Inserts a given text node at a given position relative to the element it is invoked upon.

Element.matches()

Returns a boolean value indicating whether or not the element would be selected by the specified selector string.

Element.moveBefore() 
Experimental


Moves a given Node inside the invoking node as a direct child, before a given reference node, without removing and then inserting the node.

Element.prepend()

Inserts a set of Node objects or strings before the first child of the element.

Element.querySelector()

Returns the first Node which matches the specified selector string relative to the element.

Element.querySelectorAll()

Returns a NodeList of nodes which match the specified selector string relative to the element.

Element.releasePointerCapture()

Releases (stops) pointer capture that was previously set for a specific PointerEvent.

Element.remove()

Removes the element from the children list of its parent.

Element.removeAttribute()

Removes the named attribute from the current node.

Element.removeAttributeNode()

Removes the node representation of the named attribute from the current node.

Element.removeAttributeNS()

Removes the attribute with the specified name and namespace, from the current node.

Element.replaceChildren()

Replaces the existing children of a Node with a specified new set of children.

Element.replaceWith()

Replaces the element in the children list of its parent with a set of Node objects or strings.

Element.requestFullscreen()

Asynchronously asks the browser to make the element fullscreen.

Element.requestPointerLock()

Allows to asynchronously ask for the pointer to be locked on the given element.

Element.scroll()

Scrolls to a particular set of coordinates inside a given element.

Element.scrollBy()

Scrolls an element by the given amount.

Element.scrollIntoView()

Scrolls the page until the element gets into the view.

Element.scrollIntoViewIfNeeded() 
Non-standard


Scrolls the current element into the visible area of the browser window if it's not already within the visible area of the browser window. Use the standard Element.scrollIntoView() instead.

Element.scrollTo()

Scrolls to a particular set of coordinates inside a given element.

Element.setAttribute()

Sets the value of a named attribute of the current node.

Element.setAttributeNode()

Sets the node representation of the named attribute from the current node.

Element.setAttributeNodeNS()

Sets the node representation of the attribute with the specified name and namespace, from the current node.

Element.setAttributeNS()

Sets the value of the attribute with the specified name and namespace, from the current node.

Element.setCapture() 
Non-standard
 
Deprecated


Sets up mouse event capture, redirecting all mouse events to this element.

Element.setHTMLUnsafe()

Parses a string of HTML into a document fragment, without sanitization, which then replaces the element's original subtree in the DOM. The HTML string may include declarative shadow roots, which would be parsed as template elements if the HTML was set using Element.innerHTML.

Element.setPointerCapture()

Designates a specific element as the capture target of future pointer events.

Element.toggleAttribute()

Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.

EventsListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.

afterscriptexecute 
Non-standard
 
Deprecated


Fired when a script has been executed.

beforeinput

Fired when the value of an input element is about to be modified.

beforematch

Fires on an element that is in the hidden until found state, when the browser is about to reveal its content because the user has found the content through the "find in page" feature or through fragment navigation.

beforescriptexecute 
Non-standard
 
Deprecated


Fired when a script is about to be executed.

beforexrselect 
Experimental


Fired before WebXR select events (select, selectstart, selectend) are dispatched.

contentvisibilityautostatechange

Fires on any element with content-visibility: auto set on it when it starts or stops being relevant to the user and skipping its contents.

input

Fires when an element's value is changed as a direct result of a user action.

securitypolicyviolation

Fired when a Content Security Policy is violated.

wheel

Fired when the user rotates a wheel button on a pointing device (typically a mouse).

Animation events
animationcancel

Fired when an animation unexpectedly aborts.

animationend

Fired when an animation has completed normally.

animationiteration

Fired when an animation iteration has completed.

animationstart

Fired when an animation starts.

Clipboard events
copy

Fired when the user initiates a copy action through the browser's user interface.

cut

Fired when the user initiates a cut action through the browser's user interface.

paste

Fired when the user initiates a paste action through the browser's user interface.

Composition events
compositionend

Fired when a text composition system such as an input method editor completes or cancels the current composition session.

compositionstart

Fired when a text composition system such as an input method editor starts a new composition session.

compositionupdate

Fired when a new character is received in the context of a text composition session controlled by a text composition system such as an input method editor.

Focus events
blur

Fired when an element has lost focus.

focus

Fired when an element has gained focus.

focusin

Fired when an element has gained focus, after focus.

focusout

Fired when an element has lost focus, after blur.

Fullscreen events
fullscreenchange

Sent to an Element when it transitions into or out of fullscreen mode.

fullscreenerror

Sent to an Element if an error occurs while attempting to switch it into or out of fullscreen mode.

Keyboard events
keydown

Fired when a key is pressed.

keypress 
Deprecated


Fired when a key that produces a character value is pressed down.

keyup

Fired when a key is released.

Mouse events
auxclick

Fired when a non-primary pointing device button (e.g., any mouse button other than the left button) has been pressed and released on an element.

click

Fired when a pointing device button (e.g., a mouse's primary button) is pressed and released on a single element.

contextmenu

Fired when the user attempts to open a context menu.

dblclick

Fired when a pointing device button (e.g., a mouse's primary button) is clicked twice on a single element.

DOMActivate 
Deprecated


Occurs when an element is activated, for instance, through a mouse click or a keypress.

DOMMouseScroll 
Deprecated
 
Non-standard


Occurs when mouse wheel or similar device is operated and the accumulated scroll amount is over 1 line or 1 page since last event.

mousedown

Fired when a pointing device button is pressed on an element.

mouseenter

Fired when a pointing device (usually a mouse) is moved over the element that has the listener attached.

mouseleave

Fired when the pointer of a pointing device (usually a mouse) is moved out of an element that has the listener attached to it.

mousemove

Fired when a pointing device (usually a mouse) is moved while over an element.

mouseout

Fired when a pointing device (usually a mouse) is moved off the element to which the listener is attached or off one of its children.

mouseover

Fired when a pointing device is moved onto the element to which the listener is attached or onto one of its children.

mouseup

Fired when a pointing device button is released on an element.

mousewheel 
Deprecated
 
Non-standard


Fired when a mouse wheel or similar device is operated.

MozMousePixelScroll 
Deprecated
 
Non-standard


Fired when a mouse wheel or similar device is operated.

webkitmouseforcechanged 
Non-standard


Fired each time the amount of pressure changes on the trackpad touch screen.

webkitmouseforcedown 
Non-standard


Fired after the mousedown event as soon as sufficient pressure has been applied to qualify as a "force click".

webkitmouseforcewillbegin 
Non-standard


Fired before the mousedown event.

webkitmouseforceup 
Non-standard


Fired after the webkitmouseforcedown event as soon as the pressure has been reduced sufficiently to end the "force click".

Pointer events
gotpointercapture

Fired when an element captures a pointer using setPointerCapture().

lostpointercapture

Fired when a captured pointer is released.

pointercancel

Fired when a pointer event is canceled.

pointerdown

Fired when a pointer becomes active.

pointerenter

Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants.

pointerleave

Fired when a pointer is moved out of the hit test boundaries of an element.

pointermove

Fired when a pointer changes coordinates.

pointerout

Fired when a pointer is moved out of the hit test boundaries of an element (among other reasons).

pointerover

Fired when a pointer is moved into an element's hit test boundaries.

pointerrawupdate 
Experimental


Fired when a pointer changes any properties that don't fire pointerdown or pointerup events.

pointerup

Fired when a pointer is no longer active.

Scroll events
scroll

Fired when the document view or an element has been scrolled.

scrollend

Fires when the document view has completed scrolling.

scrollsnapchange 
Experimental


Fired on the scroll container at the end of a scrolling operation when a new scroll snap target has been selected.

scrollsnapchanging 
Experimental


Fired on the scroll container when the browser determines a new scroll snap target is pending, i.e., it will be selected when the current scroll gesture ends.

Touch events
gesturechange 
Non-standard


Fired when digits move during a touch gesture.

gestureend 
Non-standard


Fired when there are no longer multiple fingers contacting the touch surface, thus ending the gesture.

gesturestart 
Non-standard


Fired when multiple fingers contact the touch surface, thus starting a new gesture.

touchcancel

Fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).

touchend

Fired when one or more touch points are removed from the touch surface.

touchmove

Fired when one or more touch points are moved along the touch surface.

touchstart

Fired when one or more touch points are placed on the touch surface.

Transition events
transitioncancel

An Event fired when a CSS transition has been cancelled.

transitionend

An Event fired when a CSS transition has finished playing.

transitionrun

An Event fired when a CSS transition is created (i.e., when it is added to a set of running transitions), though not necessarily started.

transitionstart

An Event fired when a CSS transition has started transitioning.

SpecificationsSpecificationDOM # interface-elementPointer Events # extensions-to-the-element-interfaceFullscreen API # apiDOM Parsing and Serialization # extensions-to-the-element-interfaceCSSOM View Module # extension-to-the-element-interfaceBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 9, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nEventBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The Event interface represents an event which takes place on an EventTarget.
An event can be triggered by the user action e.g., clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the HTMLElement.click() method of an element, or by defining the event, then sending it to a specified target using EventTarget.dispatchEvent().
There are many types of events, some of which use other interfaces based on the main Event interface. Event itself contains the properties and methods which are common to all events.
Many DOM elements can be set up to accept (or "listen" for) these events, and execute code in response to process (or "handle") them. Event-handlers are usually connected (or "attached") to various HTML elements (such as <button>, <div>, <span>, etc.) using EventTarget.addEventListener(), and this generally replaces using the old HTML event handler attributes. Further, when properly added, such handlers can also be disconnected if needed using removeEventListener().

Note:
One element can have several such handlers, even for the exact same event—particularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)

When there are many nested elements, each with its own handler(s), event processing can become very complicated—especially where a parent element receives the very same event as its child elements because "spatially" they overlap so the event technically occurs in both, and the processing order of such events depends on the Event bubbling settings of each handler triggered.Interfaces based on EventBelow is a list of interfaces which are based on the main Event interface, with links to their respective documentation in the MDN API reference.
Note that all event interfaces have names which end in "Event".

AnimationEvent
AudioProcessingEvent 
Deprecated

BeforeUnloadEvent
BlobEvent
ClipboardEvent
CloseEvent
CompositionEvent
CustomEvent
DeviceMotionEvent
DeviceOrientationEvent
DragEvent
ErrorEvent
FetchEvent
FocusEvent
FontFaceSetLoadEvent
FormDataEvent
GamepadEvent
HashChangeEvent
HIDInputReportEvent
IDBVersionChangeEvent
InputEvent
KeyboardEvent
MediaStreamEvent 
Deprecated

MessageEvent
MouseEvent
MutationEvent 
Deprecated

OfflineAudioCompletionEvent
PageTransitionEvent
PaymentRequestUpdateEvent
PointerEvent
PopStateEvent
ProgressEvent
RTCDataChannelEvent
RTCPeerConnectionIceEvent
StorageEvent
SubmitEvent
TimeEvent
TouchEvent
TrackEvent
TransitionEvent
UIEvent
WebGLContextEvent
WheelEvent
Constructor
Event()

Creates an Event object, returning it to the caller.

Instance properties
Event.bubbles Read only

A boolean value indicating whether or not the event bubbles up through the DOM.

Event.cancelable Read only

A boolean value indicating whether the event is cancelable.

Event.composed Read only

A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.

Event.currentTarget Read only

A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting.

Event.defaultPrevented Read only

Indicates whether or not the call to event.preventDefault() canceled the event.

Event.eventPhase Read only

Indicates which phase of the event flow is being processed. It is one of the following numbers: NONE, CAPTURING_PHASE, AT_TARGET, BUBBLING_PHASE.

Event.isTrusted Read only

Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, for example).

Event.srcElement Read only 
Deprecated


An alias for the Event.target property. Use Event.target instead.

Event.target Read only

A reference to the object to which the event was originally dispatched.

Event.timeStamp Read only

The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a DOMHighResTimeStamp instead.

Event.type Read only

The name identifying the type of the event.

Legacy and non-standard properties
Event.cancelBubble 
Deprecated


A historical alias to Event.stopPropagation() that should be used instead. Setting its value to true before returning from an event handler prevents propagation of the event.

Event.explicitOriginalTarget 
Non-standard
 Read only

The explicit original target of the event.

Event.originalTarget 
Non-standard
 Read only

The original target of the event, before any retargetings.

Event.returnValue 
Deprecated


A historical property still supported in order to ensure existing sites continue to work. Use Event.preventDefault() and Event.defaultPrevented instead.

Event.scoped Read only 
Deprecated


A boolean value indicating whether the given event will bubble across through the shadow root into the standard DOM. Use composed instead.

Instance methods
Event.composedPath()

Returns the event's path (an array of objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.

Event.preventDefault()

Cancels the event (if it is cancelable).

Event.stopImmediatePropagation()

For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance).

Event.stopPropagation()

Stops the propagation of events further along in the DOM.

Deprecated methods
Event.initEvent() 
Deprecated


Initializes the value of an Event created. If the event has already been dispatched, this method does nothing. Use the constructor (Event() instead).

SpecificationsSpecificationDOM # interface-eventBrowser compatibilitySee also
Types of events available: Event reference
Learn: Introduction to events
Learn: Event bubbling
Creating and triggering custom events\n\nEventBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The Event interface represents an event which takes place on an EventTarget.
An event can be triggered by the user action e.g., clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the HTMLElement.click() method of an element, or by defining the event, then sending it to a specified target using EventTarget.dispatchEvent().
There are many types of events, some of which use other interfaces based on the main Event interface. Event itself contains the properties and methods which are common to all events.
Many DOM elements can be set up to accept (or "listen" for) these events, and execute code in response to process (or "handle") them. Event-handlers are usually connected (or "attached") to various HTML elements (such as <button>, <div>, <span>, etc.) using EventTarget.addEventListener(), and this generally replaces using the old HTML event handler attributes. Further, when properly added, such handlers can also be disconnected if needed using removeEventListener().

Note:
One element can have several such handlers, even for the exact same event—particularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)

When there are many nested elements, each with its own handler(s), event processing can become very complicated—especially where a parent element receives the very same event as its child elements because "spatially" they overlap so the event technically occurs in both, and the processing order of such events depends on the Event bubbling settings of each handler triggered.Interfaces based on EventBelow is a list of interfaces which are based on the main Event interface, with links to their respective documentation in the MDN API reference.
Note that all event interfaces have names which end in "Event".

AnimationEvent
AudioProcessingEvent 
Deprecated

BeforeUnloadEvent
BlobEvent
ClipboardEvent
CloseEvent
CompositionEvent
CustomEvent
DeviceMotionEvent
DeviceOrientationEvent
DragEvent
ErrorEvent
FetchEvent
FocusEvent
FontFaceSetLoadEvent
FormDataEvent
GamepadEvent
HashChangeEvent
HIDInputReportEvent
IDBVersionChangeEvent
InputEvent
KeyboardEvent
MediaStreamEvent 
Deprecated

MessageEvent
MouseEvent
MutationEvent 
Deprecated

OfflineAudioCompletionEvent
PageTransitionEvent
PaymentRequestUpdateEvent
PointerEvent
PopStateEvent
ProgressEvent
RTCDataChannelEvent
RTCPeerConnectionIceEvent
StorageEvent
SubmitEvent
TimeEvent
TouchEvent
TrackEvent
TransitionEvent
UIEvent
WebGLContextEvent
WheelEvent
Constructor
Event()

Creates an Event object, returning it to the caller.

Instance properties
Event.bubbles Read only

A boolean value indicating whether or not the event bubbles up through the DOM.

Event.cancelable Read only

A boolean value indicating whether the event is cancelable.

Event.composed Read only

A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.

Event.currentTarget Read only

A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting.

Event.defaultPrevented Read only

Indicates whether or not the call to event.preventDefault() canceled the event.

Event.eventPhase Read only

Indicates which phase of the event flow is being processed. It is one of the following numbers: NONE, CAPTURING_PHASE, AT_TARGET, BUBBLING_PHASE.

Event.isTrusted Read only

Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, for example).

Event.srcElement Read only 
Deprecated


An alias for the Event.target property. Use Event.target instead.

Event.target Read only

A reference to the object to which the event was originally dispatched.

Event.timeStamp Read only

The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a DOMHighResTimeStamp instead.

Event.type Read only

The name identifying the type of the event.

Legacy and non-standard properties
Event.cancelBubble 
Deprecated


A historical alias to Event.stopPropagation() that should be used instead. Setting its value to true before returning from an event handler prevents propagation of the event.

Event.explicitOriginalTarget 
Non-standard
 Read only

The explicit original target of the event.

Event.originalTarget 
Non-standard
 Read only

The original target of the event, before any retargetings.

Event.returnValue 
Deprecated


A historical property still supported in order to ensure existing sites continue to work. Use Event.preventDefault() and Event.defaultPrevented instead.

Event.scoped Read only 
Deprecated


A boolean value indicating whether the given event will bubble across through the shadow root into the standard DOM. Use composed instead.

Instance methods
Event.composedPath()

Returns the event's path (an array of objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.

Event.preventDefault()

Cancels the event (if it is cancelable).

Event.stopImmediatePropagation()

For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance).

Event.stopPropagation()

Stops the propagation of events further along in the DOM.

Deprecated methods
Event.initEvent() 
Deprecated


Initializes the value of an Event created. If the event has already been dispatched, this method does nothing. Use the constructor (Event() instead).

SpecificationsSpecificationDOM # interface-eventBrowser compatibilitySee also
Types of events available: Event reference
Learn: Introduction to events
Learn: Event bubbling
Creating and triggering custom events
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nEventBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The Event interface represents an event which takes place on an EventTarget.
An event can be triggered by the user action e.g., clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the HTMLElement.click() method of an element, or by defining the event, then sending it to a specified target using EventTarget.dispatchEvent().
There are many types of events, some of which use other interfaces based on the main Event interface. Event itself contains the properties and methods which are common to all events.
Many DOM elements can be set up to accept (or "listen" for) these events, and execute code in response to process (or "handle") them. Event-handlers are usually connected (or "attached") to various HTML elements (such as <button>, <div>, <span>, etc.) using EventTarget.addEventListener(), and this generally replaces using the old HTML event handler attributes. Further, when properly added, such handlers can also be disconnected if needed using removeEventListener().

Note:
One element can have several such handlers, even for the exact same event—particularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)

When there are many nested elements, each with its own handler(s), event processing can become very complicated—especially where a parent element receives the very same event as its child elements because "spatially" they overlap so the event technically occurs in both, and the processing order of such events depends on the Event bubbling settings of each handler triggered.Interfaces based on EventBelow is a list of interfaces which are based on the main Event interface, with links to their respective documentation in the MDN API reference.
Note that all event interfaces have names which end in "Event".

AnimationEvent
AudioProcessingEvent 
Deprecated

BeforeUnloadEvent
BlobEvent
ClipboardEvent
CloseEvent
CompositionEvent
CustomEvent
DeviceMotionEvent
DeviceOrientationEvent
DragEvent
ErrorEvent
FetchEvent
FocusEvent
FontFaceSetLoadEvent
FormDataEvent
GamepadEvent
HashChangeEvent
HIDInputReportEvent
IDBVersionChangeEvent
InputEvent
KeyboardEvent
MediaStreamEvent 
Deprecated

MessageEvent
MouseEvent
MutationEvent 
Deprecated

OfflineAudioCompletionEvent
PageTransitionEvent
PaymentRequestUpdateEvent
PointerEvent
PopStateEvent
ProgressEvent
RTCDataChannelEvent
RTCPeerConnectionIceEvent
StorageEvent
SubmitEvent
TimeEvent
TouchEvent
TrackEvent
TransitionEvent
UIEvent
WebGLContextEvent
WheelEvent
Constructor
Event()

Creates an Event object, returning it to the caller.

Instance properties
Event.bubbles Read only

A boolean value indicating whether or not the event bubbles up through the DOM.

Event.cancelable Read only

A boolean value indicating whether the event is cancelable.

Event.composed Read only

A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.

Event.currentTarget Read only

A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting.

Event.defaultPrevented Read only

Indicates whether or not the call to event.preventDefault() canceled the event.

Event.eventPhase Read only

Indicates which phase of the event flow is being processed. It is one of the following numbers: NONE, CAPTURING_PHASE, AT_TARGET, BUBBLING_PHASE.

Event.isTrusted Read only

Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, for example).

Event.srcElement Read only 
Deprecated


An alias for the Event.target property. Use Event.target instead.

Event.target Read only

A reference to the object to which the event was originally dispatched.

Event.timeStamp Read only

The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a DOMHighResTimeStamp instead.

Event.type Read only

The name identifying the type of the event.

Legacy and non-standard properties
Event.cancelBubble 
Deprecated


A historical alias to Event.stopPropagation() that should be used instead. Setting its value to true before returning from an event handler prevents propagation of the event.

Event.explicitOriginalTarget 
Non-standard
 Read only

The explicit original target of the event.

Event.originalTarget 
Non-standard
 Read only

The original target of the event, before any retargetings.

Event.returnValue 
Deprecated


A historical property still supported in order to ensure existing sites continue to work. Use Event.preventDefault() and Event.defaultPrevented instead.

Event.scoped Read only 
Deprecated


A boolean value indicating whether the given event will bubble across through the shadow root into the standard DOM. Use composed instead.

Instance methods
Event.composedPath()

Returns the event's path (an array of objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.

Event.preventDefault()

Cancels the event (if it is cancelable).

Event.stopImmediatePropagation()

For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance).

Event.stopPropagation()

Stops the propagation of events further along in the DOM.

Deprecated methods
Event.initEvent() 
Deprecated


Initializes the value of an Event created. If the event has already been dispatched, this method does nothing. Use the constructor (Event() instead).

SpecificationsSpecificationDOM # interface-eventBrowser compatibilitySee also
Types of events available: Event reference
Learn: Introduction to events
Learn: Event bubbling
Creating and triggering custom events
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nEventTargetBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The EventTarget interface is implemented by objects that can receive events and may have listeners for them.
In other words, any target of events implements the three methods associated with this interface.
Element, and its children, as well as Document and Window, are the most common event targets,
but other objects can be event targets, too.
For example IDBRequest, AudioNode, and AudioContext are also event targets.
Many event targets (including elements, documents, and windows) also support setting event handlers via onevent properties and attributes.Constructor
EventTarget()

Creates a new EventTarget object instance.

Instance methods
EventTarget.addEventListener()

Registers an event handler of a specific event type on the EventTarget.

EventTarget.removeEventListener()

Removes an event listener from the EventTarget.

EventTarget.dispatchEvent()

Dispatches an event to this EventTarget.

SpecificationsSpecificationDOM # interface-eventtargetBrowser compatibilitySee also
Event reference – the events available in the platform.
Introduction to events
Event interface\n\nEventTargetBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The EventTarget interface is implemented by objects that can receive events and may have listeners for them.
In other words, any target of events implements the three methods associated with this interface.
Element, and its children, as well as Document and Window, are the most common event targets,
but other objects can be event targets, too.
For example IDBRequest, AudioNode, and AudioContext are also event targets.
Many event targets (including elements, documents, and windows) also support setting event handlers via onevent properties and attributes.Constructor
EventTarget()

Creates a new EventTarget object instance.

Instance methods
EventTarget.addEventListener()

Registers an event handler of a specific event type on the EventTarget.

EventTarget.removeEventListener()

Removes an event listener from the EventTarget.

EventTarget.dispatchEvent()

Dispatches an event to this EventTarget.

SpecificationsSpecificationDOM # interface-eventtargetBrowser compatibilitySee also
Event reference – the events available in the platform.
Introduction to events
Event interface
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 19, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nEventTargetBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The EventTarget interface is implemented by objects that can receive events and may have listeners for them.
In other words, any target of events implements the three methods associated with this interface.
Element, and its children, as well as Document and Window, are the most common event targets,
but other objects can be event targets, too.
For example IDBRequest, AudioNode, and AudioContext are also event targets.
Many event targets (including elements, documents, and windows) also support setting event handlers via onevent properties and attributes.Constructor
EventTarget()

Creates a new EventTarget object instance.

Instance methods
EventTarget.addEventListener()

Registers an event handler of a specific event type on the EventTarget.

EventTarget.removeEventListener()

Removes an event listener from the EventTarget.

EventTarget.dispatchEvent()

Dispatches an event to this EventTarget.

SpecificationsSpecificationDOM # interface-eventtargetBrowser compatibilitySee also
Event reference – the events available in the platform.
Introduction to events
Event interface
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 19, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nHTMLCollectionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.
An HTMLCollection in the HTML DOM is live; it is automatically updated when the underlying document is changed. For this reason it is a good idea to make a copy (e.g., using Array.from) to iterate over if adding, moving, or removing nodes.
This interface is called HTMLCollection for historical reasons, because before the modern DOM, collections implementing this interface could only have HTML elements as their items.
This interface was an attempt to create an unmodifiable list and only continues to be supported to not break code that's already using it. Modern APIs represent list structures using types based on JavaScript arrays, thus making many array methods available, and at the same time imposing additional semantics on their usage (such as making their items read-only).
These historical reasons do not mean that you as a developer should avoid HTMLCollection. You don't create HTMLCollection objects yourself, but you get them from APIs such as Document.getElementsByClassName(), and these APIs are not deprecated. However, be careful of the semantic differences from a real array.Instance properties
HTMLCollection.length Read only

Returns the number of items in the collection.

Instance methods
HTMLCollection.item()

Returns the specific element at the given zero-based index into the list. Returns null if the index is out of range.
An alternative to accessing collection[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.

HTMLCollection.namedItem()

Returns the specific node whose ID or, as a fallback, name matches the string specified by name. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the name attribute. Returns null if no node exists by the given name.
An alternative to accessing collection[name] (which instead returns undefined when name does not exist). This is mostly useful for non-JavaScript DOM implementations.

Usage in JavaScriptHTMLCollection also exposes its members as properties by name and index. HTML IDs may contain : and . as valid characters, which would necessitate using bracket notation for property access. Currently, an HTMLCollection object does not recognize purely numeric IDs, which would cause conflict with the array-style access, though HTML does permit these.
For example, assuming there is one <form> element in the document and its id is myForm:
jslet elem1, elem2;

// document.forms is an HTMLCollection

elem1 = document.forms[0];
elem2 = document.forms.item(0);

alert(elem1 === elem2); // shows: "true"

elem1 = document.forms.myForm;
elem2 = document.forms.namedItem("myForm");

alert(elem1 === elem2); // shows: "true"

elem1 = document.forms["named.item.with.periods"];
SpecificationsSpecificationDOM # interface-htmlcollectionBrowser compatibilitySee also
NodeList
HTMLFormControlsCollection, HTMLOptionsCollection\n\nHTMLCollectionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.
An HTMLCollection in the HTML DOM is live; it is automatically updated when the underlying document is changed. For this reason it is a good idea to make a copy (e.g., using Array.from) to iterate over if adding, moving, or removing nodes.
This interface is called HTMLCollection for historical reasons, because before the modern DOM, collections implementing this interface could only have HTML elements as their items.
This interface was an attempt to create an unmodifiable list and only continues to be supported to not break code that's already using it. Modern APIs represent list structures using types based on JavaScript arrays, thus making many array methods available, and at the same time imposing additional semantics on their usage (such as making their items read-only).
These historical reasons do not mean that you as a developer should avoid HTMLCollection. You don't create HTMLCollection objects yourself, but you get them from APIs such as Document.getElementsByClassName(), and these APIs are not deprecated. However, be careful of the semantic differences from a real array.Instance properties
HTMLCollection.length Read only

Returns the number of items in the collection.

Instance methods
HTMLCollection.item()

Returns the specific element at the given zero-based index into the list. Returns null if the index is out of range.
An alternative to accessing collection[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.

HTMLCollection.namedItem()

Returns the specific node whose ID or, as a fallback, name matches the string specified by name. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the name attribute. Returns null if no node exists by the given name.
An alternative to accessing collection[name] (which instead returns undefined when name does not exist). This is mostly useful for non-JavaScript DOM implementations.

Usage in JavaScriptHTMLCollection also exposes its members as properties by name and index. HTML IDs may contain : and . as valid characters, which would necessitate using bracket notation for property access. Currently, an HTMLCollection object does not recognize purely numeric IDs, which would cause conflict with the array-style access, though HTML does permit these.
For example, assuming there is one <form> element in the document and its id is myForm:
jslet elem1, elem2;

// document.forms is an HTMLCollection

elem1 = document.forms[0];
elem2 = document.forms.item(0);

alert(elem1 === elem2); // shows: "true"

elem1 = document.forms.myForm;
elem2 = document.forms.namedItem("myForm");

alert(elem1 === elem2); // shows: "true"

elem1 = document.forms["named.item.with.periods"];
SpecificationsSpecificationDOM # interface-htmlcollectionBrowser compatibilitySee also
NodeList
HTMLFormControlsCollection, HTMLOptionsCollection
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jun 21, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nHTMLCollectionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.
An HTMLCollection in the HTML DOM is live; it is automatically updated when the underlying document is changed. For this reason it is a good idea to make a copy (e.g., using Array.from) to iterate over if adding, moving, or removing nodes.
This interface is called HTMLCollection for historical reasons, because before the modern DOM, collections implementing this interface could only have HTML elements as their items.
This interface was an attempt to create an unmodifiable list and only continues to be supported to not break code that's already using it. Modern APIs represent list structures using types based on JavaScript arrays, thus making many array methods available, and at the same time imposing additional semantics on their usage (such as making their items read-only).
These historical reasons do not mean that you as a developer should avoid HTMLCollection. You don't create HTMLCollection objects yourself, but you get them from APIs such as Document.getElementsByClassName(), and these APIs are not deprecated. However, be careful of the semantic differences from a real array.Instance properties
HTMLCollection.length Read only

Returns the number of items in the collection.

Instance methods
HTMLCollection.item()

Returns the specific element at the given zero-based index into the list. Returns null if the index is out of range.
An alternative to accessing collection[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.

HTMLCollection.namedItem()

Returns the specific node whose ID or, as a fallback, name matches the string specified by name. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the name attribute. Returns null if no node exists by the given name.
An alternative to accessing collection[name] (which instead returns undefined when name does not exist). This is mostly useful for non-JavaScript DOM implementations.

Usage in JavaScriptHTMLCollection also exposes its members as properties by name and index. HTML IDs may contain : and . as valid characters, which would necessitate using bracket notation for property access. Currently, an HTMLCollection object does not recognize purely numeric IDs, which would cause conflict with the array-style access, though HTML does permit these.
For example, assuming there is one <form> element in the document and its id is myForm:
jslet elem1, elem2;

// document.forms is an HTMLCollection

elem1 = document.forms[0];
elem2 = document.forms.item(0);

alert(elem1 === elem2); // shows: "true"

elem1 = document.forms.myForm;
elem2 = document.forms.namedItem("myForm");

alert(elem1 === elem2); // shows: "true"

elem1 = document.forms["named.item.with.periods"];
SpecificationsSpecificationDOM # interface-htmlcollectionBrowser compatibilitySee also
NodeList
HTMLFormControlsCollection, HTMLOptionsCollection
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jun 21, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nMutationObserverBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.Constructor
MutationObserver()

Creates and returns a new MutationObserver which will invoke a specified callback function when DOM changes occur.

Instance methods
disconnect()

Stops the MutationObserver instance from receiving further notifications until and unless observe() is called again.

observe()

Configures the MutationObserver to begin receiving notifications through its callback function when DOM changes matching the given options occur.

takeRecords()

Removes all pending notifications from the MutationObserver's notification queue and returns them in a new Array of MutationRecord objects.

Mutation Observer & customize resize event listener & demohttps://codepen.io/milofultz/pen/LYjPXPwExampleThe following example was adapted from this blog post.
js// Select the node that will be observed for mutations
const targetNode = document.getElementById("some-id");

// Options for the observer (which mutations to observe)
const config = { attributes: true, childList: true, subtree: true };

// Callback function to execute when mutations are observed
const callback = (mutationList, observer) => {
  for (const mutation of mutationList) {
    if (mutation.type === "childList") {
      console.log("A child node has been added or removed.");
    } else if (mutation.type === "attributes") {
      console.log(`The ${mutation.attributeName} attribute was modified.`);
    }
  }
};

// Create an observer instance linked to the callback function
const observer = new MutationObserver(callback);

// Start observing the target node for configured mutations
observer.observe(targetNode, config);

// Later, you can stop observing
observer.disconnect();
SpecificationsSpecificationDOM # interface-mutationobserverBrowser compatibilitySee also
PerformanceObserver
ResizeObserver
IntersectionObserver
A brief overview
A more in-depth discussion
A screencast by Chromium developer Rafael Weinstein\n\nMutationObserverBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.Constructor
MutationObserver()

Creates and returns a new MutationObserver which will invoke a specified callback function when DOM changes occur.

Instance methods
disconnect()

Stops the MutationObserver instance from receiving further notifications until and unless observe() is called again.

observe()

Configures the MutationObserver to begin receiving notifications through its callback function when DOM changes matching the given options occur.

takeRecords()

Removes all pending notifications from the MutationObserver's notification queue and returns them in a new Array of MutationRecord objects.

Mutation Observer & customize resize event listener & demohttps://codepen.io/milofultz/pen/LYjPXPwExampleThe following example was adapted from this blog post.
js// Select the node that will be observed for mutations
const targetNode = document.getElementById("some-id");

// Options for the observer (which mutations to observe)
const config = { attributes: true, childList: true, subtree: true };

// Callback function to execute when mutations are observed
const callback = (mutationList, observer) => {
  for (const mutation of mutationList) {
    if (mutation.type === "childList") {
      console.log("A child node has been added or removed.");
    } else if (mutation.type === "attributes") {
      console.log(`The ${mutation.attributeName} attribute was modified.`);
    }
  }
};

// Create an observer instance linked to the callback function
const observer = new MutationObserver(callback);

// Start observing the target node for configured mutations
observer.observe(targetNode, config);

// Later, you can stop observing
observer.disconnect();
SpecificationsSpecificationDOM # interface-mutationobserverBrowser compatibilitySee also
PerformanceObserver
ResizeObserver
IntersectionObserver
A brief overview
A more in-depth discussion
A screencast by Chromium developer Rafael Weinstein
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nMutationObserverBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.Constructor
MutationObserver()

Creates and returns a new MutationObserver which will invoke a specified callback function when DOM changes occur.

Instance methods
disconnect()

Stops the MutationObserver instance from receiving further notifications until and unless observe() is called again.

observe()

Configures the MutationObserver to begin receiving notifications through its callback function when DOM changes matching the given options occur.

takeRecords()

Removes all pending notifications from the MutationObserver's notification queue and returns them in a new Array of MutationRecord objects.

Mutation Observer & customize resize event listener & demohttps://codepen.io/milofultz/pen/LYjPXPwExampleThe following example was adapted from this blog post.
js// Select the node that will be observed for mutations
const targetNode = document.getElementById("some-id");

// Options for the observer (which mutations to observe)
const config = { attributes: true, childList: true, subtree: true };

// Callback function to execute when mutations are observed
const callback = (mutationList, observer) => {
  for (const mutation of mutationList) {
    if (mutation.type === "childList") {
      console.log("A child node has been added or removed.");
    } else if (mutation.type === "attributes") {
      console.log(`The ${mutation.attributeName} attribute was modified.`);
    }
  }
};

// Create an observer instance linked to the callback function
const observer = new MutationObserver(callback);

// Start observing the target node for configured mutations
observer.observe(targetNode, config);

// Later, you can stop observing
observer.disconnect();
SpecificationsSpecificationDOM # interface-mutationobserverBrowser compatibilitySee also
PerformanceObserver
ResizeObserver
IntersectionObserver
A brief overview
A more in-depth discussion
A screencast by Chromium developer Rafael Weinstein
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nMutationRecordBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe MutationRecord is a read-only interface that represents an individual DOM mutation observed by a MutationObserver. It is the object inside the array passed to the callback of a MutationObserver.Instance properties
MutationRecord.addedNodes Read only

The nodes added by a mutation. Will be an empty NodeList if no nodes were added.

MutationRecord.attributeName Read only

The name of the changed attribute as a string, or null.

MutationRecord.attributeNamespace Read only

The namespace of the changed attribute as a string, or null.

MutationRecord.nextSibling Read only

The next sibling of the added or removed nodes, or null.

MutationRecord.oldValue Read only

The value depends on the MutationRecord.type:

For attributes, it is the value of the changed attribute before the change.
For characterData, it is the data of the changed node before the change.
For childList, it is null.


MutationRecord.previousSibling Read only

The previous sibling of the added or removed nodes, or null.

MutationRecord.removedNodes Read only

The nodes removed by a mutation. Will be an empty NodeList if no nodes were removed.

MutationRecord.target Read only

The node the mutation affected, depending on the MutationRecord.type.

For attributes, it is the element whose attribute changed.
For characterData, it is the CharacterData node.
For childList, it is the node whose children changed.


MutationRecord.type Read only

A string representing the type of mutation: attributes if the mutation was an attribute mutation, characterData if it was a mutation to a CharacterData node, and childList if it was a mutation to the tree of nodes.

SpecificationsSpecificationDOM # interface-mutationrecordBrowser compatibility\n\nMutationRecordBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe MutationRecord is a read-only interface that represents an individual DOM mutation observed by a MutationObserver. It is the object inside the array passed to the callback of a MutationObserver.Instance properties
MutationRecord.addedNodes Read only

The nodes added by a mutation. Will be an empty NodeList if no nodes were added.

MutationRecord.attributeName Read only

The name of the changed attribute as a string, or null.

MutationRecord.attributeNamespace Read only

The namespace of the changed attribute as a string, or null.

MutationRecord.nextSibling Read only

The next sibling of the added or removed nodes, or null.

MutationRecord.oldValue Read only

The value depends on the MutationRecord.type:

For attributes, it is the value of the changed attribute before the change.
For characterData, it is the data of the changed node before the change.
For childList, it is null.


MutationRecord.previousSibling Read only

The previous sibling of the added or removed nodes, or null.

MutationRecord.removedNodes Read only

The nodes removed by a mutation. Will be an empty NodeList if no nodes were removed.

MutationRecord.target Read only

The node the mutation affected, depending on the MutationRecord.type.

For attributes, it is the element whose attribute changed.
For characterData, it is the CharacterData node.
For childList, it is the node whose children changed.


MutationRecord.type Read only

A string representing the type of mutation: attributes if the mutation was an attribute mutation, characterData if it was a mutation to a CharacterData node, and childList if it was a mutation to the tree of nodes.

SpecificationsSpecificationDOM # interface-mutationrecordBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nMutationRecordBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe MutationRecord is a read-only interface that represents an individual DOM mutation observed by a MutationObserver. It is the object inside the array passed to the callback of a MutationObserver.Instance properties
MutationRecord.addedNodes Read only

The nodes added by a mutation. Will be an empty NodeList if no nodes were added.

MutationRecord.attributeName Read only

The name of the changed attribute as a string, or null.

MutationRecord.attributeNamespace Read only

The namespace of the changed attribute as a string, or null.

MutationRecord.nextSibling Read only

The next sibling of the added or removed nodes, or null.

MutationRecord.oldValue Read only

The value depends on the MutationRecord.type:

For attributes, it is the value of the changed attribute before the change.
For characterData, it is the data of the changed node before the change.
For childList, it is null.


MutationRecord.previousSibling Read only

The previous sibling of the added or removed nodes, or null.

MutationRecord.removedNodes Read only

The nodes removed by a mutation. Will be an empty NodeList if no nodes were removed.

MutationRecord.target Read only

The node the mutation affected, depending on the MutationRecord.type.

For attributes, it is the element whose attribute changed.
For characterData, it is the CharacterData node.
For childList, it is the node whose children changed.


MutationRecord.type Read only

A string representing the type of mutation: attributes if the mutation was an attribute mutation, characterData if it was a mutation to a CharacterData node, and childList if it was a mutation to the tree of nodes.

SpecificationsSpecificationDOM # interface-mutationrecordBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 24, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nNamedNodeMapBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.
A NamedNodeMap object is live and will thus be auto-updated if changes are made to its contents internally or elsewhere.

Note:
Although called NamedNodeMap, this interface doesn't deal with Node objects but with Attr objects, which are a specialized class of Node objects.
Instance propertiesThis interface doesn't inherit any property.

NamedNodeMap.length Read only

Returns the amount of objects in the map.

Instance methodsThis interface doesn't inherit any method.

NamedNodeMap.getNamedItem()

Returns an Attr, corresponding to the given name.

NamedNodeMap.setNamedItem()

Replaces, or adds, the Attr identified in the map by the given name.

NamedNodeMap.removeNamedItem()

Removes the Attr identified by the given map.

NamedNodeMap.item()

Returns the Attr at the given index, or null if the index is higher or equal to the number of nodes.

NamedNodeMap.getNamedItemNS()

Returns an Attr identified by a namespace and related local name.

NamedNodeMap.setNamedItemNS()

Replaces, or adds, the Attr identified in the map by the given namespace and related local name.

NamedNodeMap.removeNamedItemNS()

Removes the Attr identified by the given namespace and related local name.

SpecificationsSpecificationDOM # interface-namednodemapBrowser compatibilitySee also
Element.attributes\n\nNamedNodeMapBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.
A NamedNodeMap object is live and will thus be auto-updated if changes are made to its contents internally or elsewhere.

Note:
Although called NamedNodeMap, this interface doesn't deal with Node objects but with Attr objects, which are a specialized class of Node objects.
Instance propertiesThis interface doesn't inherit any property.

NamedNodeMap.length Read only

Returns the amount of objects in the map.

Instance methodsThis interface doesn't inherit any method.

NamedNodeMap.getNamedItem()

Returns an Attr, corresponding to the given name.

NamedNodeMap.setNamedItem()

Replaces, or adds, the Attr identified in the map by the given name.

NamedNodeMap.removeNamedItem()

Removes the Attr identified by the given map.

NamedNodeMap.item()

Returns the Attr at the given index, or null if the index is higher or equal to the number of nodes.

NamedNodeMap.getNamedItemNS()

Returns an Attr identified by a namespace and related local name.

NamedNodeMap.setNamedItemNS()

Replaces, or adds, the Attr identified in the map by the given namespace and related local name.

NamedNodeMap.removeNamedItemNS()

Removes the Attr identified by the given namespace and related local name.

SpecificationsSpecificationDOM # interface-namednodemapBrowser compatibilitySee also
Element.attributes
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nNamedNodeMapBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.
A NamedNodeMap object is live and will thus be auto-updated if changes are made to its contents internally or elsewhere.

Note:
Although called NamedNodeMap, this interface doesn't deal with Node objects but with Attr objects, which are a specialized class of Node objects.
Instance propertiesThis interface doesn't inherit any property.

NamedNodeMap.length Read only

Returns the amount of objects in the map.

Instance methodsThis interface doesn't inherit any method.

NamedNodeMap.getNamedItem()

Returns an Attr, corresponding to the given name.

NamedNodeMap.setNamedItem()

Replaces, or adds, the Attr identified in the map by the given name.

NamedNodeMap.removeNamedItem()

Removes the Attr identified by the given map.

NamedNodeMap.item()

Returns the Attr at the given index, or null if the index is higher or equal to the number of nodes.

NamedNodeMap.getNamedItemNS()

Returns an Attr identified by a namespace and related local name.

NamedNodeMap.setNamedItemNS()

Replaces, or adds, the Attr identified in the map by the given namespace and related local name.

NamedNodeMap.removeNamedItemNS()

Removes the Attr identified by the given namespace and related local name.

SpecificationsSpecificationDOM # interface-namednodemapBrowser compatibilitySee also
Element.attributes
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jul 26, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nNodeBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe DOM Node interface is an abstract base
class upon which many other DOM API objects are based, thus letting those object types
to be used similarly and often interchangeably. As an abstract class, there is
no such thing as a plain Node object. All objects that implement
Node functionality are based on one of its subclasses. Most notable are
Document, Element, and DocumentFragment.
In addition, every kind of DOM node is represented by an interface based on
Node. These include Attr, CharacterData
(which Text, Comment, CDATASection and
ProcessingInstruction are all based on), and DocumentType.
In some cases, a particular feature of the base Node interface may not
apply to one of its child interfaces; in that case, the inheriting node may
return null or throw an exception, depending on circumstances. For example,
attempting to add children to a node type that cannot have children will throw an
exception.
Instance propertiesIn addition to the properties below, Node inherits properties from its parent, EventTarget.

Node.baseURI Read only

Returns a string representing the base URL of the document
containing the Node.

Node.childNodes Read only

Returns a live NodeList containing all the children of this node
(including elements, text and comments). NodeList being live means that
if the children of the Node change, the NodeList object is
automatically updated.

Node.firstChild Read only

Returns a Node representing the first direct child node of the node,
or null if the node has no child.

Node.isConnected Read only

A boolean indicating whether or not the Node is connected (directly or indirectly)
to the context object, e.g., the Document object in the case of the
normal DOM, or the ShadowRoot in the case of a shadow DOM.

Node.lastChild Read only

Returns a Node representing the last direct child node of the node,
or null if the node has no child.

Node.nextSibling Read only

Returns a Node representing the next node in the tree, or
null if there isn't such node.

Node.nodeName Read only

Returns a string containing the name of the Node. The
structure of the name will differ with the node type. E.g. An
HTMLElement will contain the name of the corresponding tag, like
'AUDIO' for an HTMLAudioElement, a Text
node will have the '#text' string, or a Document node will
have the '#document' string.

Node.nodeType Read only

Returns an unsigned short representing the type of the node. Possible
values are:



Name
Value




ELEMENT_NODE
1


ATTRIBUTE_NODE
2


TEXT_NODE
3


CDATA_SECTION_NODE
4


PROCESSING_INSTRUCTION_NODE
7


COMMENT_NODE
8


DOCUMENT_NODE
9


DOCUMENT_TYPE_NODE
10


DOCUMENT_FRAGMENT_NODE
11




Node.nodeValue

Returns / Sets the value of the current node.

Node.ownerDocument Read only

Returns the Document that this node belongs to. If the node is itself
a document, returns null.

Node.parentNode Read only

Returns a Node that is the parent of this node. If there is no such
node, like if this node is the top of the tree or if doesn't participate in a tree,
this property returns null.

Node.parentElement Read only

Returns an Element that is the parent of this node. If the node has
no parent, or if that parent is not an Element, this property returns
null.

Node.previousSibling Read only

Returns a Node representing the previous node in the tree, or
null if there isn't such node.

Node.textContent

Returns / Sets the textual content of an element and all its descendants.

Instance methodsIn addition to the methods below, Node inherits methods from its parent, EventTarget.

Node.appendChild()

Adds the specified childNode argument as the last child to the current node.
If the argument referenced an existing node on the DOM tree, the node will be detached
from its current position and attached at the new position.

Node.cloneNode()

Clone a Node, and optionally, all of its contents. By default, it
clones the content of the node.

Node.compareDocumentPosition()

Compares the position of the current node against another node in any other document.

Node.contains()

Returns true or false value indicating whether or not a node is a
descendant of the calling node.

Node.getRootNode()

Returns the context object's root which optionally includes the shadow root if it is available.

Node.hasChildNodes()

Returns a boolean value indicating whether or not the element has any child nodes.

Node.insertBefore()

Inserts a Node before the reference node as a child of a specified
parent node.

Node.isDefaultNamespace()

Accepts a namespace URI as an argument and returns a boolean value with a
value of true if the namespace is the default namespace on the given node
or false if not.

Node.isEqualNode()

Returns a boolean value which indicates whether or not two nodes are of the
same type and all their defining data points match.

Node.isSameNode()

Returns a boolean value indicating whether or not the two nodes are
the same (that is, they reference the same object).

Node.lookupPrefix()

Returns a string containing the prefix for a given namespace URI,
if present, and null if not. When multiple prefixes are possible, the
result is implementation-dependent.

Node.lookupNamespaceURI()

Accepts a prefix and returns the namespace URI associated with it on the given node
if found (and null if not). Supplying null for the prefix
will return the default namespace.

Node.normalize()

Clean up all the text nodes under this element (merge adjacent, remove empty).

Node.removeChild()

Removes a child node from the current element, which must be a child of the current
node.

Node.replaceChild()

Replaces one child Node of the current one with the second one given
in parameter.

Events
selectstart

Fires when the user starts a new selection in this node.

ExamplesRemove all children nested within a nodeThis function remove each first child of an element, until there are none left.
jsfunction removeAllChildren(element) {
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

Using this function is a single call. Here we empty the body of the document:
jsremoveAllChildren(document.body);

An alternative could be to set the textContent to the empty string: document.body.textContent = "".Recurse through child nodesThe following function recursively calls a callback function for each node contained by
a root node (including the root itself):
jsfunction eachNode(rootNode, callback) {
  if (!callback) {
    const nodes = [];
    eachNode(rootNode, (node) => {
      nodes.push(node);
    });
    return nodes;
  }

  if (callback(rootNode) === false) {
    return false;
  }

  if (rootNode.hasChildNodes()) {
    for (const node of rootNode.childNodes) {
      if (eachNode(node, callback) === false) {
        return;
      }
    }
  }
}

The function recursively calls a function for each descendant node of
rootNode (including the root itself).
If callback is omitted, the function returns an
Array instead, which contains rootNode and all
nodes contained within.
If callback is provided, and it returns
false when called, the current recursion level is aborted, and the function
resumes execution at the last parent's level. This can be used to abort loops once a
node has been found (such as searching for a text node which contains a certain string).
The function has two parameters:

rootNode

The Node object whose descendants will be recursed through.

callback Optional

An optional callback function that
receives a Node as its only argument. If omitted, eachNode
returns an Array of every node contained within
rootNode (including the root itself).


The following demonstrates a real-world use of the eachNode() function:
searching for text on a web-page.
We use a wrapper function named grep to do the searching:
jsfunction grep(parentNode, pattern) {
  let matches = [];
  let endScan = false;

  eachNode(parentNode, (node) => {
    if (endScan) {
      return false;
    }

    // Ignore anything which isn't a text node
    if (node.nodeType !== Node.TEXT_NODE) {
      return;
    }

    if (typeof pattern === "string" && node.textContent.includes(pattern)) {
      matches.push(node);
    } else if (pattern.test(node.textContent)) {
      if (!pattern.global) {
        endScan = true;
        matches = node;
      } else {
        matches.push(node);
      }
    }
  });

  return matches;
}
SpecificationsSpecificationDOM # interface-nodeBrowser compatibility\n\nNodeBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe DOM Node interface is an abstract base
class upon which many other DOM API objects are based, thus letting those object types
to be used similarly and often interchangeably. As an abstract class, there is
no such thing as a plain Node object. All objects that implement
Node functionality are based on one of its subclasses. Most notable are
Document, Element, and DocumentFragment.
In addition, every kind of DOM node is represented by an interface based on
Node. These include Attr, CharacterData
(which Text, Comment, CDATASection and
ProcessingInstruction are all based on), and DocumentType.
In some cases, a particular feature of the base Node interface may not
apply to one of its child interfaces; in that case, the inheriting node may
return null or throw an exception, depending on circumstances. For example,
attempting to add children to a node type that cannot have children will throw an
exception.
Instance propertiesIn addition to the properties below, Node inherits properties from its parent, EventTarget.

Node.baseURI Read only

Returns a string representing the base URL of the document
containing the Node.

Node.childNodes Read only

Returns a live NodeList containing all the children of this node
(including elements, text and comments). NodeList being live means that
if the children of the Node change, the NodeList object is
automatically updated.

Node.firstChild Read only

Returns a Node representing the first direct child node of the node,
or null if the node has no child.

Node.isConnected Read only

A boolean indicating whether or not the Node is connected (directly or indirectly)
to the context object, e.g., the Document object in the case of the
normal DOM, or the ShadowRoot in the case of a shadow DOM.

Node.lastChild Read only

Returns a Node representing the last direct child node of the node,
or null if the node has no child.

Node.nextSibling Read only

Returns a Node representing the next node in the tree, or
null if there isn't such node.

Node.nodeName Read only

Returns a string containing the name of the Node. The
structure of the name will differ with the node type. E.g. An
HTMLElement will contain the name of the corresponding tag, like
'AUDIO' for an HTMLAudioElement, a Text
node will have the '#text' string, or a Document node will
have the '#document' string.

Node.nodeType Read only

Returns an unsigned short representing the type of the node. Possible
values are:



Name
Value




ELEMENT_NODE
1


ATTRIBUTE_NODE
2


TEXT_NODE
3


CDATA_SECTION_NODE
4


PROCESSING_INSTRUCTION_NODE
7


COMMENT_NODE
8


DOCUMENT_NODE
9


DOCUMENT_TYPE_NODE
10


DOCUMENT_FRAGMENT_NODE
11




Node.nodeValue

Returns / Sets the value of the current node.

Node.ownerDocument Read only

Returns the Document that this node belongs to. If the node is itself
a document, returns null.

Node.parentNode Read only

Returns a Node that is the parent of this node. If there is no such
node, like if this node is the top of the tree or if doesn't participate in a tree,
this property returns null.

Node.parentElement Read only

Returns an Element that is the parent of this node. If the node has
no parent, or if that parent is not an Element, this property returns
null.

Node.previousSibling Read only

Returns a Node representing the previous node in the tree, or
null if there isn't such node.

Node.textContent

Returns / Sets the textual content of an element and all its descendants.

Instance methodsIn addition to the methods below, Node inherits methods from its parent, EventTarget.

Node.appendChild()

Adds the specified childNode argument as the last child to the current node.
If the argument referenced an existing node on the DOM tree, the node will be detached
from its current position and attached at the new position.

Node.cloneNode()

Clone a Node, and optionally, all of its contents. By default, it
clones the content of the node.

Node.compareDocumentPosition()

Compares the position of the current node against another node in any other document.

Node.contains()

Returns true or false value indicating whether or not a node is a
descendant of the calling node.

Node.getRootNode()

Returns the context object's root which optionally includes the shadow root if it is available.

Node.hasChildNodes()

Returns a boolean value indicating whether or not the element has any child nodes.

Node.insertBefore()

Inserts a Node before the reference node as a child of a specified
parent node.

Node.isDefaultNamespace()

Accepts a namespace URI as an argument and returns a boolean value with a
value of true if the namespace is the default namespace on the given node
or false if not.

Node.isEqualNode()

Returns a boolean value which indicates whether or not two nodes are of the
same type and all their defining data points match.

Node.isSameNode()

Returns a boolean value indicating whether or not the two nodes are
the same (that is, they reference the same object).

Node.lookupPrefix()

Returns a string containing the prefix for a given namespace URI,
if present, and null if not. When multiple prefixes are possible, the
result is implementation-dependent.

Node.lookupNamespaceURI()

Accepts a prefix and returns the namespace URI associated with it on the given node
if found (and null if not). Supplying null for the prefix
will return the default namespace.

Node.normalize()

Clean up all the text nodes under this element (merge adjacent, remove empty).

Node.removeChild()

Removes a child node from the current element, which must be a child of the current
node.

Node.replaceChild()

Replaces one child Node of the current one with the second one given
in parameter.

Events
selectstart

Fires when the user starts a new selection in this node.

ExamplesRemove all children nested within a nodeThis function remove each first child of an element, until there are none left.
jsfunction removeAllChildren(element) {
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

Using this function is a single call. Here we empty the body of the document:
jsremoveAllChildren(document.body);

An alternative could be to set the textContent to the empty string: document.body.textContent = "".Recurse through child nodesThe following function recursively calls a callback function for each node contained by
a root node (including the root itself):
jsfunction eachNode(rootNode, callback) {
  if (!callback) {
    const nodes = [];
    eachNode(rootNode, (node) => {
      nodes.push(node);
    });
    return nodes;
  }

  if (callback(rootNode) === false) {
    return false;
  }

  if (rootNode.hasChildNodes()) {
    for (const node of rootNode.childNodes) {
      if (eachNode(node, callback) === false) {
        return;
      }
    }
  }
}

The function recursively calls a function for each descendant node of
rootNode (including the root itself).
If callback is omitted, the function returns an
Array instead, which contains rootNode and all
nodes contained within.
If callback is provided, and it returns
false when called, the current recursion level is aborted, and the function
resumes execution at the last parent's level. This can be used to abort loops once a
node has been found (such as searching for a text node which contains a certain string).
The function has two parameters:

rootNode

The Node object whose descendants will be recursed through.

callback Optional

An optional callback function that
receives a Node as its only argument. If omitted, eachNode
returns an Array of every node contained within
rootNode (including the root itself).


The following demonstrates a real-world use of the eachNode() function:
searching for text on a web-page.
We use a wrapper function named grep to do the searching:
jsfunction grep(parentNode, pattern) {
  let matches = [];
  let endScan = false;

  eachNode(parentNode, (node) => {
    if (endScan) {
      return false;
    }

    // Ignore anything which isn't a text node
    if (node.nodeType !== Node.TEXT_NODE) {
      return;
    }

    if (typeof pattern === "string" && node.textContent.includes(pattern)) {
      matches.push(node);
    } else if (pattern.test(node.textContent)) {
      if (!pattern.global) {
        endScan = true;
        matches = node;
      } else {
        matches.push(node);
      }
    }
  });

  return matches;
}
SpecificationsSpecificationDOM # interface-nodeBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 12, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nNodeBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe DOM Node interface is an abstract base
class upon which many other DOM API objects are based, thus letting those object types
to be used similarly and often interchangeably. As an abstract class, there is
no such thing as a plain Node object. All objects that implement
Node functionality are based on one of its subclasses. Most notable are
Document, Element, and DocumentFragment.
In addition, every kind of DOM node is represented by an interface based on
Node. These include Attr, CharacterData
(which Text, Comment, CDATASection and
ProcessingInstruction are all based on), and DocumentType.
In some cases, a particular feature of the base Node interface may not
apply to one of its child interfaces; in that case, the inheriting node may
return null or throw an exception, depending on circumstances. For example,
attempting to add children to a node type that cannot have children will throw an
exception.
Instance propertiesIn addition to the properties below, Node inherits properties from its parent, EventTarget.

Node.baseURI Read only

Returns a string representing the base URL of the document
containing the Node.

Node.childNodes Read only

Returns a live NodeList containing all the children of this node
(including elements, text and comments). NodeList being live means that
if the children of the Node change, the NodeList object is
automatically updated.

Node.firstChild Read only

Returns a Node representing the first direct child node of the node,
or null if the node has no child.

Node.isConnected Read only

A boolean indicating whether or not the Node is connected (directly or indirectly)
to the context object, e.g., the Document object in the case of the
normal DOM, or the ShadowRoot in the case of a shadow DOM.

Node.lastChild Read only

Returns a Node representing the last direct child node of the node,
or null if the node has no child.

Node.nextSibling Read only

Returns a Node representing the next node in the tree, or
null if there isn't such node.

Node.nodeName Read only

Returns a string containing the name of the Node. The
structure of the name will differ with the node type. E.g. An
HTMLElement will contain the name of the corresponding tag, like
'AUDIO' for an HTMLAudioElement, a Text
node will have the '#text' string, or a Document node will
have the '#document' string.

Node.nodeType Read only

Returns an unsigned short representing the type of the node. Possible
values are:



Name
Value




ELEMENT_NODE
1


ATTRIBUTE_NODE
2


TEXT_NODE
3


CDATA_SECTION_NODE
4


PROCESSING_INSTRUCTION_NODE
7


COMMENT_NODE
8


DOCUMENT_NODE
9


DOCUMENT_TYPE_NODE
10


DOCUMENT_FRAGMENT_NODE
11




Node.nodeValue

Returns / Sets the value of the current node.

Node.ownerDocument Read only

Returns the Document that this node belongs to. If the node is itself
a document, returns null.

Node.parentNode Read only

Returns a Node that is the parent of this node. If there is no such
node, like if this node is the top of the tree or if doesn't participate in a tree,
this property returns null.

Node.parentElement Read only

Returns an Element that is the parent of this node. If the node has
no parent, or if that parent is not an Element, this property returns
null.

Node.previousSibling Read only

Returns a Node representing the previous node in the tree, or
null if there isn't such node.

Node.textContent

Returns / Sets the textual content of an element and all its descendants.

Instance methodsIn addition to the methods below, Node inherits methods from its parent, EventTarget.

Node.appendChild()

Adds the specified childNode argument as the last child to the current node.
If the argument referenced an existing node on the DOM tree, the node will be detached
from its current position and attached at the new position.

Node.cloneNode()

Clone a Node, and optionally, all of its contents. By default, it
clones the content of the node.

Node.compareDocumentPosition()

Compares the position of the current node against another node in any other document.

Node.contains()

Returns true or false value indicating whether or not a node is a
descendant of the calling node.

Node.getRootNode()

Returns the context object's root which optionally includes the shadow root if it is available.

Node.hasChildNodes()

Returns a boolean value indicating whether or not the element has any child nodes.

Node.insertBefore()

Inserts a Node before the reference node as a child of a specified
parent node.

Node.isDefaultNamespace()

Accepts a namespace URI as an argument and returns a boolean value with a
value of true if the namespace is the default namespace on the given node
or false if not.

Node.isEqualNode()

Returns a boolean value which indicates whether or not two nodes are of the
same type and all their defining data points match.

Node.isSameNode()

Returns a boolean value indicating whether or not the two nodes are
the same (that is, they reference the same object).

Node.lookupPrefix()

Returns a string containing the prefix for a given namespace URI,
if present, and null if not. When multiple prefixes are possible, the
result is implementation-dependent.

Node.lookupNamespaceURI()

Accepts a prefix and returns the namespace URI associated with it on the given node
if found (and null if not). Supplying null for the prefix
will return the default namespace.

Node.normalize()

Clean up all the text nodes under this element (merge adjacent, remove empty).

Node.removeChild()

Removes a child node from the current element, which must be a child of the current
node.

Node.replaceChild()

Replaces one child Node of the current one with the second one given
in parameter.

Events
selectstart

Fires when the user starts a new selection in this node.

ExamplesRemove all children nested within a nodeThis function remove each first child of an element, until there are none left.
jsfunction removeAllChildren(element) {
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

Using this function is a single call. Here we empty the body of the document:
jsremoveAllChildren(document.body);

An alternative could be to set the textContent to the empty string: document.body.textContent = "".Recurse through child nodesThe following function recursively calls a callback function for each node contained by
a root node (including the root itself):
jsfunction eachNode(rootNode, callback) {
  if (!callback) {
    const nodes = [];
    eachNode(rootNode, (node) => {
      nodes.push(node);
    });
    return nodes;
  }

  if (callback(rootNode) === false) {
    return false;
  }

  if (rootNode.hasChildNodes()) {
    for (const node of rootNode.childNodes) {
      if (eachNode(node, callback) === false) {
        return;
      }
    }
  }
}

The function recursively calls a function for each descendant node of
rootNode (including the root itself).
If callback is omitted, the function returns an
Array instead, which contains rootNode and all
nodes contained within.
If callback is provided, and it returns
false when called, the current recursion level is aborted, and the function
resumes execution at the last parent's level. This can be used to abort loops once a
node has been found (such as searching for a text node which contains a certain string).
The function has two parameters:

rootNode

The Node object whose descendants will be recursed through.

callback Optional

An optional callback function that
receives a Node as its only argument. If omitted, eachNode
returns an Array of every node contained within
rootNode (including the root itself).


The following demonstrates a real-world use of the eachNode() function:
searching for text on a web-page.
We use a wrapper function named grep to do the searching:
jsfunction grep(parentNode, pattern) {
  let matches = [];
  let endScan = false;

  eachNode(parentNode, (node) => {
    if (endScan) {
      return false;
    }

    // Ignore anything which isn't a text node
    if (node.nodeType !== Node.TEXT_NODE) {
      return;
    }

    if (typeof pattern === "string" && node.textContent.includes(pattern)) {
      matches.push(node);
    } else if (pattern.test(node.textContent)) {
      if (!pattern.global) {
        endScan = true;
        matches = node;
      } else {
        matches.push(node);
      }
    }
  });

  return matches;
}
SpecificationsSpecificationDOM # interface-nodeBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 12, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nNodeIteratorBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe NodeIterator interface represents an iterator to traverse nodes of a DOM subtree in document order.
A NodeIterator can be created using the Document.createNodeIterator() method, as follows:
jsconst nodeIterator = document.createNodeIterator(root, whatToShow, filter);
Instance propertiesThis interface doesn't inherit any property.

NodeIterator.root Read only

Returns a Node representing the root node, as specified when the
NodeIterator was created.

NodeIterator.whatToShow Read only

Returns an unsigned long bitmask that describes the types of Node
to be matched. Non-matching nodes are skipped, but relevant child nodes may be included.
The possible bitmask values are constants from the NodeFilter interface:



Constant
Numerical value
Description




NodeFilter.SHOW_ALL
4294967295 (that is the max value of unsigned long)
Shows all nodes.


NodeFilter.SHOW_ATTRIBUTE 
Deprecated

2
Shows attribute Attr nodes. This is meaningful only when creating a NodeIterator with an Attr node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.


NodeFilter.SHOW_CDATA_SECTION 
Deprecated

8
Shows CDATASection nodes.


NodeFilter.SHOW_COMMENT
128
Shows Comment nodes.


NodeFilter.SHOW_DOCUMENT
256
Shows Document nodes.


NodeFilter.SHOW_DOCUMENT_FRAGMENT
1024
Shows DocumentFragment nodes.


NodeFilter.SHOW_DOCUMENT_TYPE
512
Shows DocumentType nodes.


NodeFilter.SHOW_ELEMENT
1
Shows Element nodes.


NodeFilter.SHOW_ENTITY 
Deprecated

32
Legacy, no longer used.


NodeFilter.SHOW_ENTITY_REFERENCE 
Deprecated

16
Legacy, no longer used.


NodeFilter.SHOW_NOTATION 
Deprecated

2048
Legacy, no longer used.


NodeFilter.SHOW_PROCESSING_INSTRUCTION
64
Shows ProcessingInstruction nodes.


NodeFilter.SHOW_TEXT
4
Shows Text nodes.




NodeIterator.filter Read only

Returns a NodeFilter used to select the relevant nodes.

NodeIterator.referenceNode Read only

Returns the Node to which the iterator is anchored.

NodeIterator.pointerBeforeReferenceNode Read only

Returns a boolean indicating whether or not the NodeIterator is anchored before the NodeIterator.referenceNode. If false, it indicates that the iterator is anchored after the reference node.

Instance methodsThis interface doesn't inherit any method.

NodeIterator.detach() 
Deprecated


This is a legacy method, and no longer has any effect. Previously it served to mark a
NodeIterator as disposed, so it could be reclaimed by garbage collection.

NodeIterator.previousNode()

Returns the previous Node in the document, or null if there are none.

NodeIterator.nextNode()

Returns the next Node in the document, or null if there are none.

SpecificationsSpecificationDOM # interface-nodeiteratorBrowser compatibilitySee also
The creator method: Document.createNodeIterator().
Related interface: TreeWalker\n\nNodeIteratorBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe NodeIterator interface represents an iterator to traverse nodes of a DOM subtree in document order.
A NodeIterator can be created using the Document.createNodeIterator() method, as follows:
jsconst nodeIterator = document.createNodeIterator(root, whatToShow, filter);
Instance propertiesThis interface doesn't inherit any property.

NodeIterator.root Read only

Returns a Node representing the root node, as specified when the
NodeIterator was created.

NodeIterator.whatToShow Read only

Returns an unsigned long bitmask that describes the types of Node
to be matched. Non-matching nodes are skipped, but relevant child nodes may be included.
The possible bitmask values are constants from the NodeFilter interface:



Constant
Numerical value
Description




NodeFilter.SHOW_ALL
4294967295 (that is the max value of unsigned long)
Shows all nodes.


NodeFilter.SHOW_ATTRIBUTE 
Deprecated

2
Shows attribute Attr nodes. This is meaningful only when creating a NodeIterator with an Attr node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.


NodeFilter.SHOW_CDATA_SECTION 
Deprecated

8
Shows CDATASection nodes.


NodeFilter.SHOW_COMMENT
128
Shows Comment nodes.


NodeFilter.SHOW_DOCUMENT
256
Shows Document nodes.


NodeFilter.SHOW_DOCUMENT_FRAGMENT
1024
Shows DocumentFragment nodes.


NodeFilter.SHOW_DOCUMENT_TYPE
512
Shows DocumentType nodes.


NodeFilter.SHOW_ELEMENT
1
Shows Element nodes.


NodeFilter.SHOW_ENTITY 
Deprecated

32
Legacy, no longer used.


NodeFilter.SHOW_ENTITY_REFERENCE 
Deprecated

16
Legacy, no longer used.


NodeFilter.SHOW_NOTATION 
Deprecated

2048
Legacy, no longer used.


NodeFilter.SHOW_PROCESSING_INSTRUCTION
64
Shows ProcessingInstruction nodes.


NodeFilter.SHOW_TEXT
4
Shows Text nodes.




NodeIterator.filter Read only

Returns a NodeFilter used to select the relevant nodes.

NodeIterator.referenceNode Read only

Returns the Node to which the iterator is anchored.

NodeIterator.pointerBeforeReferenceNode Read only

Returns a boolean indicating whether or not the NodeIterator is anchored before the NodeIterator.referenceNode. If false, it indicates that the iterator is anchored after the reference node.

Instance methodsThis interface doesn't inherit any method.

NodeIterator.detach() 
Deprecated


This is a legacy method, and no longer has any effect. Previously it served to mark a
NodeIterator as disposed, so it could be reclaimed by garbage collection.

NodeIterator.previousNode()

Returns the previous Node in the document, or null if there are none.

NodeIterator.nextNode()

Returns the next Node in the document, or null if there are none.

SpecificationsSpecificationDOM # interface-nodeiteratorBrowser compatibilitySee also
The creator method: Document.createNodeIterator().
Related interface: TreeWalker
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 1, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nNodeIteratorBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe NodeIterator interface represents an iterator to traverse nodes of a DOM subtree in document order.
A NodeIterator can be created using the Document.createNodeIterator() method, as follows:
jsconst nodeIterator = document.createNodeIterator(root, whatToShow, filter);
Instance propertiesThis interface doesn't inherit any property.

NodeIterator.root Read only

Returns a Node representing the root node, as specified when the
NodeIterator was created.

NodeIterator.whatToShow Read only

Returns an unsigned long bitmask that describes the types of Node
to be matched. Non-matching nodes are skipped, but relevant child nodes may be included.
The possible bitmask values are constants from the NodeFilter interface:



Constant
Numerical value
Description




NodeFilter.SHOW_ALL
4294967295 (that is the max value of unsigned long)
Shows all nodes.


NodeFilter.SHOW_ATTRIBUTE 
Deprecated

2
Shows attribute Attr nodes. This is meaningful only when creating a NodeIterator with an Attr node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.


NodeFilter.SHOW_CDATA_SECTION 
Deprecated

8
Shows CDATASection nodes.


NodeFilter.SHOW_COMMENT
128
Shows Comment nodes.


NodeFilter.SHOW_DOCUMENT
256
Shows Document nodes.


NodeFilter.SHOW_DOCUMENT_FRAGMENT
1024
Shows DocumentFragment nodes.


NodeFilter.SHOW_DOCUMENT_TYPE
512
Shows DocumentType nodes.


NodeFilter.SHOW_ELEMENT
1
Shows Element nodes.


NodeFilter.SHOW_ENTITY 
Deprecated

32
Legacy, no longer used.


NodeFilter.SHOW_ENTITY_REFERENCE 
Deprecated

16
Legacy, no longer used.


NodeFilter.SHOW_NOTATION 
Deprecated

2048
Legacy, no longer used.


NodeFilter.SHOW_PROCESSING_INSTRUCTION
64
Shows ProcessingInstruction nodes.


NodeFilter.SHOW_TEXT
4
Shows Text nodes.




NodeIterator.filter Read only

Returns a NodeFilter used to select the relevant nodes.

NodeIterator.referenceNode Read only

Returns the Node to which the iterator is anchored.

NodeIterator.pointerBeforeReferenceNode Read only

Returns a boolean indicating whether or not the NodeIterator is anchored before the NodeIterator.referenceNode. If false, it indicates that the iterator is anchored after the reference node.

Instance methodsThis interface doesn't inherit any method.

NodeIterator.detach() 
Deprecated


This is a legacy method, and no longer has any effect. Previously it served to mark a
NodeIterator as disposed, so it could be reclaimed by garbage collection.

NodeIterator.previousNode()

Returns the previous Node in the document, or null if there are none.

NodeIterator.nextNode()

Returns the next Node in the document, or null if there are none.

SpecificationsSpecificationDOM # interface-nodeiteratorBrowser compatibilitySee also
The creator method: Document.createNodeIterator().
Related interface: TreeWalker
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 1, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nNodeListBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
This interface was an attempt to create an unmodifiable list and only continues to be supported to not break code that's already using it. Modern APIs represent list structures using types based on JavaScript arrays, thus making many array methods available, and at the same time imposing additional semantics on their usage (such as making their items read-only).
These historical reasons do not mean that you as a developer should avoid NodeList. You don't create NodeList objects yourself, but you get them from APIs such as Document.querySelectorAll(), and these APIs are not deprecated. However, be careful of the semantic differences from a real array.
Although NodeList is not an Array, it is possible to iterate over it with forEach(). It can also be converted to a real Array using Array.from().Live vs. Static NodeListsAlthough they are both considered NodeList objects, there are 2 varieties of NodeList: live and static.Live NodeListsIn some cases, the NodeList is live, which means that changes in the DOM automatically update the collection.
For example, Node.childNodes is live:
jsconst parent = document.getElementById("parent");
let childNodes = parent.childNodes;
console.log(childNodes.length); // let's assume "2"
parent.appendChild(document.createElement("div"));
console.log(childNodes.length); // outputs "3"
Static NodeListsIn other cases, the NodeList is static, where any changes in the DOM do not affect the content of the collection. The ubiquitous document.querySelectorAll() method returns a static NodeList.
It's good to keep this distinction in mind when you choose how to iterate over the items in the NodeList, and whether you should cache the list's length.Instance properties
NodeList.length Read only

The number of nodes in the NodeList.

Instance methods
NodeList.item()

Returns an item in the list by its index, or null if the index is out-of-bounds.
An alternative to accessing nodeList[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.

NodeList.entries()

Returns an iterator, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are integers starting from 0 and the values are nodes.)

NodeList.forEach()

Executes a provided function once per NodeList element, passing the element as an argument to the function.

NodeList.keys()

Returns an iterator, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are integers starting from 0.)

NodeList.values()

Returns an iterator allowing code to go through all values (nodes) of the key/value pairs contained in the collection.

ExampleIt's possible to loop over the items in a NodeList using a for loop:
jsfor (let i = 0; i < myNodeList.length; i++) {
  let item = myNodeList[i];
}

Don't use for...in to enumerate the items in NodeLists, since they will also enumerate its length and item properties and cause errors if your script assumes it only has to deal with element objects. Also, for...in is not guaranteed to visit the properties in any particular order.
for...of loops loop over NodeList objects correctly:
jsconst list = document.querySelectorAll("input[type=checkbox]");
for (const checkbox of list) {
  checkbox.checked = true;
}

Browsers also support the iterator method (forEach()) as well as entries(), values(), and keys().SpecificationsSpecificationDOM # interface-nodelistBrowser compatibility\n\nNodeListBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
This interface was an attempt to create an unmodifiable list and only continues to be supported to not break code that's already using it. Modern APIs represent list structures using types based on JavaScript arrays, thus making many array methods available, and at the same time imposing additional semantics on their usage (such as making their items read-only).
These historical reasons do not mean that you as a developer should avoid NodeList. You don't create NodeList objects yourself, but you get them from APIs such as Document.querySelectorAll(), and these APIs are not deprecated. However, be careful of the semantic differences from a real array.
Although NodeList is not an Array, it is possible to iterate over it with forEach(). It can also be converted to a real Array using Array.from().Live vs. Static NodeListsAlthough they are both considered NodeList objects, there are 2 varieties of NodeList: live and static.Live NodeListsIn some cases, the NodeList is live, which means that changes in the DOM automatically update the collection.
For example, Node.childNodes is live:
jsconst parent = document.getElementById("parent");
let childNodes = parent.childNodes;
console.log(childNodes.length); // let's assume "2"
parent.appendChild(document.createElement("div"));
console.log(childNodes.length); // outputs "3"
Static NodeListsIn other cases, the NodeList is static, where any changes in the DOM do not affect the content of the collection. The ubiquitous document.querySelectorAll() method returns a static NodeList.
It's good to keep this distinction in mind when you choose how to iterate over the items in the NodeList, and whether you should cache the list's length.Instance properties
NodeList.length Read only

The number of nodes in the NodeList.

Instance methods
NodeList.item()

Returns an item in the list by its index, or null if the index is out-of-bounds.
An alternative to accessing nodeList[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.

NodeList.entries()

Returns an iterator, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are integers starting from 0 and the values are nodes.)

NodeList.forEach()

Executes a provided function once per NodeList element, passing the element as an argument to the function.

NodeList.keys()

Returns an iterator, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are integers starting from 0.)

NodeList.values()

Returns an iterator allowing code to go through all values (nodes) of the key/value pairs contained in the collection.

ExampleIt's possible to loop over the items in a NodeList using a for loop:
jsfor (let i = 0; i < myNodeList.length; i++) {
  let item = myNodeList[i];
}

Don't use for...in to enumerate the items in NodeLists, since they will also enumerate its length and item properties and cause errors if your script assumes it only has to deal with element objects. Also, for...in is not guaranteed to visit the properties in any particular order.
for...of loops loop over NodeList objects correctly:
jsconst list = document.querySelectorAll("input[type=checkbox]");
for (const checkbox of list) {
  checkbox.checked = true;
}

Browsers also support the iterator method (forEach()) as well as entries(), values(), and keys().SpecificationsSpecificationDOM # interface-nodelistBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jun 21, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nNodeListBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackNodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
This interface was an attempt to create an unmodifiable list and only continues to be supported to not break code that's already using it. Modern APIs represent list structures using types based on JavaScript arrays, thus making many array methods available, and at the same time imposing additional semantics on their usage (such as making their items read-only).
These historical reasons do not mean that you as a developer should avoid NodeList. You don't create NodeList objects yourself, but you get them from APIs such as Document.querySelectorAll(), and these APIs are not deprecated. However, be careful of the semantic differences from a real array.
Although NodeList is not an Array, it is possible to iterate over it with forEach(). It can also be converted to a real Array using Array.from().Live vs. Static NodeListsAlthough they are both considered NodeList objects, there are 2 varieties of NodeList: live and static.Live NodeListsIn some cases, the NodeList is live, which means that changes in the DOM automatically update the collection.
For example, Node.childNodes is live:
jsconst parent = document.getElementById("parent");
let childNodes = parent.childNodes;
console.log(childNodes.length); // let's assume "2"
parent.appendChild(document.createElement("div"));
console.log(childNodes.length); // outputs "3"
Static NodeListsIn other cases, the NodeList is static, where any changes in the DOM do not affect the content of the collection. The ubiquitous document.querySelectorAll() method returns a static NodeList.
It's good to keep this distinction in mind when you choose how to iterate over the items in the NodeList, and whether you should cache the list's length.Instance properties
NodeList.length Read only

The number of nodes in the NodeList.

Instance methods
NodeList.item()

Returns an item in the list by its index, or null if the index is out-of-bounds.
An alternative to accessing nodeList[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.

NodeList.entries()

Returns an iterator, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are integers starting from 0 and the values are nodes.)

NodeList.forEach()

Executes a provided function once per NodeList element, passing the element as an argument to the function.

NodeList.keys()

Returns an iterator, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are integers starting from 0.)

NodeList.values()

Returns an iterator allowing code to go through all values (nodes) of the key/value pairs contained in the collection.

ExampleIt's possible to loop over the items in a NodeList using a for loop:
jsfor (let i = 0; i < myNodeList.length; i++) {
  let item = myNodeList[i];
}

Don't use for...in to enumerate the items in NodeLists, since they will also enumerate its length and item properties and cause errors if your script assumes it only has to deal with element objects. Also, for...in is not guaranteed to visit the properties in any particular order.
for...of loops loop over NodeList objects correctly:
jsconst list = document.querySelectorAll("input[type=checkbox]");
for (const checkbox of list) {
  checkbox.checked = true;
}

Browsers also support the iterator method (forEach()) as well as entries(), values(), and keys().SpecificationsSpecificationDOM # interface-nodelistBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Jun 21, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nProcessingInstructionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.

Warning: ProcessingInstruction nodes are only supported in XML documents, not in HTML documents. In these, a process instruction will be considered as a comment and be represented as a Comment object in the tree.

A processing instruction may be different than the XML declaration.

Note:
User-defined processing instructions cannot begin with "xml", as xml-prefixed processing-instruction target names are reserved by the XML specification for particular, standard uses (see, for example, <?xml-stylesheet ?>.

For example:
html<?xml version="1.0"?>

is a processing instruction whose target is xml.
Instance propertiesThis interface also inherits properties from its parent interfaces, CharacterData, Node, and EventTarget.

ProcessingInstruction.sheet Read only

Returns the associated StyleSheet object, if any; or null if none.

ProcessingInstruction.target Read only

A name identifying the application to which the instruction is targeted.

Instance methodsThis interface doesn't have any specific method, but inherits methods from its parent interfaces, CharacterData, Node, and EventTarget.SpecificationsSpecificationDOM # interface-processinginstructionBrowser compatibilitySee also
document.createProcessingInstruction()
The DOM API\n\nProcessingInstructionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.

Warning: ProcessingInstruction nodes are only supported in XML documents, not in HTML documents. In these, a process instruction will be considered as a comment and be represented as a Comment object in the tree.

A processing instruction may be different than the XML declaration.

Note:
User-defined processing instructions cannot begin with "xml", as xml-prefixed processing-instruction target names are reserved by the XML specification for particular, standard uses (see, for example, <?xml-stylesheet ?>.

For example:
html<?xml version="1.0"?>

is a processing instruction whose target is xml.
Instance propertiesThis interface also inherits properties from its parent interfaces, CharacterData, Node, and EventTarget.

ProcessingInstruction.sheet Read only

Returns the associated StyleSheet object, if any; or null if none.

ProcessingInstruction.target Read only

A name identifying the application to which the instruction is targeted.

Instance methodsThis interface doesn't have any specific method, but inherits methods from its parent interfaces, CharacterData, Node, and EventTarget.SpecificationsSpecificationDOM # interface-processinginstructionBrowser compatibilitySee also
document.createProcessingInstruction()
The DOM API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 5, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nProcessingInstructionBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.

Warning: ProcessingInstruction nodes are only supported in XML documents, not in HTML documents. In these, a process instruction will be considered as a comment and be represented as a Comment object in the tree.

A processing instruction may be different than the XML declaration.

Note:
User-defined processing instructions cannot begin with "xml", as xml-prefixed processing-instruction target names are reserved by the XML specification for particular, standard uses (see, for example, <?xml-stylesheet ?>.

For example:
html<?xml version="1.0"?>

is a processing instruction whose target is xml.
Instance propertiesThis interface also inherits properties from its parent interfaces, CharacterData, Node, and EventTarget.

ProcessingInstruction.sheet Read only

Returns the associated StyleSheet object, if any; or null if none.

ProcessingInstruction.target Read only

A name identifying the application to which the instruction is targeted.

Instance methodsThis interface doesn't have any specific method, but inherits methods from its parent interfaces, CharacterData, Node, and EventTarget.SpecificationsSpecificationDOM # interface-processinginstructionBrowser compatibilitySee also
document.createProcessingInstruction()
The DOM API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 5, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nRangeBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Range interface represents a fragment of a document that can contain nodes and parts of text nodes.
A range can be created by using the Document.createRange() method. Range objects can also be retrieved by using the getRangeAt() method of the Selection object or the caretRangeFromPoint() method of the Document object.
There also is the Range() constructor available.
Instance propertiesThere are no inherited properties.

Range.collapsed Read only

Returns a boolean value indicating whether the range's start and end points are at the same position.

Range.commonAncestorContainer Read only

Returns the deepest Node that contains the startContainer and endContainer nodes.

Range.endContainer Read only

Returns the Node within which the Range ends.

Range.endOffset Read only

Returns a number representing where in the endContainer the Range ends.

Range.startContainer Read only

Returns the Node within which the Range starts.

Range.startOffset Read only

Returns a number representing where in the startContainer the Range starts.

Constructor
Range()

Returns a Range object with the global Document as its start and end.

Instance methodsThere are no inherited methods.

Range.collapse()

Collapses the Range to one of its boundary points.

Range.compareBoundaryPoints()

Compares the boundary points of the Range with another Range.

Range.compareNode() 
Deprecated
 
Non-standard


Returns a constant representing whether the Node is before, after, inside, or surrounding the range.

Range.comparePoint()

Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the Range.

Range.cloneContents()

Returns a DocumentFragment copying the nodes of a Range.

Range.cloneRange()

Returns a Range object with boundary points identical to the cloned Range.

Range.createContextualFragment()

Returns a DocumentFragment created from a given string of code.

Range.deleteContents()

Removes the contents of a Range from the Document.

Range.detach()

Does nothing. Kept for compatibility.

Range.extractContents()

Moves contents of a Range from the document tree into a DocumentFragment.

Range.getBoundingClientRect()

Returns a DOMRect object which bounds the entire contents of the Range; this would be the union of all the rectangles returned by range.getClientRects().

Range.getClientRects()

Returns a list of DOMRect objects that aggregates the results of Element.getClientRects() for all the elements in the Range.

Range.isPointInRange()

Returns a boolean indicating whether the given point is in the Range.

Range.insertNode()

Insert a Node at the start of a Range.

Range.intersectsNode()

Returns a boolean indicating whether the given node intersects the Range.

Range.selectNode()

Sets the Range to contain the Node and its contents.

Range.selectNodeContents()

Sets the Range to contain the contents of a Node.

Range.setEnd()

Sets the end position of a Range.

Range.setStart()

Sets the start position of a Range.

Range.setEndAfter()

Sets the end position of a Range relative to another Node.

Range.setEndBefore()

Sets the end position of a Range relative to another Node.

Range.setStartAfter()

Sets the start position of a Range relative to another Node.

Range.setStartBefore()

Sets the start position of a Range relative to another Node.

Range.surroundContents()

Moves content of a Range into a new Node.

Range.toString()

Returns the text of the Range.

SpecificationsSpecificationDOM # interface-rangeDOM Parsing and Serialization # extensions-to-the-range-interfaceCSSOM View Module # extensions-to-the-range-interfaceBrowser compatibilitySee also
The DOM interfaces index\n\nRangeBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Range interface represents a fragment of a document that can contain nodes and parts of text nodes.
A range can be created by using the Document.createRange() method. Range objects can also be retrieved by using the getRangeAt() method of the Selection object or the caretRangeFromPoint() method of the Document object.
There also is the Range() constructor available.
Instance propertiesThere are no inherited properties.

Range.collapsed Read only

Returns a boolean value indicating whether the range's start and end points are at the same position.

Range.commonAncestorContainer Read only

Returns the deepest Node that contains the startContainer and endContainer nodes.

Range.endContainer Read only

Returns the Node within which the Range ends.

Range.endOffset Read only

Returns a number representing where in the endContainer the Range ends.

Range.startContainer Read only

Returns the Node within which the Range starts.

Range.startOffset Read only

Returns a number representing where in the startContainer the Range starts.

Constructor
Range()

Returns a Range object with the global Document as its start and end.

Instance methodsThere are no inherited methods.

Range.collapse()

Collapses the Range to one of its boundary points.

Range.compareBoundaryPoints()

Compares the boundary points of the Range with another Range.

Range.compareNode() 
Deprecated
 
Non-standard


Returns a constant representing whether the Node is before, after, inside, or surrounding the range.

Range.comparePoint()

Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the Range.

Range.cloneContents()

Returns a DocumentFragment copying the nodes of a Range.

Range.cloneRange()

Returns a Range object with boundary points identical to the cloned Range.

Range.createContextualFragment()

Returns a DocumentFragment created from a given string of code.

Range.deleteContents()

Removes the contents of a Range from the Document.

Range.detach()

Does nothing. Kept for compatibility.

Range.extractContents()

Moves contents of a Range from the document tree into a DocumentFragment.

Range.getBoundingClientRect()

Returns a DOMRect object which bounds the entire contents of the Range; this would be the union of all the rectangles returned by range.getClientRects().

Range.getClientRects()

Returns a list of DOMRect objects that aggregates the results of Element.getClientRects() for all the elements in the Range.

Range.isPointInRange()

Returns a boolean indicating whether the given point is in the Range.

Range.insertNode()

Insert a Node at the start of a Range.

Range.intersectsNode()

Returns a boolean indicating whether the given node intersects the Range.

Range.selectNode()

Sets the Range to contain the Node and its contents.

Range.selectNodeContents()

Sets the Range to contain the contents of a Node.

Range.setEnd()

Sets the end position of a Range.

Range.setStart()

Sets the start position of a Range.

Range.setEndAfter()

Sets the end position of a Range relative to another Node.

Range.setEndBefore()

Sets the end position of a Range relative to another Node.

Range.setStartAfter()

Sets the start position of a Range relative to another Node.

Range.setStartBefore()

Sets the start position of a Range relative to another Node.

Range.surroundContents()

Moves content of a Range into a new Node.

Range.toString()

Returns the text of the Range.

SpecificationsSpecificationDOM # interface-rangeDOM Parsing and Serialization # extensions-to-the-range-interfaceCSSOM View Module # extensions-to-the-range-interfaceBrowser compatibilitySee also
The DOM interfaces index
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nRangeBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Range interface represents a fragment of a document that can contain nodes and parts of text nodes.
A range can be created by using the Document.createRange() method. Range objects can also be retrieved by using the getRangeAt() method of the Selection object or the caretRangeFromPoint() method of the Document object.
There also is the Range() constructor available.
Instance propertiesThere are no inherited properties.

Range.collapsed Read only

Returns a boolean value indicating whether the range's start and end points are at the same position.

Range.commonAncestorContainer Read only

Returns the deepest Node that contains the startContainer and endContainer nodes.

Range.endContainer Read only

Returns the Node within which the Range ends.

Range.endOffset Read only

Returns a number representing where in the endContainer the Range ends.

Range.startContainer Read only

Returns the Node within which the Range starts.

Range.startOffset Read only

Returns a number representing where in the startContainer the Range starts.

Constructor
Range()

Returns a Range object with the global Document as its start and end.

Instance methodsThere are no inherited methods.

Range.collapse()

Collapses the Range to one of its boundary points.

Range.compareBoundaryPoints()

Compares the boundary points of the Range with another Range.

Range.compareNode() 
Deprecated
 
Non-standard


Returns a constant representing whether the Node is before, after, inside, or surrounding the range.

Range.comparePoint()

Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the Range.

Range.cloneContents()

Returns a DocumentFragment copying the nodes of a Range.

Range.cloneRange()

Returns a Range object with boundary points identical to the cloned Range.

Range.createContextualFragment()

Returns a DocumentFragment created from a given string of code.

Range.deleteContents()

Removes the contents of a Range from the Document.

Range.detach()

Does nothing. Kept for compatibility.

Range.extractContents()

Moves contents of a Range from the document tree into a DocumentFragment.

Range.getBoundingClientRect()

Returns a DOMRect object which bounds the entire contents of the Range; this would be the union of all the rectangles returned by range.getClientRects().

Range.getClientRects()

Returns a list of DOMRect objects that aggregates the results of Element.getClientRects() for all the elements in the Range.

Range.isPointInRange()

Returns a boolean indicating whether the given point is in the Range.

Range.insertNode()

Insert a Node at the start of a Range.

Range.intersectsNode()

Returns a boolean indicating whether the given node intersects the Range.

Range.selectNode()

Sets the Range to contain the Node and its contents.

Range.selectNodeContents()

Sets the Range to contain the contents of a Node.

Range.setEnd()

Sets the end position of a Range.

Range.setStart()

Sets the start position of a Range.

Range.setEndAfter()

Sets the end position of a Range relative to another Node.

Range.setEndBefore()

Sets the end position of a Range relative to another Node.

Range.setStartAfter()

Sets the start position of a Range relative to another Node.

Range.setStartBefore()

Sets the start position of a Range relative to another Node.

Range.surroundContents()

Moves content of a Range into a new Node.

Range.toString()

Returns the text of the Range.

SpecificationsSpecificationDOM # interface-rangeDOM Parsing and Serialization # extensions-to-the-range-interfaceCSSOM View Module # extensions-to-the-range-interfaceBrowser compatibilitySee also
The DOM interfaces index
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nStaticRangeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2020.Learn moreSee full compatibilityReport feedbackThe DOM StaticRange interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.
This interface offers the same set of properties and methods as AbstractRange.
AbstractRange and StaticRange are not available from web workers.
Constructor
StaticRange()

Creates a new StaticRange object given options specifying the default values for its properties.

Instance propertiesThe properties below are inherited from its parent interface, AbstractRange.

StaticRange.collapsed Read only

Returns a Boolean value that is true if the range's start and end positions are the same, resulting in a range of length 0.

StaticRange.endContainer Read only

Returns the DOM Node which contains the ending point of the range. The offset into the node at which the end position is located is indicated by endOffset.

StaticRange.endOffset Read only

Returns an integer value indicating the offset into the node given by endContainer at which the last character of the range is found.

StaticRange.startContainer Read only

Returns the DOM Node which contains the starting point of the range (which is in turn identified by startOffset.

StaticRange.startOffset Read only

Returns an integer value indicating the offset into the node specified by startContainer at which the first character of the range is located.

Usage notesA DOM range specifies a span of content in a document, potentially beginning inside one node (or element) and ending inside another one. Unlike a Range, a StaticRange represents a range which is fixed in time; it does not change to try to keep the same content within it as the document changes. If any changes are made to the DOM, the actual data contained within the range specified by a StaticRange may change. This lets the user agent avoid a lot of work that is unnecessary if the web app or site doesn't need a live-updating range.SpecificationsSpecificationDOM # interface-staticrangeBrowser compatibilitySee also
Live updating range of content within the DOM: Range
AbstractRange, the abstract interface from which all ranges are derived\n\nStaticRangeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2020.Learn moreSee full compatibilityReport feedbackThe DOM StaticRange interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.
This interface offers the same set of properties and methods as AbstractRange.
AbstractRange and StaticRange are not available from web workers.
Constructor
StaticRange()

Creates a new StaticRange object given options specifying the default values for its properties.

Instance propertiesThe properties below are inherited from its parent interface, AbstractRange.

StaticRange.collapsed Read only

Returns a Boolean value that is true if the range's start and end positions are the same, resulting in a range of length 0.

StaticRange.endContainer Read only

Returns the DOM Node which contains the ending point of the range. The offset into the node at which the end position is located is indicated by endOffset.

StaticRange.endOffset Read only

Returns an integer value indicating the offset into the node given by endContainer at which the last character of the range is found.

StaticRange.startContainer Read only

Returns the DOM Node which contains the starting point of the range (which is in turn identified by startOffset.

StaticRange.startOffset Read only

Returns an integer value indicating the offset into the node specified by startContainer at which the first character of the range is located.

Usage notesA DOM range specifies a span of content in a document, potentially beginning inside one node (or element) and ending inside another one. Unlike a Range, a StaticRange represents a range which is fixed in time; it does not change to try to keep the same content within it as the document changes. If any changes are made to the DOM, the actual data contained within the range specified by a StaticRange may change. This lets the user agent avoid a lot of work that is unnecessary if the web app or site doesn't need a live-updating range.SpecificationsSpecificationDOM # interface-staticrangeBrowser compatibilitySee also
Live updating range of content within the DOM: Range
AbstractRange, the abstract interface from which all ranges are derived
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 27, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nStaticRangeBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2020.Learn moreSee full compatibilityReport feedbackThe DOM StaticRange interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.
This interface offers the same set of properties and methods as AbstractRange.
AbstractRange and StaticRange are not available from web workers.
Constructor
StaticRange()

Creates a new StaticRange object given options specifying the default values for its properties.

Instance propertiesThe properties below are inherited from its parent interface, AbstractRange.

StaticRange.collapsed Read only

Returns a Boolean value that is true if the range's start and end positions are the same, resulting in a range of length 0.

StaticRange.endContainer Read only

Returns the DOM Node which contains the ending point of the range. The offset into the node at which the end position is located is indicated by endOffset.

StaticRange.endOffset Read only

Returns an integer value indicating the offset into the node given by endContainer at which the last character of the range is found.

StaticRange.startContainer Read only

Returns the DOM Node which contains the starting point of the range (which is in turn identified by startOffset.

StaticRange.startOffset Read only

Returns an integer value indicating the offset into the node specified by startContainer at which the first character of the range is located.

Usage notesA DOM range specifies a span of content in a document, potentially beginning inside one node (or element) and ending inside another one. Unlike a Range, a StaticRange represents a range which is fixed in time; it does not change to try to keep the same content within it as the document changes. If any changes are made to the DOM, the actual data contained within the range specified by a StaticRange may change. This lets the user agent avoid a lot of work that is unnecessary if the web app or site doesn't need a live-updating range.SpecificationsSpecificationDOM # interface-staticrangeBrowser compatibilitySee also
Live updating range of content within the DOM: Range
AbstractRange, the abstract interface from which all ranges are derived
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 27, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nTextBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Text interface represents a text node in a DOM tree.

To understand what a text node is, consider the following document:
html<html lang="en" class="e">
  <head>
    <title>Aliens?</title>
  </head>
  <body>
    Why yes.
  </body>
</html>

In that document, there are five text nodes, with the following contents:

"\n    " (after the <head> start tag, a newline followed by four spaces)
"Aliens?" (the contents of the title element)
"\n  " (after the </head> end tag, a newline followed by two spaces)
"\n  " (after the <body> start tag, a newline followed by two spaces)
"\n Why yes.\n \n\n" (the contents of the body element)

Each of those text nodes is an object that has the properties and methods documented in this article.Constructor
Text()

Returns a new Text node with the parameter as its textual content.

Instance propertiesInherits properties from its parents, CharacterData, Node, and EventTarget.

Text.assignedSlot Read only

Returns a HTMLSlotElement representing the <slot> the node is inserted in.

Text.wholeText Read only

Returns a string containing the text of all Text nodes logically adjacent to this Node, concatenated in document order.

Instance methodsInherits methods from its parent, CharacterData, Node, and EventTarget.

Text.splitText

Breaks the node into two nodes at a specified offset.

SpecificationsSpecificationDOM # interface-textBrowser compatibilitySee also
The DOM API\n\nTextBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Text interface represents a text node in a DOM tree.

To understand what a text node is, consider the following document:
html<html lang="en" class="e">
  <head>
    <title>Aliens?</title>
  </head>
  <body>
    Why yes.
  </body>
</html>

In that document, there are five text nodes, with the following contents:

"\n    " (after the <head> start tag, a newline followed by four spaces)
"Aliens?" (the contents of the title element)
"\n  " (after the </head> end tag, a newline followed by two spaces)
"\n  " (after the <body> start tag, a newline followed by two spaces)
"\n Why yes.\n \n\n" (the contents of the body element)

Each of those text nodes is an object that has the properties and methods documented in this article.Constructor
Text()

Returns a new Text node with the parameter as its textual content.

Instance propertiesInherits properties from its parents, CharacterData, Node, and EventTarget.

Text.assignedSlot Read only

Returns a HTMLSlotElement representing the <slot> the node is inserted in.

Text.wholeText Read only

Returns a string containing the text of all Text nodes logically adjacent to this Node, concatenated in document order.

Instance methodsInherits methods from its parent, CharacterData, Node, and EventTarget.

Text.splitText

Breaks the node into two nodes at a specified offset.

SpecificationsSpecificationDOM # interface-textBrowser compatibilitySee also
The DOM API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nTextBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe Text interface represents a text node in a DOM tree.

To understand what a text node is, consider the following document:
html<html lang="en" class="e">
  <head>
    <title>Aliens?</title>
  </head>
  <body>
    Why yes.
  </body>
</html>

In that document, there are five text nodes, with the following contents:

"\n    " (after the <head> start tag, a newline followed by four spaces)
"Aliens?" (the contents of the title element)
"\n  " (after the </head> end tag, a newline followed by two spaces)
"\n  " (after the <body> start tag, a newline followed by two spaces)
"\n Why yes.\n \n\n" (the contents of the body element)

Each of those text nodes is an object that has the properties and methods documented in this article.Constructor
Text()

Returns a new Text node with the parameter as its textual content.

Instance propertiesInherits properties from its parents, CharacterData, Node, and EventTarget.

Text.assignedSlot Read only

Returns a HTMLSlotElement representing the <slot> the node is inserted in.

Text.wholeText Read only

Returns a string containing the text of all Text nodes logically adjacent to this Node, concatenated in document order.

Instance methodsInherits methods from its parent, CharacterData, Node, and EventTarget.

Text.splitText

Breaks the node into two nodes at a specified offset.

SpecificationsSpecificationDOM # interface-textBrowser compatibilitySee also
The DOM API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nTextDecoderBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The TextDecoder interface represents a decoder for a specific text encoding, such as UTF-8, ISO-8859-2, KOI8-R, GBK, etc. A decoder takes a stream of bytes as input and emits a stream of code points.Constructor
TextDecoder()

Returns a newly constructed TextDecoder that will generate a code point stream with the decoding method specified in parameters.

Instance propertiesThe TextDecoder interface doesn't inherit any properties.

TextDecoder.encoding Read only

A string containing the name of the decoder, which is a string describing the method the TextDecoder will use.

TextDecoder.fatal Read only

A Boolean indicating whether the error mode is fatal.

TextDecoder.ignoreBOM Read only

A Boolean indicating whether the byte order mark is ignored.

Instance methodsThe TextDecoder interface doesn't inherit any methods.

TextDecoder.decode()

Returns a string containing the text decoded with the method of the specific TextDecoder object.

ExamplesRepresenting text with typed arraysThis example shows how to decode a Chinese/Japanese character , as represented by five different typed arrays: Uint8Array, Int8Array, Uint16Array, Int16Array, and Int32Array.
jslet utf8decoder = new TextDecoder(); // default 'utf-8' or 'utf8'

let u8arr = new Uint8Array([240, 160, 174, 183]);
let i8arr = new Int8Array([-16, -96, -82, -73]);
let u16arr = new Uint16Array([41200, 47022]);
let i16arr = new Int16Array([-24336, -18514]);
let i32arr = new Int32Array([-1213292304]);

console.log(utf8decoder.decode(u8arr));
console.log(utf8decoder.decode(i8arr));
console.log(utf8decoder.decode(u16arr));
console.log(utf8decoder.decode(i16arr));
console.log(utf8decoder.decode(i32arr));
Handling non-UTF8 textIn this example, we decode the Russian text "Привет, мир!", which means "Hello, world." In our TextDecoder() constructor, we specify the Windows-1251 character encoding, which is appropriate for Cyrillic script.
jsconst win1251decoder = new TextDecoder("windows-1251");
const bytes = new Uint8Array([
  207, 240, 232, 226, 229, 242, 44, 32, 236, 232, 240, 33,
]);
console.log(win1251decoder.decode(bytes)); // Привет, мир!
SpecificationsSpecificationEncoding # interface-textdecoderBrowser compatibilitySee also
The TextEncoder interface describing the inverse operation.
A shim allowing to use this interface in browsers that do not support it.
Node.js supports global export from v11.0.0\n\nTextDecoderBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The TextDecoder interface represents a decoder for a specific text encoding, such as UTF-8, ISO-8859-2, KOI8-R, GBK, etc. A decoder takes a stream of bytes as input and emits a stream of code points.Constructor
TextDecoder()

Returns a newly constructed TextDecoder that will generate a code point stream with the decoding method specified in parameters.

Instance propertiesThe TextDecoder interface doesn't inherit any properties.

TextDecoder.encoding Read only

A string containing the name of the decoder, which is a string describing the method the TextDecoder will use.

TextDecoder.fatal Read only

A Boolean indicating whether the error mode is fatal.

TextDecoder.ignoreBOM Read only

A Boolean indicating whether the byte order mark is ignored.

Instance methodsThe TextDecoder interface doesn't inherit any methods.

TextDecoder.decode()

Returns a string containing the text decoded with the method of the specific TextDecoder object.

ExamplesRepresenting text with typed arraysThis example shows how to decode a Chinese/Japanese character , as represented by five different typed arrays: Uint8Array, Int8Array, Uint16Array, Int16Array, and Int32Array.
jslet utf8decoder = new TextDecoder(); // default 'utf-8' or 'utf8'

let u8arr = new Uint8Array([240, 160, 174, 183]);
let i8arr = new Int8Array([-16, -96, -82, -73]);
let u16arr = new Uint16Array([41200, 47022]);
let i16arr = new Int16Array([-24336, -18514]);
let i32arr = new Int32Array([-1213292304]);

console.log(utf8decoder.decode(u8arr));
console.log(utf8decoder.decode(i8arr));
console.log(utf8decoder.decode(u16arr));
console.log(utf8decoder.decode(i16arr));
console.log(utf8decoder.decode(i32arr));
Handling non-UTF8 textIn this example, we decode the Russian text "Привет, мир!", which means "Hello, world." In our TextDecoder() constructor, we specify the Windows-1251 character encoding, which is appropriate for Cyrillic script.
jsconst win1251decoder = new TextDecoder("windows-1251");
const bytes = new Uint8Array([
  207, 240, 232, 226, 229, 242, 44, 32, 236, 232, 240, 33,
]);
console.log(win1251decoder.decode(bytes)); // Привет, мир!
SpecificationsSpecificationEncoding # interface-textdecoderBrowser compatibilitySee also
The TextEncoder interface describing the inverse operation.
A shim allowing to use this interface in browsers that do not support it.
Node.js supports global export from v11.0.0
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Sep 25, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nTextDecoderBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The TextDecoder interface represents a decoder for a specific text encoding, such as UTF-8, ISO-8859-2, KOI8-R, GBK, etc. A decoder takes a stream of bytes as input and emits a stream of code points.Constructor
TextDecoder()

Returns a newly constructed TextDecoder that will generate a code point stream with the decoding method specified in parameters.

Instance propertiesThe TextDecoder interface doesn't inherit any properties.

TextDecoder.encoding Read only

A string containing the name of the decoder, which is a string describing the method the TextDecoder will use.

TextDecoder.fatal Read only

A Boolean indicating whether the error mode is fatal.

TextDecoder.ignoreBOM Read only

A Boolean indicating whether the byte order mark is ignored.

Instance methodsThe TextDecoder interface doesn't inherit any methods.

TextDecoder.decode()

Returns a string containing the text decoded with the method of the specific TextDecoder object.

ExamplesRepresenting text with typed arraysThis example shows how to decode a Chinese/Japanese character , as represented by five different typed arrays: Uint8Array, Int8Array, Uint16Array, Int16Array, and Int32Array.
jslet utf8decoder = new TextDecoder(); // default 'utf-8' or 'utf8'

let u8arr = new Uint8Array([240, 160, 174, 183]);
let i8arr = new Int8Array([-16, -96, -82, -73]);
let u16arr = new Uint16Array([41200, 47022]);
let i16arr = new Int16Array([-24336, -18514]);
let i32arr = new Int32Array([-1213292304]);

console.log(utf8decoder.decode(u8arr));
console.log(utf8decoder.decode(i8arr));
console.log(utf8decoder.decode(u16arr));
console.log(utf8decoder.decode(i16arr));
console.log(utf8decoder.decode(i32arr));
Handling non-UTF8 textIn this example, we decode the Russian text "Привет, мир!", which means "Hello, world." In our TextDecoder() constructor, we specify the Windows-1251 character encoding, which is appropriate for Cyrillic script.
jsconst win1251decoder = new TextDecoder("windows-1251");
const bytes = new Uint8Array([
  207, 240, 232, 226, 229, 242, 44, 32, 236, 232, 240, 33,
]);
console.log(win1251decoder.decode(bytes)); // Привет, мир!
SpecificationsSpecificationEncoding # interface-textdecoderBrowser compatibilitySee also
The TextEncoder interface describing the inverse operation.
A shim allowing to use this interface in browsers that do not support it.
Node.js supports global export from v11.0.0
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Sep 25, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nTextEncoderBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The TextEncoder interface takes a stream of code points as input and emits a stream of UTF-8 bytes.Constructor
TextEncoder()

Returns a newly constructed TextEncoder that will generate a byte stream with UTF-8 encoding.

Instance propertiesThe TextEncoder interface doesn't inherit any properties.

TextEncoder.encoding Read only

Always returns utf-8.

Instance methodsThe TextEncoder interface doesn't inherit any methods.

TextEncoder.encode()

Takes a string as input, and returns a Uint8Array containing UTF-8 encoded text.

TextEncoder.encodeInto()

Takes a string to encode and a destination Uint8Array to put resulting UTF-8 encoded text into, and returns an object indicating the progress of the encoding.
This is potentially more performant than the older encode() method.

Examplesjsconst encoder = new TextEncoder();
const view = encoder.encode("€");
console.log(view); // Uint8Array(3) [226, 130, 172]
SpecificationsSpecificationEncoding # interface-textencoderBrowser compatibilitySee also
The TextDecoder interface describing the inverse operation.
Node.js supports global export from v11.0.0\n\nTextEncoderBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The TextEncoder interface takes a stream of code points as input and emits a stream of UTF-8 bytes.Constructor
TextEncoder()

Returns a newly constructed TextEncoder that will generate a byte stream with UTF-8 encoding.

Instance propertiesThe TextEncoder interface doesn't inherit any properties.

TextEncoder.encoding Read only

Always returns utf-8.

Instance methodsThe TextEncoder interface doesn't inherit any methods.

TextEncoder.encode()

Takes a string as input, and returns a Uint8Array containing UTF-8 encoded text.

TextEncoder.encodeInto()

Takes a string to encode and a destination Uint8Array to put resulting UTF-8 encoded text into, and returns an object indicating the progress of the encoding.
This is potentially more performant than the older encode() method.

Examplesjsconst encoder = new TextEncoder();
const view = encoder.encode("€");
console.log(view); // Uint8Array(3) [226, 130, 172]
SpecificationsSpecificationEncoding # interface-textencoderBrowser compatibilitySee also
The TextDecoder interface describing the inverse operation.
Node.js supports global export from v11.0.0
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Sep 25, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nTextEncoderBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020.Learn moreSee full compatibilityReport feedbackNote: This feature is available in Web Workers.
The TextEncoder interface takes a stream of code points as input and emits a stream of UTF-8 bytes.Constructor
TextEncoder()

Returns a newly constructed TextEncoder that will generate a byte stream with UTF-8 encoding.

Instance propertiesThe TextEncoder interface doesn't inherit any properties.

TextEncoder.encoding Read only

Always returns utf-8.

Instance methodsThe TextEncoder interface doesn't inherit any methods.

TextEncoder.encode()

Takes a string as input, and returns a Uint8Array containing UTF-8 encoded text.

TextEncoder.encodeInto()

Takes a string to encode and a destination Uint8Array to put resulting UTF-8 encoded text into, and returns an object indicating the progress of the encoding.
This is potentially more performant than the older encode() method.

Examplesjsconst encoder = new TextEncoder();
const view = encoder.encode("€");
console.log(view); // Uint8Array(3) [226, 130, 172]
SpecificationsSpecificationEncoding # interface-textencoderBrowser compatibilitySee also
The TextDecoder interface describing the inverse operation.
Node.js supports global export from v11.0.0
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Sep 25, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nTimeRangesBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackWhen loading a media resource for use by an <audio> or <video> element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.
A TimeRanges object includes one or more ranges of time, each specified by a starting time offset and an ending time offset. You reference each time range by using the start() and end() methods, passing the index number of the time range you want to retrieve.Normalized TimeRanges objectsSeveral members of HTMLMediaElement objects return a normalized TimeRanges object — which the spec describes as having the following characteristics:
The ranges in such an object are ordered, don't overlap, and don't touch (adjacent ranges are folded into one bigger range). A range can be empty (referencing just a single moment in time).Instance properties
TimeRanges.length Read only

Returns an unsigned long representing the number of time ranges represented by the time range object.

Instance methods
TimeRanges.start()

Returns the time for the start of the range with the specified index.

TimeRanges.end()

Returns the time for the end of the specified range.

SpecificationsSpecificationHTML # time-rangesBrowser compatibility\n\nTimeRangesBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackWhen loading a media resource for use by an <audio> or <video> element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.
A TimeRanges object includes one or more ranges of time, each specified by a starting time offset and an ending time offset. You reference each time range by using the start() and end() methods, passing the index number of the time range you want to retrieve.Normalized TimeRanges objectsSeveral members of HTMLMediaElement objects return a normalized TimeRanges object — which the spec describes as having the following characteristics:
The ranges in such an object are ordered, don't overlap, and don't touch (adjacent ranges are folded into one bigger range). A range can be empty (referencing just a single moment in time).Instance properties
TimeRanges.length Read only

Returns an unsigned long representing the number of time ranges represented by the time range object.

Instance methods
TimeRanges.start()

Returns the time for the start of the range with the specified index.

TimeRanges.end()

Returns the time for the end of the specified range.

SpecificationsSpecificationHTML # time-rangesBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nTimeRangesBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackWhen loading a media resource for use by an <audio> or <video> element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.
A TimeRanges object includes one or more ranges of time, each specified by a starting time offset and an ending time offset. You reference each time range by using the start() and end() methods, passing the index number of the time range you want to retrieve.Normalized TimeRanges objectsSeveral members of HTMLMediaElement objects return a normalized TimeRanges object — which the spec describes as having the following characteristics:
The ranges in such an object are ordered, don't overlap, and don't touch (adjacent ranges are folded into one bigger range). A range can be empty (referencing just a single moment in time).Instance properties
TimeRanges.length Read only

Returns an unsigned long representing the number of time ranges represented by the time range object.

Instance methods
TimeRanges.start()

Returns the time for the start of the range with the specified index.

TimeRanges.end()

Returns the time for the end of the specified range.

SpecificationsSpecificationHTML # time-rangesBrowser compatibilityHelp improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nTreeWalkerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe TreeWalker object represents the nodes of a document subtree and a position within them.
A TreeWalker can be created using the Document.createTreeWalker() method.Instance propertiesThis interface doesn't inherit any property.

TreeWalker.root Read only

Returns the root Node as specified when the TreeWalker was created.

TreeWalker.whatToShow Read only

Returns an unsigned long being a bitmask made of constants describing the types of Node that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:



Constant
Numerical value
Description




NodeFilter.SHOW_ALL
4294967295 (that is the max value of unsigned long)
Shows all nodes.


NodeFilter.SHOW_ATTRIBUTE 
Deprecated

2
Shows attribute Attr nodes. This is meaningful only when creating a TreeWalker with an Attr node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.


NodeFilter.SHOW_CDATA_SECTION 
Deprecated

8
Shows CDATASection nodes.


NodeFilter.SHOW_COMMENT
128
Shows Comment nodes.


NodeFilter.SHOW_DOCUMENT
256
Shows Document nodes.


NodeFilter.SHOW_DOCUMENT_FRAGMENT
1024
Shows DocumentFragment nodes.


NodeFilter.SHOW_DOCUMENT_TYPE
512
Shows DocumentType nodes.


NodeFilter.SHOW_ELEMENT
1
Shows Element nodes.


NodeFilter.SHOW_ENTITY 
Deprecated

32
Legacy, no more usable.


NodeFilter.SHOW_ENTITY_REFERENCE 
Deprecated

16
Legacy, no more usable.


NodeFilter.SHOW_NOTATION 
Deprecated

2048
Legacy, no more usable.


NodeFilter.SHOW_PROCESSING_INSTRUCTION
64
Shows ProcessingInstruction nodes.


NodeFilter.SHOW_TEXT
4
Shows Text nodes.




TreeWalker.filter Read only

Returns the NodeFilter associated with this TreeWalker used to select the relevant nodes.

TreeWalker.currentNode

Is the Node on which the TreeWalker is currently pointing at.

Instance methodsThis interface doesn't inherit any method.

Note:
In the context of a TreeWalker, a node is visible if it exists in the logical view determined by the whatToShow and filter parameter arguments. (Whether or not the node is visible on the screen is irrelevant.)


TreeWalker.parentNode()

Moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.

TreeWalker.firstChild()

Moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed. Note that the node returned by firstChild() is dependent on the value of whatToShow set during instantiation of the TreeWalker object. Assuming the following HTML tree, and if you set the whatToShow to NodeFilter.SHOW_ALL a call to firstChild() will return a Text node and not an HTMLDivElement object.
html<!doctype html>
<html lang="en">
  <head>
    <title>Demo</title>
  </head>
  <body>
    <div id="container"></div>
  </body>
</html>

jslet walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ALL);
let node = walker.firstChild(); // nodeName: "#text"

But if we do:
jslet walker = document.createTreeWalker(
  document.body,
  NodeFilter.SHOW_ELEMENT,
);
let node = walker.firstChild(); // nodeName: "DIV"

The same applies to nextSibling(), previousSibling(), firstChild() and lastChild()

TreeWalker.lastChild()

Moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, null is returned and the current node is not changed.

TreeWalker.previousSibling()

Moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.

TreeWalker.nextSibling()

Moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, null is returned and the current node is not changed.

TreeWalker.previousNode()

Moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.

TreeWalker.nextNode()

Moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.

SpecificationsSpecificationDOM # interface-treewalkerBrowser compatibilitySee also
The creator method: Document.createTreeWalker().
Related interface: NodeIterator.\n\nTreeWalkerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe TreeWalker object represents the nodes of a document subtree and a position within them.
A TreeWalker can be created using the Document.createTreeWalker() method.Instance propertiesThis interface doesn't inherit any property.

TreeWalker.root Read only

Returns the root Node as specified when the TreeWalker was created.

TreeWalker.whatToShow Read only

Returns an unsigned long being a bitmask made of constants describing the types of Node that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:



Constant
Numerical value
Description




NodeFilter.SHOW_ALL
4294967295 (that is the max value of unsigned long)
Shows all nodes.


NodeFilter.SHOW_ATTRIBUTE 
Deprecated

2
Shows attribute Attr nodes. This is meaningful only when creating a TreeWalker with an Attr node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.


NodeFilter.SHOW_CDATA_SECTION 
Deprecated

8
Shows CDATASection nodes.


NodeFilter.SHOW_COMMENT
128
Shows Comment nodes.


NodeFilter.SHOW_DOCUMENT
256
Shows Document nodes.


NodeFilter.SHOW_DOCUMENT_FRAGMENT
1024
Shows DocumentFragment nodes.


NodeFilter.SHOW_DOCUMENT_TYPE
512
Shows DocumentType nodes.


NodeFilter.SHOW_ELEMENT
1
Shows Element nodes.


NodeFilter.SHOW_ENTITY 
Deprecated

32
Legacy, no more usable.


NodeFilter.SHOW_ENTITY_REFERENCE 
Deprecated

16
Legacy, no more usable.


NodeFilter.SHOW_NOTATION 
Deprecated

2048
Legacy, no more usable.


NodeFilter.SHOW_PROCESSING_INSTRUCTION
64
Shows ProcessingInstruction nodes.


NodeFilter.SHOW_TEXT
4
Shows Text nodes.




TreeWalker.filter Read only

Returns the NodeFilter associated with this TreeWalker used to select the relevant nodes.

TreeWalker.currentNode

Is the Node on which the TreeWalker is currently pointing at.

Instance methodsThis interface doesn't inherit any method.

Note:
In the context of a TreeWalker, a node is visible if it exists in the logical view determined by the whatToShow and filter parameter arguments. (Whether or not the node is visible on the screen is irrelevant.)


TreeWalker.parentNode()

Moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.

TreeWalker.firstChild()

Moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed. Note that the node returned by firstChild() is dependent on the value of whatToShow set during instantiation of the TreeWalker object. Assuming the following HTML tree, and if you set the whatToShow to NodeFilter.SHOW_ALL a call to firstChild() will return a Text node and not an HTMLDivElement object.
html<!doctype html>
<html lang="en">
  <head>
    <title>Demo</title>
  </head>
  <body>
    <div id="container"></div>
  </body>
</html>

jslet walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ALL);
let node = walker.firstChild(); // nodeName: "#text"

But if we do:
jslet walker = document.createTreeWalker(
  document.body,
  NodeFilter.SHOW_ELEMENT,
);
let node = walker.firstChild(); // nodeName: "DIV"

The same applies to nextSibling(), previousSibling(), firstChild() and lastChild()

TreeWalker.lastChild()

Moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, null is returned and the current node is not changed.

TreeWalker.previousSibling()

Moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.

TreeWalker.nextSibling()

Moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, null is returned and the current node is not changed.

TreeWalker.previousNode()

Moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.

TreeWalker.nextNode()

Moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.

SpecificationsSpecificationDOM # interface-treewalkerBrowser compatibilitySee also
The creator method: Document.createTreeWalker().
Related interface: NodeIterator.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 14, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nTreeWalkerBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015.Learn moreSee full compatibilityReport feedbackThe TreeWalker object represents the nodes of a document subtree and a position within them.
A TreeWalker can be created using the Document.createTreeWalker() method.Instance propertiesThis interface doesn't inherit any property.

TreeWalker.root Read only

Returns the root Node as specified when the TreeWalker was created.

TreeWalker.whatToShow Read only

Returns an unsigned long being a bitmask made of constants describing the types of Node that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:



Constant
Numerical value
Description




NodeFilter.SHOW_ALL
4294967295 (that is the max value of unsigned long)
Shows all nodes.


NodeFilter.SHOW_ATTRIBUTE 
Deprecated

2
Shows attribute Attr nodes. This is meaningful only when creating a TreeWalker with an Attr node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.


NodeFilter.SHOW_CDATA_SECTION 
Deprecated

8
Shows CDATASection nodes.


NodeFilter.SHOW_COMMENT
128
Shows Comment nodes.


NodeFilter.SHOW_DOCUMENT
256
Shows Document nodes.


NodeFilter.SHOW_DOCUMENT_FRAGMENT
1024
Shows DocumentFragment nodes.


NodeFilter.SHOW_DOCUMENT_TYPE
512
Shows DocumentType nodes.


NodeFilter.SHOW_ELEMENT
1
Shows Element nodes.


NodeFilter.SHOW_ENTITY 
Deprecated

32
Legacy, no more usable.


NodeFilter.SHOW_ENTITY_REFERENCE 
Deprecated

16
Legacy, no more usable.


NodeFilter.SHOW_NOTATION 
Deprecated

2048
Legacy, no more usable.


NodeFilter.SHOW_PROCESSING_INSTRUCTION
64
Shows ProcessingInstruction nodes.


NodeFilter.SHOW_TEXT
4
Shows Text nodes.




TreeWalker.filter Read only

Returns the NodeFilter associated with this TreeWalker used to select the relevant nodes.

TreeWalker.currentNode

Is the Node on which the TreeWalker is currently pointing at.

Instance methodsThis interface doesn't inherit any method.

Note:
In the context of a TreeWalker, a node is visible if it exists in the logical view determined by the whatToShow and filter parameter arguments. (Whether or not the node is visible on the screen is irrelevant.)


TreeWalker.parentNode()

Moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.

TreeWalker.firstChild()

Moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed. Note that the node returned by firstChild() is dependent on the value of whatToShow set during instantiation of the TreeWalker object. Assuming the following HTML tree, and if you set the whatToShow to NodeFilter.SHOW_ALL a call to firstChild() will return a Text node and not an HTMLDivElement object.
html<!doctype html>
<html lang="en">
  <head>
    <title>Demo</title>
  </head>
  <body>
    <div id="container"></div>
  </body>
</html>

jslet walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ALL);
let node = walker.firstChild(); // nodeName: "#text"

But if we do:
jslet walker = document.createTreeWalker(
  document.body,
  NodeFilter.SHOW_ELEMENT,
);
let node = walker.firstChild(); // nodeName: "DIV"

The same applies to nextSibling(), previousSibling(), firstChild() and lastChild()

TreeWalker.lastChild()

Moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, null is returned and the current node is not changed.

TreeWalker.previousSibling()

Moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.

TreeWalker.nextSibling()

Moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, null is returned and the current node is not changed.

TreeWalker.previousNode()

Moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.

TreeWalker.nextNode()

Moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.

SpecificationsSpecificationDOM # interface-treewalkerBrowser compatibilitySee also
The creator method: Document.createTreeWalker().
Related interface: NodeIterator.
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 14, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nXMLDocumentBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since September 2016.Learn moreSee full compatibilityReport feedbackThe XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.
Instance propertiesAlso inherits properties from: Document.Instance methodsAlso inherits methods from: Document.SpecificationsSpecificationDOM # xmldocumentBrowser compatibilitySee also
The Document Object Model (DOM)\n\nXMLDocumentBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since September 2016.Learn moreSee full compatibilityReport feedbackThe XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.
Instance propertiesAlso inherits properties from: Document.Instance methodsAlso inherits methods from: Document.SpecificationsSpecificationDOM # xmldocumentBrowser compatibilitySee also
The Document Object Model (DOM)
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 21, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nXMLDocumentBaseline Widely availableThis feature is well established and works across many devices and browser versions. It’s been available across browsers since September 2016.Learn moreSee full compatibilityReport feedbackThe XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.
Instance propertiesAlso inherits properties from: Document.Instance methodsAlso inherits methods from: Document.SpecificationsSpecificationDOM # xmldocumentBrowser compatibilitySee also
The Document Object Model (DOM)
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Mar 21, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nBaseline (compatibility)Baseline identifies the availability of web platform features across popular browsers, including APIs, CSS properties, and JavaScript syntax. Baseline describes web features as being either widely available or newly available. Features that do not meet the Baseline criteria are said to have limited availability.
Baseline considers support in the following browsers:

Apple Safari (iOS)
Apple Safari (macOS)
Google Chrome (Android)
Google Chrome (desktop)
Microsoft Edge (desktop)
Mozilla Firefox (Android)
Mozilla Firefox (desktop)

Baseline is a summary of browser support. It is not a substitute for accessibility, usability, performance, security, or other testing. Baseline may not tell you if a feature works with:

Older devices and browser releases
Browsers not covered by the Baseline definition, such as operating system web views
Assistive technology, such as screen readers.
Baseline badges
Features listed as widely available have a consistent history of support in each of the Baseline browsers for at least 2.5 years.

Features listed as newly available work in at least the latest stable version of each of the Baseline browsers, but may not work with older browsers and devices.

Features listed with limited availability are not yet available in all browsers.See also
Testing
web-platform-dx/web-features repository
W3C WebDX Community Group
mdn/browser-compat-data repository
caniuse.com
a11ysupport.io\n\nBaseline (compatibility)Baseline identifies the availability of web platform features across popular browsers, including APIs, CSS properties, and JavaScript syntax. Baseline describes web features as being either widely available or newly available. Features that do not meet the Baseline criteria are said to have limited availability.
Baseline considers support in the following browsers:

Apple Safari (iOS)
Apple Safari (macOS)
Google Chrome (Android)
Google Chrome (desktop)
Microsoft Edge (desktop)
Mozilla Firefox (Android)
Mozilla Firefox (desktop)

Baseline is a summary of browser support. It is not a substitute for accessibility, usability, performance, security, or other testing. Baseline may not tell you if a feature works with:

Older devices and browser releases
Browsers not covered by the Baseline definition, such as operating system web views
Assistive technology, such as screen readers.
Baseline badges
Features listed as widely available have a consistent history of support in each of the Baseline browsers for at least 2.5 years.

Features listed as newly available work in at least the latest stable version of each of the Baseline browsers, but may not work with older browsers and devices.

Features listed with limited availability are not yet available in all browsers.See also
Testing
web-platform-dx/web-features repository
W3C WebDX Community Group
mdn/browser-compat-data repository
caniuse.com
a11ysupport.io
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 19, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nBaseline (compatibility)Baseline identifies the availability of web platform features across popular browsers, including APIs, CSS properties, and JavaScript syntax. Baseline describes web features as being either widely available or newly available. Features that do not meet the Baseline criteria are said to have limited availability.
Baseline considers support in the following browsers:

Apple Safari (iOS)
Apple Safari (macOS)
Google Chrome (Android)
Google Chrome (desktop)
Microsoft Edge (desktop)
Mozilla Firefox (Android)
Mozilla Firefox (desktop)

Baseline is a summary of browser support. It is not a substitute for accessibility, usability, performance, security, or other testing. Baseline may not tell you if a feature works with:

Older devices and browser releases
Browsers not covered by the Baseline definition, such as operating system web views
Assistive technology, such as screen readers.
Baseline badges
Features listed as widely available have a consistent history of support in each of the Baseline browsers for at least 2.5 years.

Features listed as newly available work in at least the latest stable version of each of the Baseline browsers, but may not work with older browsers and devices.

Features listed with limited availability are not yet available in all browsers.See also
Testing
web-platform-dx/web-features repository
W3C WebDX Community Group
mdn/browser-compat-data repository
caniuse.com
a11ysupport.io
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Dec 19, 2024 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nWeb Workers APIWeb Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.Concepts and usageA worker is an object created using a constructor (e.g., Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread.
In addition to the standard JavaScript set of functions (such as String, Array, Object, JSON, etc.), you can run almost any code you like inside a worker thread. There are some exceptions: for example, you can't directly manipulate the DOM from inside a worker, or use some default methods and properties of the Window object. For information about the code that you can run see supported functions, and supported Web APIs.
Data is sent between workers and the main thread via a system of messages — both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler (the message is contained within the message event's data property). The data is copied rather than shared.
Workers may in turn spawn new workers, as long as those workers are hosted within the same origin as the parent page.
In addition, workers can make network requests using the fetch() or XMLHttpRequest APIs (although note that the responseXML attribute of XMLHttpRequest will always be null).Worker typesThere are a number of different types of workers:

Dedicated workers are workers that are utilized by a single script. This context is represented by a DedicatedWorkerGlobalScope object.
Shared workers are workers that can be utilized by multiple scripts running in different windows, IFrames, etc., as long as they are in the same domain as the worker. They are a little more complex than dedicated workers — scripts must communicate via an active port.
Service Workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.
Worker contextsWhile Window is not directly available to workers, many of the same methods are defined in a shared mixin (WindowOrWorkerGlobalScope), and made available to workers through their own WorkerGlobalScope-derived contexts:

DedicatedWorkerGlobalScope for dedicated workers
SharedWorkerGlobalScope for shared workers
ServiceWorkerGlobalScope for service workers
Interfaces
Worker

Represents a running worker thread, allowing you to pass messages to the running worker code.

WorkerLocation

Defines the absolute location of the script executed by the Worker.

SharedWorker

Represents a specific kind of worker that can be accessed from several browsing contexts (i.e., windows, tabs, or iframes) or even other workers.

WorkerGlobalScope

Represents the generic scope of any worker (doing the same job as Window does for normal web content). Different types of worker have scope objects that inherit from this interface and add more specific features.

DedicatedWorkerGlobalScope

Represents the scope of a dedicated worker, inheriting from WorkerGlobalScope and adding some dedicated features.

SharedWorkerGlobalScope

Represents the scope of a shared worker, inheriting from WorkerGlobalScope and adding some dedicated features.

WorkerNavigator

Represents the identity and state of the user agent (the client).

ExamplesWe have created a couple of demos to show web worker usage:

Basic dedicated worker example (run dedicated worker).
Basic shared worker example (run shared worker).
OffscreenCanvas worker example (run OffscreenCanvas worker).

You can find out more information on how these demos work in Using Web Workers.SpecificationsSpecificationHTML # workersSee also
Using Web Workers
Worker interface
SharedWorker interface
Service Worker API\n\nWeb Workers APIWeb Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.Concepts and usageA worker is an object created using a constructor (e.g., Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread.
In addition to the standard JavaScript set of functions (such as String, Array, Object, JSON, etc.), you can run almost any code you like inside a worker thread. There are some exceptions: for example, you can't directly manipulate the DOM from inside a worker, or use some default methods and properties of the Window object. For information about the code that you can run see supported functions, and supported Web APIs.
Data is sent between workers and the main thread via a system of messages — both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler (the message is contained within the message event's data property). The data is copied rather than shared.
Workers may in turn spawn new workers, as long as those workers are hosted within the same origin as the parent page.
In addition, workers can make network requests using the fetch() or XMLHttpRequest APIs (although note that the responseXML attribute of XMLHttpRequest will always be null).Worker typesThere are a number of different types of workers:

Dedicated workers are workers that are utilized by a single script. This context is represented by a DedicatedWorkerGlobalScope object.
Shared workers are workers that can be utilized by multiple scripts running in different windows, IFrames, etc., as long as they are in the same domain as the worker. They are a little more complex than dedicated workers — scripts must communicate via an active port.
Service Workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.
Worker contextsWhile Window is not directly available to workers, many of the same methods are defined in a shared mixin (WindowOrWorkerGlobalScope), and made available to workers through their own WorkerGlobalScope-derived contexts:

DedicatedWorkerGlobalScope for dedicated workers
SharedWorkerGlobalScope for shared workers
ServiceWorkerGlobalScope for service workers
Interfaces
Worker

Represents a running worker thread, allowing you to pass messages to the running worker code.

WorkerLocation

Defines the absolute location of the script executed by the Worker.

SharedWorker

Represents a specific kind of worker that can be accessed from several browsing contexts (i.e., windows, tabs, or iframes) or even other workers.

WorkerGlobalScope

Represents the generic scope of any worker (doing the same job as Window does for normal web content). Different types of worker have scope objects that inherit from this interface and add more specific features.

DedicatedWorkerGlobalScope

Represents the scope of a dedicated worker, inheriting from WorkerGlobalScope and adding some dedicated features.

SharedWorkerGlobalScope

Represents the scope of a shared worker, inheriting from WorkerGlobalScope and adding some dedicated features.

WorkerNavigator

Represents the identity and state of the user agent (the client).

ExamplesWe have created a couple of demos to show web worker usage:

Basic dedicated worker example (run dedicated worker).
Basic shared worker example (run shared worker).
OffscreenCanvas worker example (run OffscreenCanvas worker).

You can find out more information on how these demos work in Using Web Workers.SpecificationsSpecificationHTML # workersSee also
Using Web Workers
Worker interface
SharedWorker interface
Service Worker API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nWeb Workers APIWeb Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.Concepts and usageA worker is an object created using a constructor (e.g., Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread.
In addition to the standard JavaScript set of functions (such as String, Array, Object, JSON, etc.), you can run almost any code you like inside a worker thread. There are some exceptions: for example, you can't directly manipulate the DOM from inside a worker, or use some default methods and properties of the Window object. For information about the code that you can run see supported functions, and supported Web APIs.
Data is sent between workers and the main thread via a system of messages — both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler (the message is contained within the message event's data property). The data is copied rather than shared.
Workers may in turn spawn new workers, as long as those workers are hosted within the same origin as the parent page.
In addition, workers can make network requests using the fetch() or XMLHttpRequest APIs (although note that the responseXML attribute of XMLHttpRequest will always be null).Worker typesThere are a number of different types of workers:

Dedicated workers are workers that are utilized by a single script. This context is represented by a DedicatedWorkerGlobalScope object.
Shared workers are workers that can be utilized by multiple scripts running in different windows, IFrames, etc., as long as they are in the same domain as the worker. They are a little more complex than dedicated workers — scripts must communicate via an active port.
Service Workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.
Worker contextsWhile Window is not directly available to workers, many of the same methods are defined in a shared mixin (WindowOrWorkerGlobalScope), and made available to workers through their own WorkerGlobalScope-derived contexts:

DedicatedWorkerGlobalScope for dedicated workers
SharedWorkerGlobalScope for shared workers
ServiceWorkerGlobalScope for service workers
Interfaces
Worker

Represents a running worker thread, allowing you to pass messages to the running worker code.

WorkerLocation

Defines the absolute location of the script executed by the Worker.

SharedWorker

Represents a specific kind of worker that can be accessed from several browsing contexts (i.e., windows, tabs, or iframes) or even other workers.

WorkerGlobalScope

Represents the generic scope of any worker (doing the same job as Window does for normal web content). Different types of worker have scope objects that inherit from this interface and add more specific features.

DedicatedWorkerGlobalScope

Represents the scope of a dedicated worker, inheriting from WorkerGlobalScope and adding some dedicated features.

SharedWorkerGlobalScope

Represents the scope of a shared worker, inheriting from WorkerGlobalScope and adding some dedicated features.

WorkerNavigator

Represents the identity and state of the user agent (the client).

ExamplesWe have created a couple of demos to show web worker usage:

Basic dedicated worker example (run dedicated worker).
Basic shared worker example (run shared worker).
OffscreenCanvas worker example (run OffscreenCanvas worker).

You can find out more information on how these demos work in Using Web Workers.SpecificationsSpecificationHTML # workersSee also
Using Web Workers
Worker interface
SharedWorker interface
Service Worker API
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 3, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nWindow: fetch() methodBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2017.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe fetch() method of the Window interface starts the process of fetching a resource from the network, returning a promise that is fulfilled once the response is available.
The promise resolves to the Response object representing the response to your request.
A fetch() promise only rejects when the request fails, for example, because of a badly-formed request URL or a network error.
A fetch() promise does not reject if the server responds with HTTP status codes that indicate errors (404, 504, etc.).
Instead, a then() handler must check the Response.ok and/or Response.status properties.
The fetch() method is controlled by the connect-src directive of Content Security Policy rather than the directive of the resources it's retrieving.

Note:
The fetch() method's parameters are identical to those of the Request() constructor.
Syntaxjsfetch(resource)
fetch(resource, options)
Parameters
resource

This defines the resource that you wish to fetch. This can either be:

A string or any other object with a stringifier — including a URL object — that provides the URL of the resource you want to fetch. The URL may be relative to the base URL, which is the document's baseURI in a window context, or WorkerGlobalScope.location in a worker context.
A Request object.


options Optional

A RequestInit object containing any custom settings that you want to apply to the request.

Return valueA Promise that resolves to a Response object.Exceptions
AbortError DOMException

The request was aborted due to a call to the AbortController
abort() method.

NotAllowedError DOMException

Thrown if use of the Topics API is specifically disallowed by a browsing-topics Permissions Policy, and a fetch() request was made with browsingTopics: true.

TypeError

Can occur for the following reasons:



  
    
      Reason
      Failing examples
    
  
  
    
      Blocked by a permissions policy
      Use of the Attribution Reporting API is blocked by a attribution-reporting Permissions-Policy, and a fetch() request was made with attributionReporting specified.
    
    
      Invalid header name.
      
        
        js// space in "C ontent-Type"
const headers = {
  "C ontent-Type": "text/xml",
  "Breaking-Bad": "<3",
};
fetch("https://example.com/", { headers });
        
      
    
    
      
        Invalid header value. The header object must contain exactly two elements.
      
      
        jsconst headers = [
  ["Content-Type", "text/html", "extra"],
  ["Accept"],
];
fetch("https://example.com/", { headers });
        
      
    
    
      
        Invalid URL or scheme, or using a scheme that fetch does not support, or using a scheme that is not supported for a particular request mode.
      
      
        jsfetch("blob://example.com/", { mode: "cors" });
        
      
    
      URL includes credentials.
      
        jsfetch("https://user:password@example.com/");
        
      
    
      Invalid referrer URL.
      
        jsfetch("https://example.com/", { referrer: "./abc\u0000df" });
        
      
    
    
      Invalid modes (navigate and websocket).
      
        jsfetch("https://example.com/", { mode: "navigate" });
        
      
    
    
      
        If the request cache mode is "only-if-cached" and the request mode is other than "same-origin".
      
      
        jsfetch("https://example.com/", {
  cache: "only-if-cached",
  mode: "no-cors",
});
        
      
    
    
      
        If the request method is an invalid name token or one of the forbidden headers
        (CONNECT, TRACE or TRACK).
      
      
        jsfetch("https://example.com/", { method: "CONNECT" });
        
      
    
    
      
        If the request mode is "no-cors" and the request method is not a CORS-safe-listed method
        (GET, HEAD, or POST).
      
      
        jsfetch("https://example.com/", {
  method: "CONNECT",
  mode: "no-cors",
});
        
      
    
    
      
        If the request method is GET or HEAD and the body is non-null or not undefined.
      
      
        jsfetch("https://example.com/", {
  method: "GET",
  body: new FormData(),
});
        
      
    
    
      If fetch throws a network error.
      
    
  
ExamplesIn our Fetch Request example (see Fetch Request live) we
create a new Request object using the relevant constructor, then fetch it
using a fetch() call. Since we are fetching an image, we run
Response.blob() on the response to give it the proper MIME type so it will be
handled properly, then create an Object URL of it and display it in an
<img> element.
jsconst myImage = document.querySelector("img");

const myRequest = new Request("flowers.jpg");

window
  .fetch(myRequest)
  .then((response) => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    return response.blob();
  })
  .then((response) => {
    myImage.src = URL.createObjectURL(response);
  });

In our Fetch Request with init example (see Fetch Request init live) we do the same thing except that we pass in an options object when we invoke fetch().
In this case, we can set a Cache-Control value to indicate what kind of cached responses we're okay with:
jsconst myImage = document.querySelector("img");
const reqHeaders = new Headers();

// A cached response is okay unless it's more than a week old
reqHeaders.set("Cache-Control", "max-age=604800");

const options = {
  headers: reqHeaders,
};

// Pass init as an "options" object with our headers.
const req = new Request("flowers.jpg", options);

fetch(req).then((response) => {
  // …
});

You could also pass the init object in with the Request constructor to get the same effect:
jsconst req = new Request("flowers.jpg", options);

You can also use an object literal as headers in init:
jsconst options = {
  headers: {
    "Cache-Control": "max-age=60480",
  },
};

const req = new Request("flowers.jpg", options);

The Using fetch article provides more examples of using fetch().SpecificationsSpecificationFetch # fetch-methodBrowser compatibilitySee also
WorkerGlobalScope.fetch()
Fetch API
ServiceWorker API
HTTP access control (CORS)
HTTP\n\nWindow: fetch() methodBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2017.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe fetch() method of the Window interface starts the process of fetching a resource from the network, returning a promise that is fulfilled once the response is available.
The promise resolves to the Response object representing the response to your request.
A fetch() promise only rejects when the request fails, for example, because of a badly-formed request URL or a network error.
A fetch() promise does not reject if the server responds with HTTP status codes that indicate errors (404, 504, etc.).
Instead, a then() handler must check the Response.ok and/or Response.status properties.
The fetch() method is controlled by the connect-src directive of Content Security Policy rather than the directive of the resources it's retrieving.

Note:
The fetch() method's parameters are identical to those of the Request() constructor.
Syntaxjsfetch(resource)
fetch(resource, options)
Parameters
resource

This defines the resource that you wish to fetch. This can either be:

A string or any other object with a stringifier — including a URL object — that provides the URL of the resource you want to fetch. The URL may be relative to the base URL, which is the document's baseURI in a window context, or WorkerGlobalScope.location in a worker context.
A Request object.


options Optional

A RequestInit object containing any custom settings that you want to apply to the request.

Return valueA Promise that resolves to a Response object.Exceptions
AbortError DOMException

The request was aborted due to a call to the AbortController
abort() method.

NotAllowedError DOMException

Thrown if use of the Topics API is specifically disallowed by a browsing-topics Permissions Policy, and a fetch() request was made with browsingTopics: true.

TypeError

Can occur for the following reasons:



  
    
      Reason
      Failing examples
    
  
  
    
      Blocked by a permissions policy
      Use of the Attribution Reporting API is blocked by a attribution-reporting Permissions-Policy, and a fetch() request was made with attributionReporting specified.
    
    
      Invalid header name.
      
        
        js// space in "C ontent-Type"
const headers = {
  "C ontent-Type": "text/xml",
  "Breaking-Bad": "<3",
};
fetch("https://example.com/", { headers });
        
      
    
    
      
        Invalid header value. The header object must contain exactly two elements.
      
      
        jsconst headers = [
  ["Content-Type", "text/html", "extra"],
  ["Accept"],
];
fetch("https://example.com/", { headers });
        
      
    
    
      
        Invalid URL or scheme, or using a scheme that fetch does not support, or using a scheme that is not supported for a particular request mode.
      
      
        jsfetch("blob://example.com/", { mode: "cors" });
        
      
    
      URL includes credentials.
      
        jsfetch("https://user:password@example.com/");
        
      
    
      Invalid referrer URL.
      
        jsfetch("https://example.com/", { referrer: "./abc\u0000df" });
        
      
    
    
      Invalid modes (navigate and websocket).
      
        jsfetch("https://example.com/", { mode: "navigate" });
        
      
    
    
      
        If the request cache mode is "only-if-cached" and the request mode is other than "same-origin".
      
      
        jsfetch("https://example.com/", {
  cache: "only-if-cached",
  mode: "no-cors",
});
        
      
    
    
      
        If the request method is an invalid name token or one of the forbidden headers
        (CONNECT, TRACE or TRACK).
      
      
        jsfetch("https://example.com/", { method: "CONNECT" });
        
      
    
    
      
        If the request mode is "no-cors" and the request method is not a CORS-safe-listed method
        (GET, HEAD, or POST).
      
      
        jsfetch("https://example.com/", {
  method: "CONNECT",
  mode: "no-cors",
});
        
      
    
    
      
        If the request method is GET or HEAD and the body is non-null or not undefined.
      
      
        jsfetch("https://example.com/", {
  method: "GET",
  body: new FormData(),
});
        
      
    
    
      If fetch throws a network error.
      
    
  
ExamplesIn our Fetch Request example (see Fetch Request live) we
create a new Request object using the relevant constructor, then fetch it
using a fetch() call. Since we are fetching an image, we run
Response.blob() on the response to give it the proper MIME type so it will be
handled properly, then create an Object URL of it and display it in an
<img> element.
jsconst myImage = document.querySelector("img");

const myRequest = new Request("flowers.jpg");

window
  .fetch(myRequest)
  .then((response) => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    return response.blob();
  })
  .then((response) => {
    myImage.src = URL.createObjectURL(response);
  });

In our Fetch Request with init example (see Fetch Request init live) we do the same thing except that we pass in an options object when we invoke fetch().
In this case, we can set a Cache-Control value to indicate what kind of cached responses we're okay with:
jsconst myImage = document.querySelector("img");
const reqHeaders = new Headers();

// A cached response is okay unless it's more than a week old
reqHeaders.set("Cache-Control", "max-age=604800");

const options = {
  headers: reqHeaders,
};

// Pass init as an "options" object with our headers.
const req = new Request("flowers.jpg", options);

fetch(req).then((response) => {
  // …
});

You could also pass the init object in with the Request constructor to get the same effect:
jsconst req = new Request("flowers.jpg", options);

You can also use an object literal as headers in init:
jsconst options = {
  headers: {
    "Cache-Control": "max-age=60480",
  },
};

const req = new Request("flowers.jpg", options);

The Using fetch article provides more examples of using fetch().SpecificationsSpecificationFetch # fetch-methodBrowser compatibilitySee also
WorkerGlobalScope.fetch()
Fetch API
ServiceWorker API
HTTP access control (CORS)
HTTP
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 28, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nWindow: fetch() methodBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2017.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedbackThe fetch() method of the Window interface starts the process of fetching a resource from the network, returning a promise that is fulfilled once the response is available.
The promise resolves to the Response object representing the response to your request.
A fetch() promise only rejects when the request fails, for example, because of a badly-formed request URL or a network error.
A fetch() promise does not reject if the server responds with HTTP status codes that indicate errors (404, 504, etc.).
Instead, a then() handler must check the Response.ok and/or Response.status properties.
The fetch() method is controlled by the connect-src directive of Content Security Policy rather than the directive of the resources it's retrieving.

Note:
The fetch() method's parameters are identical to those of the Request() constructor.
Syntaxjsfetch(resource)
fetch(resource, options)
Parameters
resource

This defines the resource that you wish to fetch. This can either be:

A string or any other object with a stringifier — including a URL object — that provides the URL of the resource you want to fetch. The URL may be relative to the base URL, which is the document's baseURI in a window context, or WorkerGlobalScope.location in a worker context.
A Request object.


options Optional

A RequestInit object containing any custom settings that you want to apply to the request.

Return valueA Promise that resolves to a Response object.Exceptions
AbortError DOMException

The request was aborted due to a call to the AbortController
abort() method.

NotAllowedError DOMException

Thrown if use of the Topics API is specifically disallowed by a browsing-topics Permissions Policy, and a fetch() request was made with browsingTopics: true.

TypeError

Can occur for the following reasons:



  
    
      Reason
      Failing examples
    
  
  
    
      Blocked by a permissions policy
      Use of the Attribution Reporting API is blocked by a attribution-reporting Permissions-Policy, and a fetch() request was made with attributionReporting specified.
    
    
      Invalid header name.
      
        
        js// space in "C ontent-Type"
const headers = {
  "C ontent-Type": "text/xml",
  "Breaking-Bad": "<3",
};
fetch("https://example.com/", { headers });
        
      
    
    
      
        Invalid header value. The header object must contain exactly two elements.
      
      
        jsconst headers = [
  ["Content-Type", "text/html", "extra"],
  ["Accept"],
];
fetch("https://example.com/", { headers });
        
      
    
    
      
        Invalid URL or scheme, or using a scheme that fetch does not support, or using a scheme that is not supported for a particular request mode.
      
      
        jsfetch("blob://example.com/", { mode: "cors" });
        
      
    
      URL includes credentials.
      
        jsfetch("https://user:password@example.com/");
        
      
    
      Invalid referrer URL.
      
        jsfetch("https://example.com/", { referrer: "./abc\u0000df" });
        
      
    
    
      Invalid modes (navigate and websocket).
      
        jsfetch("https://example.com/", { mode: "navigate" });
        
      
    
    
      
        If the request cache mode is "only-if-cached" and the request mode is other than "same-origin".
      
      
        jsfetch("https://example.com/", {
  cache: "only-if-cached",
  mode: "no-cors",
});
        
      
    
    
      
        If the request method is an invalid name token or one of the forbidden headers
        (CONNECT, TRACE or TRACK).
      
      
        jsfetch("https://example.com/", { method: "CONNECT" });
        
      
    
    
      
        If the request mode is "no-cors" and the request method is not a CORS-safe-listed method
        (GET, HEAD, or POST).
      
      
        jsfetch("https://example.com/", {
  method: "CONNECT",
  mode: "no-cors",
});
        
      
    
    
      
        If the request method is GET or HEAD and the body is non-null or not undefined.
      
      
        jsfetch("https://example.com/", {
  method: "GET",
  body: new FormData(),
});
        
      
    
    
      If fetch throws a network error.
      
    
  
ExamplesIn our Fetch Request example (see Fetch Request live) we
create a new Request object using the relevant constructor, then fetch it
using a fetch() call. Since we are fetching an image, we run
Response.blob() on the response to give it the proper MIME type so it will be
handled properly, then create an Object URL of it and display it in an
<img> element.
jsconst myImage = document.querySelector("img");

const myRequest = new Request("flowers.jpg");

window
  .fetch(myRequest)
  .then((response) => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    return response.blob();
  })
  .then((response) => {
    myImage.src = URL.createObjectURL(response);
  });

In our Fetch Request with init example (see Fetch Request init live) we do the same thing except that we pass in an options object when we invoke fetch().
In this case, we can set a Cache-Control value to indicate what kind of cached responses we're okay with:
jsconst myImage = document.querySelector("img");
const reqHeaders = new Headers();

// A cached response is okay unless it's more than a week old
reqHeaders.set("Cache-Control", "max-age=604800");

const options = {
  headers: reqHeaders,
};

// Pass init as an "options" object with our headers.
const req = new Request("flowers.jpg", options);

fetch(req).then((response) => {
  // …
});

You could also pass the init object in with the Request constructor to get the same effect:
jsconst req = new Request("flowers.jpg", options);

You can also use an object literal as headers in init:
jsconst options = {
  headers: {
    "Cache-Control": "max-age=60480",
  },
};

const req = new Request("flowers.jpg", options);

The Using fetch article provides more examples of using fetch().SpecificationsSpecificationFetch # fetch-methodBrowser compatibilitySee also
WorkerGlobalScope.fetch()
Fetch API
ServiceWorker API
HTTP access control (CORS)
HTTP
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 28, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nFetch APIBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2017.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedback 
Note: This feature is available in Web Workers.
The Fetch API provides an interface for fetching resources (including across the network). It is a more powerful and flexible replacement for XMLHttpRequest.Concepts and usageThe Fetch API uses Request and Response objects (and other things involved with network requests), as well as related concepts such as CORS and the HTTP Origin header semantics.
For making a request and fetching a resource, use the fetch() method. It is a global method in both Window and Worker contexts. This makes it available in pretty much any context you might want to fetch resources in.
The fetch() method takes one mandatory argument, the path to the resource you want to fetch. It returns a Promise that resolves to the Response to that request — as soon as the server responds with headers — even if the server response is an HTTP error status. You can also optionally pass in an init options object as the second argument (see Request).
Once a Response is retrieved, there are a number of methods available to define what the body content is and how it should be handled.
You can create a request and response directly using the Request() and Response() constructors, but it's uncommon to do this directly. Instead, these are more likely to be created as results of other API actions (for example, FetchEvent.respondWith() from service workers).
Find out more about using the Fetch API features in Using Fetch.Interfaces
Window.fetch() and WorkerGlobalScope.fetch()

The fetch() method used to fetch a resource.

Headers

Represents response/request headers, allowing you to query them and take different actions depending on the results.

Request

Represents a resource request.

Response

Represents the response to a request.

SpecificationsSpecificationFetch # fetch-methodBrowser compatibilitySee also
Using Fetch
Service Worker API
HTTP access control (CORS)
HTTP\n\nFetch APIBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2017.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedback 
Note: This feature is available in Web Workers.
The Fetch API provides an interface for fetching resources (including across the network). It is a more powerful and flexible replacement for XMLHttpRequest.Concepts and usageThe Fetch API uses Request and Response objects (and other things involved with network requests), as well as related concepts such as CORS and the HTTP Origin header semantics.
For making a request and fetching a resource, use the fetch() method. It is a global method in both Window and Worker contexts. This makes it available in pretty much any context you might want to fetch resources in.
The fetch() method takes one mandatory argument, the path to the resource you want to fetch. It returns a Promise that resolves to the Response to that request — as soon as the server responds with headers — even if the server response is an HTTP error status. You can also optionally pass in an init options object as the second argument (see Request).
Once a Response is retrieved, there are a number of methods available to define what the body content is and how it should be handled.
You can create a request and response directly using the Request() and Response() constructors, but it's uncommon to do this directly. Instead, these are more likely to be created as results of other API actions (for example, FetchEvent.respondWith() from service workers).
Find out more about using the Fetch API features in Using Fetch.Interfaces
Window.fetch() and WorkerGlobalScope.fetch()

The fetch() method used to fetch a resource.

Headers

Represents response/request headers, allowing you to query them and take different actions depending on the results.

Request

Represents a resource request.

Response

Represents the response to a request.

SpecificationsSpecificationFetch # fetch-methodBrowser compatibilitySee also
Using Fetch
Service Worker API
HTTP access control (CORS)
HTTP
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 9, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nFetch APIBaseline Widely available *This feature is well established and works across many devices and browser versions. It’s been available across browsers since March 2017.* Some parts of this feature may have varying levels of support.Learn moreSee full compatibilityReport feedback 
Note: This feature is available in Web Workers.
The Fetch API provides an interface for fetching resources (including across the network). It is a more powerful and flexible replacement for XMLHttpRequest.Concepts and usageThe Fetch API uses Request and Response objects (and other things involved with network requests), as well as related concepts such as CORS and the HTTP Origin header semantics.
For making a request and fetching a resource, use the fetch() method. It is a global method in both Window and Worker contexts. This makes it available in pretty much any context you might want to fetch resources in.
The fetch() method takes one mandatory argument, the path to the resource you want to fetch. It returns a Promise that resolves to the Response to that request — as soon as the server responds with headers — even if the server response is an HTTP error status. You can also optionally pass in an init options object as the second argument (see Request).
Once a Response is retrieved, there are a number of methods available to define what the body content is and how it should be handled.
You can create a request and response directly using the Request() and Response() constructors, but it's uncommon to do this directly. Instead, these are more likely to be created as results of other API actions (for example, FetchEvent.respondWith() from service workers).
Find out more about using the Fetch API features in Using Fetch.Interfaces
Window.fetch() and WorkerGlobalScope.fetch()

The fetch() method used to fetch a resource.

Headers

Represents response/request headers, allowing you to query them and take different actions depending on the results.

Request

Represents a resource request.

Response

Represents the response to a request.

SpecificationsSpecificationFetch # fetch-methodBrowser compatibilitySee also
Using Fetch
Service Worker API
HTTP access control (CORS)
HTTP
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 9, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\n\n\nAbout MDN
Empowering developers worldwide to build a better, open web

45K Pages of content
7 Languages
46M Monthly pageviews
Who we areMDN is an open-source, collaborative project owned by Mozilla Corporation and
developed by Mozilla, in partnership with a global community of volunteers and
partners. Mozilla’s MDN team leads the platform’s development, content strategy,
and overall direction, while the community actively
contributes to content creation, translations, and browser compatibility
improvements, ensuring MDN remains a vital and evolving resource for all.What we offerOur journeyOur core valuesOur teamOur partners

MDN Web Docs
Your comprehensive resource for web development documentation, covering
everything from CSS, HTML,
JavaScript, Web APIs, and
other web technologies.


MDN Learn
Ideal for beginners, MDN Learn offers guides and a
structured curriculum to kickstart your web development
journey. Enhance your learning with interactive courses from our partner,
Scrimba.


MDN Blog
Stay updated with the latest in web development. Our blog
features updates, tips, tutorials from web experts, MDN announcements, and
curated sponsored content.


MDN Plus
Experience a personalized MDN with our premium subscription service. Enjoy
features like AI-powered assistance and
Collections to streamline your workflow.


MDN Tools
Experiment and learn with tools like Playground for live coding
and HTTP Observatory for analyzing website security,
designed to enhance your development experience.

From our beginnings to becoming the go-to resource for web developers worldwide,
here's how we've evolved:


2005
Launched as
DevMo by Mozilla,
a community-driven wiki dedicated to documenting open web standards.



2010
Rebranded as
Mozilla Developer Network (MDN),
reinforcing our commitment to the developer community.



2017
Achieved a milestone when major tech companies began contributing and
supporting web documentation on our platform, solidifying MDN as the central
hub for web development knowledge.


2020
Transitioned from its wiki-based origins to a modern,
GitHub-hosted project with the launch of Yari,
modernizing our infrastructure and workflows.



2022
Unveiled a
major redesign and
introduced
MDN Plus,
offering personalized features for an enhanced user experience.



2023/2024
Launched new tools, including Playground for coding experiments, AI Help for
easier content discovery, and HTTP Observatory for website security scans. We
also introduced a Blog to cover interesting topics beyond MDN’s core focus,
and a Curriculum to provide a structured approach to learning web development.


Discover more
We had fun exploring the
internet archives
and putting together a fast-forward trip through our transformation!























Accurate and reliable
MDN is built on the fundamental principle of accuracy, which has established
it as the trusted source of web documentation globally. We are committed to
providing expertly curated and rigorously reviewed content to maintain the
highest standards of quality and accuracy. Our dedication is backed by the
best developer community in the world—a passionate group of contributors who
help us enhance and refine our documentation. We welcome the knowledge and
experience of our diverse developer community to ensure that millions of users
can rely on MDN daily for up-to-date and accurate information.


Collaborative and community-driven
MDN is a Mozilla project that is powered by its global community. We are a
diverse group of developers, writers, and technologists working together to
build resources for a better web. Our open-source approach welcomes
contributions from anyone. Each of the individuals who have
contributed over the past decades has strengthened MDN. Through our GitHub
repository, contributors can make changes and get their work reviewed and
integrated into MDN’s content.


Inclusive and dynamic
MDN is committed to providing documentation for a wide range of web
technologies while continuously adapting to the changing landscape of web
development. We strive to create content that’s relevant and valuable to
developers working across different browsers and platforms. We are dedicated
to regularly updating our resources to reflect the latest standards and best
practices, helping developers stay current in a rapidly changing field.


Our mission
At MDN, our mission is to provide developers with the resources they need to
create innovative and accessible web experiences. We offer a free,
high-quality, and comprehensive platform that includes documentation on
essential web technologies like CSS,
HTML, JavaScript, and
Web APIs. Our learning materials
are tailored for a diverse audience—from beginners and students to professors
teaching web development.

From technical writers and engineers to product and community managers, we are a
diverse group dedicated to driving MDN’s mission, growth, and success. Get to
know the people behind MDN and discover what motivates us to keep you at the
forefront of web development!

Joe Walker

Senior Director

@joewalker
Joe is based in London and has been at Mozilla since 2009. He got interested in Mozilla after suddenly being anointed as the maintainer of Venkman, a precursor to Firebug. He later worked on and managed Firebug and Firefox DevTools. Since 2020, he's managed various teams across Firefox Web Platform, including looking after the core parts of Firefox that you don't usually see—like JavaScript and the DOM. In 2025, he took on the leadership of MDN as well. Joe sometimes works from his office at the bottom of a disused canal, with three chickens and a few newts for company.



Ruth John

Senior Manager

@Rumyra
Based in the UK, Ruth has been working on MDN since 2017. Starting out as a
contracting technical writer documenting fun Web APIs, she joined the team
full-time in 2021 and now heads up the content and community teams. She has
always been a big supporter of the web platform due to her long experience as
a front-end developer and cares deeply about the accuracy and usefulness of
MDN for its developer audience. In her spare time, you can find her walking
her dog Yoshi or in her studio, where she enjoys sewing, sculpting, painting,
and anything else that takes her away from a screen.



Florian Dieminger

Senior Engineering Manager

@fiji-flo
A Berlin resident and a long-time Mozilian, Florian was an active community
member before he joined the Mozilla staff in 2018. His passion for the web
spans across front-end, back-end, browser-engine and anything in-between. He
is a nerd outside of work too and is rediscovering online gaming. He loves
spending time with his family.



Dipika Bhattacharya

Staff Technical Writer

@dipikabh
Dipika works out of Toronto. She joined the MDN team in 2022, bringing her
background in instructional design to the role. She is passionate about
delivering clear and concise documentation to make complex concepts easy to
understand, paying special attention to how information is organized and
presented. She cares about improving the clarity, usability, and
discoverability of MDN’s documentation. Outside of work, she loves exploring
the city, discovering unique coffee shops, and trying different cuisines.



Vadim Makeev

Staff Technical Writer

@pepelsbey
Based in Berlin, Vadim has been working on MDN since 2023. He combines his
previous experience as a front-end developer with a deep passion for browsers
and the web platform. Before joining Mozilla, he worked as a DevRel for the
Opera browser, authored front-end courses, and was also involved in organizing
conferences and meetups. In his spare time, he goes on bikepacking trips,
hangs out on punk gigs, and records podcasts and videos in his home studio.



Brian Smith

Staff Technical Writer

@bsmth
Brian has been with MDN since 2022. He lives in Berlin. With around 20 years
of experience hacking on web technologies and working full-time as a technical
writer since 2016, Brian is passionate about open-source software and writing
docs that make complex concepts fun and easy to grasp for people of all
levels. Before joining Mozilla, Brian worked on a TypeScript-like language
specification, a time series database, and REST API documentation for cloud
services. Outside of work, he enjoys exploring new European destinations with
family, discovering local coffee shops, and using music gear as long as it
doesn't have a screen.



Dave Letorey


Technical Writer





@dletorey


Based in London, UK, Dave has been with MDN since 2022 where he's been focused
on Firefox release documentation, particularly HTML, CSS and SVG updates. He's
passionate about web standards, accessibility, performance and digital
inclusion. He is constantly learning about new web technologies and standards.
Outside of work he loves live music and tries to attend as many gigs and music
festivals as he can. He particularly loves post-punk, indie, house and techno.
He also attends many conferences and meetups and is an organizer of
London Web Standards &
State of the Browser. He also has a large
collection of red hats, so is easy to spot in the wild. He is never happier
than when in a field with his friends.




Chris Mills

Technical Writer and Product Strategist

@chrisdavidmills
Based in Greenfield, UK, Chris has been part of MDN since 2013, initially as a
technical writer and then as the writers' team lead until 2021. He came back
on board as a contractor in 2022 to document new technologies and contribute
to various MDN products and initiatives. Chris loves tinkering with CSS and
JavaScript and is passionate about accessibility and semantics. Outside work,
he is obsessed with loud, heavy music, and plays drums and guitar. He enjoys
cycling, country walks, and spending time with his wife and three awesome
kids.



Hamish Willee

Technical Writer

@hamishwillee
Based in Melbourne, Australia, Hamish has been with MDN since 2014, initially
on short-term contracts for various projects. From 2020, he’s been focused on
Firefox release documentation, particularly Web API and HTTP updates, while
also contributing to other aspects of the open-source project. He’s passionate
about efficient processes that maximize time for creating clear, concise, and
maintainable documentation. Hamish values that his writing reaches thousands
of developers and enjoys working with the diverse community to make expert
knowledge accessible to everyone in a clear format. Outside work, he brews
beer, reads science fiction and fantasy, enjoys running, and likes drones.



Andi Pieper

Staff Software Engineer

@argl
Andi lives in Berlin. He joined the MDN team in 2023. He is focused on keeping
up the high quality of MDN and ensuring that it remains an accessible,
competent, and friendly help for anyone concerned with the web, regardless of
their level of expertise. Growing up with the internet of the 90s, Andi has
worked on a multitude of projects on the web over the years, occasionally
veering off into desktop and mobile development. Apart from his daytime
obligations, he enjoys creating organized noise.



Claas Augner

Senior Software Engineer

@caugner
Based in Paris, Claas has been working as a Software Engineer in the MDN team
since 2022. He is passionate about clean code and continuous improvement. He
enjoys entertaining (the team), and maintaining (the platform). Outside of
work, he loves baking rye sourdough breads and playing cooperative board
games.



Leo McArdle

Senior Software Engineer

@LeoMcA
A London-based long-term Mozilla contributor, Leo has been working on MDN
since 2022 and volunteering for Mozilla since around 2008. As a self-taught
developer, largely through MDN, he cares about making the website discoverable
and functional for everyone. In his free time, he can be found cycling around
the city, photographing panoramas, or watching almost every sport imaginable,
from cricket to karting.



Pranshu Khanna

Staff Community Manager

@pransh15
Pranshu has been a long-term contributor to Mozilla as a Rep. Based in Berlin,
he joined the MDN team in 2024. He works on moderating, growing and managing
MDN’s awesome community. Pranshu is passionate about building a healthy and
inclusive community for developers and helping them build better. Before
working at Mozilla, Pranshu gained extensive experience in growing developer
communities for startups, organizing conferences like GraphQL Conf. 2021 &
2022, and running global programs for devs and students around AI, Web, and
DevOps. In his free time, he likes to play football in any form - physical,
digital, and fantasy.



Anuja Rajput

Senior User Experience Designer

@AnujaRajput727
Located in London, Anuja has been a part of the MDN team since 2023. With over
8 years of experience, she has passionately contributed to various phases of
product development, including design, business analysis, and testing. She is
empathetic and deeply cares about understanding users' perspectives and pain
points. She combines her work experience with her creative skills to enhance
her UX designs. In her free time, she enjoys painting, sketching, and travel
sketching.



Sonal Sood

Senior Product Manager

@s-sood
Sonal lives in Berlin. She has been with MDN since 2022. As a product manager,
she is adept at identifying and prioritizing features that truly meet users'
needs. With a strong background in data analysis and product management, she
is always focused on delivering valuable and impactful products that make a
difference. In her free time, Sonal enjoys cycling, running, and practicing
yoga.



Miruna Curtean

Quality Assurance

@mirunacurtean
Miruna calls Cluj-Napoca, Romania home. Contracting with Mozilla since 2019,
she worked on Firefox Add-ons and Mozilla Support before switching to MDN
in 2022. She focuses on analyzing requirements and community issues, building
comprehensive test bases, and ensuring delivered features meet requirements.
Before Mozilla, she worked in game development and e-commerce but found
greater joy in website development, particularly inspired by its community
aspect. Outside of work, Miruna enjoys story-based entertainment including
books, movies, shows, anime, and podcasts.


Product Advisory Board

Rachel Andrew

Content Lead at Google

Rachel has been working on the web as a developer since 1996 and writing about web development for almost as long. She now works for Google as Content Lead for Chrome Developer Relations, owning the content strategy of web.dev and developer.chrome.com, and is also a lead on the Baseline project. Rachel is a CSS Working Group member and specification editor, and in the past has been a contributor to MDN as a contractor for Mozilla and for Google.
Photo © Drew McLellan.



Robert Nyman

Web Developer Relations at Google

Robert wants to make the web the best platform for developers and has always been heavily invested in the community and helping developers succeed. Prior to Google, Robert was a technical evangelist at Mozilla, focused on the Open Web and the company's various products and initiatives. He's a co-founder of Open Web Docs, lives in Stockholm, has a passion for traveling and meeting people, and has given presentations in 42 countries.



Patrick Brosset

Senior Product Manager, Microsoft Edge

Patrick Brosset is a senior Product Manager on the Microsoft Edge web platform team, where he drives efforts around developer advocacy, documentation, and evangelism for the web platform. Patrick has worked with the web for more than 20 years, and on web browsers at Mozilla and Microsoft, including on developer tools, web apps, and the rendering engine for over a decade. He is a member of the Governing Committee at Open Web Docs, and a co-chair of the W3C WebDX Community Group.



Dominique Hazael-Massieux

Web Technology Expert including Web, W3C

Dominique Hazael-Massieux is part of the W3C staff, leading W3C
efforts in developer relations. Dom has been working for W3C since 2000,
and in addition to dev rel, is currently involved in the standardization
of WebRTC, WebNN and looking over the systemic impact of AI on the Web.
Dom also sits on the W3C Board of Directors and on the Open Web Docs
Governing Committee.



Carmen Cañas

Technical Project Manager, Bocoup

Carmen Cañas is part of the worker-owner team at Bocoup where she manages web platform projects and product development projects with a special focus on accessibility and privacy. Before joining Bocoup, she spent over 10 years building open source projects in Latin America and Africa, with a focus on implementing open data standards for publishing government data.  Carmen lives between Cuzcatlán (El Salvador) and Tkaronto (Toronto).



Laura Morinigo

Web Developer Advocate

Laura is a software developer, advocate, and mentor, passionate about sharing her knowledge and connecting with tech communities worldwide. She has been recognized as a Google Developer Expert and a Woman Techmakers Ambassador for her contributions. As a mentor, she has supported startups in accelerator programs like Google Launchpad and the United Nations’ World Food Programme. Currently, Laura contributes to web standards and advocates for advanced web features, helping developers build more inclusive and impactful web applications.




Open Web Docs
Open Web Docs (OWD), an independent open source organization, is one of the most productive contributors to MDN Web Docs. OWD contributes as part of their mission to support “web platform documentation for the benefit of web developers & designers worldwide.” The team at OWD has led or contributed to many projects to improve documentation on MDN. They're an invaluable partner in the day-to-day work of making MDN. Read more about OWD’s activities in their 2024 Impact and Transparency Report and get continuous updates on their Mastodon account.

Florian Scholz

Director

@Elchi3
Florian Scholz is the Director of Open Web Docs. He began volunteer editing MDN as a teen in 2009 and previously worked at Mozilla as MDN's Lead Content Strategist, Technical Writer & Documentation Engineer from 2013 until 2020. He's one of the creators of the browser compatibility data (BCD) project and it makes him happy when open source projects collaborate. He lives in Bremen, Germany; not Berlin. Other than submitting and reviewing PRs on GitHub, he enjoys listening to wave and post-punk music.



Will Bamberg

Sr. Technical Writer and Documentation Engineer

@wbamberg
Will Bamberg is a perfectionist and professional pedant who has been writing about the web for a long time, mostly on MDN. He enjoys learning about new aspects of the web platform and then turning that knowledge into accessible documentation. He believes that writing good documentation depends on understanding what it's like for someone who is learning something new or looking for the answer to their question.



Estelle Weyl

Sr. Technical Writer and Developer Advocate

@estelle
Estelle Weyl is a Sr. Technical Writer and Developer Advocate on the Open Web Docs team. She is a frontend engineer, writing CSS, JS and HTML since 1999. Estelle has always been a web standardista, advocating for a free, accessible, and performant web. Estelle has been documenting and teaching web standards since 2007, writing numerous books, blogs, and tutorials. She’s typing with her cat (who thinks he's a dog) and dog (who thinks she's a cat) in San Francisco.



Queen Vinyl Da.i'gyu-Kazotetsu

Compat Data Engineer

@queengooborg
Vinyl works for Open Web Docs leading the browser compatibility data (BCD) project that millions of developers around the world rely on. Previously a contractor at Google and Mozilla and a long-time BCD community member, Vinyl has a lot of experience with compatibility on the open web. She was already the number #1 contributor to the BCD repository before officially joining our team! When she's not submitting pull requests to BCD, she's usually slicing blocks to the music in Beat Saber or staffing at various conventions across the globe.


Global impactServing over 15 million users monthly from around the globe, MDN connects
developers with the tools and information they need to easily build projects on
the open web.


Educational influence: Our resources are integral to many coding bootcamps and
university courses worldwide.


Trusted reference: Platforms like freeCodeCamp and Codecademy frequently link
to MDN articles as authoritative references.


Industry standard: Tools like Can I use leverage
MDN’s browser compatibility data
for up-to-date information on web feature support across browsers.


Collaborative partnerships: We work closely with partners such as
Open Web Docs,
Microsoft,
Google, Igalia,
W3C, and others to drive web innovation and serve the
common good.

Join us in building a better webBe a part of our mission to foster innovation and inclusivity on the web.
Start contributing today and make a lasting impact
on the global developer community.\n\nAbout MDN
Empowering developers worldwide to build a better, open web

45K Pages of content
7 Languages
46M Monthly pageviews
Who we areMDN is an open-source, collaborative project owned by Mozilla Corporation and
developed by Mozilla, in partnership with a global community of volunteers and
partners. Mozilla’s MDN team leads the platform’s development, content strategy,
and overall direction, while the community actively
contributes to content creation, translations, and browser compatibility
improvements, ensuring MDN remains a vital and evolving resource for all.What we offerOur journeyOur core valuesOur teamOur partners

MDN Web Docs
Your comprehensive resource for web development documentation, covering
everything from CSS, HTML,
JavaScript, Web APIs, and
other web technologies.


MDN Learn
Ideal for beginners, MDN Learn offers guides and a
structured curriculum to kickstart your web development
journey. Enhance your learning with interactive courses from our partner,
Scrimba.


MDN Blog
Stay updated with the latest in web development. Our blog
features updates, tips, tutorials from web experts, MDN announcements, and
curated sponsored content.


MDN Plus
Experience a personalized MDN with our premium subscription service. Enjoy
features like AI-powered assistance and
Collections to streamline your workflow.


MDN Tools
Experiment and learn with tools like Playground for live coding
and HTTP Observatory for analyzing website security,
designed to enhance your development experience.

From our beginnings to becoming the go-to resource for web developers worldwide,
here's how we've evolved:


2005
Launched as
DevMo by Mozilla,
a community-driven wiki dedicated to documenting open web standards.



2010
Rebranded as
Mozilla Developer Network (MDN),
reinforcing our commitment to the developer community.



2017
Achieved a milestone when major tech companies began contributing and
supporting web documentation on our platform, solidifying MDN as the central
hub for web development knowledge.


2020
Transitioned from its wiki-based origins to a modern,
GitHub-hosted project with the launch of Yari,
modernizing our infrastructure and workflows.



2022
Unveiled a
major redesign and
introduced
MDN Plus,
offering personalized features for an enhanced user experience.



2023/2024
Launched new tools, including Playground for coding experiments, AI Help for
easier content discovery, and HTTP Observatory for website security scans. We
also introduced a Blog to cover interesting topics beyond MDN’s core focus,
and a Curriculum to provide a structured approach to learning web development.


Discover more
We had fun exploring the
internet archives
and putting together a fast-forward trip through our transformation!























Accurate and reliable
MDN is built on the fundamental principle of accuracy, which has established
it as the trusted source of web documentation globally. We are committed to
providing expertly curated and rigorously reviewed content to maintain the
highest standards of quality and accuracy. Our dedication is backed by the
best developer community in the world—a passionate group of contributors who
help us enhance and refine our documentation. We welcome the knowledge and
experience of our diverse developer community to ensure that millions of users
can rely on MDN daily for up-to-date and accurate information.


Collaborative and community-driven
MDN is a Mozilla project that is powered by its global community. We are a
diverse group of developers, writers, and technologists working together to
build resources for a better web. Our open-source approach welcomes
contributions from anyone. Each of the individuals who have
contributed over the past decades has strengthened MDN. Through our GitHub
repository, contributors can make changes and get their work reviewed and
integrated into MDN’s content.


Inclusive and dynamic
MDN is committed to providing documentation for a wide range of web
technologies while continuously adapting to the changing landscape of web
development. We strive to create content that’s relevant and valuable to
developers working across different browsers and platforms. We are dedicated
to regularly updating our resources to reflect the latest standards and best
practices, helping developers stay current in a rapidly changing field.


Our mission
At MDN, our mission is to provide developers with the resources they need to
create innovative and accessible web experiences. We offer a free,
high-quality, and comprehensive platform that includes documentation on
essential web technologies like CSS,
HTML, JavaScript, and
Web APIs. Our learning materials
are tailored for a diverse audience—from beginners and students to professors
teaching web development.

From technical writers and engineers to product and community managers, we are a
diverse group dedicated to driving MDN’s mission, growth, and success. Get to
know the people behind MDN and discover what motivates us to keep you at the
forefront of web development!

Joe Walker

Senior Director

@joewalker
Joe is based in London and has been at Mozilla since 2009. He got interested in Mozilla after suddenly being anointed as the maintainer of Venkman, a precursor to Firebug. He later worked on and managed Firebug and Firefox DevTools. Since 2020, he's managed various teams across Firefox Web Platform, including looking after the core parts of Firefox that you don't usually see—like JavaScript and the DOM. In 2025, he took on the leadership of MDN as well. Joe sometimes works from his office at the bottom of a disused canal, with three chickens and a few newts for company.



Ruth John

Senior Manager

@Rumyra
Based in the UK, Ruth has been working on MDN since 2017. Starting out as a
contracting technical writer documenting fun Web APIs, she joined the team
full-time in 2021 and now heads up the content and community teams. She has
always been a big supporter of the web platform due to her long experience as
a front-end developer and cares deeply about the accuracy and usefulness of
MDN for its developer audience. In her spare time, you can find her walking
her dog Yoshi or in her studio, where she enjoys sewing, sculpting, painting,
and anything else that takes her away from a screen.



Florian Dieminger

Senior Engineering Manager

@fiji-flo
A Berlin resident and a long-time Mozilian, Florian was an active community
member before he joined the Mozilla staff in 2018. His passion for the web
spans across front-end, back-end, browser-engine and anything in-between. He
is a nerd outside of work too and is rediscovering online gaming. He loves
spending time with his family.



Dipika Bhattacharya

Staff Technical Writer

@dipikabh
Dipika works out of Toronto. She joined the MDN team in 2022, bringing her
background in instructional design to the role. She is passionate about
delivering clear and concise documentation to make complex concepts easy to
understand, paying special attention to how information is organized and
presented. She cares about improving the clarity, usability, and
discoverability of MDN’s documentation. Outside of work, she loves exploring
the city, discovering unique coffee shops, and trying different cuisines.



Vadim Makeev

Staff Technical Writer

@pepelsbey
Based in Berlin, Vadim has been working on MDN since 2023. He combines his
previous experience as a front-end developer with a deep passion for browsers
and the web platform. Before joining Mozilla, he worked as a DevRel for the
Opera browser, authored front-end courses, and was also involved in organizing
conferences and meetups. In his spare time, he goes on bikepacking trips,
hangs out on punk gigs, and records podcasts and videos in his home studio.



Brian Smith

Staff Technical Writer

@bsmth
Brian has been with MDN since 2022. He lives in Berlin. With around 20 years
of experience hacking on web technologies and working full-time as a technical
writer since 2016, Brian is passionate about open-source software and writing
docs that make complex concepts fun and easy to grasp for people of all
levels. Before joining Mozilla, Brian worked on a TypeScript-like language
specification, a time series database, and REST API documentation for cloud
services. Outside of work, he enjoys exploring new European destinations with
family, discovering local coffee shops, and using music gear as long as it
doesn't have a screen.



Dave Letorey


Technical Writer





@dletorey


Based in London, UK, Dave has been with MDN since 2022 where he's been focused
on Firefox release documentation, particularly HTML, CSS and SVG updates. He's
passionate about web standards, accessibility, performance and digital
inclusion. He is constantly learning about new web technologies and standards.
Outside of work he loves live music and tries to attend as many gigs and music
festivals as he can. He particularly loves post-punk, indie, house and techno.
He also attends many conferences and meetups and is an organizer of
London Web Standards &
State of the Browser. He also has a large
collection of red hats, so is easy to spot in the wild. He is never happier
than when in a field with his friends.




Chris Mills

Technical Writer and Product Strategist

@chrisdavidmills
Based in Greenfield, UK, Chris has been part of MDN since 2013, initially as a
technical writer and then as the writers' team lead until 2021. He came back
on board as a contractor in 2022 to document new technologies and contribute
to various MDN products and initiatives. Chris loves tinkering with CSS and
JavaScript and is passionate about accessibility and semantics. Outside work,
he is obsessed with loud, heavy music, and plays drums and guitar. He enjoys
cycling, country walks, and spending time with his wife and three awesome
kids.



Hamish Willee

Technical Writer

@hamishwillee
Based in Melbourne, Australia, Hamish has been with MDN since 2014, initially
on short-term contracts for various projects. From 2020, he’s been focused on
Firefox release documentation, particularly Web API and HTTP updates, while
also contributing to other aspects of the open-source project. He’s passionate
about efficient processes that maximize time for creating clear, concise, and
maintainable documentation. Hamish values that his writing reaches thousands
of developers and enjoys working with the diverse community to make expert
knowledge accessible to everyone in a clear format. Outside work, he brews
beer, reads science fiction and fantasy, enjoys running, and likes drones.



Andi Pieper

Staff Software Engineer

@argl
Andi lives in Berlin. He joined the MDN team in 2023. He is focused on keeping
up the high quality of MDN and ensuring that it remains an accessible,
competent, and friendly help for anyone concerned with the web, regardless of
their level of expertise. Growing up with the internet of the 90s, Andi has
worked on a multitude of projects on the web over the years, occasionally
veering off into desktop and mobile development. Apart from his daytime
obligations, he enjoys creating organized noise.



Claas Augner

Senior Software Engineer

@caugner
Based in Paris, Claas has been working as a Software Engineer in the MDN team
since 2022. He is passionate about clean code and continuous improvement. He
enjoys entertaining (the team), and maintaining (the platform). Outside of
work, he loves baking rye sourdough breads and playing cooperative board
games.



Leo McArdle

Senior Software Engineer

@LeoMcA
A London-based long-term Mozilla contributor, Leo has been working on MDN
since 2022 and volunteering for Mozilla since around 2008. As a self-taught
developer, largely through MDN, he cares about making the website discoverable
and functional for everyone. In his free time, he can be found cycling around
the city, photographing panoramas, or watching almost every sport imaginable,
from cricket to karting.



Pranshu Khanna

Staff Community Manager

@pransh15
Pranshu has been a long-term contributor to Mozilla as a Rep. Based in Berlin,
he joined the MDN team in 2024. He works on moderating, growing and managing
MDN’s awesome community. Pranshu is passionate about building a healthy and
inclusive community for developers and helping them build better. Before
working at Mozilla, Pranshu gained extensive experience in growing developer
communities for startups, organizing conferences like GraphQL Conf. 2021 &
2022, and running global programs for devs and students around AI, Web, and
DevOps. In his free time, he likes to play football in any form - physical,
digital, and fantasy.



Anuja Rajput

Senior User Experience Designer

@AnujaRajput727
Located in London, Anuja has been a part of the MDN team since 2023. With over
8 years of experience, she has passionately contributed to various phases of
product development, including design, business analysis, and testing. She is
empathetic and deeply cares about understanding users' perspectives and pain
points. She combines her work experience with her creative skills to enhance
her UX designs. In her free time, she enjoys painting, sketching, and travel
sketching.



Sonal Sood

Senior Product Manager

@s-sood
Sonal lives in Berlin. She has been with MDN since 2022. As a product manager,
she is adept at identifying and prioritizing features that truly meet users'
needs. With a strong background in data analysis and product management, she
is always focused on delivering valuable and impactful products that make a
difference. In her free time, Sonal enjoys cycling, running, and practicing
yoga.



Miruna Curtean

Quality Assurance

@mirunacurtean
Miruna calls Cluj-Napoca, Romania home. Contracting with Mozilla since 2019,
she worked on Firefox Add-ons and Mozilla Support before switching to MDN
in 2022. She focuses on analyzing requirements and community issues, building
comprehensive test bases, and ensuring delivered features meet requirements.
Before Mozilla, she worked in game development and e-commerce but found
greater joy in website development, particularly inspired by its community
aspect. Outside of work, Miruna enjoys story-based entertainment including
books, movies, shows, anime, and podcasts.


Product Advisory Board

Rachel Andrew

Content Lead at Google

Rachel has been working on the web as a developer since 1996 and writing about web development for almost as long. She now works for Google as Content Lead for Chrome Developer Relations, owning the content strategy of web.dev and developer.chrome.com, and is also a lead on the Baseline project. Rachel is a CSS Working Group member and specification editor, and in the past has been a contributor to MDN as a contractor for Mozilla and for Google.
Photo © Drew McLellan.



Robert Nyman

Web Developer Relations at Google

Robert wants to make the web the best platform for developers and has always been heavily invested in the community and helping developers succeed. Prior to Google, Robert was a technical evangelist at Mozilla, focused on the Open Web and the company's various products and initiatives. He's a co-founder of Open Web Docs, lives in Stockholm, has a passion for traveling and meeting people, and has given presentations in 42 countries.



Patrick Brosset

Senior Product Manager, Microsoft Edge

Patrick Brosset is a senior Product Manager on the Microsoft Edge web platform team, where he drives efforts around developer advocacy, documentation, and evangelism for the web platform. Patrick has worked with the web for more than 20 years, and on web browsers at Mozilla and Microsoft, including on developer tools, web apps, and the rendering engine for over a decade. He is a member of the Governing Committee at Open Web Docs, and a co-chair of the W3C WebDX Community Group.



Dominique Hazael-Massieux

Web Technology Expert including Web, W3C

Dominique Hazael-Massieux is part of the W3C staff, leading W3C
efforts in developer relations. Dom has been working for W3C since 2000,
and in addition to dev rel, is currently involved in the standardization
of WebRTC, WebNN and looking over the systemic impact of AI on the Web.
Dom also sits on the W3C Board of Directors and on the Open Web Docs
Governing Committee.



Carmen Cañas

Technical Project Manager, Bocoup

Carmen Cañas is part of the worker-owner team at Bocoup where she manages web platform projects and product development projects with a special focus on accessibility and privacy. Before joining Bocoup, she spent over 10 years building open source projects in Latin America and Africa, with a focus on implementing open data standards for publishing government data.  Carmen lives between Cuzcatlán (El Salvador) and Tkaronto (Toronto).



Laura Morinigo

Web Developer Advocate

Laura is a software developer, advocate, and mentor, passionate about sharing her knowledge and connecting with tech communities worldwide. She has been recognized as a Google Developer Expert and a Woman Techmakers Ambassador for her contributions. As a mentor, she has supported startups in accelerator programs like Google Launchpad and the United Nations’ World Food Programme. Currently, Laura contributes to web standards and advocates for advanced web features, helping developers build more inclusive and impactful web applications.




Open Web Docs
Open Web Docs (OWD), an independent open source organization, is one of the most productive contributors to MDN Web Docs. OWD contributes as part of their mission to support “web platform documentation for the benefit of web developers & designers worldwide.” The team at OWD has led or contributed to many projects to improve documentation on MDN. They're an invaluable partner in the day-to-day work of making MDN. Read more about OWD’s activities in their 2024 Impact and Transparency Report and get continuous updates on their Mastodon account.

Florian Scholz

Director

@Elchi3
Florian Scholz is the Director of Open Web Docs. He began volunteer editing MDN as a teen in 2009 and previously worked at Mozilla as MDN's Lead Content Strategist, Technical Writer & Documentation Engineer from 2013 until 2020. He's one of the creators of the browser compatibility data (BCD) project and it makes him happy when open source projects collaborate. He lives in Bremen, Germany; not Berlin. Other than submitting and reviewing PRs on GitHub, he enjoys listening to wave and post-punk music.



Will Bamberg

Sr. Technical Writer and Documentation Engineer

@wbamberg
Will Bamberg is a perfectionist and professional pedant who has been writing about the web for a long time, mostly on MDN. He enjoys learning about new aspects of the web platform and then turning that knowledge into accessible documentation. He believes that writing good documentation depends on understanding what it's like for someone who is learning something new or looking for the answer to their question.



Estelle Weyl

Sr. Technical Writer and Developer Advocate

@estelle
Estelle Weyl is a Sr. Technical Writer and Developer Advocate on the Open Web Docs team. She is a frontend engineer, writing CSS, JS and HTML since 1999. Estelle has always been a web standardista, advocating for a free, accessible, and performant web. Estelle has been documenting and teaching web standards since 2007, writing numerous books, blogs, and tutorials. She’s typing with her cat (who thinks he's a dog) and dog (who thinks she's a cat) in San Francisco.



Queen Vinyl Da.i'gyu-Kazotetsu

Compat Data Engineer

@queengooborg
Vinyl works for Open Web Docs leading the browser compatibility data (BCD) project that millions of developers around the world rely on. Previously a contractor at Google and Mozilla and a long-time BCD community member, Vinyl has a lot of experience with compatibility on the open web. She was already the number #1 contributor to the BCD repository before officially joining our team! When she's not submitting pull requests to BCD, she's usually slicing blocks to the music in Beat Saber or staffing at various conventions across the globe.


Global impactServing over 15 million users monthly from around the globe, MDN connects
developers with the tools and information they need to easily build projects on
the open web.


Educational influence: Our resources are integral to many coding bootcamps and
university courses worldwide.


Trusted reference: Platforms like freeCodeCamp and Codecademy frequently link
to MDN articles as authoritative references.


Industry standard: Tools like Can I use leverage
MDN’s browser compatibility data
for up-to-date information on web feature support across browsers.


Collaborative partnerships: We work closely with partners such as
Open Web Docs,
Microsoft,
Google, Igalia,
W3C, and others to drive web innovation and serve the
common good.

Join us in building a better webBe a part of our mission to foster innovation and inclusivity on the web.
Start contributing today and make a lasting impact
on the global developer community.\n\n\n\n\n\n\n\n\n\nCreating and working on issuesAs a contributor, you can report and work on issues.
After you report an issue, the issue gets triaged. Issue triaging is typically done by people assigned the role of a maintainer or an owner.General guidelines for participationWhile reporting an issue or participating in a conversation in an issue, always ensure that your inputs are contributing to the overall progress of the project. Consider whether the issues you open and your comments in an issue are constructive and on topic and are not just adding noise.
Do the following:

Before filing an issue, consider if you need to discuss it with the staff/community. Use discussions to gain different viewpoints and to converge on an agreed-upon course of action. This helps to keep issues focused and productive.
After filing an issue, try to fix the problem yourself. Read our contribution guide to learn more.
If you have a question, you can ask it in the MDN Web Docs chat rooms instead of filing an issue.

Avoid doing the following:

Complicating issues by trying to discuss multiple topics or by making off-topic comments.
Opening lots of issues asking vague questions.
Asking questions without trying to solve the problem yourself first.

If you want to suggest new documentation or ways to improve the website, see Proposing new content or features.Guidelines for reporting an issueIssues are used to track bugs. An issue must be a single actionable task or a collection of related actionable tasks and must have a clear outcome.Before filing an issueIf you think you've found a bug with the content on MDN Web Docs or with the look and feel of the website, search the current open issues in the relevant repository and make sure nobody else has reported the issue.Reporting an issueDepending on the type of problem you've discovered, you can report it by filing an issue on one of the main MDN GitHub repositories.
If the information you provide in the issue is incomplete, you might be asked to provide more details during the issue triaging process.
Here are some hints for opening issues:

Choose the appropriate category to report the issue. For example, to report a content bug, use the Content issue template in the mdn/content repository.
Provide sufficient information while reporting the issue:

Issue title must convey succinctly the required action.
Issue description must clearly describe the bug and the action required to resolve the issue. It must also list the task or sub-tasks to be completed to resolve the issue. Some other guidelines include:

Use the description field to indicate the status of the task or sub-tasks by using checklists.
Update the status of a task in the issue description instead of commenting on the issue. Use task lists in the description if an issue has multiple parts. This helps others who may otherwise need to scroll through comments on the issue to determine the status of various tasks.
Comments in an issue should be limited to details or context that help resolve the issue.




If you find yourself in one of the following situations, move the conversation to MDN's discussion on GitHub:

A discussion needs to take place to clarify an issue.
A discussion begins after opening the issue.
The issue has no clear consensus on its resolution.
The requirements for completing the task expand while it's being resolved or the work is unclear.


For minor bugs, you can make the changes yourself and submit a pull request.
Creating a task list issueIf the issue you're opening is not to report a bug but to perform a series of tasks, you can create the issue as a task list.
Explain the context or reason for performing the tasks in the description.
Ensure that you list all the actionable tasks as a checklist.
For example:
md// Issue title
Ensure sections follow the order defined in the CSS property template

### Description

The CSS property page template is defined [here](/en-US/docs/MDN/Writing_guidelines/Page_structures/Page_types/CSS_property_page_template).
The task list in this issue will be used to compare the documented CSS properties with the template and track changes to the property pages for compliance.

### List of pages checked

- [x] [accent-color](/en-US/docs/Web/CSS/accent-color) - checked, okay
- [ ] [backdrop-filter](/en-US/docs/Web/CSS/backdrop-filter)
- [ ] [letter-spacing](/en-US/docs/Web/CSS/letter-spacing) - open pull request to move `Accessibility concerns` and `Internationalization concerns` sections before the `Specifications` section.
Guidelines for working on an issueRemember that if you take on an issue, the expectation is for the work to be completed in a timely manner. If you're not able to make any progress for a week after being assigned or can no longer complete the required task, leave a comment and unassign yourself from the issue.
These are the general steps for working on an issue:


Find an issue: If you're looking to contribute, search for issues with good first issue, help wanted or p3 label. Most repositories have issues with these labels. You are welcome to browse and pick an issue that is suitable for your skill set. Another useful place to look for issues to work on is the MDN Contributors Task Board. This project view lists open issues from multiple repositories. You can filter the list based on the topics (Labels column) you're interested in. See the description of some of the labels that get applied during the issue triage process.

Note:
An issue with the needs triage label indicates that the MDN Web Docs core team has not reviewed the issue yet, and you shouldn't begin work on it.



Assign the issue to yourself: After finding an issue you'd like to work on, make sure that the issue is not assigned to anybody else. Add a comment saying you would like to work on the issue, and if you are able to, assign the issue to yourself.


Do the research: Most issues need some investigation before work can start.

Scope out the work that needs to be done. If you need to ask questions, ask them in the MDN Web Docs chat rooms.
If the issue is well-described, and the work is pretty obvious, go ahead and do it.
If the issue is not well-described, and/or you are not sure what is needed, feel free to @mention the poster and ask for more information.



Make the changes: Fork and branch the repository. Do your work and open a pull request in the repository. Reference the issue in the pull request description. Depending on the files you've updated in the pull request, a reviewer will be assigned to your pull request automatically. (Teams per topic area are defined in the CODEOWNERS file).
After opening the pull request, if you find you no longer have the time to make changes or incorporate review feedback, let the team know as soon as possible in a comment in the pull request. This will help the team assign another interested contributor to complete the work on the pull request and close the linked issue.


After your pull request has been reviewed and merged, you can mark the linked issue as closed. If you opened the pull request with Fixes #<issue> verbiage, the issue will be closed automatically when the pull request is merged.

Fixing issues yourselfIf you spot a bug — whether it's a problem with the website's look and feel or an error in documentation — you can try to fix it yourself. Learn how you can contribute by going through our contribution guide.
If the bug is small, such as a typo or a minor sentence improvement, or involves an uncontroversial fix, submit a pull request with the changes.
For all other type of bugs, begin by opening the issue. Add a comment about your intent to work on the issue and if possible, describe your proposed solution or steps to fix the issue.
Wait for the issue to be triaged, so that the MDN Web Docs team can verify that the issue is legit and approves your proposed solution.

Note:
If you open a pull request before the issue has been triaged, your time and effort might go waste if the linked issue is deemed invalid or the solution does not match the one expected by the MDN Web Docs team.
After the issue is triaged, assign the issue to yourself.

Using the guidelines on working on an issue, try to fix the problem by updating the appropriate source, such as:

The MDN Web Docs content (in English) in the mdn/content repository
The MDN Web Docs translated content in the mdn/translated-content repository
The MDN Web Docs frontend in the mdn/yari repository

Each repository includes useful information to guide you on how to contribute.
For more information, see our main GitHub repositories.Guidelines for triaging issuesIf you are a maintainer or an owner in the MDN Web Docs GitHub organization, you are responsible for triaging issues in one or more MDN Web Docs repository.
The overall process for triaging includes some general and some issue-specific tasks.General triaging tasks

When an issue is opened, the needs triage label is set on the issue automatically. You can search for this label to look for issues that need to be triaged. Contributors or anybody else should not work on the issue until the issue has been triaged. (Triagers should remember to remove the needs triage label after triaging the issue.)


In the mdn/content repository, an additional Content: label, such as Content:CSS or Content:WebAPI, is set on the issue automatically. This gets set based on the MDN URL mentioned in the issue. You can use the content-specific label to look for issues to be triaged in your specific topic area.


If an issue concerns an active, non-en-US locale, set the appropriate label, such as l10n-fr, l10n-zh, or l10n-ja. The teams for those locales will pick these issues up and triage them.


You don't need to actively triage issues all the time. Set aside time, say 30 minutes every week, to triage issues on a regular basis in your area of responsibility. Triaging doesn't have to be done as part of a synchronous meeting or even at the same time as everyone else, but it should be done regularly to make sure that the backlog of untriaged bugs doesn't get too high.


Apart from triaging incoming issues every week, review the list of old bugs to see if there are any that are stalled, need closing, or are no longer relevant. The idle label is automatically set on issues that have had no activity for 30 days.

Check assigned issues that are still open to see if the assignee is making progress. If there is no progress after a week of being assigned, ask them if they still have time to work on the issue. If another week passes by without any progress, unassign them and leave a comment indicating that you're making the issue available for other interested contributors.
If a pull request has been opened to fix the issue but has not been reviewed for a week, give the reviewer a gentle ping to ask if they can get to it.
If a pull request to fix the issue is waiting on review comments to be addressed after a week, then ask the author if they can respond to their review. If another week goes by, either fix the review comments yourself if you have time, or close the pull request and unassign the related issue.


Issue-specific triaging tasksThese are the guidelines to follow while triaging each issue.
Review if the issue is valid
These are some of the things to keep in mind while reviewing the validity of an issue:

Check if the issue raised is valid and if the fix will improve the content for the readers and the website.
Evaluate if the impact of the fix will be small or site-wide.
Evaluate if the fix for the issue will need a discussion first, in which case, point the author to open a discussion instead.
Check if the issue complies with our writing guidelines and templates.
Check whether suggestions for adding links comply with our external links policy.

Review the issue for completeness of information
Review each issue against the following checklist to ensure that the issue contains the described information for someone to start working on the bug:

URL of the MDN Web Docs page with the problem or URL of an example MDN Web Docs page if the problem exists on multiple pages
The specific heading or section on the MDN Web Docs page where the problem was found
A clear description of the incorrect, unhelpful, incomplete, or missing information

If any of the above information is not present, then you should ask the author of the issue to provide these details, and add the needs info label to the issue. Resume triaging the issue only after those details have been provided (after which, you can remove the needs info label). It is okay to wait for up to a week to get a response from the author.
Set a priority label
For each bug, set a priority label based on the severity of the issue to help people who want to work on the most important issues or areas.


Critical issue: This type of issue needs to be fixed as soon as possible, regardless of where it appears on the site. This type of issue could damage MDN's reputation severely and/or harm users. Examples of this issue include an incorrect code snippet, which if used in production, could create a severe security problem and undesirable content such as malware, profanity, pornography, hate speech, or links to such content.

Label: p0 (will be addressed immediately)



Major issue: This type of issue could severely affect a page's usefulness. For example, a significant amount of out-of-date information, a complex and important code example that doesn't work, a significant amount of prose that is badly written and hard to understand, or a large number of broken links.

Labels: p1 (will be addressed soon) and p2 (will be addressed soon, but higher priority items will take precedence)



Minor issue: This is a type of improvement issue that can make the existing content better but does not affect learning or only has a minor effect on learning. Since these types of issues are not actively planned for, help from contributors to fix these issues is welcome and much appreciated. Fixing some of these issues can also provide the necessary practice to beginner contributors who are starting to get familiar with the contribution process. Examples include typos, bad grammar, a broken link, a small amount of out-of-date information or badly-written prose, or a code snippet that doesn't work.

Labels: p3 (no visibility when the issue will be addressed)



In general, critical issues should be fixed immediately and are most likely handled by MDN Web Docs staff and peers.
Add helpful information
If possible, add information that can help contributors to fix the issue. The information can be in the form of steps, general approach, links to other similar fixed issues, or reading resources. A well-laid out plan or steps is especially required in issues that are labeled good first issue and can help ramp up new contributors quickly. You can time-box this task to 5-10 minutes.
For example, as a triager, you can add the following information to the issue you are triaging:
mdTo whoever fixes this issue, it looks like the following is needed:

- Update the first paragraph below heading X to correct the problem with Y
- Add a description of X
- Update the compatibility data at Link-X

Set other labels
Next, set the following labels as appropriate:


effort: small, effort: medium, effort: large: Some contributors like to search for bugs based on the time and effort that will be needed to fix the bug. So where possible, you should try to provide an estimate of the required effort.


good first issue: Set this label on the issue if the fix for the issue is really simple and if fixing the issue would provide good practice for a newcomer who is getting used to the process.


help wanted: Set this label if the issue requires help from someone who knows about or is familiar with the topic. This is a popular label and some contributors use it to search for issues to work on in open source projects in their areas of familiarity or expertise.


broken link external: Set this label if the issue involves a broken link to an external page.


document not written: Set this label if the issue involves a necessary document that has not been written yet, usually because a link points to it.


needs content update: Set this label if the issue fix in another repository will need an equivalent fix in the mdn/content repository.

Note:
After the triage process is complete, remove the needs triage label.\n\nCreating and working on issuesAs a contributor, you can report and work on issues.
After you report an issue, the issue gets triaged. Issue triaging is typically done by people assigned the role of a maintainer or an owner.General guidelines for participationWhile reporting an issue or participating in a conversation in an issue, always ensure that your inputs are contributing to the overall progress of the project. Consider whether the issues you open and your comments in an issue are constructive and on topic and are not just adding noise.
Do the following:

Before filing an issue, consider if you need to discuss it with the staff/community. Use discussions to gain different viewpoints and to converge on an agreed-upon course of action. This helps to keep issues focused and productive.
After filing an issue, try to fix the problem yourself. Read our contribution guide to learn more.
If you have a question, you can ask it in the MDN Web Docs chat rooms instead of filing an issue.

Avoid doing the following:

Complicating issues by trying to discuss multiple topics or by making off-topic comments.
Opening lots of issues asking vague questions.
Asking questions without trying to solve the problem yourself first.

If you want to suggest new documentation or ways to improve the website, see Proposing new content or features.Guidelines for reporting an issueIssues are used to track bugs. An issue must be a single actionable task or a collection of related actionable tasks and must have a clear outcome.Before filing an issueIf you think you've found a bug with the content on MDN Web Docs or with the look and feel of the website, search the current open issues in the relevant repository and make sure nobody else has reported the issue.Reporting an issueDepending on the type of problem you've discovered, you can report it by filing an issue on one of the main MDN GitHub repositories.
If the information you provide in the issue is incomplete, you might be asked to provide more details during the issue triaging process.
Here are some hints for opening issues:

Choose the appropriate category to report the issue. For example, to report a content bug, use the Content issue template in the mdn/content repository.
Provide sufficient information while reporting the issue:

Issue title must convey succinctly the required action.
Issue description must clearly describe the bug and the action required to resolve the issue. It must also list the task or sub-tasks to be completed to resolve the issue. Some other guidelines include:

Use the description field to indicate the status of the task or sub-tasks by using checklists.
Update the status of a task in the issue description instead of commenting on the issue. Use task lists in the description if an issue has multiple parts. This helps others who may otherwise need to scroll through comments on the issue to determine the status of various tasks.
Comments in an issue should be limited to details or context that help resolve the issue.




If you find yourself in one of the following situations, move the conversation to MDN's discussion on GitHub:

A discussion needs to take place to clarify an issue.
A discussion begins after opening the issue.
The issue has no clear consensus on its resolution.
The requirements for completing the task expand while it's being resolved or the work is unclear.


For minor bugs, you can make the changes yourself and submit a pull request.
Creating a task list issueIf the issue you're opening is not to report a bug but to perform a series of tasks, you can create the issue as a task list.
Explain the context or reason for performing the tasks in the description.
Ensure that you list all the actionable tasks as a checklist.
For example:
md// Issue title
Ensure sections follow the order defined in the CSS property template

### Description

The CSS property page template is defined [here](/en-US/docs/MDN/Writing_guidelines/Page_structures/Page_types/CSS_property_page_template).
The task list in this issue will be used to compare the documented CSS properties with the template and track changes to the property pages for compliance.

### List of pages checked

- [x] [accent-color](/en-US/docs/Web/CSS/accent-color) - checked, okay
- [ ] [backdrop-filter](/en-US/docs/Web/CSS/backdrop-filter)
- [ ] [letter-spacing](/en-US/docs/Web/CSS/letter-spacing) - open pull request to move `Accessibility concerns` and `Internationalization concerns` sections before the `Specifications` section.
Guidelines for working on an issueRemember that if you take on an issue, the expectation is for the work to be completed in a timely manner. If you're not able to make any progress for a week after being assigned or can no longer complete the required task, leave a comment and unassign yourself from the issue.
These are the general steps for working on an issue:


Find an issue: If you're looking to contribute, search for issues with good first issue, help wanted or p3 label. Most repositories have issues with these labels. You are welcome to browse and pick an issue that is suitable for your skill set. Another useful place to look for issues to work on is the MDN Contributors Task Board. This project view lists open issues from multiple repositories. You can filter the list based on the topics (Labels column) you're interested in. See the description of some of the labels that get applied during the issue triage process.

Note:
An issue with the needs triage label indicates that the MDN Web Docs core team has not reviewed the issue yet, and you shouldn't begin work on it.



Assign the issue to yourself: After finding an issue you'd like to work on, make sure that the issue is not assigned to anybody else. Add a comment saying you would like to work on the issue, and if you are able to, assign the issue to yourself.


Do the research: Most issues need some investigation before work can start.

Scope out the work that needs to be done. If you need to ask questions, ask them in the MDN Web Docs chat rooms.
If the issue is well-described, and the work is pretty obvious, go ahead and do it.
If the issue is not well-described, and/or you are not sure what is needed, feel free to @mention the poster and ask for more information.



Make the changes: Fork and branch the repository. Do your work and open a pull request in the repository. Reference the issue in the pull request description. Depending on the files you've updated in the pull request, a reviewer will be assigned to your pull request automatically. (Teams per topic area are defined in the CODEOWNERS file).
After opening the pull request, if you find you no longer have the time to make changes or incorporate review feedback, let the team know as soon as possible in a comment in the pull request. This will help the team assign another interested contributor to complete the work on the pull request and close the linked issue.


After your pull request has been reviewed and merged, you can mark the linked issue as closed. If you opened the pull request with Fixes #<issue> verbiage, the issue will be closed automatically when the pull request is merged.

Fixing issues yourselfIf you spot a bug — whether it's a problem with the website's look and feel or an error in documentation — you can try to fix it yourself. Learn how you can contribute by going through our contribution guide.
If the bug is small, such as a typo or a minor sentence improvement, or involves an uncontroversial fix, submit a pull request with the changes.
For all other type of bugs, begin by opening the issue. Add a comment about your intent to work on the issue and if possible, describe your proposed solution or steps to fix the issue.
Wait for the issue to be triaged, so that the MDN Web Docs team can verify that the issue is legit and approves your proposed solution.

Note:
If you open a pull request before the issue has been triaged, your time and effort might go waste if the linked issue is deemed invalid or the solution does not match the one expected by the MDN Web Docs team.
After the issue is triaged, assign the issue to yourself.

Using the guidelines on working on an issue, try to fix the problem by updating the appropriate source, such as:

The MDN Web Docs content (in English) in the mdn/content repository
The MDN Web Docs translated content in the mdn/translated-content repository
The MDN Web Docs frontend in the mdn/yari repository

Each repository includes useful information to guide you on how to contribute.
For more information, see our main GitHub repositories.Guidelines for triaging issuesIf you are a maintainer or an owner in the MDN Web Docs GitHub organization, you are responsible for triaging issues in one or more MDN Web Docs repository.
The overall process for triaging includes some general and some issue-specific tasks.General triaging tasks

When an issue is opened, the needs triage label is set on the issue automatically. You can search for this label to look for issues that need to be triaged. Contributors or anybody else should not work on the issue until the issue has been triaged. (Triagers should remember to remove the needs triage label after triaging the issue.)


In the mdn/content repository, an additional Content: label, such as Content:CSS or Content:WebAPI, is set on the issue automatically. This gets set based on the MDN URL mentioned in the issue. You can use the content-specific label to look for issues to be triaged in your specific topic area.


If an issue concerns an active, non-en-US locale, set the appropriate label, such as l10n-fr, l10n-zh, or l10n-ja. The teams for those locales will pick these issues up and triage them.


You don't need to actively triage issues all the time. Set aside time, say 30 minutes every week, to triage issues on a regular basis in your area of responsibility. Triaging doesn't have to be done as part of a synchronous meeting or even at the same time as everyone else, but it should be done regularly to make sure that the backlog of untriaged bugs doesn't get too high.


Apart from triaging incoming issues every week, review the list of old bugs to see if there are any that are stalled, need closing, or are no longer relevant. The idle label is automatically set on issues that have had no activity for 30 days.

Check assigned issues that are still open to see if the assignee is making progress. If there is no progress after a week of being assigned, ask them if they still have time to work on the issue. If another week passes by without any progress, unassign them and leave a comment indicating that you're making the issue available for other interested contributors.
If a pull request has been opened to fix the issue but has not been reviewed for a week, give the reviewer a gentle ping to ask if they can get to it.
If a pull request to fix the issue is waiting on review comments to be addressed after a week, then ask the author if they can respond to their review. If another week goes by, either fix the review comments yourself if you have time, or close the pull request and unassign the related issue.


Issue-specific triaging tasksThese are the guidelines to follow while triaging each issue.
Review if the issue is valid
These are some of the things to keep in mind while reviewing the validity of an issue:

Check if the issue raised is valid and if the fix will improve the content for the readers and the website.
Evaluate if the impact of the fix will be small or site-wide.
Evaluate if the fix for the issue will need a discussion first, in which case, point the author to open a discussion instead.
Check if the issue complies with our writing guidelines and templates.
Check whether suggestions for adding links comply with our external links policy.

Review the issue for completeness of information
Review each issue against the following checklist to ensure that the issue contains the described information for someone to start working on the bug:

URL of the MDN Web Docs page with the problem or URL of an example MDN Web Docs page if the problem exists on multiple pages
The specific heading or section on the MDN Web Docs page where the problem was found
A clear description of the incorrect, unhelpful, incomplete, or missing information

If any of the above information is not present, then you should ask the author of the issue to provide these details, and add the needs info label to the issue. Resume triaging the issue only after those details have been provided (after which, you can remove the needs info label). It is okay to wait for up to a week to get a response from the author.
Set a priority label
For each bug, set a priority label based on the severity of the issue to help people who want to work on the most important issues or areas.


Critical issue: This type of issue needs to be fixed as soon as possible, regardless of where it appears on the site. This type of issue could damage MDN's reputation severely and/or harm users. Examples of this issue include an incorrect code snippet, which if used in production, could create a severe security problem and undesirable content such as malware, profanity, pornography, hate speech, or links to such content.

Label: p0 (will be addressed immediately)



Major issue: This type of issue could severely affect a page's usefulness. For example, a significant amount of out-of-date information, a complex and important code example that doesn't work, a significant amount of prose that is badly written and hard to understand, or a large number of broken links.

Labels: p1 (will be addressed soon) and p2 (will be addressed soon, but higher priority items will take precedence)



Minor issue: This is a type of improvement issue that can make the existing content better but does not affect learning or only has a minor effect on learning. Since these types of issues are not actively planned for, help from contributors to fix these issues is welcome and much appreciated. Fixing some of these issues can also provide the necessary practice to beginner contributors who are starting to get familiar with the contribution process. Examples include typos, bad grammar, a broken link, a small amount of out-of-date information or badly-written prose, or a code snippet that doesn't work.

Labels: p3 (no visibility when the issue will be addressed)



In general, critical issues should be fixed immediately and are most likely handled by MDN Web Docs staff and peers.
Add helpful information
If possible, add information that can help contributors to fix the issue. The information can be in the form of steps, general approach, links to other similar fixed issues, or reading resources. A well-laid out plan or steps is especially required in issues that are labeled good first issue and can help ramp up new contributors quickly. You can time-box this task to 5-10 minutes.
For example, as a triager, you can add the following information to the issue you are triaging:
mdTo whoever fixes this issue, it looks like the following is needed:

- Update the first paragraph below heading X to correct the problem with Y
- Add a description of X
- Update the compatibility data at Link-X

Set other labels
Next, set the following labels as appropriate:


effort: small, effort: medium, effort: large: Some contributors like to search for bugs based on the time and effort that will be needed to fix the bug. So where possible, you should try to provide an estimate of the required effort.


good first issue: Set this label on the issue if the fix for the issue is really simple and if fixing the issue would provide good practice for a newcomer who is getting used to the process.


help wanted: Set this label if the issue requires help from someone who knows about or is familiar with the topic. This is a popular label and some contributors use it to search for issues to work on in open source projects in their areas of familiarity or expertise.


broken link external: Set this label if the issue involves a broken link to an external page.


document not written: Set this label if the issue involves a necessary document that has not been written yet, usually because a link points to it.


needs content update: Set this label if the issue fix in another repository will need an equivalent fix in the mdn/content repository.

Note:
After the triage process is complete, remove the needs triage label.


Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 7, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCreating and working on issuesAs a contributor, you can report and work on issues.
After you report an issue, the issue gets triaged. Issue triaging is typically done by people assigned the role of a maintainer or an owner.General guidelines for participationWhile reporting an issue or participating in a conversation in an issue, always ensure that your inputs are contributing to the overall progress of the project. Consider whether the issues you open and your comments in an issue are constructive and on topic and are not just adding noise.
Do the following:

Before filing an issue, consider if you need to discuss it with the staff/community. Use discussions to gain different viewpoints and to converge on an agreed-upon course of action. This helps to keep issues focused and productive.
After filing an issue, try to fix the problem yourself. Read our contribution guide to learn more.
If you have a question, you can ask it in the MDN Web Docs chat rooms instead of filing an issue.

Avoid doing the following:

Complicating issues by trying to discuss multiple topics or by making off-topic comments.
Opening lots of issues asking vague questions.
Asking questions without trying to solve the problem yourself first.

If you want to suggest new documentation or ways to improve the website, see Proposing new content or features.Guidelines for reporting an issueIssues are used to track bugs. An issue must be a single actionable task or a collection of related actionable tasks and must have a clear outcome.Before filing an issueIf you think you've found a bug with the content on MDN Web Docs or with the look and feel of the website, search the current open issues in the relevant repository and make sure nobody else has reported the issue.Reporting an issueDepending on the type of problem you've discovered, you can report it by filing an issue on one of the main MDN GitHub repositories.
If the information you provide in the issue is incomplete, you might be asked to provide more details during the issue triaging process.
Here are some hints for opening issues:

Choose the appropriate category to report the issue. For example, to report a content bug, use the Content issue template in the mdn/content repository.
Provide sufficient information while reporting the issue:

Issue title must convey succinctly the required action.
Issue description must clearly describe the bug and the action required to resolve the issue. It must also list the task or sub-tasks to be completed to resolve the issue. Some other guidelines include:

Use the description field to indicate the status of the task or sub-tasks by using checklists.
Update the status of a task in the issue description instead of commenting on the issue. Use task lists in the description if an issue has multiple parts. This helps others who may otherwise need to scroll through comments on the issue to determine the status of various tasks.
Comments in an issue should be limited to details or context that help resolve the issue.




If you find yourself in one of the following situations, move the conversation to MDN's discussion on GitHub:

A discussion needs to take place to clarify an issue.
A discussion begins after opening the issue.
The issue has no clear consensus on its resolution.
The requirements for completing the task expand while it's being resolved or the work is unclear.


For minor bugs, you can make the changes yourself and submit a pull request.
Creating a task list issueIf the issue you're opening is not to report a bug but to perform a series of tasks, you can create the issue as a task list.
Explain the context or reason for performing the tasks in the description.
Ensure that you list all the actionable tasks as a checklist.
For example:
md// Issue title
Ensure sections follow the order defined in the CSS property template

### Description

The CSS property page template is defined [here](/en-US/docs/MDN/Writing_guidelines/Page_structures/Page_types/CSS_property_page_template).
The task list in this issue will be used to compare the documented CSS properties with the template and track changes to the property pages for compliance.

### List of pages checked

- [x] [accent-color](/en-US/docs/Web/CSS/accent-color) - checked, okay
- [ ] [backdrop-filter](/en-US/docs/Web/CSS/backdrop-filter)
- [ ] [letter-spacing](/en-US/docs/Web/CSS/letter-spacing) - open pull request to move `Accessibility concerns` and `Internationalization concerns` sections before the `Specifications` section.
Guidelines for working on an issueRemember that if you take on an issue, the expectation is for the work to be completed in a timely manner. If you're not able to make any progress for a week after being assigned or can no longer complete the required task, leave a comment and unassign yourself from the issue.
These are the general steps for working on an issue:


Find an issue: If you're looking to contribute, search for issues with good first issue, help wanted or p3 label. Most repositories have issues with these labels. You are welcome to browse and pick an issue that is suitable for your skill set. Another useful place to look for issues to work on is the MDN Contributors Task Board. This project view lists open issues from multiple repositories. You can filter the list based on the topics (Labels column) you're interested in. See the description of some of the labels that get applied during the issue triage process.

Note:
An issue with the needs triage label indicates that the MDN Web Docs core team has not reviewed the issue yet, and you shouldn't begin work on it.



Assign the issue to yourself: After finding an issue you'd like to work on, make sure that the issue is not assigned to anybody else. Add a comment saying you would like to work on the issue, and if you are able to, assign the issue to yourself.


Do the research: Most issues need some investigation before work can start.

Scope out the work that needs to be done. If you need to ask questions, ask them in the MDN Web Docs chat rooms.
If the issue is well-described, and the work is pretty obvious, go ahead and do it.
If the issue is not well-described, and/or you are not sure what is needed, feel free to @mention the poster and ask for more information.



Make the changes: Fork and branch the repository. Do your work and open a pull request in the repository. Reference the issue in the pull request description. Depending on the files you've updated in the pull request, a reviewer will be assigned to your pull request automatically. (Teams per topic area are defined in the CODEOWNERS file).
After opening the pull request, if you find you no longer have the time to make changes or incorporate review feedback, let the team know as soon as possible in a comment in the pull request. This will help the team assign another interested contributor to complete the work on the pull request and close the linked issue.


After your pull request has been reviewed and merged, you can mark the linked issue as closed. If you opened the pull request with Fixes #<issue> verbiage, the issue will be closed automatically when the pull request is merged.

Fixing issues yourselfIf you spot a bug — whether it's a problem with the website's look and feel or an error in documentation — you can try to fix it yourself. Learn how you can contribute by going through our contribution guide.
If the bug is small, such as a typo or a minor sentence improvement, or involves an uncontroversial fix, submit a pull request with the changes.
For all other type of bugs, begin by opening the issue. Add a comment about your intent to work on the issue and if possible, describe your proposed solution or steps to fix the issue.
Wait for the issue to be triaged, so that the MDN Web Docs team can verify that the issue is legit and approves your proposed solution.

Note:
If you open a pull request before the issue has been triaged, your time and effort might go waste if the linked issue is deemed invalid or the solution does not match the one expected by the MDN Web Docs team.
After the issue is triaged, assign the issue to yourself.

Using the guidelines on working on an issue, try to fix the problem by updating the appropriate source, such as:

The MDN Web Docs content (in English) in the mdn/content repository
The MDN Web Docs translated content in the mdn/translated-content repository
The MDN Web Docs frontend in the mdn/yari repository

Each repository includes useful information to guide you on how to contribute.
For more information, see our main GitHub repositories.Guidelines for triaging issuesIf you are a maintainer or an owner in the MDN Web Docs GitHub organization, you are responsible for triaging issues in one or more MDN Web Docs repository.
The overall process for triaging includes some general and some issue-specific tasks.General triaging tasks

When an issue is opened, the needs triage label is set on the issue automatically. You can search for this label to look for issues that need to be triaged. Contributors or anybody else should not work on the issue until the issue has been triaged. (Triagers should remember to remove the needs triage label after triaging the issue.)


In the mdn/content repository, an additional Content: label, such as Content:CSS or Content:WebAPI, is set on the issue automatically. This gets set based on the MDN URL mentioned in the issue. You can use the content-specific label to look for issues to be triaged in your specific topic area.


If an issue concerns an active, non-en-US locale, set the appropriate label, such as l10n-fr, l10n-zh, or l10n-ja. The teams for those locales will pick these issues up and triage them.


You don't need to actively triage issues all the time. Set aside time, say 30 minutes every week, to triage issues on a regular basis in your area of responsibility. Triaging doesn't have to be done as part of a synchronous meeting or even at the same time as everyone else, but it should be done regularly to make sure that the backlog of untriaged bugs doesn't get too high.


Apart from triaging incoming issues every week, review the list of old bugs to see if there are any that are stalled, need closing, or are no longer relevant. The idle label is automatically set on issues that have had no activity for 30 days.

Check assigned issues that are still open to see if the assignee is making progress. If there is no progress after a week of being assigned, ask them if they still have time to work on the issue. If another week passes by without any progress, unassign them and leave a comment indicating that you're making the issue available for other interested contributors.
If a pull request has been opened to fix the issue but has not been reviewed for a week, give the reviewer a gentle ping to ask if they can get to it.
If a pull request to fix the issue is waiting on review comments to be addressed after a week, then ask the author if they can respond to their review. If another week goes by, either fix the review comments yourself if you have time, or close the pull request and unassign the related issue.


Issue-specific triaging tasksThese are the guidelines to follow while triaging each issue.
Review if the issue is valid
These are some of the things to keep in mind while reviewing the validity of an issue:

Check if the issue raised is valid and if the fix will improve the content for the readers and the website.
Evaluate if the impact of the fix will be small or site-wide.
Evaluate if the fix for the issue will need a discussion first, in which case, point the author to open a discussion instead.
Check if the issue complies with our writing guidelines and templates.
Check whether suggestions for adding links comply with our external links policy.

Review the issue for completeness of information
Review each issue against the following checklist to ensure that the issue contains the described information for someone to start working on the bug:

URL of the MDN Web Docs page with the problem or URL of an example MDN Web Docs page if the problem exists on multiple pages
The specific heading or section on the MDN Web Docs page where the problem was found
A clear description of the incorrect, unhelpful, incomplete, or missing information

If any of the above information is not present, then you should ask the author of the issue to provide these details, and add the needs info label to the issue. Resume triaging the issue only after those details have been provided (after which, you can remove the needs info label). It is okay to wait for up to a week to get a response from the author.
Set a priority label
For each bug, set a priority label based on the severity of the issue to help people who want to work on the most important issues or areas.


Critical issue: This type of issue needs to be fixed as soon as possible, regardless of where it appears on the site. This type of issue could damage MDN's reputation severely and/or harm users. Examples of this issue include an incorrect code snippet, which if used in production, could create a severe security problem and undesirable content such as malware, profanity, pornography, hate speech, or links to such content.

Label: p0 (will be addressed immediately)



Major issue: This type of issue could severely affect a page's usefulness. For example, a significant amount of out-of-date information, a complex and important code example that doesn't work, a significant amount of prose that is badly written and hard to understand, or a large number of broken links.

Labels: p1 (will be addressed soon) and p2 (will be addressed soon, but higher priority items will take precedence)



Minor issue: This is a type of improvement issue that can make the existing content better but does not affect learning or only has a minor effect on learning. Since these types of issues are not actively planned for, help from contributors to fix these issues is welcome and much appreciated. Fixing some of these issues can also provide the necessary practice to beginner contributors who are starting to get familiar with the contribution process. Examples include typos, bad grammar, a broken link, a small amount of out-of-date information or badly-written prose, or a code snippet that doesn't work.

Labels: p3 (no visibility when the issue will be addressed)



In general, critical issues should be fixed immediately and are most likely handled by MDN Web Docs staff and peers.
Add helpful information
If possible, add information that can help contributors to fix the issue. The information can be in the form of steps, general approach, links to other similar fixed issues, or reading resources. A well-laid out plan or steps is especially required in issues that are labeled good first issue and can help ramp up new contributors quickly. You can time-box this task to 5-10 minutes.
For example, as a triager, you can add the following information to the issue you are triaging:
mdTo whoever fixes this issue, it looks like the following is needed:

- Update the first paragraph below heading X to correct the problem with Y
- Add a description of X
- Update the compatibility data at Link-X

Set other labels
Next, set the following labels as appropriate:


effort: small, effort: medium, effort: large: Some contributors like to search for bugs based on the time and effort that will be needed to fix the bug. So where possible, you should try to provide an estimate of the required effort.


good first issue: Set this label on the issue if the fix for the issue is really simple and if fixing the issue would provide good practice for a newcomer who is getting used to the process.


help wanted: Set this label if the issue requires help from someone who knows about or is familiar with the topic. This is a popular label and some contributors use it to search for issues to work on in open source projects in their areas of familiarity or expertise.


broken link external: Set this label if the issue involves a broken link to an external page.


document not written: Set this label if the issue involves a necessary document that has not been written yet, usually because a link points to it.


needs content update: Set this label if the issue fix in another repository will need an equivalent fix in the mdn/content repository.

Note:
After the triage process is complete, remove the needs triage label.


Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on May 7, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nMDN Community
Where web enthusiasts learn, collaborate, and create

Start contributing
Join MDN Discord



45K+ Total contributors
200+ Weekly commits
7 Language communities
MDN's community powers the webMDN’s strength comes from the passion and dedication of our global community.
Since our founding in 2005, we’ve grown into a thriving network. Together, we’ve
created a comprehensive, open, and free resource that serves web developers
across the globe. With volunteers leading translation efforts in
7 languages, we’re
truly international.Meet our contributorsWe are an open-source community dedicated to building resources for a better
web. Our diverse contributors, including developers, technical writers,
students, educators, designers, and more, come from various backgrounds and
platforms. Anyone can contribute, and each contribution strengthens our
community, driving innovation and improving this vital resource for developers
worldwide.

Join us
View all contributors



Jason Lam, 林家祥 https://github.com/JasonLamv-t Grantit
Nicolò Ribaudo https://github.com/nicolo-ribaudo Igalia
Joshua Chen https://github.com/Josh-Cena
Kimchanmin https://github.com/c17an SK Planet
Gibbeum Yoon https://github.com/givvemee
Jongha Kim https://github.com/wisedog
Qizhe ZHANG https://github.com/PassionPenguin
Artem Shibakov https://github.com/saionaro Bright Data
HoChan Lee https://github.com/hochan222 11STREET
Sangchul Lee https://github.com/1ilsang WoowaBros
Park Sunhee https://github.com/sunhpark42 WoowaBros
FU CHUNHUI https://github.com/fuchunhui Baidu
Estelle Weyl https://github.com/estelle Open Web Docs
Yitao Yin https://github.com/yin1999 Northwestern Polytechnical University
Florian Scholz https://github.com/Elchi3 Open Web Docs

Contributor spotlight


There are many other things I like about MDN: the openness of its
governance, the respect for contributors' work, the professional
conversations, and the always timely reviews. MDN has consistently
demonstrated the ideal form of an open-source project.

Joshua Chen (MDN contributor)



MDN Web Docs has the most up-to-date and accurate information and the
content is presented in an easy-to-understand manner. I also like that it's
available in many languages (very important!).

Yuji (MDN contributor)



There are millions of web developers in China, and many of them begin their
developer journey at MDN Web Docs. Contributing to MDN Web Docs is an
excellent way to help people who are starting out.

YiTao Yin (MDN contributor)


If you wish to be a part of the featured contributors here,
let us know. If you’re featured here
and would like to opt-out,
please file an issue on GitHub.Learn how to get startedWe collaborate on GitHub, our project's home, on
various tasks such as writing and improving documentation, fixing bugs, and
providing review feedback. It starts here, with you. Want to start right away,
but not sure how? Follow
our guide
to make your first contribution.
Watch this video on
how to get started with contributing to MDN.
Video from the community team on contributing to MDNJoin us in shaping a better webBecome part of this globally cherished group that’s dedicated to documenting web
technologies. Whether you’re an expert or a beginner, there’s a place for you in
our inclusive community. Check out some of the ways you can contribute and
engage.


Fix issues
Submit pull requests to fix reported issues.
Squash bugs


Improve content
Fix inaccuracies and fill in missing information.
Start writing


Localize content
Participate in translating content into one of our supported languages.
Find your locale


Answer questions
Share your knowledge and expertise and guide fellow learners.
Help on Discord

Help us fix open issuesNew to MDN or open-source projects? Tackle our beginner-friendly issues to help
improve MDN.TitleRepositoryJoin the conversation

Chat with us on Discord
Connect with the community. Engage with domain experts. Help others learn.
Join MDN Discord


Join our Community Call
Every month, get exclusive updates from the MDN team. Share your ideas and
contributions.
RSVP to the next community call


While working in Mozilla spaces and communities, please adhere to the
Mozilla Community Participation Guidelines,
which promote respect, inclusion, and a harassment-free environment for all
community members.Licensing and reuseMDN's resources are freely available under various open-source licenses. For
detailed information on reusing MDN content, check out our
Attribution and Copyright Licensing
page.\n\nMDN Community
Where web enthusiasts learn, collaborate, and create

Start contributing
Join MDN Discord



45K+ Total contributors
200+ Weekly commits
7 Language communities
MDN's community powers the webMDN’s strength comes from the passion and dedication of our global community.
Since our founding in 2005, we’ve grown into a thriving network. Together, we’ve
created a comprehensive, open, and free resource that serves web developers
across the globe. With volunteers leading translation efforts in
7 languages, we’re
truly international.Meet our contributorsWe are an open-source community dedicated to building resources for a better
web. Our diverse contributors, including developers, technical writers,
students, educators, designers, and more, come from various backgrounds and
platforms. Anyone can contribute, and each contribution strengthens our
community, driving innovation and improving this vital resource for developers
worldwide.

Join us
View all contributors



Jason Lam, 林家祥 https://github.com/JasonLamv-t Grantit
Nicolò Ribaudo https://github.com/nicolo-ribaudo Igalia
Joshua Chen https://github.com/Josh-Cena
Kimchanmin https://github.com/c17an SK Planet
Gibbeum Yoon https://github.com/givvemee
Jongha Kim https://github.com/wisedog
Qizhe ZHANG https://github.com/PassionPenguin
Artem Shibakov https://github.com/saionaro Bright Data
HoChan Lee https://github.com/hochan222 11STREET
Sangchul Lee https://github.com/1ilsang WoowaBros
Park Sunhee https://github.com/sunhpark42 WoowaBros
FU CHUNHUI https://github.com/fuchunhui Baidu
Estelle Weyl https://github.com/estelle Open Web Docs
Yitao Yin https://github.com/yin1999 Northwestern Polytechnical University
Florian Scholz https://github.com/Elchi3 Open Web Docs

Contributor spotlight


There are many other things I like about MDN: the openness of its
governance, the respect for contributors' work, the professional
conversations, and the always timely reviews. MDN has consistently
demonstrated the ideal form of an open-source project.

Joshua Chen (MDN contributor)



MDN Web Docs has the most up-to-date and accurate information and the
content is presented in an easy-to-understand manner. I also like that it's
available in many languages (very important!).

Yuji (MDN contributor)



There are millions of web developers in China, and many of them begin their
developer journey at MDN Web Docs. Contributing to MDN Web Docs is an
excellent way to help people who are starting out.

YiTao Yin (MDN contributor)


If you wish to be a part of the featured contributors here,
let us know. If you’re featured here
and would like to opt-out,
please file an issue on GitHub.Learn how to get startedWe collaborate on GitHub, our project's home, on
various tasks such as writing and improving documentation, fixing bugs, and
providing review feedback. It starts here, with you. Want to start right away,
but not sure how? Follow
our guide
to make your first contribution.
Watch this video on
how to get started with contributing to MDN.
Video from the community team on contributing to MDNJoin us in shaping a better webBecome part of this globally cherished group that’s dedicated to documenting web
technologies. Whether you’re an expert or a beginner, there’s a place for you in
our inclusive community. Check out some of the ways you can contribute and
engage.


Fix issues
Submit pull requests to fix reported issues.
Squash bugs


Improve content
Fix inaccuracies and fill in missing information.
Start writing


Localize content
Participate in translating content into one of our supported languages.
Find your locale


Answer questions
Share your knowledge and expertise and guide fellow learners.
Help on Discord

Help us fix open issuesNew to MDN or open-source projects? Tackle our beginner-friendly issues to help
improve MDN.TitleRepositoryJoin the conversation

Chat with us on Discord
Connect with the community. Engage with domain experts. Help others learn.
Join MDN Discord


Join our Community Call
Every month, get exclusive updates from the MDN team. Share your ideas and
contributions.
RSVP to the next community call


While working in Mozilla spaces and communities, please adhere to the
Mozilla Community Participation Guidelines,
which promote respect, inclusion, and a harassment-free environment for all
community members.Licensing and reuseMDN's resources are freely available under various open-source licenses. For
detailed information on reusing MDN content, check out our
Attribution and Copyright Licensing
page.\n\n\n\n\n\nLearn web developmentThe essential skill set for new front-end developersWelcome to MDN Learning Web Development (also known as Learn). This resource provides a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer, along with challenges and further recommended resources.About Learn web development

Teaches the essential skills and knowledge every front-end developer needs for career success and industry relevance, as defined in the MDN Curriculum.


Created by the MDN community and refined with insights from students, educators, and developers from the broader web community.


Designed to take you from "beginner" to "comfortable" (not "beginner" to "expert"), giving you enough knowledge to use more advanced resources (such as the rest of MDN).



Note:
Last updated: December 2024 (see changelog).
Don't know where to get started?
Never coded before?

Our Getting started modules provide setup tutorials and essential concepts and background information for complete beginners. You should start here if you are a complete beginner (i.e., you've not installed a code editor or written any code yet).

Want to master the essentials?

Our Core modules provide a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer.

Beyond the basics?

Our Extension modules cover useful additional skills to learn as you start to expand your knowledge and develop specialisms. Go onto these after you finish our Core.

Working at a school?

Use our modules to guide your teaching, check out our Educators page for more ideas, or enroll your students in Scrimba's Frontend Developer Career PathMDN learning partner.

Getting our code examplesThe code examples you'll encounter in the Learning Area are all available on GitHub:

The easiest way to get them is to download a ZIP of the latest main code branch.
If you are familiar with Git and GitHub, you could also choose to clone the repository.
Contact usIf you want to get in touch with us about anything, use the communication channels. We'd love to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.
If you're interested in helping develop/improve the content, take a look at how you can help and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.See also
The Frontend Developer Career Path MDN learning partner

Scrimba's Frontend Developer Career Path teaches all you need to know to be a competent front-end web developer, with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job! Many of the course components are available as standalone free versions.

Codecademy

A great interactive site for learning programming languages from scratch.

freeCodeCamp.org

Interactive site with tutorials and projects to learn web development.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.\n\nLearn web developmentThe essential skill set for new front-end developersWelcome to MDN Learning Web Development (also known as Learn). This resource provides a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer, along with challenges and further recommended resources.About Learn web development

Teaches the essential skills and knowledge every front-end developer needs for career success and industry relevance, as defined in the MDN Curriculum.


Created by the MDN community and refined with insights from students, educators, and developers from the broader web community.


Designed to take you from "beginner" to "comfortable" (not "beginner" to "expert"), giving you enough knowledge to use more advanced resources (such as the rest of MDN).



Note:
Last updated: December 2024 (see changelog).
Don't know where to get started?
Never coded before?

Our Getting started modules provide setup tutorials and essential concepts and background information for complete beginners. You should start here if you are a complete beginner (i.e., you've not installed a code editor or written any code yet).

Want to master the essentials?

Our Core modules provide a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer.

Beyond the basics?

Our Extension modules cover useful additional skills to learn as you start to expand your knowledge and develop specialisms. Go onto these after you finish our Core.

Working at a school?

Use our modules to guide your teaching, check out our Educators page for more ideas, or enroll your students in Scrimba's Frontend Developer Career PathMDN learning partner.

Getting our code examplesThe code examples you'll encounter in the Learning Area are all available on GitHub:

The easiest way to get them is to download a ZIP of the latest main code branch.
If you are familiar with Git and GitHub, you could also choose to clone the repository.
Contact usIf you want to get in touch with us about anything, use the communication channels. We'd love to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.
If you're interested in helping develop/improve the content, take a look at how you can help and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.See also
The Frontend Developer Career Path MDN learning partner

Scrimba's Frontend Developer Career Path teaches all you need to know to be a competent front-end web developer, with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job! Many of the course components are available as standalone free versions.

Codecademy

A great interactive site for learning programming languages from scratch.

freeCodeCamp.org

Interactive site with tutorials and projects to learn web development.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 28, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nLearn web developmentThe essential skill set for new front-end developersWelcome to MDN Learning Web Development (also known as Learn). This resource provides a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer, along with challenges and further recommended resources.About Learn web development

Teaches the essential skills and knowledge every front-end developer needs for career success and industry relevance, as defined in the MDN Curriculum.


Created by the MDN community and refined with insights from students, educators, and developers from the broader web community.


Designed to take you from "beginner" to "comfortable" (not "beginner" to "expert"), giving you enough knowledge to use more advanced resources (such as the rest of MDN).



Note:
Last updated: December 2024 (see changelog).
Don't know where to get started?
Never coded before?

Our Getting started modules provide setup tutorials and essential concepts and background information for complete beginners. You should start here if you are a complete beginner (i.e., you've not installed a code editor or written any code yet).

Want to master the essentials?

Our Core modules provide a structured set of tutorials teaching the essential skills and practices for being a successful front-end developer.

Beyond the basics?

Our Extension modules cover useful additional skills to learn as you start to expand your knowledge and develop specialisms. Go onto these after you finish our Core.

Working at a school?

Use our modules to guide your teaching, check out our Educators page for more ideas, or enroll your students in Scrimba's Frontend Developer Career PathMDN learning partner.

Getting our code examplesThe code examples you'll encounter in the Learning Area are all available on GitHub:

The easiest way to get them is to download a ZIP of the latest main code branch.
If you are familiar with Git and GitHub, you could also choose to clone the repository.
Contact usIf you want to get in touch with us about anything, use the communication channels. We'd love to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.
If you're interested in helping develop/improve the content, take a look at how you can help and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.See also
The Frontend Developer Career Path MDN learning partner

Scrimba's Frontend Developer Career Path teaches all you need to know to be a competent front-end web developer, with fun interactive lessons and challenges, knowledgeable teachers, and a supportive community. Go from zero to landing your first front-end job! Many of the course components are available as standalone free versions.

Codecademy

A great interactive site for learning programming languages from scratch.

freeCodeCamp.org

Interactive site with tutorials and projects to learn web development.

Learn JavaScript

An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.

Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 28, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nAttribution and copyright licensingMDN Web Docs content is available free of charge and is available under various open-source licenses.Using MDN Web Docs contentThis section covers the types of content we provide and the copyrights and licenses that are in effect for each type if you choose to reuse any of it.Documentation
Note:
The content on MDN Web Docs has been prepared with the contributions of authors from both inside and outside Mozilla. Unless otherwise indicated, the content is available under the terms of the Creative Commons Attribution-ShareAlike license (CC-BY-SA), v2.5 or any later version.

Your reuse of the content here is published under the same license as the original content – CC-BY-SA v2.5 or any later version.
When reusing the content on MDN Web Docs, you need to ensure that attribution is given to the material as well as to "Mozilla Contributors".
Good attribution is the title of the document, with a hyperlink (online) or URL (in print) to the specific page of the content being sourced, and any modifications you've made briefly described.
For example, to provide attribution for this page, you can write:

"Attributions and copyright licensing" by Mozilla Contributors, licensed under CC-BY-SA 2.5.

You may also want to link "Mozilla Contributors" to a contributors.txt file linked in the page footer you're referencing for a list of authors, if reasonable.
See Recommended practices for attribution for more details.Code samplesCode samples added on or after August 20, 2010 are in the public domain CC0. No licensing notice is necessary but if you need one, you can use: Any copyright is dedicated to the Public Domain: https://creativecommons.org/publicdomain/zero/1.0/
Code samples added before August 20, 2010 are available under the MIT license; you should insert the following attribution information into the MIT template: "© <date of last wiki page revision> <name of person who put it in the wiki>".
Since the launch of the new Yari MDN platform on December 14 2020, there is currently no way to determine which one you need. We are working on this and will update this content soon. Your contributionsIf you wish to contribute to MDN Web Docs, you agree that your documentation is available under the Attribution-ShareAlike license (or occasionally an alternative license already specified by the page you are editing) and that your code samples are available under Creative Commons CC-0 (a Public Domain dedication).

Warning:
No new pages may be created using alternate licenses.

Copyright for contributed materials remains with the author unless the author assigns it to someone else.
If you have any questions or concerns about anything discussed here, please contact the MDN Web Docs team.Logos, trademarks, service marks, and wordmarksThe rights in the logos, trademarks, and service marks of the Mozilla Foundation, as well as the look and feel of this website, are not licensed under the Creative Commons license, and to the extent they are works of authorship (like logos and graphic design), they are not included in the work that is licensed under those terms. If you use the text of documents and wish to also use any of these rights, or if you have any other questions about complying with our licensing terms for this collection, you should contact the Mozilla Foundation here: licensing@mozilla.org.Using content from elsewhere on MDN Web DocsIn general, we do not approve of copying content from other sources and putting it on MDN.
MDN should be made up of original content wherever possible.
If we receive a pull request and discover that it contains plagiarized content, we will close it and request that the submitter resubmit the change with the content rewritten into their own words.Reusing or republishing your content on MDN
Note:
Unless there is a good reason to republish the content, we will probably say "no".
The MDN writing team's decision is final.

If someone wants to donate an article to MDN that they previously published on their blog or it makes sense to copy a complex reference sheet to MDN, there may be justification for republishing it. For these cases, discuss your plan with the MDN team beforehand:

Create a GitHub issue that explains your intention.

Describe what you would like to copy or republish.
Provide a URL to the resource.
Explain why you think it's appropriate.



If the content is published under a closed license:

If you hold the rights to the content, state this and your express agreement to republish it on MDN.
If you do not hold the rights to the content, include the author/publisher on the issue if possible, or include details of how they could be contacted so we can ask them for permission to republish the content.

If the content is published under an open license:

Say what it is, and link to the license so we can check whether it is compatible with MDN's license.
Linking to MDN Web Docs articlesWe regularly get users asking us questions about how to link to MDN Web Docs and whether or not it is even allowed. The short answer is: yes, you can link to MDN Web Docs! Not only is the hypertext link the essence of the web, it is both a way to point your users to valuable resources as well as a show of trust toward the work our community does.\n\nAttribution and copyright licensingMDN Web Docs content is available free of charge and is available under various open-source licenses.Using MDN Web Docs contentThis section covers the types of content we provide and the copyrights and licenses that are in effect for each type if you choose to reuse any of it.Documentation
Note:
The content on MDN Web Docs has been prepared with the contributions of authors from both inside and outside Mozilla. Unless otherwise indicated, the content is available under the terms of the Creative Commons Attribution-ShareAlike license (CC-BY-SA), v2.5 or any later version.

Your reuse of the content here is published under the same license as the original content – CC-BY-SA v2.5 or any later version.
When reusing the content on MDN Web Docs, you need to ensure that attribution is given to the material as well as to "Mozilla Contributors".
Good attribution is the title of the document, with a hyperlink (online) or URL (in print) to the specific page of the content being sourced, and any modifications you've made briefly described.
For example, to provide attribution for this page, you can write:

"Attributions and copyright licensing" by Mozilla Contributors, licensed under CC-BY-SA 2.5.

You may also want to link "Mozilla Contributors" to a contributors.txt file linked in the page footer you're referencing for a list of authors, if reasonable.
See Recommended practices for attribution for more details.Code samplesCode samples added on or after August 20, 2010 are in the public domain CC0. No licensing notice is necessary but if you need one, you can use: Any copyright is dedicated to the Public Domain: https://creativecommons.org/publicdomain/zero/1.0/
Code samples added before August 20, 2010 are available under the MIT license; you should insert the following attribution information into the MIT template: "© <date of last wiki page revision> <name of person who put it in the wiki>".
Since the launch of the new Yari MDN platform on December 14 2020, there is currently no way to determine which one you need. We are working on this and will update this content soon. Your contributionsIf you wish to contribute to MDN Web Docs, you agree that your documentation is available under the Attribution-ShareAlike license (or occasionally an alternative license already specified by the page you are editing) and that your code samples are available under Creative Commons CC-0 (a Public Domain dedication).

Warning:
No new pages may be created using alternate licenses.

Copyright for contributed materials remains with the author unless the author assigns it to someone else.
If you have any questions or concerns about anything discussed here, please contact the MDN Web Docs team.Logos, trademarks, service marks, and wordmarksThe rights in the logos, trademarks, and service marks of the Mozilla Foundation, as well as the look and feel of this website, are not licensed under the Creative Commons license, and to the extent they are works of authorship (like logos and graphic design), they are not included in the work that is licensed under those terms. If you use the text of documents and wish to also use any of these rights, or if you have any other questions about complying with our licensing terms for this collection, you should contact the Mozilla Foundation here: licensing@mozilla.org.Using content from elsewhere on MDN Web DocsIn general, we do not approve of copying content from other sources and putting it on MDN.
MDN should be made up of original content wherever possible.
If we receive a pull request and discover that it contains plagiarized content, we will close it and request that the submitter resubmit the change with the content rewritten into their own words.Reusing or republishing your content on MDN
Note:
Unless there is a good reason to republish the content, we will probably say "no".
The MDN writing team's decision is final.

If someone wants to donate an article to MDN that they previously published on their blog or it makes sense to copy a complex reference sheet to MDN, there may be justification for republishing it. For these cases, discuss your plan with the MDN team beforehand:

Create a GitHub issue that explains your intention.

Describe what you would like to copy or republish.
Provide a URL to the resource.
Explain why you think it's appropriate.



If the content is published under a closed license:

If you hold the rights to the content, state this and your express agreement to republish it on MDN.
If you do not hold the rights to the content, include the author/publisher on the issue if possible, or include details of how they could be contacted so we can ask them for permission to republish the content.

If the content is published under an open license:

Say what it is, and link to the license so we can check whether it is compatible with MDN's license.
Linking to MDN Web Docs articlesWe regularly get users asking us questions about how to link to MDN Web Docs and whether or not it is even allowed. The short answer is: yes, you can link to MDN Web Docs! Not only is the hypertext link the essence of the web, it is both a way to point your users to valuable resources as well as a show of trust toward the work our community does.Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nAttribution and copyright licensingMDN Web Docs content is available free of charge and is available under various open-source licenses.Using MDN Web Docs contentThis section covers the types of content we provide and the copyrights and licenses that are in effect for each type if you choose to reuse any of it.Documentation
Note:
The content on MDN Web Docs has been prepared with the contributions of authors from both inside and outside Mozilla. Unless otherwise indicated, the content is available under the terms of the Creative Commons Attribution-ShareAlike license (CC-BY-SA), v2.5 or any later version.

Your reuse of the content here is published under the same license as the original content – CC-BY-SA v2.5 or any later version.
When reusing the content on MDN Web Docs, you need to ensure that attribution is given to the material as well as to "Mozilla Contributors".
Good attribution is the title of the document, with a hyperlink (online) or URL (in print) to the specific page of the content being sourced, and any modifications you've made briefly described.
For example, to provide attribution for this page, you can write:

"Attributions and copyright licensing" by Mozilla Contributors, licensed under CC-BY-SA 2.5.

You may also want to link "Mozilla Contributors" to a contributors.txt file linked in the page footer you're referencing for a list of authors, if reasonable.
See Recommended practices for attribution for more details.Code samplesCode samples added on or after August 20, 2010 are in the public domain CC0. No licensing notice is necessary but if you need one, you can use: Any copyright is dedicated to the Public Domain: https://creativecommons.org/publicdomain/zero/1.0/
Code samples added before August 20, 2010 are available under the MIT license; you should insert the following attribution information into the MIT template: "© <date of last wiki page revision> <name of person who put it in the wiki>".
Since the launch of the new Yari MDN platform on December 14 2020, there is currently no way to determine which one you need. We are working on this and will update this content soon. Your contributionsIf you wish to contribute to MDN Web Docs, you agree that your documentation is available under the Attribution-ShareAlike license (or occasionally an alternative license already specified by the page you are editing) and that your code samples are available under Creative Commons CC-0 (a Public Domain dedication).

Warning:
No new pages may be created using alternate licenses.

Copyright for contributed materials remains with the author unless the author assigns it to someone else.
If you have any questions or concerns about anything discussed here, please contact the MDN Web Docs team.Logos, trademarks, service marks, and wordmarksThe rights in the logos, trademarks, and service marks of the Mozilla Foundation, as well as the look and feel of this website, are not licensed under the Creative Commons license, and to the extent they are works of authorship (like logos and graphic design), they are not included in the work that is licensed under those terms. If you use the text of documents and wish to also use any of these rights, or if you have any other questions about complying with our licensing terms for this collection, you should contact the Mozilla Foundation here: licensing@mozilla.org.Using content from elsewhere on MDN Web DocsIn general, we do not approve of copying content from other sources and putting it on MDN.
MDN should be made up of original content wherever possible.
If we receive a pull request and discover that it contains plagiarized content, we will close it and request that the submitter resubmit the change with the content rewritten into their own words.Reusing or republishing your content on MDN
Note:
Unless there is a good reason to republish the content, we will probably say "no".
The MDN writing team's decision is final.

If someone wants to donate an article to MDN that they previously published on their blog or it makes sense to copy a complex reference sheet to MDN, there may be justification for republishing it. For these cases, discuss your plan with the MDN team beforehand:

Create a GitHub issue that explains your intention.

Describe what you would like to copy or republish.
Provide a URL to the resource.
Explain why you think it's appropriate.



If the content is published under a closed license:

If you hold the rights to the content, state this and your express agreement to republish it on MDN.
If you do not hold the rights to the content, include the author/publisher on the issue if possible, or include details of how they could be contacted so we can ask them for permission to republish the content.

If the content is published under an open license:

Say what it is, and link to the license so we can check whether it is compatible with MDN's license.
Linking to MDN Web Docs articlesWe regularly get users asking us questions about how to link to MDN Web Docs and whether or not it is even allowed. The short answer is: yes, you can link to MDN Web Docs! Not only is the hypertext link the essence of the web, it is both a way to point your users to valuable resources as well as a show of trust toward the work our community does.Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Feb 19, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\n\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\nResources for Developers, by DevelopersDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.Search MDNClear search inputSearchFeatured articlesBlogJavaScript Temporal is comingA new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
CSSCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
Web APIsUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).
JavaScriptTemporalThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.
Latest newsMDN 2024 content projectsdeveloper.mozilla.org4 months agoA new learning experience on MDNdeveloper.mozilla.org5 months agoIntroducing the new MDN Community pagedeveloper.mozilla.org7 months agoRecent contributionschore(http): link to unlinked child pagesmdn/content12 hours agoFix typosmdn/content12 hours agochore: link to unlinked child pagesmdn/content11 hours agocss: add 'stretch' value examplesmdn/content9 hours agoAdd links to CSS sidebarmdn/content8 hours ago[ru] sync translated contentmdn/translated-content6 hours agoContributor SpotlightYash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.Get involved →\n\n\n\n\n\nJavaScript Temporal is comingBrian SmithJanuary 24, 20255 minute readImplementations of the new JavaScript Temporal object are starting to be shipped in experimental releases of browsers.
This is big news for web developers because working with dates and times in JavaScript will be hugely simplified and modernized.
Applications that rely on scheduling, internationalization, or time-sensitive data will be able to use built-ins for efficient, precise and consistent dates, times, durations, and calendars.
We're a long way away from stable, cross-browser support, and there may be changes as implementations develop, but we can already take a look at Temporal as it stands now, why it's exciting, and what problems it solves.
To help you get up to speed, there are over 270 pages of Temporal docs on MDN added this week, with detailed explanations and examples.What is JavaScript Temporal?To understand Temporal, we can look at JavaScript's Date object.
When JavaScript was created in 1995, the Date object was copied from Java's early, flawed java.util.Date implementation.
Java replaced this implementation in 1997, but JavaScript is stuck with the same API for almost 30 years, despite known problems.
The major issues with JavaScript's Date object are that it only supports the user's local time and UTC, and there's no time zone support.
Additionally, its parsing behavior is very unreliable, and Date itself is mutable, which can introduce hard-to-trace bugs.
There are other problems like calculations across Daylight Saving Time (DST) and historical calendar changes, which are notoriously difficult to work with.
All of these issues make working with dates and times in JavaScript complex and prone to bugs, which can have serious consequences for some systems.
Most developers rely on dedicated libraries like Moment.js and date-fns for better handling of dates and times in their applications.
Temporal is designed as a full replacement for the Date object, making date and time management reliable and predictable.
Temporal adds support for time zone and calendar representations, many built-in methods for conversions, comparisons and computations, formatting, and more.
The API surface has over 200 utility methods, and you can find information about all of them in the Temporal docs on MDN.Core conceptsIn Temporal, the key concepts are that it has instants (unique points in history), wall-clock times (regional time), and durations.
The APIs have this overall structure to handle these concepts:

Duration: Temporal.Duration the difference between two points in time
Points in time:

Unique points in time:

As a timestamp: Temporal.Instant
A date-time with a time zone: Temporal.ZonedDateTime


Time-zone-unaware date/time ("Plain"):

Full date and time: Temporal.PlainDateTime

Just the date: Temporal.PlainDate

Year and month: Temporal.PlainYearMonth
Month and day: Temporal.PlainMonthDay


Just the time: Temporal.PlainTime






Now: using Temporal.now to get the current time as various class instances, or in a specific format
Temporal examplesSome of the most basic usages of Temporal include getting current dates and times as an ISO string, but we can see from the example below, that we can now provide time zones with many methods, which takes care of complex calculations you may be doing yourself:
js// The current date in the system's time zone
const dateTime = Temporal.Now.plainDateTimeISO();
console.log(dateTime); // e.g.: 2025-01-22T11:46:36.144

// The current date in the "America/New_York" time zone
const dateTimeInNewYork = Temporal.Now.plainDateTimeISO("America/New_York");
console.log(dateTimeInNewYork);
// e.g.: 2025-01-22T05:47:02.555

Working with different calendars is also simplified, as it's possible to create dates in calendar systems other than Gregorian, such as Hebrew, Chinese, and Islamic, for example.
The code below helps you find out when the next Chinese New Year is (which is quite soon!):
js// Chinese New Years are on 1/1 in the Chinese calendar
const chineseNewYear = Temporal.PlainMonthDay.from({
  monthCode: "M01",
  day: 1,
  calendar: "chinese",
});
const currentYear = Temporal.Now.plainDateISO().withCalendar("chinese").year;
let nextCNY = chineseNewYear.toPlainDate({ year: currentYear });
// If nextCNY is before the current date, move forward by 1 year
if (Temporal.PlainDate.compare(nextCNY, Temporal.Now.plainDateISO()) <= 0) {
  nextCNY = nextCNY.add({ years: 1 });
}
console.log(
  `The next Chinese New Year is on ${nextCNY.withCalendar("iso8601").toLocaleString()}`,
);
// The next Chinese New Year is on 1/29/2025 (at the time of writing)

Working with Unix timestamps is a very common use case as many systems (APIs, databases) use the format to represent times.
The following example shows how to take a Unix Epoch timestamp in milliseconds, create an instant from it, get the current time with Temporal.Now, then calculate how many hours from now until the Unix timestamp:
js// 1851222399924 is our timestamp
const launch = Temporal.Instant.fromEpochMilliseconds(1851222399924);
const now = Temporal.Now.instant();
const duration = now.until(launch, { smallestUnit: "hour" });
console.log(`It will be ${duration.toLocaleString("en-US")} until the launch`);
// "It will be 31,600 hr until the launch" <- @js-temporal/polyfill
// "It will be PT31600H until the launch" <- Firefox Nightly

Currently, toLocaleString doesn't output a locale-sensitive string in the Firefox implementation, so durations above (PT31600H) are returned as a non-locale-sensitive duration format.
This may change as it's more of a design decision rather than a technical limitation as formatting the duration is possible, so the polyfill and Firefox implementations may eventually converge.
There's a lot to highlight, but one pattern that I thought was interesting in the API is the compare() methods, which allow you to sort durations in an elegant and efficient way:
jsconst durations = [
  Temporal.Duration.from({ hours: 1 }),
  Temporal.Duration.from({ hours: 2 }),
  Temporal.Duration.from({ hours: 1, minutes: 30 }),
  Temporal.Duration.from({ hours: 1, minutes: 45 }),
];

durations.sort(Temporal.Duration.compare);
console.log(durations.map((d) => d.toString()));
// [ 'PT1H', 'PT1H30M', 'PT1H45M', 'PT2H' ]
Trying Temporal and browser supportSupport is slowly starting to be included in experimental browser releases, and Firefox appears to have the most mature implementation at this point.
In Firefox, Temporal is being built into the Nightly version behind the javascript.options.experimental.temporal preference.
If you want to see the full compatibility story, you can check the (quite epic) Temporal object Browser Compatibility section.
Here are the main browser bugs that track Temporal implementations:

Firefox: Build temporal in Nightly by default
Safari: [JSC] Implement Temporal
Chrome: Implement the Temporal proposal

Additionally, you can visit https://tc39.es/proposal-temporal/docs/ which has @js-temporal/polyfill available.
That means, you can open the developer tools on the TC39 docs page, and try some of the examples in the console in any browser without changing flags or preferences.
With experimental implementations landing, now is a good time to try out Temporal and become familiar with what will be the modern approach to handling dates and times in JavaScript.Acknowledgements
Thanks to Eric Meyer for his work on the topic.
It's been roughly 4 years since Eric's efforts to document browser compatibility data and scaffold the documentation in his fork of mdn/content.
Joshua Chen for picking up the torch from Eric and getting a pull request together for the MDN documentation.
André Bargull for the work on the Firefox Temporal implementation.
See also
Fixing JavaScript Date – Getting Started by Maggie Pint (2017)
Previous Post Fix your website's Largest Contentful Paint by optimizing image loadingNext Post Implications of Global Privacy ControlPrevious Post Fix your website's Largest Contentful Paint by optimizing image loadingNext Post Implications of Global Privacy Control\n\nIn this articleWhat is JavaScript Temporal?Core conceptsTemporal examplesTrying Temporal and browser supportAcknowledgementsSee alsoJavaScript Temporal is comingBrian SmithJanuary 24, 20255 minute readImplementations of the new JavaScript Temporal object are starting to be shipped in experimental releases of browsers.
This is big news for web developers because working with dates and times in JavaScript will be hugely simplified and modernized.
Applications that rely on scheduling, internationalization, or time-sensitive data will be able to use built-ins for efficient, precise and consistent dates, times, durations, and calendars.
We're a long way away from stable, cross-browser support, and there may be changes as implementations develop, but we can already take a look at Temporal as it stands now, why it's exciting, and what problems it solves.
To help you get up to speed, there are over 270 pages of Temporal docs on MDN added this week, with detailed explanations and examples.What is JavaScript Temporal?To understand Temporal, we can look at JavaScript's Date object.
When JavaScript was created in 1995, the Date object was copied from Java's early, flawed java.util.Date implementation.
Java replaced this implementation in 1997, but JavaScript is stuck with the same API for almost 30 years, despite known problems.
The major issues with JavaScript's Date object are that it only supports the user's local time and UTC, and there's no time zone support.
Additionally, its parsing behavior is very unreliable, and Date itself is mutable, which can introduce hard-to-trace bugs.
There are other problems like calculations across Daylight Saving Time (DST) and historical calendar changes, which are notoriously difficult to work with.
All of these issues make working with dates and times in JavaScript complex and prone to bugs, which can have serious consequences for some systems.
Most developers rely on dedicated libraries like Moment.js and date-fns for better handling of dates and times in their applications.
Temporal is designed as a full replacement for the Date object, making date and time management reliable and predictable.
Temporal adds support for time zone and calendar representations, many built-in methods for conversions, comparisons and computations, formatting, and more.
The API surface has over 200 utility methods, and you can find information about all of them in the Temporal docs on MDN.Core conceptsIn Temporal, the key concepts are that it has instants (unique points in history), wall-clock times (regional time), and durations.
The APIs have this overall structure to handle these concepts:

Duration: Temporal.Duration the difference between two points in time
Points in time:

Unique points in time:

As a timestamp: Temporal.Instant
A date-time with a time zone: Temporal.ZonedDateTime


Time-zone-unaware date/time ("Plain"):

Full date and time: Temporal.PlainDateTime

Just the date: Temporal.PlainDate

Year and month: Temporal.PlainYearMonth
Month and day: Temporal.PlainMonthDay


Just the time: Temporal.PlainTime






Now: using Temporal.now to get the current time as various class instances, or in a specific format
Temporal examplesSome of the most basic usages of Temporal include getting current dates and times as an ISO string, but we can see from the example below, that we can now provide time zones with many methods, which takes care of complex calculations you may be doing yourself:
js// The current date in the system's time zone
const dateTime = Temporal.Now.plainDateTimeISO();
console.log(dateTime); // e.g.: 2025-01-22T11:46:36.144

// The current date in the "America/New_York" time zone
const dateTimeInNewYork = Temporal.Now.plainDateTimeISO("America/New_York");
console.log(dateTimeInNewYork);
// e.g.: 2025-01-22T05:47:02.555

Working with different calendars is also simplified, as it's possible to create dates in calendar systems other than Gregorian, such as Hebrew, Chinese, and Islamic, for example.
The code below helps you find out when the next Chinese New Year is (which is quite soon!):
js// Chinese New Years are on 1/1 in the Chinese calendar
const chineseNewYear = Temporal.PlainMonthDay.from({
  monthCode: "M01",
  day: 1,
  calendar: "chinese",
});
const currentYear = Temporal.Now.plainDateISO().withCalendar("chinese").year;
let nextCNY = chineseNewYear.toPlainDate({ year: currentYear });
// If nextCNY is before the current date, move forward by 1 year
if (Temporal.PlainDate.compare(nextCNY, Temporal.Now.plainDateISO()) <= 0) {
  nextCNY = nextCNY.add({ years: 1 });
}
console.log(
  `The next Chinese New Year is on ${nextCNY.withCalendar("iso8601").toLocaleString()}`,
);
// The next Chinese New Year is on 1/29/2025 (at the time of writing)

Working with Unix timestamps is a very common use case as many systems (APIs, databases) use the format to represent times.
The following example shows how to take a Unix Epoch timestamp in milliseconds, create an instant from it, get the current time with Temporal.Now, then calculate how many hours from now until the Unix timestamp:
js// 1851222399924 is our timestamp
const launch = Temporal.Instant.fromEpochMilliseconds(1851222399924);
const now = Temporal.Now.instant();
const duration = now.until(launch, { smallestUnit: "hour" });
console.log(`It will be ${duration.toLocaleString("en-US")} until the launch`);
// "It will be 31,600 hr until the launch" <- @js-temporal/polyfill
// "It will be PT31600H until the launch" <- Firefox Nightly

Currently, toLocaleString doesn't output a locale-sensitive string in the Firefox implementation, so durations above (PT31600H) are returned as a non-locale-sensitive duration format.
This may change as it's more of a design decision rather than a technical limitation as formatting the duration is possible, so the polyfill and Firefox implementations may eventually converge.
There's a lot to highlight, but one pattern that I thought was interesting in the API is the compare() methods, which allow you to sort durations in an elegant and efficient way:
jsconst durations = [
  Temporal.Duration.from({ hours: 1 }),
  Temporal.Duration.from({ hours: 2 }),
  Temporal.Duration.from({ hours: 1, minutes: 30 }),
  Temporal.Duration.from({ hours: 1, minutes: 45 }),
];

durations.sort(Temporal.Duration.compare);
console.log(durations.map((d) => d.toString()));
// [ 'PT1H', 'PT1H30M', 'PT1H45M', 'PT2H' ]
Trying Temporal and browser supportSupport is slowly starting to be included in experimental browser releases, and Firefox appears to have the most mature implementation at this point.
In Firefox, Temporal is being built into the Nightly version behind the javascript.options.experimental.temporal preference.
If you want to see the full compatibility story, you can check the (quite epic) Temporal object Browser Compatibility section.
Here are the main browser bugs that track Temporal implementations:

Firefox: Build temporal in Nightly by default
Safari: [JSC] Implement Temporal
Chrome: Implement the Temporal proposal

Additionally, you can visit https://tc39.es/proposal-temporal/docs/ which has @js-temporal/polyfill available.
That means, you can open the developer tools on the TC39 docs page, and try some of the examples in the console in any browser without changing flags or preferences.
With experimental implementations landing, now is a good time to try out Temporal and become familiar with what will be the modern approach to handling dates and times in JavaScript.Acknowledgements
Thanks to Eric Meyer for his work on the topic.
It's been roughly 4 years since Eric's efforts to document browser compatibility data and scaffold the documentation in his fork of mdn/content.
Joshua Chen for picking up the torch from Eric and getting a pull request together for the MDN documentation.
André Bargull for the work on the Firefox Temporal implementation.
See also
Fixing JavaScript Date – Getting Started by Maggie Pint (2017)
Previous Post Fix your website's Largest Contentful Paint by optimizing image loadingNext Post Implications of Global Privacy Control\n\nJavaScript Temporal is comingBrian SmithJanuary 24, 20255 minute readImplementations of the new JavaScript Temporal object are starting to be shipped in experimental releases of browsers.
This is big news for web developers because working with dates and times in JavaScript will be hugely simplified and modernized.
Applications that rely on scheduling, internationalization, or time-sensitive data will be able to use built-ins for efficient, precise and consistent dates, times, durations, and calendars.
We're a long way away from stable, cross-browser support, and there may be changes as implementations develop, but we can already take a look at Temporal as it stands now, why it's exciting, and what problems it solves.
To help you get up to speed, there are over 270 pages of Temporal docs on MDN added this week, with detailed explanations and examples.What is JavaScript Temporal?To understand Temporal, we can look at JavaScript's Date object.
When JavaScript was created in 1995, the Date object was copied from Java's early, flawed java.util.Date implementation.
Java replaced this implementation in 1997, but JavaScript is stuck with the same API for almost 30 years, despite known problems.
The major issues with JavaScript's Date object are that it only supports the user's local time and UTC, and there's no time zone support.
Additionally, its parsing behavior is very unreliable, and Date itself is mutable, which can introduce hard-to-trace bugs.
There are other problems like calculations across Daylight Saving Time (DST) and historical calendar changes, which are notoriously difficult to work with.
All of these issues make working with dates and times in JavaScript complex and prone to bugs, which can have serious consequences for some systems.
Most developers rely on dedicated libraries like Moment.js and date-fns for better handling of dates and times in their applications.
Temporal is designed as a full replacement for the Date object, making date and time management reliable and predictable.
Temporal adds support for time zone and calendar representations, many built-in methods for conversions, comparisons and computations, formatting, and more.
The API surface has over 200 utility methods, and you can find information about all of them in the Temporal docs on MDN.Core conceptsIn Temporal, the key concepts are that it has instants (unique points in history), wall-clock times (regional time), and durations.
The APIs have this overall structure to handle these concepts:

Duration: Temporal.Duration the difference between two points in time
Points in time:

Unique points in time:

As a timestamp: Temporal.Instant
A date-time with a time zone: Temporal.ZonedDateTime


Time-zone-unaware date/time ("Plain"):

Full date and time: Temporal.PlainDateTime

Just the date: Temporal.PlainDate

Year and month: Temporal.PlainYearMonth
Month and day: Temporal.PlainMonthDay


Just the time: Temporal.PlainTime






Now: using Temporal.now to get the current time as various class instances, or in a specific format
Temporal examplesSome of the most basic usages of Temporal include getting current dates and times as an ISO string, but we can see from the example below, that we can now provide time zones with many methods, which takes care of complex calculations you may be doing yourself:
js// The current date in the system's time zone
const dateTime = Temporal.Now.plainDateTimeISO();
console.log(dateTime); // e.g.: 2025-01-22T11:46:36.144

// The current date in the "America/New_York" time zone
const dateTimeInNewYork = Temporal.Now.plainDateTimeISO("America/New_York");
console.log(dateTimeInNewYork);
// e.g.: 2025-01-22T05:47:02.555

Working with different calendars is also simplified, as it's possible to create dates in calendar systems other than Gregorian, such as Hebrew, Chinese, and Islamic, for example.
The code below helps you find out when the next Chinese New Year is (which is quite soon!):
js// Chinese New Years are on 1/1 in the Chinese calendar
const chineseNewYear = Temporal.PlainMonthDay.from({
  monthCode: "M01",
  day: 1,
  calendar: "chinese",
});
const currentYear = Temporal.Now.plainDateISO().withCalendar("chinese").year;
let nextCNY = chineseNewYear.toPlainDate({ year: currentYear });
// If nextCNY is before the current date, move forward by 1 year
if (Temporal.PlainDate.compare(nextCNY, Temporal.Now.plainDateISO()) <= 0) {
  nextCNY = nextCNY.add({ years: 1 });
}
console.log(
  `The next Chinese New Year is on ${nextCNY.withCalendar("iso8601").toLocaleString()}`,
);
// The next Chinese New Year is on 1/29/2025 (at the time of writing)

Working with Unix timestamps is a very common use case as many systems (APIs, databases) use the format to represent times.
The following example shows how to take a Unix Epoch timestamp in milliseconds, create an instant from it, get the current time with Temporal.Now, then calculate how many hours from now until the Unix timestamp:
js// 1851222399924 is our timestamp
const launch = Temporal.Instant.fromEpochMilliseconds(1851222399924);
const now = Temporal.Now.instant();
const duration = now.until(launch, { smallestUnit: "hour" });
console.log(`It will be ${duration.toLocaleString("en-US")} until the launch`);
// "It will be 31,600 hr until the launch" <- @js-temporal/polyfill
// "It will be PT31600H until the launch" <- Firefox Nightly

Currently, toLocaleString doesn't output a locale-sensitive string in the Firefox implementation, so durations above (PT31600H) are returned as a non-locale-sensitive duration format.
This may change as it's more of a design decision rather than a technical limitation as formatting the duration is possible, so the polyfill and Firefox implementations may eventually converge.
There's a lot to highlight, but one pattern that I thought was interesting in the API is the compare() methods, which allow you to sort durations in an elegant and efficient way:
jsconst durations = [
  Temporal.Duration.from({ hours: 1 }),
  Temporal.Duration.from({ hours: 2 }),
  Temporal.Duration.from({ hours: 1, minutes: 30 }),
  Temporal.Duration.from({ hours: 1, minutes: 45 }),
];

durations.sort(Temporal.Duration.compare);
console.log(durations.map((d) => d.toString()));
// [ 'PT1H', 'PT1H30M', 'PT1H45M', 'PT2H' ]
Trying Temporal and browser supportSupport is slowly starting to be included in experimental browser releases, and Firefox appears to have the most mature implementation at this point.
In Firefox, Temporal is being built into the Nightly version behind the javascript.options.experimental.temporal preference.
If you want to see the full compatibility story, you can check the (quite epic) Temporal object Browser Compatibility section.
Here are the main browser bugs that track Temporal implementations:

Firefox: Build temporal in Nightly by default
Safari: [JSC] Implement Temporal
Chrome: Implement the Temporal proposal

Additionally, you can visit https://tc39.es/proposal-temporal/docs/ which has @js-temporal/polyfill available.
That means, you can open the developer tools on the TC39 docs page, and try some of the examples in the console in any browser without changing flags or preferences.
With experimental implementations landing, now is a good time to try out Temporal and become familiar with what will be the modern approach to handling dates and times in JavaScript.Acknowledgements
Thanks to Eric Meyer for his work on the topic.
It's been roughly 4 years since Eric's efforts to document browser compatibility data and scaffold the documentation in his fork of mdn/content.
Joshua Chen for picking up the torch from Eric and getting a pull request together for the MDN documentation.
André Bargull for the work on the Firefox Temporal implementation.
See also
Fixing JavaScript Date – Getting Started by Maggie Pint (2017)
Previous Post Fix your website's Largest Contentful Paint by optimizing image loadingNext Post Implications of Global Privacy Control\n\n\n\nCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
In addition, the specification provides CSS-only mechanisms to:

Specify a set of alternative positions for an anchored element; when the default rendering position causes it to overflow its containing block and/or be rendered offscreen, the browser will try rendering the anchored element in the alternative positions instead.
Declare conditions under which anchor-positioned elements should be hidden, in situations where it is not appropriate to tether them to anchor elements.
ReferenceProperties
anchor-name
position-anchor
position-area
position-try-fallbacks
position-try-order
position-try shorthand
position-visibility


Note:
The CSS anchor positioning module introduces the anchor-scope property that has not yet been implemented.
At-rules and descriptors
@position-try
Functions
anchor()
anchor-size()
Data types and values
anchor-center
<anchor-side>
<anchor-size>
<position-area>
<try-size>
<try-tactic>
HTML attributes
anchor 
Non-standard

Interfaces
CSSPositionTryDescriptors
CSSPositionTryRule
HTMLElement.anchorElement 
Non-standard

Guides
Using CSS anchor positioning

An introductory guide to fundamental anchor positioning concepts, including associating, positioning, and sizing elements relative to their anchor.

Handling overflow: try fallbacks and conditional hiding

A guide to the mechanisms CSS anchor positioning provides to prevent anchor-positioned elements from overflowing their containing elements or the viewport, including position try fallback options and conditionally hiding elements.

Related concepts
CSS logical properties and values module:

inset-block-start
inset-block-end
inset-inline-start
inset-inline-end
inset-block
inset-inline
inset shorthand
inline-size
min-block-size
min-inline-size
block-size
max-block-size
max-inline-size
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
Inset properties glossary term


CSS positioned layout module:

top
left
bottom
right


CSS box model module:

width
height
min-width
min-height
max-width
max-height
margin
margin-bottom
margin-left
margin-right
margin-top


CSS box alignment module:

align-items
align-self
justify-items
justify-self
place-items
place-self


SpecificationsSpecificationCSS Anchor Positioning See also
CSS scroll anchoring module
Learn: CSS positioning
CSS logical properties and values module
Learn: Sizing items in CSS\n\nCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
In addition, the specification provides CSS-only mechanisms to:

Specify a set of alternative positions for an anchored element; when the default rendering position causes it to overflow its containing block and/or be rendered offscreen, the browser will try rendering the anchored element in the alternative positions instead.
Declare conditions under which anchor-positioned elements should be hidden, in situations where it is not appropriate to tether them to anchor elements.
ReferenceProperties
anchor-name
position-anchor
position-area
position-try-fallbacks
position-try-order
position-try shorthand
position-visibility


Note:
The CSS anchor positioning module introduces the anchor-scope property that has not yet been implemented.
At-rules and descriptors
@position-try
Functions
anchor()
anchor-size()
Data types and values
anchor-center
<anchor-side>
<anchor-size>
<position-area>
<try-size>
<try-tactic>
HTML attributes
anchor 
Non-standard

Interfaces
CSSPositionTryDescriptors
CSSPositionTryRule
HTMLElement.anchorElement 
Non-standard

Guides
Using CSS anchor positioning

An introductory guide to fundamental anchor positioning concepts, including associating, positioning, and sizing elements relative to their anchor.

Handling overflow: try fallbacks and conditional hiding

A guide to the mechanisms CSS anchor positioning provides to prevent anchor-positioned elements from overflowing their containing elements or the viewport, including position try fallback options and conditionally hiding elements.

Related concepts
CSS logical properties and values module:

inset-block-start
inset-block-end
inset-inline-start
inset-inline-end
inset-block
inset-inline
inset shorthand
inline-size
min-block-size
min-inline-size
block-size
max-block-size
max-inline-size
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
Inset properties glossary term


CSS positioned layout module:

top
left
bottom
right


CSS box model module:

width
height
min-width
min-height
max-width
max-height
margin
margin-bottom
margin-left
margin-right
margin-top


CSS box alignment module:

align-items
align-self
justify-items
justify-self
place-items
place-self


SpecificationsSpecificationCSS Anchor Positioning See also
CSS scroll anchoring module
Learn: CSS positioning
CSS logical properties and values module
Learn: Sizing items in CSS
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nCSS anchor positioningThe CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound.
In addition, the specification provides CSS-only mechanisms to:

Specify a set of alternative positions for an anchored element; when the default rendering position causes it to overflow its containing block and/or be rendered offscreen, the browser will try rendering the anchored element in the alternative positions instead.
Declare conditions under which anchor-positioned elements should be hidden, in situations where it is not appropriate to tether them to anchor elements.
ReferenceProperties
anchor-name
position-anchor
position-area
position-try-fallbacks
position-try-order
position-try shorthand
position-visibility


Note:
The CSS anchor positioning module introduces the anchor-scope property that has not yet been implemented.
At-rules and descriptors
@position-try
Functions
anchor()
anchor-size()
Data types and values
anchor-center
<anchor-side>
<anchor-size>
<position-area>
<try-size>
<try-tactic>
HTML attributes
anchor 
Non-standard

Interfaces
CSSPositionTryDescriptors
CSSPositionTryRule
HTMLElement.anchorElement 
Non-standard

Guides
Using CSS anchor positioning

An introductory guide to fundamental anchor positioning concepts, including associating, positioning, and sizing elements relative to their anchor.

Handling overflow: try fallbacks and conditional hiding

A guide to the mechanisms CSS anchor positioning provides to prevent anchor-positioned elements from overflowing their containing elements or the viewport, including position try fallback options and conditionally hiding elements.

Related concepts
CSS logical properties and values module:

inset-block-start
inset-block-end
inset-inline-start
inset-inline-end
inset-block
inset-inline
inset shorthand
inline-size
min-block-size
min-inline-size
block-size
max-block-size
max-inline-size
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
Inset properties glossary term


CSS positioned layout module:

top
left
bottom
right


CSS box model module:

width
height
min-width
min-height
max-width
max-height
margin
margin-bottom
margin-left
margin-right
margin-top


CSS box alignment module:

align-items
align-self
justify-items
justify-self
place-items
place-self


SpecificationsSpecificationCSS Anchor Positioning See also
CSS scroll anchoring module
Learn: CSS positioning
CSS logical properties and values module
Learn: Sizing items in CSS
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).The view transition processLet's walk through the process by which a view transition works:


A view transition is triggered. How this is done depends on the type of view transition:

In the case of same-document transitions (SPAs), a view transition is triggered by passing the function that would trigger the view change DOM update as a callback to the document.startViewTransition() method.
In the case of cross-document transitions (MPAs), a view transition is triggered by initiating navigation to a new document. Both the current and destination documents of the navigation need to be on the same origin, and opt-in to the view transition by including a @view-transition at rule in their CSS with a navigation descriptor of auto.

Note:
An active view transition has an associated ViewTransition instance (for example, returned by startViewTransition() in the case of same-document (SPA) transitions). The ViewTransition object includes several promises, allowing you to run code in response to different parts of the view transition process being reached. See Controlling view transitions with JavaScript for more information.





On the current (old page) view, the API captures snapshots of elements that have a view-transition-name declared on them.


The view change occurs:


In the case of same-document transitions (SPAs), the callback passed to startViewTransition() is invoked, which causes the DOM to change.
When the callback has run successfully, the ViewTransition.updateCallbackDone promise fulfills, allowing you to respond to the DOM updating.


In the case of cross-document transitions (MPAs), the navigation occurs between the current and destination documents.




The API captures snapshots from the new view as a live representation.
At this point, the view transition is about to run, and the ViewTransition.ready promise fulfills, allowing you to respond by running a custom JavaScript animation instead of the default, for example.


The old page snapshots animate "out", while the new view snapshots animate "in". By default, the old view snapshots animate from opacity 1 to 0, and the new view snapshots animate from opacity 0 to 1, which creates a cross-fade.


When the transition animations have reached their end states, the ViewTransition.finished promise fulfills, allowing you to respond.



Note:
If the document's page visibility state is hidden (for example if the document is obscured by a window, the browser is minimized, or another browser tab is active) during a document.startViewTransition() call, the view transition is skipped entirely.
The view transition pseudo-element treeTo handle creating the outbound and inbound transition animations, the API constructs a pseudo-element tree with the following structure:
::view-transition
└─ ::view-transition-group(root)
  └─ ::view-transition-image-pair(root)
      ├─ ::view-transition-old(root)
      └─ ::view-transition-new(root)


Note:
A ::view-transition-group subtree is created for every captured view-transition-name.

In the case of same-document transitions (SPAs), the pseudo-element tree is made available in the document. In the case of cross-document transitions (MPAs), the pseudo-element tree is made available in the destination document only.
The most interesting parts of the tree structure are as follows:


::view-transition is the root of view transitions overlay, which contains all view transition snapshot groups and sits over the top of all other page content.


A ::view-transition-group acts as a container for each view transition snapshot group. The root argument specifies the default snapshot group — the view transition animation will apply to the snapshot whose view-transition-name is root. By default, this is the :root element, because the default browser styles define this:
css:root {
  view-transition-name: root;
}

Be aware however that page authors can change this by unsetting the above, and setting view-transition-name: root on a different element.


::view-transition-old targets the static snapshot of the old page element, and ::view-transition-new targets the live snapshot of the new page element. Both of these render as replaced content, in the same manner as an <img> or <video>, meaning that they can be styled with handy properties like object-fit and object-position.



Note:
It is possible to target different DOM elements with different custom view transition animations by setting a different view-transition-name on each one. In such cases, a ::view-transition-group is created for each one. See Different animations for different elements for an example.


Note:
As you'll see later, to customize the outbound and inbound animations you need to target the ::view-transition-old and ::view-transition-new pseudo-elements with your animations, respectively.
Creating a basic view transitionThis section illustrates how to create a basic view transition, in both the SPA and MPA case.Basic SPA view transitionAs an example, an SPA may include functionality to fetch new content and update the DOM in response to an event of some kind, such as a navigation link being clicked or an update being pushed from the server. In our View Transitions SPA demo we've simplified this to a displayNewImage() function that shows a new full-size image based on the thumbnail that was clicked. We've encapsulated this inside an updateView() function that only calls the View Transition API if the browser supports it:
jsfunction updateView(event) {
  // Handle the difference in whether the event is fired on the <a> or the <img>
  const targetIdentifier = event.target.firstChild || event.target;

  const displayNewImage = () => {
    const mainSrc = `${targetIdentifier.src.split("_th.jpg")[0]}.jpg`;
    galleryImg.src = mainSrc;
    galleryCaption.textContent = targetIdentifier.alt;
  };

  // Fallback for browsers that don't support View Transitions:
  if (!document.startViewTransition) {
    displayNewImage();
    return;
  }

  // With View Transitions:
  const transition = document.startViewTransition(() => displayNewImage());
}

This code is enough to handle the transition between displayed images. Supporting browsers will show the change from old to new images and captions as a smooth cross-fade (the default view transition). It will still work in non-supporting browsers but without the nice animation.Basic MPA view transitionWhen creating a cross-document (MPA) view transition, the process is even simpler than for SPAs. No JavaScript is required, as the view update is triggered by a cross-document, same-origin navigation rather than a JavaScript-initiated DOM change. To enable a basic MPA view transition, you need to specify a @view-transition at-rule in the CSS for both the current and destination documents to opt them in, like so:
css@view-transition {
  navigation: auto;
}

Our View Transitions MPA demo shows this at-rule in action, and additionally demonstrates how to customize the outbound and inbound animations of the view transition.

Note:
Currently MPA view transitions can only be created between same-origin documents, but this restriction may be relaxed in future implementations.
Customizing your animationsThe View Transitions pseudo-elements have default CSS Animations applied (which are detailed in their reference pages).
Most appearance transitions are given a default smooth cross-fade animation, as mentioned above. There are some exceptions:

height and width transitions have a smooth scaling animation applied.
position and transform transitions have a smooth movement animation applied.

You can modify the default animations in any way you want using regular CSS — target the "from" animation with ::view-transition-old, and the "to" animation with ::view-transition-new.
For example, to change the speed of both:
css::view-transition-old(root),
::view-transition-new(root) {
  animation-duration: 0.5s;
}

It is recommended that you target the ::view-transition-group() with such styles in cases where you want to apply them to ::view-transition-old() and ::view-transition-new(). Because of the pseudo-element hierarchy and default user-agent styling, the styles will be inherited by both. For example:
css::view-transition-group(root) {
  animation-duration: 0.5s;
}


Note:
This is also a good option for safeguarding your code — ::view-transition-group() also animates and you could end up with different durations for the group/image-pair pseudo-elements versus the old and new pseudo-elements.

In the case of cross-document (MPA) transitions, the pseudo-elements need to be included in the destination document only for the view transition to work. If you want to use the view transition in both directions, you'll need to include it in both, of course.
Our View Transitions MPA demo includes the above CSS, but takes the customization a step further, defining custom animations and applying them to the ::view-transition-old(root) and ::view-transition-new(root) pseudo-elements. The result is that the default cross-fade transition is swapped out for a "swipe up" transition when navigation occurs:
css/* Create a custom animation */

@keyframes move-out {
  from {
    transform: translateY(0%);
  }

  to {
    transform: translateY(-100%);
  }
}

@keyframes move-in {
  from {
    transform: translateY(100%);
  }

  to {
    transform: translateY(0%);
  }
}

/* Apply the custom animation to the old and new page states */

::view-transition-old(root) {
  animation: 0.4s ease-in both move-out;
}

::view-transition-new(root) {
  animation: 0.4s ease-in both move-in;
}
Different animations for different elementsBy default, all of the different elements that change during the view update are transitioned using the same animation. If you want some elements to animate differently from the default root animation, you can separate them out using the view-transition-name property. For example, in our View Transitions SPA demo the <figcaption> elements are given a view-transition-name of figure-caption to separate them from the rest of the page in terms of view transitions:
cssfigcaption {
  view-transition-name: figure-caption;
}

With this CSS applied, the generated pseudo-element tree will now look like this:
::view-transition
├─ ::view-transition-group(root)
│ └─ ::view-transition-image-pair(root)
│     ├─ ::view-transition-old(root)
│     └─ ::view-transition-new(root)
└─ ::view-transition-group(figure-caption)
  └─ ::view-transition-image-pair(figure-caption)
      ├─ ::view-transition-old(figure-caption)
      └─ ::view-transition-new(figure-caption)

The existence of the second set of pseudo-elements allows separate view transition styling to be applied just to the <figcaption>. The different old and new view captures are handled separately from one another.

Note:
The value of view-transition-name can be anything you want except for none — the none value specifically means that the element will not participate in a view transition.
view-transition-name values must also be unique. If two rendered elements have the same view-transition-name at the same time, ViewTransition.ready will reject and the transition will be skipped.

The following code applies a custom animation just to the <figcaption>:
css@keyframes grow-x {
  from {
    transform: scaleX(0);
  }
  to {
    transform: scaleX(1);
  }
}

@keyframes shrink-x {
  from {
    transform: scaleX(1);
  }
  to {
    transform: scaleX(0);
  }
}

::view-transition-group(figure-caption) {
  height: auto;
  right: 0;
  left: auto;
  transform-origin: right center;
}

::view-transition-old(figure-caption) {
  animation: 0.25s linear both shrink-x;
}

::view-transition-new(figure-caption) {
  animation: 0.25s 0.25s linear both grow-x;
}

Here we've created a custom CSS animation and applied it to the ::view-transition-old(figure-caption) and ::view-transition-new(figure-caption) pseudo-elements. We've also added a number of other styles to both to keep them in the same place and stop the default styling from interfering with our custom animations.

Note:
You can use * as the identifier in a pseudo-element to target all snapshot pseudo-elements, regardless of what name they have. For example:
css::view-transition-group(*) {
  animation-duration: 2s;
}

Taking advantage of the default animation stylesNote that we also discovered another transition option that is simpler and produced a nicer result than the above. Our final <figcaption> view transition ended up looking like this:
cssfigcaption {
  view-transition-name: figure-caption;
}

::view-transition-group(figure-caption) {
  height: 100%;
}

This works because, by default, ::view-transition-group transitions width and height between the old and new views with a smooth scale. We just needed to set a fixed height on both states to make it work.

Note: Smooth transitions with the View Transition API contains several other customization examples.
Controlling view transitions with JavaScriptA view transition has an associated ViewTransition object instance, which contains several promise members allowing you to run JavaScript in response to different states of the transition being reached. For example, ViewTransition.ready fulfills once the pseudo-element tree is created and the animation is about to start, whereas ViewTransition.finished fulfills once the animation is finished, and the new page view is visible and interactive to the user.
The ViewTransition can be accessed like so:


In the case of same-document (SPA) transitions, the document.startViewTransition() method returns the ViewTransition associated with the transition.


In the case of cross-document (MPA) transitions:

A pageswap event is fired when a document is about to be unloaded due to a navigation. Its event object (PageSwapEvent) provides access to the ViewTransition via the PageSwapEvent.viewTransition property, as well as a NavigationActivation via PageSwapEvent.activation containing the navigation type and current and destination document history entries.

Note:
If the navigation has a cross-origin URL anywhere in the redirect chain, the activation property returns null.


A pagereveal event is fired when a document is first rendered, either when loading a fresh document from the network or activating a document (either from back/forward cache (bfcache) or prerender). Its event object (PageRevealEvent) provides access to the ViewTransition via the PageRevealEvent.viewTransition property.



Let's have a look at some example code to show how these features could be used.A JavaScript-powered custom same-document (SPA) transitionThe following JavaScript could be used to create a circular reveal view transition emanating from the position of the user's cursor on click, with animation provided by the Web Animations API.
js// Store the last click event
let lastClick;
addEventListener("click", (event) => (lastClick = event));

function spaNavigate(data) {
  // Fallback for browsers that don't support this API:
  if (!document.startViewTransition) {
    updateTheDOMSomehow(data);
    return;
  }

  // Get the click position, or fallback to the middle of the screen
  const x = lastClick?.clientX ?? innerWidth / 2;
  const y = lastClick?.clientY ?? innerHeight / 2;
  // Get the distance to the furthest corner
  const endRadius = Math.hypot(
    Math.max(x, innerWidth - x),
    Math.max(y, innerHeight - y),
  );

  // Create a transition:
  const transition = document.startViewTransition(() => {
    updateTheDOMSomehow(data);
  });

  // Wait for the pseudo-elements to be created:
  transition.ready.then(() => {
    // Animate the root's new view
    document.documentElement.animate(
      {
        clipPath: [
          `circle(0 at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ],
      },
      {
        duration: 500,
        easing: "ease-in",
        // Specify which pseudo-element to animate
        pseudoElement: "::view-transition-new(root)",
      },
    );
  });
}

This animation also requires the following CSS, to turn off the default CSS animation and stop the old and new view states from blending in any way (the new state "wipes" right over the top of the old state, rather than transitioning in):
css::view-transition-image-pair(root) {
  isolation: auto;
}

::view-transition-old(root),
::view-transition-new(root) {
  animation: none;
  mix-blend-mode: normal;
  display: block;
}
A JavaScript-powered custom cross-document (MPA) transitionThe List of Chrome DevRel team members demo provides a basic set of team profile pages, and demonstrates how to use the pageswap and pagereveal events to customize the outgoing and inbound animations of a cross-document view transition based on the "from" and "to" URLs.
The pageswap event listener looks as follows. This sets view transition names on the elements on the outbound page that link to the profile pages. When navigating from the home page to a profile page, custom animations are provided only for the linked element that is clicked in each case.
jswindow.addEventListener("pageswap", async (e) => {
  // Only run this if an active view transition exists
  if (e.viewTransition) {
    const currentUrl = e.activation.from?.url
      ? new URL(e.activation.from.url)
      : null;
    const targetUrl = new URL(e.activation.entry.url);

    // Going from profile page to homepage
    // ~> The big img and title are the ones!
    if (isProfilePage(currentUrl) && isHomePage(targetUrl)) {
      // Set view-transition-name values on the elements to animate
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "name";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "avatar";

      // Remove view-transition-names after snapshots have been taken
      // Stops naming conflicts resulting from the page state persisting in BFCache
      await e.viewTransition.finished;
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "none";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "none";
    }

    // Going to profile page
    // ~> The clicked items are the ones!
    if (isProfilePage(targetUrl)) {
      const profile = extractProfileNameFromUrl(targetUrl);

      // Set view-transition-name values on the elements to animate
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "name";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "avatar";

      // Remove view-transition-names after snapshots have been taken
      // Stops naming conflicts resulting from the page state persisting in BFCache
      await e.viewTransition.finished;
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "none";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "none";
    }
  }
});


Note:
We remove the view-transition-name values after snapshots have been taken in each case. If we left them set, they would persist in the page state saved in the bfcache upon navigation. If the back button was then pressed, the pagereveal event handler of the page being navigated back to would then attempt to set the same view-transition-name values on different elements. If multiple elements have the same view-transition-name set, the view transition is skipped.

The pagereveal event listener looks as follows. This works in a similar way to the pageswap event listener, although bear in mind that here we are customizing the "to" animation, for page elements on the new page.
jswindow.addEventListener("pagereveal", async (e) => {
  // If the "from" history entry does not exist, return
  if (!navigation.activation.from) return;

  // Only run this if an active view transition exists
  if (e.viewTransition) {
    const fromUrl = new URL(navigation.activation.from.url);
    const currentUrl = new URL(navigation.activation.entry.url);

    // Went from profile page to homepage
    // ~> Set VT names on the relevant list item
    if (isProfilePage(fromUrl) && isHomePage(currentUrl)) {
      const profile = extractProfileNameFromUrl(fromUrl);

      // Set view-transition-name values on the elements to animate
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "name";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "avatar";

      // Remove names after snapshots have been taken
      // so that we're ready for the next navigation
      await e.viewTransition.ready;
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "none";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "none";
    }

    // Went to profile page
    // ~> Set VT names on the main title and image
    if (isProfilePage(currentUrl)) {
      // Set view-transition-name values on the elements to animate
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "name";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "avatar";

      // Remove names after snapshots have been taken
      // so that we're ready for the next navigation
      await e.viewTransition.ready;
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "none";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "none";
    }
  }
});
Stabilizing page state to make cross-document transitions consistentBefore running a cross-document transition, you ideally want to wait until the state of the page stabilizes, relying on render blocking to ensure that:

Critical styles are loaded and applied.
Critical scripts are loaded and run.
The HTML visible for the user's initial view of the page has been parsed, so it renders consistently.

Styles are render blocked by default, and scripts can be render blocked using the blocking="render" attribute.
To ensure that your initial HTML has been parsed and will always render consistently before the transition animation runs, you can use <link rel="expect">. In this element, you include the following attributes:

rel="expect" to indicate that you want to use this <link> element to render block some HTML on the page.
href="#element-id" to indicate the ID of the element you want to render block.
blocking="render" to render block the specified HTML.

Let's explore what this looks like with an example HTML document:
html<!doctype html>
<html lang="en">
  <head>
    <!-- This will be render-blocking by default -->
    <link rel="stylesheet" href="style.css" />

    <!-- Marking critical scripts as render blocking will
         ensure they're run before the view transition is activated -->
    <script async href="layout.js" blocking="render"></script>

    <!-- Use rel="expect" and blocking="render" to ensure the
         #lead-content element is visible and fully parsed before
         activating the transition -->
    <link rel="expect" href="#lead-content" blocking="render" />
  </head>
  <body>
    <h1>Page title</h1>
    <nav>...</nav>
    <div id="lead-content">
      <section id="first-section">The first section</section>
      <section>The second section</section>
    </div>
  </body>
</html>

The result is that document rendering is blocked until the lead content <div> has been parsed, ensuring a consistent view transition.
You can also specify a media attribute on <link rel="expect"> elements. For example, you might want to block rendering on a smaller amount of content when loading the page on a narrow-screen device, than on a wide-screen device. This makes sense — on a mobile, less content will be visible when the page first loads than in the case of a desktop.
This could be achieved with the following HTML:
html<link
  rel="expect"
  href="#lead-content"
  blocking="render"
  media="screen and (min-width: 641px)" />
<link
  rel="expect"
  href="#first-section"
  blocking="render"
  media="screen and (max-width: 640px)" />\n\nUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).The view transition processLet's walk through the process by which a view transition works:


A view transition is triggered. How this is done depends on the type of view transition:

In the case of same-document transitions (SPAs), a view transition is triggered by passing the function that would trigger the view change DOM update as a callback to the document.startViewTransition() method.
In the case of cross-document transitions (MPAs), a view transition is triggered by initiating navigation to a new document. Both the current and destination documents of the navigation need to be on the same origin, and opt-in to the view transition by including a @view-transition at rule in their CSS with a navigation descriptor of auto.

Note:
An active view transition has an associated ViewTransition instance (for example, returned by startViewTransition() in the case of same-document (SPA) transitions). The ViewTransition object includes several promises, allowing you to run code in response to different parts of the view transition process being reached. See Controlling view transitions with JavaScript for more information.





On the current (old page) view, the API captures snapshots of elements that have a view-transition-name declared on them.


The view change occurs:


In the case of same-document transitions (SPAs), the callback passed to startViewTransition() is invoked, which causes the DOM to change.
When the callback has run successfully, the ViewTransition.updateCallbackDone promise fulfills, allowing you to respond to the DOM updating.


In the case of cross-document transitions (MPAs), the navigation occurs between the current and destination documents.




The API captures snapshots from the new view as a live representation.
At this point, the view transition is about to run, and the ViewTransition.ready promise fulfills, allowing you to respond by running a custom JavaScript animation instead of the default, for example.


The old page snapshots animate "out", while the new view snapshots animate "in". By default, the old view snapshots animate from opacity 1 to 0, and the new view snapshots animate from opacity 0 to 1, which creates a cross-fade.


When the transition animations have reached their end states, the ViewTransition.finished promise fulfills, allowing you to respond.



Note:
If the document's page visibility state is hidden (for example if the document is obscured by a window, the browser is minimized, or another browser tab is active) during a document.startViewTransition() call, the view transition is skipped entirely.
The view transition pseudo-element treeTo handle creating the outbound and inbound transition animations, the API constructs a pseudo-element tree with the following structure:
::view-transition
└─ ::view-transition-group(root)
  └─ ::view-transition-image-pair(root)
      ├─ ::view-transition-old(root)
      └─ ::view-transition-new(root)


Note:
A ::view-transition-group subtree is created for every captured view-transition-name.

In the case of same-document transitions (SPAs), the pseudo-element tree is made available in the document. In the case of cross-document transitions (MPAs), the pseudo-element tree is made available in the destination document only.
The most interesting parts of the tree structure are as follows:


::view-transition is the root of view transitions overlay, which contains all view transition snapshot groups and sits over the top of all other page content.


A ::view-transition-group acts as a container for each view transition snapshot group. The root argument specifies the default snapshot group — the view transition animation will apply to the snapshot whose view-transition-name is root. By default, this is the :root element, because the default browser styles define this:
css:root {
  view-transition-name: root;
}

Be aware however that page authors can change this by unsetting the above, and setting view-transition-name: root on a different element.


::view-transition-old targets the static snapshot of the old page element, and ::view-transition-new targets the live snapshot of the new page element. Both of these render as replaced content, in the same manner as an <img> or <video>, meaning that they can be styled with handy properties like object-fit and object-position.



Note:
It is possible to target different DOM elements with different custom view transition animations by setting a different view-transition-name on each one. In such cases, a ::view-transition-group is created for each one. See Different animations for different elements for an example.


Note:
As you'll see later, to customize the outbound and inbound animations you need to target the ::view-transition-old and ::view-transition-new pseudo-elements with your animations, respectively.
Creating a basic view transitionThis section illustrates how to create a basic view transition, in both the SPA and MPA case.Basic SPA view transitionAs an example, an SPA may include functionality to fetch new content and update the DOM in response to an event of some kind, such as a navigation link being clicked or an update being pushed from the server. In our View Transitions SPA demo we've simplified this to a displayNewImage() function that shows a new full-size image based on the thumbnail that was clicked. We've encapsulated this inside an updateView() function that only calls the View Transition API if the browser supports it:
jsfunction updateView(event) {
  // Handle the difference in whether the event is fired on the <a> or the <img>
  const targetIdentifier = event.target.firstChild || event.target;

  const displayNewImage = () => {
    const mainSrc = `${targetIdentifier.src.split("_th.jpg")[0]}.jpg`;
    galleryImg.src = mainSrc;
    galleryCaption.textContent = targetIdentifier.alt;
  };

  // Fallback for browsers that don't support View Transitions:
  if (!document.startViewTransition) {
    displayNewImage();
    return;
  }

  // With View Transitions:
  const transition = document.startViewTransition(() => displayNewImage());
}

This code is enough to handle the transition between displayed images. Supporting browsers will show the change from old to new images and captions as a smooth cross-fade (the default view transition). It will still work in non-supporting browsers but without the nice animation.Basic MPA view transitionWhen creating a cross-document (MPA) view transition, the process is even simpler than for SPAs. No JavaScript is required, as the view update is triggered by a cross-document, same-origin navigation rather than a JavaScript-initiated DOM change. To enable a basic MPA view transition, you need to specify a @view-transition at-rule in the CSS for both the current and destination documents to opt them in, like so:
css@view-transition {
  navigation: auto;
}

Our View Transitions MPA demo shows this at-rule in action, and additionally demonstrates how to customize the outbound and inbound animations of the view transition.

Note:
Currently MPA view transitions can only be created between same-origin documents, but this restriction may be relaxed in future implementations.
Customizing your animationsThe View Transitions pseudo-elements have default CSS Animations applied (which are detailed in their reference pages).
Most appearance transitions are given a default smooth cross-fade animation, as mentioned above. There are some exceptions:

height and width transitions have a smooth scaling animation applied.
position and transform transitions have a smooth movement animation applied.

You can modify the default animations in any way you want using regular CSS — target the "from" animation with ::view-transition-old, and the "to" animation with ::view-transition-new.
For example, to change the speed of both:
css::view-transition-old(root),
::view-transition-new(root) {
  animation-duration: 0.5s;
}

It is recommended that you target the ::view-transition-group() with such styles in cases where you want to apply them to ::view-transition-old() and ::view-transition-new(). Because of the pseudo-element hierarchy and default user-agent styling, the styles will be inherited by both. For example:
css::view-transition-group(root) {
  animation-duration: 0.5s;
}


Note:
This is also a good option for safeguarding your code — ::view-transition-group() also animates and you could end up with different durations for the group/image-pair pseudo-elements versus the old and new pseudo-elements.

In the case of cross-document (MPA) transitions, the pseudo-elements need to be included in the destination document only for the view transition to work. If you want to use the view transition in both directions, you'll need to include it in both, of course.
Our View Transitions MPA demo includes the above CSS, but takes the customization a step further, defining custom animations and applying them to the ::view-transition-old(root) and ::view-transition-new(root) pseudo-elements. The result is that the default cross-fade transition is swapped out for a "swipe up" transition when navigation occurs:
css/* Create a custom animation */

@keyframes move-out {
  from {
    transform: translateY(0%);
  }

  to {
    transform: translateY(-100%);
  }
}

@keyframes move-in {
  from {
    transform: translateY(100%);
  }

  to {
    transform: translateY(0%);
  }
}

/* Apply the custom animation to the old and new page states */

::view-transition-old(root) {
  animation: 0.4s ease-in both move-out;
}

::view-transition-new(root) {
  animation: 0.4s ease-in both move-in;
}
Different animations for different elementsBy default, all of the different elements that change during the view update are transitioned using the same animation. If you want some elements to animate differently from the default root animation, you can separate them out using the view-transition-name property. For example, in our View Transitions SPA demo the <figcaption> elements are given a view-transition-name of figure-caption to separate them from the rest of the page in terms of view transitions:
cssfigcaption {
  view-transition-name: figure-caption;
}

With this CSS applied, the generated pseudo-element tree will now look like this:
::view-transition
├─ ::view-transition-group(root)
│ └─ ::view-transition-image-pair(root)
│     ├─ ::view-transition-old(root)
│     └─ ::view-transition-new(root)
└─ ::view-transition-group(figure-caption)
  └─ ::view-transition-image-pair(figure-caption)
      ├─ ::view-transition-old(figure-caption)
      └─ ::view-transition-new(figure-caption)

The existence of the second set of pseudo-elements allows separate view transition styling to be applied just to the <figcaption>. The different old and new view captures are handled separately from one another.

Note:
The value of view-transition-name can be anything you want except for none — the none value specifically means that the element will not participate in a view transition.
view-transition-name values must also be unique. If two rendered elements have the same view-transition-name at the same time, ViewTransition.ready will reject and the transition will be skipped.

The following code applies a custom animation just to the <figcaption>:
css@keyframes grow-x {
  from {
    transform: scaleX(0);
  }
  to {
    transform: scaleX(1);
  }
}

@keyframes shrink-x {
  from {
    transform: scaleX(1);
  }
  to {
    transform: scaleX(0);
  }
}

::view-transition-group(figure-caption) {
  height: auto;
  right: 0;
  left: auto;
  transform-origin: right center;
}

::view-transition-old(figure-caption) {
  animation: 0.25s linear both shrink-x;
}

::view-transition-new(figure-caption) {
  animation: 0.25s 0.25s linear both grow-x;
}

Here we've created a custom CSS animation and applied it to the ::view-transition-old(figure-caption) and ::view-transition-new(figure-caption) pseudo-elements. We've also added a number of other styles to both to keep them in the same place and stop the default styling from interfering with our custom animations.

Note:
You can use * as the identifier in a pseudo-element to target all snapshot pseudo-elements, regardless of what name they have. For example:
css::view-transition-group(*) {
  animation-duration: 2s;
}

Taking advantage of the default animation stylesNote that we also discovered another transition option that is simpler and produced a nicer result than the above. Our final <figcaption> view transition ended up looking like this:
cssfigcaption {
  view-transition-name: figure-caption;
}

::view-transition-group(figure-caption) {
  height: 100%;
}

This works because, by default, ::view-transition-group transitions width and height between the old and new views with a smooth scale. We just needed to set a fixed height on both states to make it work.

Note: Smooth transitions with the View Transition API contains several other customization examples.
Controlling view transitions with JavaScriptA view transition has an associated ViewTransition object instance, which contains several promise members allowing you to run JavaScript in response to different states of the transition being reached. For example, ViewTransition.ready fulfills once the pseudo-element tree is created and the animation is about to start, whereas ViewTransition.finished fulfills once the animation is finished, and the new page view is visible and interactive to the user.
The ViewTransition can be accessed like so:


In the case of same-document (SPA) transitions, the document.startViewTransition() method returns the ViewTransition associated with the transition.


In the case of cross-document (MPA) transitions:

A pageswap event is fired when a document is about to be unloaded due to a navigation. Its event object (PageSwapEvent) provides access to the ViewTransition via the PageSwapEvent.viewTransition property, as well as a NavigationActivation via PageSwapEvent.activation containing the navigation type and current and destination document history entries.

Note:
If the navigation has a cross-origin URL anywhere in the redirect chain, the activation property returns null.


A pagereveal event is fired when a document is first rendered, either when loading a fresh document from the network or activating a document (either from back/forward cache (bfcache) or prerender). Its event object (PageRevealEvent) provides access to the ViewTransition via the PageRevealEvent.viewTransition property.



Let's have a look at some example code to show how these features could be used.A JavaScript-powered custom same-document (SPA) transitionThe following JavaScript could be used to create a circular reveal view transition emanating from the position of the user's cursor on click, with animation provided by the Web Animations API.
js// Store the last click event
let lastClick;
addEventListener("click", (event) => (lastClick = event));

function spaNavigate(data) {
  // Fallback for browsers that don't support this API:
  if (!document.startViewTransition) {
    updateTheDOMSomehow(data);
    return;
  }

  // Get the click position, or fallback to the middle of the screen
  const x = lastClick?.clientX ?? innerWidth / 2;
  const y = lastClick?.clientY ?? innerHeight / 2;
  // Get the distance to the furthest corner
  const endRadius = Math.hypot(
    Math.max(x, innerWidth - x),
    Math.max(y, innerHeight - y),
  );

  // Create a transition:
  const transition = document.startViewTransition(() => {
    updateTheDOMSomehow(data);
  });

  // Wait for the pseudo-elements to be created:
  transition.ready.then(() => {
    // Animate the root's new view
    document.documentElement.animate(
      {
        clipPath: [
          `circle(0 at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ],
      },
      {
        duration: 500,
        easing: "ease-in",
        // Specify which pseudo-element to animate
        pseudoElement: "::view-transition-new(root)",
      },
    );
  });
}

This animation also requires the following CSS, to turn off the default CSS animation and stop the old and new view states from blending in any way (the new state "wipes" right over the top of the old state, rather than transitioning in):
css::view-transition-image-pair(root) {
  isolation: auto;
}

::view-transition-old(root),
::view-transition-new(root) {
  animation: none;
  mix-blend-mode: normal;
  display: block;
}
A JavaScript-powered custom cross-document (MPA) transitionThe List of Chrome DevRel team members demo provides a basic set of team profile pages, and demonstrates how to use the pageswap and pagereveal events to customize the outgoing and inbound animations of a cross-document view transition based on the "from" and "to" URLs.
The pageswap event listener looks as follows. This sets view transition names on the elements on the outbound page that link to the profile pages. When navigating from the home page to a profile page, custom animations are provided only for the linked element that is clicked in each case.
jswindow.addEventListener("pageswap", async (e) => {
  // Only run this if an active view transition exists
  if (e.viewTransition) {
    const currentUrl = e.activation.from?.url
      ? new URL(e.activation.from.url)
      : null;
    const targetUrl = new URL(e.activation.entry.url);

    // Going from profile page to homepage
    // ~> The big img and title are the ones!
    if (isProfilePage(currentUrl) && isHomePage(targetUrl)) {
      // Set view-transition-name values on the elements to animate
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "name";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "avatar";

      // Remove view-transition-names after snapshots have been taken
      // Stops naming conflicts resulting from the page state persisting in BFCache
      await e.viewTransition.finished;
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "none";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "none";
    }

    // Going to profile page
    // ~> The clicked items are the ones!
    if (isProfilePage(targetUrl)) {
      const profile = extractProfileNameFromUrl(targetUrl);

      // Set view-transition-name values on the elements to animate
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "name";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "avatar";

      // Remove view-transition-names after snapshots have been taken
      // Stops naming conflicts resulting from the page state persisting in BFCache
      await e.viewTransition.finished;
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "none";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "none";
    }
  }
});


Note:
We remove the view-transition-name values after snapshots have been taken in each case. If we left them set, they would persist in the page state saved in the bfcache upon navigation. If the back button was then pressed, the pagereveal event handler of the page being navigated back to would then attempt to set the same view-transition-name values on different elements. If multiple elements have the same view-transition-name set, the view transition is skipped.

The pagereveal event listener looks as follows. This works in a similar way to the pageswap event listener, although bear in mind that here we are customizing the "to" animation, for page elements on the new page.
jswindow.addEventListener("pagereveal", async (e) => {
  // If the "from" history entry does not exist, return
  if (!navigation.activation.from) return;

  // Only run this if an active view transition exists
  if (e.viewTransition) {
    const fromUrl = new URL(navigation.activation.from.url);
    const currentUrl = new URL(navigation.activation.entry.url);

    // Went from profile page to homepage
    // ~> Set VT names on the relevant list item
    if (isProfilePage(fromUrl) && isHomePage(currentUrl)) {
      const profile = extractProfileNameFromUrl(fromUrl);

      // Set view-transition-name values on the elements to animate
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "name";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "avatar";

      // Remove names after snapshots have been taken
      // so that we're ready for the next navigation
      await e.viewTransition.ready;
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "none";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "none";
    }

    // Went to profile page
    // ~> Set VT names on the main title and image
    if (isProfilePage(currentUrl)) {
      // Set view-transition-name values on the elements to animate
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "name";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "avatar";

      // Remove names after snapshots have been taken
      // so that we're ready for the next navigation
      await e.viewTransition.ready;
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "none";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "none";
    }
  }
});
Stabilizing page state to make cross-document transitions consistentBefore running a cross-document transition, you ideally want to wait until the state of the page stabilizes, relying on render blocking to ensure that:

Critical styles are loaded and applied.
Critical scripts are loaded and run.
The HTML visible for the user's initial view of the page has been parsed, so it renders consistently.

Styles are render blocked by default, and scripts can be render blocked using the blocking="render" attribute.
To ensure that your initial HTML has been parsed and will always render consistently before the transition animation runs, you can use <link rel="expect">. In this element, you include the following attributes:

rel="expect" to indicate that you want to use this <link> element to render block some HTML on the page.
href="#element-id" to indicate the ID of the element you want to render block.
blocking="render" to render block the specified HTML.

Let's explore what this looks like with an example HTML document:
html<!doctype html>
<html lang="en">
  <head>
    <!-- This will be render-blocking by default -->
    <link rel="stylesheet" href="style.css" />

    <!-- Marking critical scripts as render blocking will
         ensure they're run before the view transition is activated -->
    <script async href="layout.js" blocking="render"></script>

    <!-- Use rel="expect" and blocking="render" to ensure the
         #lead-content element is visible and fully parsed before
         activating the transition -->
    <link rel="expect" href="#lead-content" blocking="render" />
  </head>
  <body>
    <h1>Page title</h1>
    <nav>...</nav>
    <div id="lead-content">
      <section id="first-section">The first section</section>
      <section>The second section</section>
    </div>
  </body>
</html>

The result is that document rendering is blocked until the lead content <div> has been parsed, ensuring a consistent view transition.
You can also specify a media attribute on <link rel="expect"> elements. For example, you might want to block rendering on a smaller amount of content when loading the page on a narrow-screen device, than on a wide-screen device. This makes sense — on a mobile, less content will be visible when the page first loads than in the case of a desktop.
This could be achieved with the following HTML:
html<link
  rel="expect"
  href="#lead-content"
  blocking="render"
  media="screen and (min-width: 641px)" />
<link
  rel="expect"
  href="#first-section"
  blocking="render"
  media="screen and (max-width: 640px)" />
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nUsing the View Transition APIThis article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA).The view transition processLet's walk through the process by which a view transition works:


A view transition is triggered. How this is done depends on the type of view transition:

In the case of same-document transitions (SPAs), a view transition is triggered by passing the function that would trigger the view change DOM update as a callback to the document.startViewTransition() method.
In the case of cross-document transitions (MPAs), a view transition is triggered by initiating navigation to a new document. Both the current and destination documents of the navigation need to be on the same origin, and opt-in to the view transition by including a @view-transition at rule in their CSS with a navigation descriptor of auto.

Note:
An active view transition has an associated ViewTransition instance (for example, returned by startViewTransition() in the case of same-document (SPA) transitions). The ViewTransition object includes several promises, allowing you to run code in response to different parts of the view transition process being reached. See Controlling view transitions with JavaScript for more information.





On the current (old page) view, the API captures snapshots of elements that have a view-transition-name declared on them.


The view change occurs:


In the case of same-document transitions (SPAs), the callback passed to startViewTransition() is invoked, which causes the DOM to change.
When the callback has run successfully, the ViewTransition.updateCallbackDone promise fulfills, allowing you to respond to the DOM updating.


In the case of cross-document transitions (MPAs), the navigation occurs between the current and destination documents.




The API captures snapshots from the new view as a live representation.
At this point, the view transition is about to run, and the ViewTransition.ready promise fulfills, allowing you to respond by running a custom JavaScript animation instead of the default, for example.


The old page snapshots animate "out", while the new view snapshots animate "in". By default, the old view snapshots animate from opacity 1 to 0, and the new view snapshots animate from opacity 0 to 1, which creates a cross-fade.


When the transition animations have reached their end states, the ViewTransition.finished promise fulfills, allowing you to respond.



Note:
If the document's page visibility state is hidden (for example if the document is obscured by a window, the browser is minimized, or another browser tab is active) during a document.startViewTransition() call, the view transition is skipped entirely.
The view transition pseudo-element treeTo handle creating the outbound and inbound transition animations, the API constructs a pseudo-element tree with the following structure:
::view-transition
└─ ::view-transition-group(root)
  └─ ::view-transition-image-pair(root)
      ├─ ::view-transition-old(root)
      └─ ::view-transition-new(root)


Note:
A ::view-transition-group subtree is created for every captured view-transition-name.

In the case of same-document transitions (SPAs), the pseudo-element tree is made available in the document. In the case of cross-document transitions (MPAs), the pseudo-element tree is made available in the destination document only.
The most interesting parts of the tree structure are as follows:


::view-transition is the root of view transitions overlay, which contains all view transition snapshot groups and sits over the top of all other page content.


A ::view-transition-group acts as a container for each view transition snapshot group. The root argument specifies the default snapshot group — the view transition animation will apply to the snapshot whose view-transition-name is root. By default, this is the :root element, because the default browser styles define this:
css:root {
  view-transition-name: root;
}

Be aware however that page authors can change this by unsetting the above, and setting view-transition-name: root on a different element.


::view-transition-old targets the static snapshot of the old page element, and ::view-transition-new targets the live snapshot of the new page element. Both of these render as replaced content, in the same manner as an <img> or <video>, meaning that they can be styled with handy properties like object-fit and object-position.



Note:
It is possible to target different DOM elements with different custom view transition animations by setting a different view-transition-name on each one. In such cases, a ::view-transition-group is created for each one. See Different animations for different elements for an example.


Note:
As you'll see later, to customize the outbound and inbound animations you need to target the ::view-transition-old and ::view-transition-new pseudo-elements with your animations, respectively.
Creating a basic view transitionThis section illustrates how to create a basic view transition, in both the SPA and MPA case.Basic SPA view transitionAs an example, an SPA may include functionality to fetch new content and update the DOM in response to an event of some kind, such as a navigation link being clicked or an update being pushed from the server. In our View Transitions SPA demo we've simplified this to a displayNewImage() function that shows a new full-size image based on the thumbnail that was clicked. We've encapsulated this inside an updateView() function that only calls the View Transition API if the browser supports it:
jsfunction updateView(event) {
  // Handle the difference in whether the event is fired on the <a> or the <img>
  const targetIdentifier = event.target.firstChild || event.target;

  const displayNewImage = () => {
    const mainSrc = `${targetIdentifier.src.split("_th.jpg")[0]}.jpg`;
    galleryImg.src = mainSrc;
    galleryCaption.textContent = targetIdentifier.alt;
  };

  // Fallback for browsers that don't support View Transitions:
  if (!document.startViewTransition) {
    displayNewImage();
    return;
  }

  // With View Transitions:
  const transition = document.startViewTransition(() => displayNewImage());
}

This code is enough to handle the transition between displayed images. Supporting browsers will show the change from old to new images and captions as a smooth cross-fade (the default view transition). It will still work in non-supporting browsers but without the nice animation.Basic MPA view transitionWhen creating a cross-document (MPA) view transition, the process is even simpler than for SPAs. No JavaScript is required, as the view update is triggered by a cross-document, same-origin navigation rather than a JavaScript-initiated DOM change. To enable a basic MPA view transition, you need to specify a @view-transition at-rule in the CSS for both the current and destination documents to opt them in, like so:
css@view-transition {
  navigation: auto;
}

Our View Transitions MPA demo shows this at-rule in action, and additionally demonstrates how to customize the outbound and inbound animations of the view transition.

Note:
Currently MPA view transitions can only be created between same-origin documents, but this restriction may be relaxed in future implementations.
Customizing your animationsThe View Transitions pseudo-elements have default CSS Animations applied (which are detailed in their reference pages).
Most appearance transitions are given a default smooth cross-fade animation, as mentioned above. There are some exceptions:

height and width transitions have a smooth scaling animation applied.
position and transform transitions have a smooth movement animation applied.

You can modify the default animations in any way you want using regular CSS — target the "from" animation with ::view-transition-old, and the "to" animation with ::view-transition-new.
For example, to change the speed of both:
css::view-transition-old(root),
::view-transition-new(root) {
  animation-duration: 0.5s;
}

It is recommended that you target the ::view-transition-group() with such styles in cases where you want to apply them to ::view-transition-old() and ::view-transition-new(). Because of the pseudo-element hierarchy and default user-agent styling, the styles will be inherited by both. For example:
css::view-transition-group(root) {
  animation-duration: 0.5s;
}


Note:
This is also a good option for safeguarding your code — ::view-transition-group() also animates and you could end up with different durations for the group/image-pair pseudo-elements versus the old and new pseudo-elements.

In the case of cross-document (MPA) transitions, the pseudo-elements need to be included in the destination document only for the view transition to work. If you want to use the view transition in both directions, you'll need to include it in both, of course.
Our View Transitions MPA demo includes the above CSS, but takes the customization a step further, defining custom animations and applying them to the ::view-transition-old(root) and ::view-transition-new(root) pseudo-elements. The result is that the default cross-fade transition is swapped out for a "swipe up" transition when navigation occurs:
css/* Create a custom animation */

@keyframes move-out {
  from {
    transform: translateY(0%);
  }

  to {
    transform: translateY(-100%);
  }
}

@keyframes move-in {
  from {
    transform: translateY(100%);
  }

  to {
    transform: translateY(0%);
  }
}

/* Apply the custom animation to the old and new page states */

::view-transition-old(root) {
  animation: 0.4s ease-in both move-out;
}

::view-transition-new(root) {
  animation: 0.4s ease-in both move-in;
}
Different animations for different elementsBy default, all of the different elements that change during the view update are transitioned using the same animation. If you want some elements to animate differently from the default root animation, you can separate them out using the view-transition-name property. For example, in our View Transitions SPA demo the <figcaption> elements are given a view-transition-name of figure-caption to separate them from the rest of the page in terms of view transitions:
cssfigcaption {
  view-transition-name: figure-caption;
}

With this CSS applied, the generated pseudo-element tree will now look like this:
::view-transition
├─ ::view-transition-group(root)
│ └─ ::view-transition-image-pair(root)
│     ├─ ::view-transition-old(root)
│     └─ ::view-transition-new(root)
└─ ::view-transition-group(figure-caption)
  └─ ::view-transition-image-pair(figure-caption)
      ├─ ::view-transition-old(figure-caption)
      └─ ::view-transition-new(figure-caption)

The existence of the second set of pseudo-elements allows separate view transition styling to be applied just to the <figcaption>. The different old and new view captures are handled separately from one another.

Note:
The value of view-transition-name can be anything you want except for none — the none value specifically means that the element will not participate in a view transition.
view-transition-name values must also be unique. If two rendered elements have the same view-transition-name at the same time, ViewTransition.ready will reject and the transition will be skipped.

The following code applies a custom animation just to the <figcaption>:
css@keyframes grow-x {
  from {
    transform: scaleX(0);
  }
  to {
    transform: scaleX(1);
  }
}

@keyframes shrink-x {
  from {
    transform: scaleX(1);
  }
  to {
    transform: scaleX(0);
  }
}

::view-transition-group(figure-caption) {
  height: auto;
  right: 0;
  left: auto;
  transform-origin: right center;
}

::view-transition-old(figure-caption) {
  animation: 0.25s linear both shrink-x;
}

::view-transition-new(figure-caption) {
  animation: 0.25s 0.25s linear both grow-x;
}

Here we've created a custom CSS animation and applied it to the ::view-transition-old(figure-caption) and ::view-transition-new(figure-caption) pseudo-elements. We've also added a number of other styles to both to keep them in the same place and stop the default styling from interfering with our custom animations.

Note:
You can use * as the identifier in a pseudo-element to target all snapshot pseudo-elements, regardless of what name they have. For example:
css::view-transition-group(*) {
  animation-duration: 2s;
}

Taking advantage of the default animation stylesNote that we also discovered another transition option that is simpler and produced a nicer result than the above. Our final <figcaption> view transition ended up looking like this:
cssfigcaption {
  view-transition-name: figure-caption;
}

::view-transition-group(figure-caption) {
  height: 100%;
}

This works because, by default, ::view-transition-group transitions width and height between the old and new views with a smooth scale. We just needed to set a fixed height on both states to make it work.

Note: Smooth transitions with the View Transition API contains several other customization examples.
Controlling view transitions with JavaScriptA view transition has an associated ViewTransition object instance, which contains several promise members allowing you to run JavaScript in response to different states of the transition being reached. For example, ViewTransition.ready fulfills once the pseudo-element tree is created and the animation is about to start, whereas ViewTransition.finished fulfills once the animation is finished, and the new page view is visible and interactive to the user.
The ViewTransition can be accessed like so:


In the case of same-document (SPA) transitions, the document.startViewTransition() method returns the ViewTransition associated with the transition.


In the case of cross-document (MPA) transitions:

A pageswap event is fired when a document is about to be unloaded due to a navigation. Its event object (PageSwapEvent) provides access to the ViewTransition via the PageSwapEvent.viewTransition property, as well as a NavigationActivation via PageSwapEvent.activation containing the navigation type and current and destination document history entries.

Note:
If the navigation has a cross-origin URL anywhere in the redirect chain, the activation property returns null.


A pagereveal event is fired when a document is first rendered, either when loading a fresh document from the network or activating a document (either from back/forward cache (bfcache) or prerender). Its event object (PageRevealEvent) provides access to the ViewTransition via the PageRevealEvent.viewTransition property.



Let's have a look at some example code to show how these features could be used.A JavaScript-powered custom same-document (SPA) transitionThe following JavaScript could be used to create a circular reveal view transition emanating from the position of the user's cursor on click, with animation provided by the Web Animations API.
js// Store the last click event
let lastClick;
addEventListener("click", (event) => (lastClick = event));

function spaNavigate(data) {
  // Fallback for browsers that don't support this API:
  if (!document.startViewTransition) {
    updateTheDOMSomehow(data);
    return;
  }

  // Get the click position, or fallback to the middle of the screen
  const x = lastClick?.clientX ?? innerWidth / 2;
  const y = lastClick?.clientY ?? innerHeight / 2;
  // Get the distance to the furthest corner
  const endRadius = Math.hypot(
    Math.max(x, innerWidth - x),
    Math.max(y, innerHeight - y),
  );

  // Create a transition:
  const transition = document.startViewTransition(() => {
    updateTheDOMSomehow(data);
  });

  // Wait for the pseudo-elements to be created:
  transition.ready.then(() => {
    // Animate the root's new view
    document.documentElement.animate(
      {
        clipPath: [
          `circle(0 at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ],
      },
      {
        duration: 500,
        easing: "ease-in",
        // Specify which pseudo-element to animate
        pseudoElement: "::view-transition-new(root)",
      },
    );
  });
}

This animation also requires the following CSS, to turn off the default CSS animation and stop the old and new view states from blending in any way (the new state "wipes" right over the top of the old state, rather than transitioning in):
css::view-transition-image-pair(root) {
  isolation: auto;
}

::view-transition-old(root),
::view-transition-new(root) {
  animation: none;
  mix-blend-mode: normal;
  display: block;
}
A JavaScript-powered custom cross-document (MPA) transitionThe List of Chrome DevRel team members demo provides a basic set of team profile pages, and demonstrates how to use the pageswap and pagereveal events to customize the outgoing and inbound animations of a cross-document view transition based on the "from" and "to" URLs.
The pageswap event listener looks as follows. This sets view transition names on the elements on the outbound page that link to the profile pages. When navigating from the home page to a profile page, custom animations are provided only for the linked element that is clicked in each case.
jswindow.addEventListener("pageswap", async (e) => {
  // Only run this if an active view transition exists
  if (e.viewTransition) {
    const currentUrl = e.activation.from?.url
      ? new URL(e.activation.from.url)
      : null;
    const targetUrl = new URL(e.activation.entry.url);

    // Going from profile page to homepage
    // ~> The big img and title are the ones!
    if (isProfilePage(currentUrl) && isHomePage(targetUrl)) {
      // Set view-transition-name values on the elements to animate
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "name";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "avatar";

      // Remove view-transition-names after snapshots have been taken
      // Stops naming conflicts resulting from the page state persisting in BFCache
      await e.viewTransition.finished;
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "none";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "none";
    }

    // Going to profile page
    // ~> The clicked items are the ones!
    if (isProfilePage(targetUrl)) {
      const profile = extractProfileNameFromUrl(targetUrl);

      // Set view-transition-name values on the elements to animate
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "name";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "avatar";

      // Remove view-transition-names after snapshots have been taken
      // Stops naming conflicts resulting from the page state persisting in BFCache
      await e.viewTransition.finished;
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "none";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "none";
    }
  }
});


Note:
We remove the view-transition-name values after snapshots have been taken in each case. If we left them set, they would persist in the page state saved in the bfcache upon navigation. If the back button was then pressed, the pagereveal event handler of the page being navigated back to would then attempt to set the same view-transition-name values on different elements. If multiple elements have the same view-transition-name set, the view transition is skipped.

The pagereveal event listener looks as follows. This works in a similar way to the pageswap event listener, although bear in mind that here we are customizing the "to" animation, for page elements on the new page.
jswindow.addEventListener("pagereveal", async (e) => {
  // If the "from" history entry does not exist, return
  if (!navigation.activation.from) return;

  // Only run this if an active view transition exists
  if (e.viewTransition) {
    const fromUrl = new URL(navigation.activation.from.url);
    const currentUrl = new URL(navigation.activation.entry.url);

    // Went from profile page to homepage
    // ~> Set VT names on the relevant list item
    if (isProfilePage(fromUrl) && isHomePage(currentUrl)) {
      const profile = extractProfileNameFromUrl(fromUrl);

      // Set view-transition-name values on the elements to animate
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "name";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "avatar";

      // Remove names after snapshots have been taken
      // so that we're ready for the next navigation
      await e.viewTransition.ready;
      document.querySelector(`#${profile} span`).style.viewTransitionName =
        "none";
      document.querySelector(`#${profile} img`).style.viewTransitionName =
        "none";
    }

    // Went to profile page
    // ~> Set VT names on the main title and image
    if (isProfilePage(currentUrl)) {
      // Set view-transition-name values on the elements to animate
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "name";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "avatar";

      // Remove names after snapshots have been taken
      // so that we're ready for the next navigation
      await e.viewTransition.ready;
      document.querySelector(`#detail main h1`).style.viewTransitionName =
        "none";
      document.querySelector(`#detail main img`).style.viewTransitionName =
        "none";
    }
  }
});
Stabilizing page state to make cross-document transitions consistentBefore running a cross-document transition, you ideally want to wait until the state of the page stabilizes, relying on render blocking to ensure that:

Critical styles are loaded and applied.
Critical scripts are loaded and run.
The HTML visible for the user's initial view of the page has been parsed, so it renders consistently.

Styles are render blocked by default, and scripts can be render blocked using the blocking="render" attribute.
To ensure that your initial HTML has been parsed and will always render consistently before the transition animation runs, you can use <link rel="expect">. In this element, you include the following attributes:

rel="expect" to indicate that you want to use this <link> element to render block some HTML on the page.
href="#element-id" to indicate the ID of the element you want to render block.
blocking="render" to render block the specified HTML.

Let's explore what this looks like with an example HTML document:
html<!doctype html>
<html lang="en">
  <head>
    <!-- This will be render-blocking by default -->
    <link rel="stylesheet" href="style.css" />

    <!-- Marking critical scripts as render blocking will
         ensure they're run before the view transition is activated -->
    <script async href="layout.js" blocking="render"></script>

    <!-- Use rel="expect" and blocking="render" to ensure the
         #lead-content element is visible and fully parsed before
         activating the transition -->
    <link rel="expect" href="#lead-content" blocking="render" />
  </head>
  <body>
    <h1>Page title</h1>
    <nav>...</nav>
    <div id="lead-content">
      <section id="first-section">The first section</section>
      <section>The second section</section>
    </div>
  </body>
</html>

The result is that document rendering is blocked until the lead content <div> has been parsed, ensuring a consistent view transition.
You can also specify a media attribute on <link rel="expect"> elements. For example, you might want to block rendering on a smaller amount of content when loading the page on a narrow-screen device, than on a wide-screen device. This makes sense — on a mobile, less content will be visible when the page first loads than in the case of a desktop.
This could be achieved with the following HTML:
html<link
  rel="expect"
  href="#lead-content"
  blocking="render"
  media="screen and (min-width: 641px)" />
<link
  rel="expect"
  href="#first-section"
  blocking="render"
  media="screen and (max-width: 640px)" />
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 10, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nTemporalLimited availabilityThis feature is not Baseline because it does not work in some of the most widely-used browsers.Learn moreSee full compatibilityReport feedbackExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.
The Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.DescriptionUnlike most global objects, Temporal is not a constructor. You cannot use it with the new operator or invoke the Temporal object as a function. All properties and methods of Temporal are static (just like the Math object).
Temporal has an intricate and powerful API. It exposes over 200 utility methods via several classes, so it could appear very complex. We will provide a high-level overview of how these APIs are related to each other.Background and conceptsJavaScript has had the Date object for handling date and time since its first days. However, the Date API is based on the poorly designed java.util.Date class from Java, which was replaced in the early 2010s; but, because of JavaScript's goal of backward compatibility, Date sticks around in the language.
The important lesson to preface the whole introduction is that date handling is complex. Most of the problems of Date are fixable by adding more methods, but a fundamental design flaw remains: it exposes so many methods on the same object that developers are often confused about what to use, leading to unexpected pitfalls. A well-designed API not only needs to do more, but also should do less with each level of abstraction, because preventing misuse is as important as enabling use cases.
Date objects wear two hats simultaneously:

As a timestamp: the number of milliseconds or nanoseconds elapsed since a fixed point in time (known as the epoch).
As a combination of components: year, month, day, hour, minute, second, millisecond, and nanosecond. The year, month, and day identifiers only make sense with reference to a calendar system. The whole combination maps to a unique instant in history when associated with a time zone. Date objects provide methods for reading and modifying these components.

Time zones underlie a significant number of date-related bugs. When interacting with a Date via the "combination of components" model, the time can only be in two time zones: UTC and local (device), and there's no way to specify an arbitrary time zone. Also lacking is the concept of "no time zone": this is known as a calendar date (for dates) or wall-clock time (for times), which is a time you "read off a calendar or clock". For example, if you are setting a daily wake up alarm, you will want to set it to "8:00AM" regardless of whether it is daylight saving time or not, whether you have traveled to a different time zone, etc.
A second feature lacking from Date is a calendar system. Most people may be familiar with the Gregorian calendar, where there are two eras, BC and AD; there are 12 months; each month has a different number of days; there's a leap year every 4 years; and so on. However, some of these concepts may not apply when you are working with another calendar system, such as the Hebrew calendar, the Chinese calendar, the Japanese calendar, etc. With Date, you can only work with the Gregorian calendar model.
There are many other undesirable legacies about Date, such as all setters being mutating (which often causes unwanted side effects), the date time string format being impossible to parse in a consistent way, etc. In the end, the best solution is to build a new API from scratch, which is what Temporal is.API overviewTemporal is a namespace, like Intl. It contains several classes and namespaces, each of which is designed to handle a specific aspect of date and time management. The classes can be grouped as such:

Representing a time duration (a difference between two time points): Temporal.Duration
Representing a time point:

Representing a unique instant in history:

As a timestamp: Temporal.Instant
As a date-time component combination paired with a time zone: Temporal.ZonedDateTime


Representing a time-zone-unaware date/time (which are all prefixed with "Plain"):

Date (year, month, day) + time (hour, minute, second, millisecond, microsecond, nanosecond): Temporal.PlainDateTime (Note: ZonedDateTime is equivalent to PlainDateTime plus a time zone)

Date (year, month, day): Temporal.PlainDate

Year, month: Temporal.PlainYearMonth
Month, day: Temporal.PlainMonthDay


Time (hour, minute, second, millisecond, microsecond, nanosecond): Temporal.PlainTime







Furthermore, there's also another utility namespace, Temporal.Now, which provides methods for getting the current time in various formats.Shared class interfaceThere are many classes in the Temporal namespace, but they share many similar methods. The following table lists all methods of each class (except conversion methods):




Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay




Construction
Instant()Instant.from()Instant.fromEpochMilliseconds()Instant.fromEpochNanoseconds()
ZonedDateTime()ZonedDateTime.from()
PlainDateTime()PlainDateTime.from()
PlainDate()PlainDate.from()
PlainTime()PlainTime.from()
PlainYearMonth()PlainYearMonth.from()
PlainMonthDay()PlainMonthDay.from()


Updater
N/A
with()withCalendar()withTimeZone()withPlainTime()
with()withCalendar()withPlainTime()
with()withCalendar()
with()
with()
with()


Arithmetic
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
N/A


Rounding
round()
round()
round()
N/A
round()
N/A
N/A


Comparison
equals()Instant.compare()
equals()ZonedDateTime.compare()
equals()PlainDateTime.compare()
equals()PlainDate.compare()
equals()PlainTime.compare()
equals()PlainYearMonth.compare()
equals()


Serialization
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()



The following table summarizes which properties are available on each class, giving you a sense of what information each class can represent.




Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay




Calendar
N/A
calendarId
calendarId
calendarId
N/A
calendarId
calendarId


Year-related
N/A
eraeraYearyearinLeapYearmonthsInYeardaysInYear
eraeraYearyearinLeapYearmonthsInYeardaysInYear
eraeraYearyearinLeapYearmonthsInYeardaysInYear
N/A
eraeraYearyearinLeapYearmonthsInYeardaysInYear
N/A


Month-related
N/A
monthmonthCodedaysInMonth
monthmonthCodedaysInMonth
monthmonthCodedaysInMonth
N/A
monthmonthCodedaysInMonth
monthCode


Week-related
N/A
weekOfYearyearOfWeekdaysInWeek
weekOfYearyearOfWeekdaysInWeek
weekOfYearyearOfWeekdaysInWeek
N/A
N/A
N/A


Day-related
N/A
daydayOfWeekdayOfYear
daydayOfWeekdayOfYear
daydayOfWeekdayOfYear
N/A
N/A
day


Time components
N/A
hourminutesecondmillisecondmicrosecondnanosecond
hourminutesecondmillisecondmicrosecondnanosecond
N/A
hourminutesecondmillisecondmicrosecondnanosecond
N/A
N/A


Time zone
N/A
timeZoneIdoffsetoffsetNanosecondshoursInDaygetTimeZoneTransition()startOfDay()
N/A
N/A
N/A
N/A
N/A


Epoch time
epochMillisecondsepochNanoseconds
epochMillisecondsepochNanoseconds
N/A
N/A
N/A
N/A
N/A


Conversion between classesThe table below summarizes all conversion methods that exist on each class.




How to convert from...


Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay

to...Instant/toInstant()Convert to ZonedDateTime first
ZonedDateTimetoZonedDateTimeISO()/toZonedDateTime()toZonedDateTime()PlainDate#toZonedDateTime() (pass as argument)Convert to PlainDate first
PlainDateTimeConvert to ZonedDateTime firsttoPlainDateTime()/toPlainDateTime()PlainDate#toPlainDateTime() (pass as argument)
PlainDatetoPlainDate()toPlainDate()/No overlap in informationtoPlainDate()toPlainDate()
PlainTimetoPlainTime()toPlainTime()No overlap in information/No overlap in information
PlainYearMonthConvert to PlainDate firsttoPlainYearMonth()No overlap in information/Convert to PlainDate first
PlainMonthDaytoPlainMonthDay()Convert to PlainDate first/


With these tables, you should have a basic idea of how to navigate the Temporal API.CalendarsA calendar is a way to organize days, typically into periods of weeks, months, years, and eras. Most of the world uses the Gregorian calendar, but there are many other calendars in use, especially in religious and cultural contexts. By default, all calendar-aware Temporal objects use the ISO 8601 calendar system, which is based on the Gregorian calendar and defines additional week-numbering rules. Intl.supportedValuesOf() lists most of the calendars likely to be supported by browsers. Here we provide a brief overview of how calendar systems are formed to help you internalize what factors may vary between calendars.
There are three prominent periodic events on Earth: its rotation around the sun (365.242 days for one revolution), the moon's rotation around the Earth (29.53 days from new moon to new moon), and its rotation around its axis (24 hours from sunrise to sunrise). Every culture has the same measure of a "day", which is 24 hours. Occasional changes such as daylight saving time are not part of the calendar, but are part of the time zone's information.

Some calendars primarily define one year as 365.242 days on average, by defining years to have 365 days, and adding an extra day, the leap day, about every 4 years. Then, the year may be further divided into parts called months. These calendars are called solar calendars. The Gregorian calendar and the Solar Hijri calendar are solar calendars.
Some calendars primarily define one month as 29.5 days on average, by defining months to alternate between 29 and 30 days. Then, 12 months may be grouped into a year of 354 days. These calendars are called lunar calendars. The Islamic calendar is a lunar calendar. Because a lunar year is artificial and does not correlate with the season cycle, lunar calendars are generally rarer.
Some calendars also primarily define months based on lunar cycles, like lunar calendars. Then, to compensate for the 11-day discrepancy with the solar year, an extra month, the leap month, is added about every 3 years. These calendars are called lunisolar calendars. The Hebrew calendar and the Chinese calendar are lunisolar calendars.

In Temporal, every date under one calendar system is uniquely identified by three components: year, month, and day. While year is typically a positive integer, it may also be zero or negative, and increases monotonically with time. The year 1 (or 0, if it exists) is known as the calendar epoch, and is arbitrary for each calendar. month is a positive integer that increments by 1 every time, starting at 1 and ending at date.monthsInYear, then resetting back to 1 as the year advances. day is also a positive integer, but it may not start at 1 or increment by 1 every time, because political changes may cause days to be skipped or repeated. But in general, day monotonically increases and resets as the month advances.
In addition to year, a year can also be uniquely identified by the combination of era and eraYear, for calendars that use eras. For example, the Gregorian calendar uses the era "CE" (Common Era) and "BCE" (Before Common Era), and the year -1 is the same as { era: "bce", eraYear: 1 }. era is a lowercase string, and eraYear is an arbitrary integer that may be zero or negative, or even decrease with time (usually for the oldest era).

Note:
Always use era and eraYear as a pair; don't use one property without also using the other. In addition, to avoid conflicts, don't combine year and era/eraYear when designating a year. Pick one year representation and use it consistently.
Be careful of the following incorrect assumptions about years:

Don't assume that era and eraYear are always present; they may be undefined.
Don't assume that era is a user-friendly string; use toLocaleString() to format your date instead.
Don't assume that two year values from different calendars are comparable; use the compare() static method instead.
Don't assume that years have 365/366 days and 12 months; use daysInYear and monthsInYear instead.
Don't assume that leap years (inLeapYear is true) have one extra day; they may have an extra month.


In addition to month, a month in a year can also be uniquely identified by the monthCode. monthCode usually maps to the month's name, but month does not. For example, in the case of lunisolar calendars, two months with the same monthCode, where one belongs to a leap year and the other one does not, will have different month values if they come after the leap month, due to the insertion of an extra month.

Note:
To avoid conflicts, don't combine month and monthCode when designating a month. Pick one month representation and use it consistently. month is more useful if you need the order of months in a year (e.g., when looping through the months), while monthCode is more useful if you need the name of the month (e.g., when storing birthdays).
Be careful of the following incorrect assumptions about months:

Don't assume that monthCode and month always correspond.
Don't assume the number of days in a month; use daysInMonth instead.
Don't assume that monthCode is a user-friendly string; use toLocaleString() to format your date instead.
Generally, don't cache the name of months in an array or object. Even though monthCode usually maps to the month's name within one calendar, we recommend always computing the month's name using, for example, date.toLocaleString("en-US", { calendar: date.calendarId, month: "long" }).


In addition to day (which is a month-based index), a day in a year can also be uniquely identified by the dayOfYear. dayOfYear is a positive integer that increments by 1 every time, starting at 1 and ending at date.daysInYear.
The concept of a "week" is not connected with any astronomical event, but is a cultural construct. While the most common length is 7 days, weeks can also have 4, 5, 6, 8, or more days — or even lack a fixed number of days altogether. To get the specific number of days of the week of a date, use the date's daysInWeek. Temporal identifies weeks by the combination of weekOfYear and yearOfWeek. weekOfYear is a positive integer that increments by 1 every time, starting at 1, then resetting back to 1 as the year advances. yearOfWeek is generally the same as year, but may be different at the start or end of each year, because one week may cross two years, and yearOfWeek picks one of the two years based on the calendar's rules.

Note:
Always use weekOfYear and yearOfWeek as a pair; don't use weekOfYear and year.
Be careful of the following incorrect assumptions about weeks:

Don't assume that weekOfYear and yearOfWeek are always present; they may be undefined.
Don't assume that weeks are always 7 days long; use daysInWeek instead.
Note that the current Temporal API does not support year-week dates, so you can't construct dates using these properties or serialize dates to year-week representations. They are only informational properties.

RFC 9557 formatAll Temporal classes can be serialized and deserialized using the format specified in RFC 9557, which is based on ISO 8601 / RFC 3339. The format, in its full form, is as follows (spaces are only for readability and should not be present in the actual string):
YYYY-MM-DD T HH:mm:ss.sssssssss Z/±HH:mm [time_zone_id] [u-ca=calendar_id]

Different classes have different requirements for the presence of each component, so you will find a section titled "RFC 9557 format" in each class's documentation, which specifies the format recognized by that class.
This is very similar to the date time string format used by Date, which is also based on ISO 8601. The main addition is the ability to specify micro- and nanosecond components, and the ability to specify the time zone and calendar system.Representable datesAll Temporal objects that represent a specific calendar date impose a similar limit on the range of representable dates, which is ±108 days (inclusive) from the Unix epoch, or the range of instants from -271821-04-20T00:00:00 to +275760-09-13T00:00:00. This is the same range as valid dates. More specifically:

Temporal.Instant and Temporal.ZonedDateTime apply this limit directly on its epochNanoseconds value.
Temporal.PlainDateTime interprets the date-time in the UTC time zone and requires it to be ±(108 + 1) days (exclusive) from the Unix epoch, so its valid range is -271821-04-19T00:00:00 to +275760-09-14T00:00:00, exclusive. This allows any ZonedDateTime to be converted to a PlainDateTime regardless of its offset.
Temporal.PlainDate applies the same check as PlainDateTime to the noon (12:00:00) of that date, so its valid range is -271821-04-19 to +275760-09-13. This allows any PlainDateTime to be converted to a PlainDate regardless of its time, and vice versa.
Temporal.PlainYearMonth has the valid range of -271821-04 to +275760-09. This allows any PlainDate to be converted to a PlainYearMonth regardless of its date (except if a non-ISO month's first day falls in the ISO month -271821-03).

The Temporal objects will refuse to construct an instance representing a date/time beyond this limit. This includes:

Using the constructor or from() static method.
Using the with() method to update calendar fields.
Using add(), subtract(), round(), or any other method to derive new instances.
Static properties
Temporal.Duration 
Experimental


Represents a difference between two time points, which can be used in date/time arithmetic. It is fundamentally represented as a combination of years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, and nanoseconds values.

Temporal.Instant 
Experimental


Represents a unique point in time, with nanosecond precision. It is fundamentally represented as the number of nanoseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC), without any time zone or calendar system.

Temporal.Now 
Experimental


Provides methods for getting the current time in various formats.

Temporal.PlainDate 
Experimental


Represents a calendar date (a date without a time or time zone); for example, an event on a calendar which happens during the whole day no matter which time zone it's happening in. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system.

Temporal.PlainDateTime 
Experimental


Represents a date (calendar date) and time (wall-clock time) without a time zone. It is fundamentally represented as a combination of a date (with an associated calendar system) and a time.

Temporal.PlainMonthDay 
Experimental


Represents the month and day of a calendar date, without a year or time zone; for example, an event on a calendar that recurs every year and happens during the whole day. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The year is used to disambiguate the month-day in non-ISO calendar systems.

Temporal.PlainTime 
Experimental


Represents a time without a date or time zone; for example, a recurring event that happens at the same time every day. It is fundamentally represented as a combination of hour, minute, second, millisecond, microsecond, and nanosecond values.

Temporal.PlainYearMonth 
Experimental


Represents the year and month of a calendar date, without a day or time zone; for example, an event on a calendar that happens during the whole month. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The day is used to disambiguate the year-month in non-ISO calendar systems.

Temporal.ZonedDateTime 
Experimental


Represents a date and time with a time zone. It is fundamentally represented as a combination of an instant, a time zone, and a calendar system.

Temporal[Symbol.toStringTag]

The initial value of the [Symbol.toStringTag] property is the string "Temporal". This property is used in Object.prototype.toString().

SpecificationsSpecificationTemporal proposal # sec-temporal-introBrowser compatibilitySee also
Intl.DateTimeFormat
Intl.RelativeTimeFormat
Intl.DurationFormat\n\nTemporalLimited availabilityThis feature is not Baseline because it does not work in some of the most widely-used browsers.Learn moreSee full compatibilityReport feedbackExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.
The Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.DescriptionUnlike most global objects, Temporal is not a constructor. You cannot use it with the new operator or invoke the Temporal object as a function. All properties and methods of Temporal are static (just like the Math object).
Temporal has an intricate and powerful API. It exposes over 200 utility methods via several classes, so it could appear very complex. We will provide a high-level overview of how these APIs are related to each other.Background and conceptsJavaScript has had the Date object for handling date and time since its first days. However, the Date API is based on the poorly designed java.util.Date class from Java, which was replaced in the early 2010s; but, because of JavaScript's goal of backward compatibility, Date sticks around in the language.
The important lesson to preface the whole introduction is that date handling is complex. Most of the problems of Date are fixable by adding more methods, but a fundamental design flaw remains: it exposes so many methods on the same object that developers are often confused about what to use, leading to unexpected pitfalls. A well-designed API not only needs to do more, but also should do less with each level of abstraction, because preventing misuse is as important as enabling use cases.
Date objects wear two hats simultaneously:

As a timestamp: the number of milliseconds or nanoseconds elapsed since a fixed point in time (known as the epoch).
As a combination of components: year, month, day, hour, minute, second, millisecond, and nanosecond. The year, month, and day identifiers only make sense with reference to a calendar system. The whole combination maps to a unique instant in history when associated with a time zone. Date objects provide methods for reading and modifying these components.

Time zones underlie a significant number of date-related bugs. When interacting with a Date via the "combination of components" model, the time can only be in two time zones: UTC and local (device), and there's no way to specify an arbitrary time zone. Also lacking is the concept of "no time zone": this is known as a calendar date (for dates) or wall-clock time (for times), which is a time you "read off a calendar or clock". For example, if you are setting a daily wake up alarm, you will want to set it to "8:00AM" regardless of whether it is daylight saving time or not, whether you have traveled to a different time zone, etc.
A second feature lacking from Date is a calendar system. Most people may be familiar with the Gregorian calendar, where there are two eras, BC and AD; there are 12 months; each month has a different number of days; there's a leap year every 4 years; and so on. However, some of these concepts may not apply when you are working with another calendar system, such as the Hebrew calendar, the Chinese calendar, the Japanese calendar, etc. With Date, you can only work with the Gregorian calendar model.
There are many other undesirable legacies about Date, such as all setters being mutating (which often causes unwanted side effects), the date time string format being impossible to parse in a consistent way, etc. In the end, the best solution is to build a new API from scratch, which is what Temporal is.API overviewTemporal is a namespace, like Intl. It contains several classes and namespaces, each of which is designed to handle a specific aspect of date and time management. The classes can be grouped as such:

Representing a time duration (a difference between two time points): Temporal.Duration
Representing a time point:

Representing a unique instant in history:

As a timestamp: Temporal.Instant
As a date-time component combination paired with a time zone: Temporal.ZonedDateTime


Representing a time-zone-unaware date/time (which are all prefixed with "Plain"):

Date (year, month, day) + time (hour, minute, second, millisecond, microsecond, nanosecond): Temporal.PlainDateTime (Note: ZonedDateTime is equivalent to PlainDateTime plus a time zone)

Date (year, month, day): Temporal.PlainDate

Year, month: Temporal.PlainYearMonth
Month, day: Temporal.PlainMonthDay


Time (hour, minute, second, millisecond, microsecond, nanosecond): Temporal.PlainTime







Furthermore, there's also another utility namespace, Temporal.Now, which provides methods for getting the current time in various formats.Shared class interfaceThere are many classes in the Temporal namespace, but they share many similar methods. The following table lists all methods of each class (except conversion methods):




Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay




Construction
Instant()Instant.from()Instant.fromEpochMilliseconds()Instant.fromEpochNanoseconds()
ZonedDateTime()ZonedDateTime.from()
PlainDateTime()PlainDateTime.from()
PlainDate()PlainDate.from()
PlainTime()PlainTime.from()
PlainYearMonth()PlainYearMonth.from()
PlainMonthDay()PlainMonthDay.from()


Updater
N/A
with()withCalendar()withTimeZone()withPlainTime()
with()withCalendar()withPlainTime()
with()withCalendar()
with()
with()
with()


Arithmetic
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
N/A


Rounding
round()
round()
round()
N/A
round()
N/A
N/A


Comparison
equals()Instant.compare()
equals()ZonedDateTime.compare()
equals()PlainDateTime.compare()
equals()PlainDate.compare()
equals()PlainTime.compare()
equals()PlainYearMonth.compare()
equals()


Serialization
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()



The following table summarizes which properties are available on each class, giving you a sense of what information each class can represent.




Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay




Calendar
N/A
calendarId
calendarId
calendarId
N/A
calendarId
calendarId


Year-related
N/A
eraeraYearyearinLeapYearmonthsInYeardaysInYear
eraeraYearyearinLeapYearmonthsInYeardaysInYear
eraeraYearyearinLeapYearmonthsInYeardaysInYear
N/A
eraeraYearyearinLeapYearmonthsInYeardaysInYear
N/A


Month-related
N/A
monthmonthCodedaysInMonth
monthmonthCodedaysInMonth
monthmonthCodedaysInMonth
N/A
monthmonthCodedaysInMonth
monthCode


Week-related
N/A
weekOfYearyearOfWeekdaysInWeek
weekOfYearyearOfWeekdaysInWeek
weekOfYearyearOfWeekdaysInWeek
N/A
N/A
N/A


Day-related
N/A
daydayOfWeekdayOfYear
daydayOfWeekdayOfYear
daydayOfWeekdayOfYear
N/A
N/A
day


Time components
N/A
hourminutesecondmillisecondmicrosecondnanosecond
hourminutesecondmillisecondmicrosecondnanosecond
N/A
hourminutesecondmillisecondmicrosecondnanosecond
N/A
N/A


Time zone
N/A
timeZoneIdoffsetoffsetNanosecondshoursInDaygetTimeZoneTransition()startOfDay()
N/A
N/A
N/A
N/A
N/A


Epoch time
epochMillisecondsepochNanoseconds
epochMillisecondsepochNanoseconds
N/A
N/A
N/A
N/A
N/A


Conversion between classesThe table below summarizes all conversion methods that exist on each class.




How to convert from...


Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay

to...Instant/toInstant()Convert to ZonedDateTime first
ZonedDateTimetoZonedDateTimeISO()/toZonedDateTime()toZonedDateTime()PlainDate#toZonedDateTime() (pass as argument)Convert to PlainDate first
PlainDateTimeConvert to ZonedDateTime firsttoPlainDateTime()/toPlainDateTime()PlainDate#toPlainDateTime() (pass as argument)
PlainDatetoPlainDate()toPlainDate()/No overlap in informationtoPlainDate()toPlainDate()
PlainTimetoPlainTime()toPlainTime()No overlap in information/No overlap in information
PlainYearMonthConvert to PlainDate firsttoPlainYearMonth()No overlap in information/Convert to PlainDate first
PlainMonthDaytoPlainMonthDay()Convert to PlainDate first/


With these tables, you should have a basic idea of how to navigate the Temporal API.CalendarsA calendar is a way to organize days, typically into periods of weeks, months, years, and eras. Most of the world uses the Gregorian calendar, but there are many other calendars in use, especially in religious and cultural contexts. By default, all calendar-aware Temporal objects use the ISO 8601 calendar system, which is based on the Gregorian calendar and defines additional week-numbering rules. Intl.supportedValuesOf() lists most of the calendars likely to be supported by browsers. Here we provide a brief overview of how calendar systems are formed to help you internalize what factors may vary between calendars.
There are three prominent periodic events on Earth: its rotation around the sun (365.242 days for one revolution), the moon's rotation around the Earth (29.53 days from new moon to new moon), and its rotation around its axis (24 hours from sunrise to sunrise). Every culture has the same measure of a "day", which is 24 hours. Occasional changes such as daylight saving time are not part of the calendar, but are part of the time zone's information.

Some calendars primarily define one year as 365.242 days on average, by defining years to have 365 days, and adding an extra day, the leap day, about every 4 years. Then, the year may be further divided into parts called months. These calendars are called solar calendars. The Gregorian calendar and the Solar Hijri calendar are solar calendars.
Some calendars primarily define one month as 29.5 days on average, by defining months to alternate between 29 and 30 days. Then, 12 months may be grouped into a year of 354 days. These calendars are called lunar calendars. The Islamic calendar is a lunar calendar. Because a lunar year is artificial and does not correlate with the season cycle, lunar calendars are generally rarer.
Some calendars also primarily define months based on lunar cycles, like lunar calendars. Then, to compensate for the 11-day discrepancy with the solar year, an extra month, the leap month, is added about every 3 years. These calendars are called lunisolar calendars. The Hebrew calendar and the Chinese calendar are lunisolar calendars.

In Temporal, every date under one calendar system is uniquely identified by three components: year, month, and day. While year is typically a positive integer, it may also be zero or negative, and increases monotonically with time. The year 1 (or 0, if it exists) is known as the calendar epoch, and is arbitrary for each calendar. month is a positive integer that increments by 1 every time, starting at 1 and ending at date.monthsInYear, then resetting back to 1 as the year advances. day is also a positive integer, but it may not start at 1 or increment by 1 every time, because political changes may cause days to be skipped or repeated. But in general, day monotonically increases and resets as the month advances.
In addition to year, a year can also be uniquely identified by the combination of era and eraYear, for calendars that use eras. For example, the Gregorian calendar uses the era "CE" (Common Era) and "BCE" (Before Common Era), and the year -1 is the same as { era: "bce", eraYear: 1 }. era is a lowercase string, and eraYear is an arbitrary integer that may be zero or negative, or even decrease with time (usually for the oldest era).

Note:
Always use era and eraYear as a pair; don't use one property without also using the other. In addition, to avoid conflicts, don't combine year and era/eraYear when designating a year. Pick one year representation and use it consistently.
Be careful of the following incorrect assumptions about years:

Don't assume that era and eraYear are always present; they may be undefined.
Don't assume that era is a user-friendly string; use toLocaleString() to format your date instead.
Don't assume that two year values from different calendars are comparable; use the compare() static method instead.
Don't assume that years have 365/366 days and 12 months; use daysInYear and monthsInYear instead.
Don't assume that leap years (inLeapYear is true) have one extra day; they may have an extra month.


In addition to month, a month in a year can also be uniquely identified by the monthCode. monthCode usually maps to the month's name, but month does not. For example, in the case of lunisolar calendars, two months with the same monthCode, where one belongs to a leap year and the other one does not, will have different month values if they come after the leap month, due to the insertion of an extra month.

Note:
To avoid conflicts, don't combine month and monthCode when designating a month. Pick one month representation and use it consistently. month is more useful if you need the order of months in a year (e.g., when looping through the months), while monthCode is more useful if you need the name of the month (e.g., when storing birthdays).
Be careful of the following incorrect assumptions about months:

Don't assume that monthCode and month always correspond.
Don't assume the number of days in a month; use daysInMonth instead.
Don't assume that monthCode is a user-friendly string; use toLocaleString() to format your date instead.
Generally, don't cache the name of months in an array or object. Even though monthCode usually maps to the month's name within one calendar, we recommend always computing the month's name using, for example, date.toLocaleString("en-US", { calendar: date.calendarId, month: "long" }).


In addition to day (which is a month-based index), a day in a year can also be uniquely identified by the dayOfYear. dayOfYear is a positive integer that increments by 1 every time, starting at 1 and ending at date.daysInYear.
The concept of a "week" is not connected with any astronomical event, but is a cultural construct. While the most common length is 7 days, weeks can also have 4, 5, 6, 8, or more days — or even lack a fixed number of days altogether. To get the specific number of days of the week of a date, use the date's daysInWeek. Temporal identifies weeks by the combination of weekOfYear and yearOfWeek. weekOfYear is a positive integer that increments by 1 every time, starting at 1, then resetting back to 1 as the year advances. yearOfWeek is generally the same as year, but may be different at the start or end of each year, because one week may cross two years, and yearOfWeek picks one of the two years based on the calendar's rules.

Note:
Always use weekOfYear and yearOfWeek as a pair; don't use weekOfYear and year.
Be careful of the following incorrect assumptions about weeks:

Don't assume that weekOfYear and yearOfWeek are always present; they may be undefined.
Don't assume that weeks are always 7 days long; use daysInWeek instead.
Note that the current Temporal API does not support year-week dates, so you can't construct dates using these properties or serialize dates to year-week representations. They are only informational properties.

RFC 9557 formatAll Temporal classes can be serialized and deserialized using the format specified in RFC 9557, which is based on ISO 8601 / RFC 3339. The format, in its full form, is as follows (spaces are only for readability and should not be present in the actual string):
YYYY-MM-DD T HH:mm:ss.sssssssss Z/±HH:mm [time_zone_id] [u-ca=calendar_id]

Different classes have different requirements for the presence of each component, so you will find a section titled "RFC 9557 format" in each class's documentation, which specifies the format recognized by that class.
This is very similar to the date time string format used by Date, which is also based on ISO 8601. The main addition is the ability to specify micro- and nanosecond components, and the ability to specify the time zone and calendar system.Representable datesAll Temporal objects that represent a specific calendar date impose a similar limit on the range of representable dates, which is ±108 days (inclusive) from the Unix epoch, or the range of instants from -271821-04-20T00:00:00 to +275760-09-13T00:00:00. This is the same range as valid dates. More specifically:

Temporal.Instant and Temporal.ZonedDateTime apply this limit directly on its epochNanoseconds value.
Temporal.PlainDateTime interprets the date-time in the UTC time zone and requires it to be ±(108 + 1) days (exclusive) from the Unix epoch, so its valid range is -271821-04-19T00:00:00 to +275760-09-14T00:00:00, exclusive. This allows any ZonedDateTime to be converted to a PlainDateTime regardless of its offset.
Temporal.PlainDate applies the same check as PlainDateTime to the noon (12:00:00) of that date, so its valid range is -271821-04-19 to +275760-09-13. This allows any PlainDateTime to be converted to a PlainDate regardless of its time, and vice versa.
Temporal.PlainYearMonth has the valid range of -271821-04 to +275760-09. This allows any PlainDate to be converted to a PlainYearMonth regardless of its date (except if a non-ISO month's first day falls in the ISO month -271821-03).

The Temporal objects will refuse to construct an instance representing a date/time beyond this limit. This includes:

Using the constructor or from() static method.
Using the with() method to update calendar fields.
Using add(), subtract(), round(), or any other method to derive new instances.
Static properties
Temporal.Duration 
Experimental


Represents a difference between two time points, which can be used in date/time arithmetic. It is fundamentally represented as a combination of years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, and nanoseconds values.

Temporal.Instant 
Experimental


Represents a unique point in time, with nanosecond precision. It is fundamentally represented as the number of nanoseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC), without any time zone or calendar system.

Temporal.Now 
Experimental


Provides methods for getting the current time in various formats.

Temporal.PlainDate 
Experimental


Represents a calendar date (a date without a time or time zone); for example, an event on a calendar which happens during the whole day no matter which time zone it's happening in. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system.

Temporal.PlainDateTime 
Experimental


Represents a date (calendar date) and time (wall-clock time) without a time zone. It is fundamentally represented as a combination of a date (with an associated calendar system) and a time.

Temporal.PlainMonthDay 
Experimental


Represents the month and day of a calendar date, without a year or time zone; for example, an event on a calendar that recurs every year and happens during the whole day. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The year is used to disambiguate the month-day in non-ISO calendar systems.

Temporal.PlainTime 
Experimental


Represents a time without a date or time zone; for example, a recurring event that happens at the same time every day. It is fundamentally represented as a combination of hour, minute, second, millisecond, microsecond, and nanosecond values.

Temporal.PlainYearMonth 
Experimental


Represents the year and month of a calendar date, without a day or time zone; for example, an event on a calendar that happens during the whole month. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The day is used to disambiguate the year-month in non-ISO calendar systems.

Temporal.ZonedDateTime 
Experimental


Represents a date and time with a time zone. It is fundamentally represented as a combination of an instant, a time zone, and a calendar system.

Temporal[Symbol.toStringTag]

The initial value of the [Symbol.toStringTag] property is the string "Temporal". This property is used in Object.prototype.toString().

SpecificationsSpecificationTemporal proposal # sec-temporal-introBrowser compatibilitySee also
Intl.DateTimeFormat
Intl.RelativeTimeFormat
Intl.DurationFormat
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 6, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\nTemporalLimited availabilityThis feature is not Baseline because it does not work in some of the most widely-used browsers.Learn moreSee full compatibilityReport feedbackExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.
The Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.DescriptionUnlike most global objects, Temporal is not a constructor. You cannot use it with the new operator or invoke the Temporal object as a function. All properties and methods of Temporal are static (just like the Math object).
Temporal has an intricate and powerful API. It exposes over 200 utility methods via several classes, so it could appear very complex. We will provide a high-level overview of how these APIs are related to each other.Background and conceptsJavaScript has had the Date object for handling date and time since its first days. However, the Date API is based on the poorly designed java.util.Date class from Java, which was replaced in the early 2010s; but, because of JavaScript's goal of backward compatibility, Date sticks around in the language.
The important lesson to preface the whole introduction is that date handling is complex. Most of the problems of Date are fixable by adding more methods, but a fundamental design flaw remains: it exposes so many methods on the same object that developers are often confused about what to use, leading to unexpected pitfalls. A well-designed API not only needs to do more, but also should do less with each level of abstraction, because preventing misuse is as important as enabling use cases.
Date objects wear two hats simultaneously:

As a timestamp: the number of milliseconds or nanoseconds elapsed since a fixed point in time (known as the epoch).
As a combination of components: year, month, day, hour, minute, second, millisecond, and nanosecond. The year, month, and day identifiers only make sense with reference to a calendar system. The whole combination maps to a unique instant in history when associated with a time zone. Date objects provide methods for reading and modifying these components.

Time zones underlie a significant number of date-related bugs. When interacting with a Date via the "combination of components" model, the time can only be in two time zones: UTC and local (device), and there's no way to specify an arbitrary time zone. Also lacking is the concept of "no time zone": this is known as a calendar date (for dates) or wall-clock time (for times), which is a time you "read off a calendar or clock". For example, if you are setting a daily wake up alarm, you will want to set it to "8:00AM" regardless of whether it is daylight saving time or not, whether you have traveled to a different time zone, etc.
A second feature lacking from Date is a calendar system. Most people may be familiar with the Gregorian calendar, where there are two eras, BC and AD; there are 12 months; each month has a different number of days; there's a leap year every 4 years; and so on. However, some of these concepts may not apply when you are working with another calendar system, such as the Hebrew calendar, the Chinese calendar, the Japanese calendar, etc. With Date, you can only work with the Gregorian calendar model.
There are many other undesirable legacies about Date, such as all setters being mutating (which often causes unwanted side effects), the date time string format being impossible to parse in a consistent way, etc. In the end, the best solution is to build a new API from scratch, which is what Temporal is.API overviewTemporal is a namespace, like Intl. It contains several classes and namespaces, each of which is designed to handle a specific aspect of date and time management. The classes can be grouped as such:

Representing a time duration (a difference between two time points): Temporal.Duration
Representing a time point:

Representing a unique instant in history:

As a timestamp: Temporal.Instant
As a date-time component combination paired with a time zone: Temporal.ZonedDateTime


Representing a time-zone-unaware date/time (which are all prefixed with "Plain"):

Date (year, month, day) + time (hour, minute, second, millisecond, microsecond, nanosecond): Temporal.PlainDateTime (Note: ZonedDateTime is equivalent to PlainDateTime plus a time zone)

Date (year, month, day): Temporal.PlainDate

Year, month: Temporal.PlainYearMonth
Month, day: Temporal.PlainMonthDay


Time (hour, minute, second, millisecond, microsecond, nanosecond): Temporal.PlainTime







Furthermore, there's also another utility namespace, Temporal.Now, which provides methods for getting the current time in various formats.Shared class interfaceThere are many classes in the Temporal namespace, but they share many similar methods. The following table lists all methods of each class (except conversion methods):




Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay




Construction
Instant()Instant.from()Instant.fromEpochMilliseconds()Instant.fromEpochNanoseconds()
ZonedDateTime()ZonedDateTime.from()
PlainDateTime()PlainDateTime.from()
PlainDate()PlainDate.from()
PlainTime()PlainTime.from()
PlainYearMonth()PlainYearMonth.from()
PlainMonthDay()PlainMonthDay.from()


Updater
N/A
with()withCalendar()withTimeZone()withPlainTime()
with()withCalendar()withPlainTime()
with()withCalendar()
with()
with()
with()


Arithmetic
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
add()subtract()since()until()
N/A


Rounding
round()
round()
round()
N/A
round()
N/A
N/A


Comparison
equals()Instant.compare()
equals()ZonedDateTime.compare()
equals()PlainDateTime.compare()
equals()PlainDate.compare()
equals()PlainTime.compare()
equals()PlainYearMonth.compare()
equals()


Serialization
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()
toJSON()toLocaleString()toString()valueOf()



The following table summarizes which properties are available on each class, giving you a sense of what information each class can represent.




Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay




Calendar
N/A
calendarId
calendarId
calendarId
N/A
calendarId
calendarId


Year-related
N/A
eraeraYearyearinLeapYearmonthsInYeardaysInYear
eraeraYearyearinLeapYearmonthsInYeardaysInYear
eraeraYearyearinLeapYearmonthsInYeardaysInYear
N/A
eraeraYearyearinLeapYearmonthsInYeardaysInYear
N/A


Month-related
N/A
monthmonthCodedaysInMonth
monthmonthCodedaysInMonth
monthmonthCodedaysInMonth
N/A
monthmonthCodedaysInMonth
monthCode


Week-related
N/A
weekOfYearyearOfWeekdaysInWeek
weekOfYearyearOfWeekdaysInWeek
weekOfYearyearOfWeekdaysInWeek
N/A
N/A
N/A


Day-related
N/A
daydayOfWeekdayOfYear
daydayOfWeekdayOfYear
daydayOfWeekdayOfYear
N/A
N/A
day


Time components
N/A
hourminutesecondmillisecondmicrosecondnanosecond
hourminutesecondmillisecondmicrosecondnanosecond
N/A
hourminutesecondmillisecondmicrosecondnanosecond
N/A
N/A


Time zone
N/A
timeZoneIdoffsetoffsetNanosecondshoursInDaygetTimeZoneTransition()startOfDay()
N/A
N/A
N/A
N/A
N/A


Epoch time
epochMillisecondsepochNanoseconds
epochMillisecondsepochNanoseconds
N/A
N/A
N/A
N/A
N/A


Conversion between classesThe table below summarizes all conversion methods that exist on each class.




How to convert from...


Instant
ZonedDateTime
PlainDateTime
PlainDate
PlainTime
PlainYearMonth
PlainMonthDay

to...Instant/toInstant()Convert to ZonedDateTime first
ZonedDateTimetoZonedDateTimeISO()/toZonedDateTime()toZonedDateTime()PlainDate#toZonedDateTime() (pass as argument)Convert to PlainDate first
PlainDateTimeConvert to ZonedDateTime firsttoPlainDateTime()/toPlainDateTime()PlainDate#toPlainDateTime() (pass as argument)
PlainDatetoPlainDate()toPlainDate()/No overlap in informationtoPlainDate()toPlainDate()
PlainTimetoPlainTime()toPlainTime()No overlap in information/No overlap in information
PlainYearMonthConvert to PlainDate firsttoPlainYearMonth()No overlap in information/Convert to PlainDate first
PlainMonthDaytoPlainMonthDay()Convert to PlainDate first/


With these tables, you should have a basic idea of how to navigate the Temporal API.CalendarsA calendar is a way to organize days, typically into periods of weeks, months, years, and eras. Most of the world uses the Gregorian calendar, but there are many other calendars in use, especially in religious and cultural contexts. By default, all calendar-aware Temporal objects use the ISO 8601 calendar system, which is based on the Gregorian calendar and defines additional week-numbering rules. Intl.supportedValuesOf() lists most of the calendars likely to be supported by browsers. Here we provide a brief overview of how calendar systems are formed to help you internalize what factors may vary between calendars.
There are three prominent periodic events on Earth: its rotation around the sun (365.242 days for one revolution), the moon's rotation around the Earth (29.53 days from new moon to new moon), and its rotation around its axis (24 hours from sunrise to sunrise). Every culture has the same measure of a "day", which is 24 hours. Occasional changes such as daylight saving time are not part of the calendar, but are part of the time zone's information.

Some calendars primarily define one year as 365.242 days on average, by defining years to have 365 days, and adding an extra day, the leap day, about every 4 years. Then, the year may be further divided into parts called months. These calendars are called solar calendars. The Gregorian calendar and the Solar Hijri calendar are solar calendars.
Some calendars primarily define one month as 29.5 days on average, by defining months to alternate between 29 and 30 days. Then, 12 months may be grouped into a year of 354 days. These calendars are called lunar calendars. The Islamic calendar is a lunar calendar. Because a lunar year is artificial and does not correlate with the season cycle, lunar calendars are generally rarer.
Some calendars also primarily define months based on lunar cycles, like lunar calendars. Then, to compensate for the 11-day discrepancy with the solar year, an extra month, the leap month, is added about every 3 years. These calendars are called lunisolar calendars. The Hebrew calendar and the Chinese calendar are lunisolar calendars.

In Temporal, every date under one calendar system is uniquely identified by three components: year, month, and day. While year is typically a positive integer, it may also be zero or negative, and increases monotonically with time. The year 1 (or 0, if it exists) is known as the calendar epoch, and is arbitrary for each calendar. month is a positive integer that increments by 1 every time, starting at 1 and ending at date.monthsInYear, then resetting back to 1 as the year advances. day is also a positive integer, but it may not start at 1 or increment by 1 every time, because political changes may cause days to be skipped or repeated. But in general, day monotonically increases and resets as the month advances.
In addition to year, a year can also be uniquely identified by the combination of era and eraYear, for calendars that use eras. For example, the Gregorian calendar uses the era "CE" (Common Era) and "BCE" (Before Common Era), and the year -1 is the same as { era: "bce", eraYear: 1 }. era is a lowercase string, and eraYear is an arbitrary integer that may be zero or negative, or even decrease with time (usually for the oldest era).

Note:
Always use era and eraYear as a pair; don't use one property without also using the other. In addition, to avoid conflicts, don't combine year and era/eraYear when designating a year. Pick one year representation and use it consistently.
Be careful of the following incorrect assumptions about years:

Don't assume that era and eraYear are always present; they may be undefined.
Don't assume that era is a user-friendly string; use toLocaleString() to format your date instead.
Don't assume that two year values from different calendars are comparable; use the compare() static method instead.
Don't assume that years have 365/366 days and 12 months; use daysInYear and monthsInYear instead.
Don't assume that leap years (inLeapYear is true) have one extra day; they may have an extra month.


In addition to month, a month in a year can also be uniquely identified by the monthCode. monthCode usually maps to the month's name, but month does not. For example, in the case of lunisolar calendars, two months with the same monthCode, where one belongs to a leap year and the other one does not, will have different month values if they come after the leap month, due to the insertion of an extra month.

Note:
To avoid conflicts, don't combine month and monthCode when designating a month. Pick one month representation and use it consistently. month is more useful if you need the order of months in a year (e.g., when looping through the months), while monthCode is more useful if you need the name of the month (e.g., when storing birthdays).
Be careful of the following incorrect assumptions about months:

Don't assume that monthCode and month always correspond.
Don't assume the number of days in a month; use daysInMonth instead.
Don't assume that monthCode is a user-friendly string; use toLocaleString() to format your date instead.
Generally, don't cache the name of months in an array or object. Even though monthCode usually maps to the month's name within one calendar, we recommend always computing the month's name using, for example, date.toLocaleString("en-US", { calendar: date.calendarId, month: "long" }).


In addition to day (which is a month-based index), a day in a year can also be uniquely identified by the dayOfYear. dayOfYear is a positive integer that increments by 1 every time, starting at 1 and ending at date.daysInYear.
The concept of a "week" is not connected with any astronomical event, but is a cultural construct. While the most common length is 7 days, weeks can also have 4, 5, 6, 8, or more days — or even lack a fixed number of days altogether. To get the specific number of days of the week of a date, use the date's daysInWeek. Temporal identifies weeks by the combination of weekOfYear and yearOfWeek. weekOfYear is a positive integer that increments by 1 every time, starting at 1, then resetting back to 1 as the year advances. yearOfWeek is generally the same as year, but may be different at the start or end of each year, because one week may cross two years, and yearOfWeek picks one of the two years based on the calendar's rules.

Note:
Always use weekOfYear and yearOfWeek as a pair; don't use weekOfYear and year.
Be careful of the following incorrect assumptions about weeks:

Don't assume that weekOfYear and yearOfWeek are always present; they may be undefined.
Don't assume that weeks are always 7 days long; use daysInWeek instead.
Note that the current Temporal API does not support year-week dates, so you can't construct dates using these properties or serialize dates to year-week representations. They are only informational properties.

RFC 9557 formatAll Temporal classes can be serialized and deserialized using the format specified in RFC 9557, which is based on ISO 8601 / RFC 3339. The format, in its full form, is as follows (spaces are only for readability and should not be present in the actual string):
YYYY-MM-DD T HH:mm:ss.sssssssss Z/±HH:mm [time_zone_id] [u-ca=calendar_id]

Different classes have different requirements for the presence of each component, so you will find a section titled "RFC 9557 format" in each class's documentation, which specifies the format recognized by that class.
This is very similar to the date time string format used by Date, which is also based on ISO 8601. The main addition is the ability to specify micro- and nanosecond components, and the ability to specify the time zone and calendar system.Representable datesAll Temporal objects that represent a specific calendar date impose a similar limit on the range of representable dates, which is ±108 days (inclusive) from the Unix epoch, or the range of instants from -271821-04-20T00:00:00 to +275760-09-13T00:00:00. This is the same range as valid dates. More specifically:

Temporal.Instant and Temporal.ZonedDateTime apply this limit directly on its epochNanoseconds value.
Temporal.PlainDateTime interprets the date-time in the UTC time zone and requires it to be ±(108 + 1) days (exclusive) from the Unix epoch, so its valid range is -271821-04-19T00:00:00 to +275760-09-14T00:00:00, exclusive. This allows any ZonedDateTime to be converted to a PlainDateTime regardless of its offset.
Temporal.PlainDate applies the same check as PlainDateTime to the noon (12:00:00) of that date, so its valid range is -271821-04-19 to +275760-09-13. This allows any PlainDateTime to be converted to a PlainDate regardless of its time, and vice versa.
Temporal.PlainYearMonth has the valid range of -271821-04 to +275760-09. This allows any PlainDate to be converted to a PlainYearMonth regardless of its date (except if a non-ISO month's first day falls in the ISO month -271821-03).

The Temporal objects will refuse to construct an instance representing a date/time beyond this limit. This includes:

Using the constructor or from() static method.
Using the with() method to update calendar fields.
Using add(), subtract(), round(), or any other method to derive new instances.
Static properties
Temporal.Duration 
Experimental


Represents a difference between two time points, which can be used in date/time arithmetic. It is fundamentally represented as a combination of years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, and nanoseconds values.

Temporal.Instant 
Experimental


Represents a unique point in time, with nanosecond precision. It is fundamentally represented as the number of nanoseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC), without any time zone or calendar system.

Temporal.Now 
Experimental


Provides methods for getting the current time in various formats.

Temporal.PlainDate 
Experimental


Represents a calendar date (a date without a time or time zone); for example, an event on a calendar which happens during the whole day no matter which time zone it's happening in. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system.

Temporal.PlainDateTime 
Experimental


Represents a date (calendar date) and time (wall-clock time) without a time zone. It is fundamentally represented as a combination of a date (with an associated calendar system) and a time.

Temporal.PlainMonthDay 
Experimental


Represents the month and day of a calendar date, without a year or time zone; for example, an event on a calendar that recurs every year and happens during the whole day. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The year is used to disambiguate the month-day in non-ISO calendar systems.

Temporal.PlainTime 
Experimental


Represents a time without a date or time zone; for example, a recurring event that happens at the same time every day. It is fundamentally represented as a combination of hour, minute, second, millisecond, microsecond, and nanosecond values.

Temporal.PlainYearMonth 
Experimental


Represents the year and month of a calendar date, without a day or time zone; for example, an event on a calendar that happens during the whole month. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The day is used to disambiguate the year-month in non-ISO calendar systems.

Temporal.ZonedDateTime 
Experimental


Represents a date and time with a time zone. It is fundamentally represented as a combination of an instant, a time zone, and a calendar system.

Temporal[Symbol.toStringTag]

The initial value of the [Symbol.toStringTag] property is the string "Temporal". This property is used in Object.prototype.toString().

SpecificationsSpecificationTemporal proposal # sec-temporal-introBrowser compatibilitySee also
Intl.DateTimeFormat
Intl.RelativeTimeFormat
Intl.DurationFormat
Help improve MDNWas this page helpful to you?YesNoLearn how to contribute.This page was last modified on Apr 6, 2025 by MDN contributors.View this page on GitHub • Report a problem with this content\n\n\n\nMDN 2024 content projectsVadim MakeevJanuary 8, 20259 minute readMDN Web Docs provides accurate and accessible resources for people getting started building for the web right through to professional developers.
Our commitment includes maintenance of long-existing content and documenting features that are brand new to the web platform.
In 2024, the MDN content team chose some content areas to audit and update so they stay useful and relevant in an evolving web platform.
We looked at topics that were popular but contained some outdated or incomplete material, and invested time in improvements, additions, and removing obsolete content.
This post recaps what we achieved in our content projects in 2024, highlights some of our top picks and recommended reading, and looks forward to what's next on MDN for 2025.2024 MDN content areasFor 2024, we chose three technology categories that are popular, but had reader feedback that indicated they needed a refresh.
We focused on HTTP, MathML, and web Manifests.
From July to December 2024, the team worked through these areas to bring the quality up in a number of ways.
Let's have a look at what changed in each section below.MathMLMathML is an XML-based language for describing mathematical notation on the web. Similar to SVG, MathML can also be included in the HTML and rendered by the browser, no plugins or libraries are required.

  
    ∑
    
      n
      =
      1
    
    
      +
      ∞
    
  

html<math display="block">
  <munderover>
    <mo>∑</mo>
    <mrow>
      <mi>n</mi>
      <mo>=</mo>
      <mn>1</mn>
    </mrow>
    <mrow>
      <mo>+</mo>
      <mn>∞</mn>
    </mrow>
  </munderover>
</math>

Unlike the MathML Core specification, which often groups elements, MDN now features each MathML element on its page, with examples, usage notes, and BCD (browser-compat-data) now also updated. For example, you can read about <semantics>, <annotation> and <annotation-xml> elements and how they help to annotate MathML expressions.
Just like we're writing this blog post using Markdown instead of HTML, MathML is often generated by math processors using lightweight markup languages like LaTeX. To help content authors, all MathML examples now have annotations. For example, x2+yx^{2} + y can be written as x^{2} + y in LaTeX:
html<math>
  <semantics>
    <mrow>
      <msup>
        <mi>x</mi>
        <mn>2</mn>
      </msup>
      <mo>+</mo>
      <mi>y</mi>
    </mrow>
    <!-- Annotated with LaTeX, a lightweight markup language. -->
    <annotation encoding="application/x-tex">x^{2} + y</annotation>
  </semantics>
</math>

This will also allow us to start using LaTeX for MathML in the future, making it easier for content authors to write and maintain examples. To fully appreciate the difference, you can compare the full MathML source code of some bigger examples, such as Deriving the Quadratic Formula and Proving the Pythagorean theorem, with their LaTeX equivalents.
MathML documentation on MDN now features accessibility information for all elements. For example, using <math> element for representing math content allows screen readers to read the formula, which makes MathML better for such cases than using images or other formats.
Additionally, all MathML features now have live examples, so you can see how they're rendered in your browser. And just like with other live examples on MDN, you can always click "Play" in the top right corner to play around with the code in a new tab.
html,
body {
  height: 100%;
}

body {
  display: grid;
  place-items: center;
  font-size: 1.5rem;
}

<math display="block">
  <mrow>
    <mi>x</mi>
    <mo>=</mo>
    <mfrac>
      <mrow>
        <mrow>
          <mo>−</mo>
          <mi>b</mi>
        </mrow>
        <mo>±</mo>
        <msqrt>
          <mrow>
            <msup>
              <mi>b</mi>
              <mn>2</mn>
            </msup>
            <mo>−</mo>
            <mrow>
              <mn>4</mn>
              <mo>⁢</mo>
              <mi>a</mi>
              <mo>⁢</mo>
              <mi>c</mi>
            </mrow>
          </mrow>
        </msqrt>
      </mrow>
      <mrow>
        <mn>2</mn>
        <mo>⁢</mo>
        <mi>a</mi>
      </mrow>
    </mfrac>
  </mrow>
</math>


Not only is MathML documented on MDN, but it's also used to describe different parts of the web platform. For example, Set.difference() JavaScript method, CSS transformation functions, 3D collision detection in game development, WebXR Device API, and many more.
We made sure MathML is now rendered correctly throughout MDN: inside paragraphs and on the block level, on big and small screens, and in different browsers.Manifest (web app manifests)A web app manifest is a JSON text file that provides information about a web application.
The most common use for a manifest is to provide information that the browser needs to install a progressive web app (PWA) on a device, such as the app's name and icon.
json{
  "name": "HackerWeb",
  "short_name": "HackerWeb",
  "start_url": "/index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "description": "A readable Hacker News app",
  "icons": [
    {
      "src": "images/icons/homescreen192.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ]
}

For the manifest content updates, Dipika collaborated with Firefox engineer Jonathan Almeida to update browser compatibility data for manifest members in Firefox.
The manifest BCD additions now cover compat data for Firefox and Firefox for Android, ensuring accurate and up-to-date support information.
Readers on MDN, Can I use, and other sites, now have solid guidance on manifest support across browsers.
On the content side, several improvements landed across the section for prose, layout and templating fixes.
The page template is now improved for readability and consistency across the entire section.
For each member value (for example, "display": "standalone",), there is a proper prose description, with example scenarios where the value might be used.
Usage notes are collected into a dedicated "Description" section, and any caveats that the specification mentioned that were not in the MDN pages and now documented.
Some pages were missing "Syntax" sections completely, so now these gaps are filled so readers can better understand how to use the documented features and some possible member values:
json/* Boolean values */
"prefer_related_applications": true
"prefer_related_applications": false

This refresh made sure that the existing content was more comprehensive and readable but also included references to similar features, which allowed for more flexibility for developers. For example, using prefers-color-scheme in HTML to set different theme_color values for light and dark mode:
html<meta
  name="theme-color"
  content="#F4E6D8"
  media="(prefers-color-scheme: light)" />
<meta
  name="theme-color"
  content="#5D4037"
  media="(prefers-color-scheme: dark)" />
HTTP content updatesHTTP is a protocol that's foundational for data exchange on the web.
It allows communication between browsers and servers, but it can also be used for machine-to-machine communication, automating access to APIs, and more.
On MDN, the HTTP section has over 300 pages of reference material, and the majority of pages are about HTTP headers and response status codes.
Response status codes let the client know the outcome of a HTTP request (such as 200, 404), and give some additional context in certain cases.
There are 61 status codes documented on MDN and they include examples for common responses and clarifications for rarer types that web developers may not encounter often.
You can even make sure you're familiar with the 418 (I'm a teapot) status just in case.
There are 148 HTTP headers documented on MDN.
HTTP headers are the parts of the HTTP message that carry metadata, information about the client or server, instructions for the recipient, and so on.
Some headers have several sub-pages that describe mechanisms you can control via headers, such as Content Security Policy (CSP) directives that instruct a browser to restrict what the code comprising a site can run and Permissions Policy directives for requesting permission to use browser features such as location or microphone access.
The HTTP guides have overviews of how the protocol works, describing the evolution of the protocol from HTTP/0.9 right through to current versions.
We document different ways to control HTTP interactions such as caching and conditional requests, and we have guides about how to use and understand the protocol for beginners, right up to more involved topics.
A lot of the refresh of these guides meant making less specific references to HTTP/1.1 when talking about message formats seeing as HTTP/2 and HTTP/3 are increasingly common.
httpHEAD /en-US/docs/Web/HTTP HTTP/2
Host: developer.mozilla.org
User-Agent: curl/8.7.1
Accept: */*

* Request completely sent off
HTTP/2 200

To summarize, the changes we made across the entire HTTP section included adding examples where they were missing or too short to be useful, removing outdated or obsolete information, and making the formatting and presentation consistent over all pages.
HTTP highlights on MDN
Part of the refresh involved updating and adding sequence diagrams that explain client-server exchanges.
We've been finding mermaid syntax useful for a lot of these types of diagrams as it makes it easier to store sources for images that we may need to update later.
These images are stored in the shared-assets repository, which allows us to reuse images instead of duplicate them in the source, and these are easier to write, read, maintain, and they look nice, too:

One interesting pick from the HTTP section is the Server-Timing response header that you can use to surface server metrics to a client:
httpHTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: 123
Date: Fri, 03 Jan 2025 10:41:21 GMT
Server-Timing: custom-metric;dur=123.45;desc="My custom metric"

--- response body ---

Depending on the type of request, you can decide if you want to send server timings to the client, and these are visible in the Network request details panel in most browser's developer tools.
For example, the BBC iPlayer is using the Server-Timing header to send performance metrics about the service, visible in the Network > Timings panel below.
If you find this interesting, be sure to check the Performance API and the Web performance documentation.

For the HTTP section, most of the BCD updates involved improving the accuracy of existing entries and adding missing compat data for headers.
Additions included the Service-Worker request header for logging service worker script requests and the Sec-Websocket-* headers used in the WebSocket handshake.
Most of the HTTP updates are for older features, but the accuracy of the support information is crucial for developers making decisions about what to build.
One example is the Trailer compatibility details which now reflects browser implementations.
It's important to avoid misleading information in compatibility tables because they may encourage people to develop functionality in their applications for features that have poor browser support in reality.Other 2024 content highlights on MDNHere's a few interesting picks of documentation that landed in 2024:

New! CSS anchor positioning documentation
New! Using the View Transition API guide

Aside from reference docs, we've written about these topics on the MDN blog:

Locale-sensitive text segmentation in JavaScript with Intl.Segmenter
Exclusive accordions using the HTML <details> element
New JavaScript Set methods
Using the Page Visibility API
Interop 2023: MDN updates
Creating effective technical documentation

We also blogged about these changes and launches:

A new learning experience on MDN merging the MDN Curriculum into Learn Web Development.
Introducing the MDN HTTP Observatory for testing server HTTP header configuration.
And, of course, we have a new Community page which we are delighted to share!
Firefox release notes for developersFirefox release notes describe what's changed for everyday browser users.
The MDN team document each Firefox release with release notes specifically for developers.
That means in 2024, Firefox versions 122 up to 133 have pages describing the changes in each Firefox release that developers can target.
You can find everything in the Firefox release notes for developers pages.
Something you may not be aware of is that we also document Experimental features in Firefox.
This page describes features implemented in Firefox that are only available behind a preference (though configuration).
You can test out upcoming features before they are released, which is ideal if you're planning to use an experimental technology or if you're curious and would like to provide feedback on Bugzilla.Kicking off 2025The content projects that the team worked on were a superb learning experience, and we hope our readers benefit greatly from it.
If you want to make our docs better, let us know if there are other sections that need attention, and even lend your expertise.
If you want to learn about a topic, why not try to improve the documentation!
By contributing to MDN, you can improve your skills in a technology category, and millions of readers will benefit from it.
We're happy to share that we saw the following contributions in mdn/content GitHub repository in 2024:

915 different authors contributed.
~4300 pull requests opened.
~1500 issues opened.

We want to send out a big thanks to everyone who contributed in 2024 and we hope to see you continue in 2025.
One of the first larger changes we're excited to see is that JavaScript Temporal is coming with support scheduled to land in Firefox 135.
There is a huge pull request for Temporal authored by Josh-Cena, which means you can expect to be able to read Temporal documentation on MDN very soon.
We hope you enjoyed this post!
Feel free to get in touch with us and let us know what you think.Previous Post A new learning experience on MDNNext Post Fix your website's Largest Contentful Paint by optimizing image loadingPrevious Post A new learning experience on MDNNext Post Fix your website's Largest Contentful Paint by optimizing image loading\n\nIn this article2024 MDN content areasMathMLManifest (web app manifests)Other 2024 content highlights on MDNKicking off 2025MDN 2024 content projectsVadim MakeevJanuary 8, 20259 minute readMDN Web Docs provides accurate and accessible resources for people getting started building for the web right through to professional developers.
Our commitment includes maintenance of long-existing content and documenting features that are brand new to the web platform.
In 2024, the MDN content team chose some content areas to audit and update so they stay useful and relevant in an evolving web platform.
We looked at topics that were popular but contained some outdated or incomplete material, and invested time in improvements, additions, and removing obsolete content.
This post recaps what we achieved in our content projects in 2024, highlights some of our top picks and recommended reading, and looks forward to what's next on MDN for 2025.2024 MDN content areasFor 2024, we chose three technology categories that are popular, but had reader feedback that indicated they needed a refresh.
We focused on HTTP, MathML, and web Manifests.
From July to December 2024, the team worked through these areas to bring the quality up in a number of ways.
Let's have a look at what changed in each section below.MathMLMathML is an XML-based language for describing mathematical notation on the web. Similar to SVG, MathML can also be included in the HTML and rendered by the browser, no plugins or libraries are required.

  
    ∑
    
      n
      =
      1
    
    
      +
      ∞
    
  

html<math display="block">
  <munderover>
    <mo>∑</mo>
    <mrow>
      <mi>n</mi>
      <mo>=</mo>
      <mn>1</mn>
    </mrow>
    <mrow>
      <mo>+</mo>
      <mn>∞</mn>
    </mrow>
  </munderover>
</math>

Unlike the MathML Core specification, which often groups elements, MDN now features each MathML element on its page, with examples, usage notes, and BCD (browser-compat-data) now also updated. For example, you can read about <semantics>, <annotation> and <annotation-xml> elements and how they help to annotate MathML expressions.
Just like we're writing this blog post using Markdown instead of HTML, MathML is often generated by math processors using lightweight markup languages like LaTeX. To help content authors, all MathML examples now have annotations. For example, x2+yx^{2} + y can be written as x^{2} + y in LaTeX:
html<math>
  <semantics>
    <mrow>
      <msup>
        <mi>x</mi>
        <mn>2</mn>
      </msup>
      <mo>+</mo>
      <mi>y</mi>
    </mrow>
    <!-- Annotated with LaTeX, a lightweight markup language. -->
    <annotation encoding="application/x-tex">x^{2} + y</annotation>
  </semantics>
</math>

This will also allow us to start using LaTeX for MathML in the future, making it easier for content authors to write and maintain examples. To fully appreciate the difference, you can compare the full MathML source code of some bigger examples, such as Deriving the Quadratic Formula and Proving the Pythagorean theorem, with their LaTeX equivalents.
MathML documentation on MDN now features accessibility information for all elements. For example, using <math> element for representing math content allows screen readers to read the formula, which makes MathML better for such cases than using images or other formats.
Additionally, all MathML features now have live examples, so you can see how they're rendered in your browser. And just like with other live examples on MDN, you can always click "Play" in the top right corner to play around with the code in a new tab.
html,
body {
  height: 100%;
}

body {
  display: grid;
  place-items: center;
  font-size: 1.5rem;
}

<math display="block">
  <mrow>
    <mi>x</mi>
    <mo>=</mo>
    <mfrac>
      <mrow>
        <mrow>
          <mo>−</mo>
          <mi>b</mi>
        </mrow>
        <mo>±</mo>
        <msqrt>
          <mrow>
            <msup>
              <mi>b</mi>
              <mn>2</mn>
            </msup>
            <mo>−</mo>
            <mrow>
              <mn>4</mn>
              <mo>⁢</mo>
              <mi>a</mi>
              <mo>⁢</mo>
              <mi>c</mi>
            </mrow>
          </mrow>
        </msqrt>
      </mrow>
      <mrow>
        <mn>2</mn>
        <mo>⁢</mo>
        <mi>a</mi>
      </mrow>
    </mfrac>
  </mrow>
</math>


Not only is MathML documented on MDN, but it's also used to describe different parts of the web platform. For example, Set.difference() JavaScript method, CSS transformation functions, 3D collision detection in game development, WebXR Device API, and many more.
We made sure MathML is now rendered correctly throughout MDN: inside paragraphs and on the block level, on big and small screens, and in different browsers.Manifest (web app manifests)A web app manifest is a JSON text file that provides information about a web application.
The most common use for a manifest is to provide information that the browser needs to install a progressive web app (PWA) on a device, such as the app's name and icon.
json{
  "name": "HackerWeb",
  "short_name": "HackerWeb",
  "start_url": "/index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "description": "A readable Hacker News app",
  "icons": [
    {
      "src": "images/icons/homescreen192.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ]
}

For the manifest content updates, Dipika collaborated with Firefox engineer Jonathan Almeida to update browser compatibility data for manifest members in Firefox.
The manifest BCD additions now cover compat data for Firefox and Firefox for Android, ensuring accurate and up-to-date support information.
Readers on MDN, Can I use, and other sites, now have solid guidance on manifest support across browsers.
On the content side, several improvements landed across the section for prose, layout and templating fixes.
The page template is now improved for readability and consistency across the entire section.
For each member value (for example, "display": "standalone",), there is a proper prose description, with example scenarios where the value might be used.
Usage notes are collected into a dedicated "Description" section, and any caveats that the specification mentioned that were not in the MDN pages and now documented.
Some pages were missing "Syntax" sections completely, so now these gaps are filled so readers can better understand how to use the documented features and some possible member values:
json/* Boolean values */
"prefer_related_applications": true
"prefer_related_applications": false

This refresh made sure that the existing content was more comprehensive and readable but also included references to similar features, which allowed for more flexibility for developers. For example, using prefers-color-scheme in HTML to set different theme_color values for light and dark mode:
html<meta
  name="theme-color"
  content="#F4E6D8"
  media="(prefers-color-scheme: light)" />
<meta
  name="theme-color"
  content="#5D4037"
  media="(prefers-color-scheme: dark)" />
HTTP content updatesHTTP is a protocol that's foundational for data exchange on the web.
It allows communication between browsers and servers, but it can also be used for machine-to-machine communication, automating access to APIs, and more.
On MDN, the HTTP section has over 300 pages of reference material, and the majority of pages are about HTTP headers and response status codes.
Response status codes let the client know the outcome of a HTTP request (such as 200, 404), and give some additional context in certain cases.
There are 61 status codes documented on MDN and they include examples for common responses and clarifications for rarer types that web developers may not encounter often.
You can even make sure you're familiar with the 418 (I'm a teapot) status just in case.
There are 148 HTTP headers documented on MDN.
HTTP headers are the parts of the HTTP message that carry metadata, information about the client or server, instructions for the recipient, and so on.
Some headers have several sub-pages that describe mechanisms you can control via headers, such as Content Security Policy (CSP) directives that instruct a browser to restrict what the code comprising a site can run and Permissions Policy directives for requesting permission to use browser features such as location or microphone access.
The HTTP guides have overviews of how the protocol works, describing the evolution of the protocol from HTTP/0.9 right through to current versions.
We document different ways to control HTTP interactions such as caching and conditional requests, and we have guides about how to use and understand the protocol for beginners, right up to more involved topics.
A lot of the refresh of these guides meant making less specific references to HTTP/1.1 when talking about message formats seeing as HTTP/2 and HTTP/3 are increasingly common.
httpHEAD /en-US/docs/Web/HTTP HTTP/2
Host: developer.mozilla.org
User-Agent: curl/8.7.1
Accept: */*

* Request completely sent off
HTTP/2 200

To summarize, the changes we made across the entire HTTP section included adding examples where they were missing or too short to be useful, removing outdated or obsolete information, and making the formatting and presentation consistent over all pages.
HTTP highlights on MDN
Part of the refresh involved updating and adding sequence diagrams that explain client-server exchanges.
We've been finding mermaid syntax useful for a lot of these types of diagrams as it makes it easier to store sources for images that we may need to update later.
These images are stored in the shared-assets repository, which allows us to reuse images instead of duplicate them in the source, and these are easier to write, read, maintain, and they look nice, too:

One interesting pick from the HTTP section is the Server-Timing response header that you can use to surface server metrics to a client:
httpHTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: 123
Date: Fri, 03 Jan 2025 10:41:21 GMT
Server-Timing: custom-metric;dur=123.45;desc="My custom metric"

--- response body ---

Depending on the type of request, you can decide if you want to send server timings to the client, and these are visible in the Network request details panel in most browser's developer tools.
For example, the BBC iPlayer is using the Server-Timing header to send performance metrics about the service, visible in the Network > Timings panel below.
If you find this interesting, be sure to check the Performance API and the Web performance documentation.

For the HTTP section, most of the BCD updates involved improving the accuracy of existing entries and adding missing compat data for headers.
Additions included the Service-Worker request header for logging service worker script requests and the Sec-Websocket-* headers used in the WebSocket handshake.
Most of the HTTP updates are for older features, but the accuracy of the support information is crucial for developers making decisions about what to build.
One example is the Trailer compatibility details which now reflects browser implementations.
It's important to avoid misleading information in compatibility tables because they may encourage people to develop functionality in their applications for features that have poor browser support in reality.Other 2024 content highlights on MDNHere's a few interesting picks of documentation that landed in 2024:

New! CSS anchor positioning documentation
New! Using the View Transition API guide

Aside from reference docs, we've written about these topics on the MDN blog:

Locale-sensitive text segmentation in JavaScript with Intl.Segmenter
Exclusive accordions using the HTML <details> element
New JavaScript Set methods
Using the Page Visibility API
Interop 2023: MDN updates
Creating effective technical documentation

We also blogged about these changes and launches:

A new learning experience on MDN merging the MDN Curriculum into Learn Web Development.
Introducing the MDN HTTP Observatory for testing server HTTP header configuration.
And, of course, we have a new Community page which we are delighted to share!
Firefox release notes for developersFirefox release notes describe what's changed for everyday browser users.
The MDN team document each Firefox release with release notes specifically for developers.
That means in 2024, Firefox versions 122 up to 133 have pages describing the changes in each Firefox release that developers can target.
You can find everything in the Firefox release notes for developers pages.
Something you may not be aware of is that we also document Experimental features in Firefox.
This page describes features implemented in Firefox that are only available behind a preference (though configuration).
You can test out upcoming features before they are released, which is ideal if you're planning to use an experimental technology or if you're curious and would like to provide feedback on Bugzilla.Kicking off 2025The content projects that the team worked on were a superb learning experience, and we hope our readers benefit greatly from it.
If you want to make our docs better, let us know if there are other sections that need attention, and even lend your expertise.
If you want to learn about a topic, why not try to improve the documentation!
By contributing to MDN, you can improve your skills in a technology category, and millions of readers will benefit from it.
We're happy to share that we saw the following contributions in mdn/content GitHub repository in 2024:

915 different authors contributed.
~4300 pull requests opened.
~1500 issues opened.

We want to send out a big thanks to everyone who contributed in 2024 and we hope to see you continue in 2025.
One of the first larger changes we're excited to see is that JavaScript Temporal is coming with support scheduled to land in Firefox 135.
There is a huge pull request for Temporal authored by Josh-Cena, which means you can expect to be able to read Temporal documentation on MDN very soon.
We hope you enjoyed this post!
Feel free to get in touch with us and let us know what you think.Previous Post A new learning experience on MDNNext Post Fix your website's Largest Contentful Paint by optimizing image loading\n\nMDN 2024 content projectsVadim MakeevJanuary 8, 20259 minute readMDN Web Docs provides accurate and accessible resources for people getting started building for the web right through to professional developers.
Our commitment includes maintenance of long-existing content and documenting features that are brand new to the web platform.
In 2024, the MDN content team chose some content areas to audit and update so they stay useful and relevant in an evolving web platform.
We looked at topics that were popular but contained some outdated or incomplete material, and invested time in improvements, additions, and removing obsolete content.
This post recaps what we achieved in our content projects in 2024, highlights some of our top picks and recommended reading, and looks forward to what's next on MDN for 2025.2024 MDN content areasFor 2024, we chose three technology categories that are popular, but had reader feedback that indicated they needed a refresh.
We focused on HTTP, MathML, and web Manifests.
From July to December 2024, the team worked through these areas to bring the quality up in a number of ways.
Let's have a look at what changed in each section below.MathMLMathML is an XML-based language for describing mathematical notation on the web. Similar to SVG, MathML can also be included in the HTML and rendered by the browser, no plugins or libraries are required.

  
    ∑
    
      n
      =
      1
    
    
      +
      ∞
    
  

html<math display="block">
  <munderover>
    <mo>∑</mo>
    <mrow>
      <mi>n</mi>
      <mo>=</mo>
      <mn>1</mn>
    </mrow>
    <mrow>
      <mo>+</mo>
      <mn>∞</mn>
    </mrow>
  </munderover>
</math>

Unlike the MathML Core specification, which often groups elements, MDN now features each MathML element on its page, with examples, usage notes, and BCD (browser-compat-data) now also updated. For example, you can read about <semantics>, <annotation> and <annotation-xml> elements and how they help to annotate MathML expressions.
Just like we're writing this blog post using Markdown instead of HTML, MathML is often generated by math processors using lightweight markup languages like LaTeX. To help content authors, all MathML examples now have annotations. For example, x2+yx^{2} + y can be written as x^{2} + y in LaTeX:
html<math>
  <semantics>
    <mrow>
      <msup>
        <mi>x</mi>
        <mn>2</mn>
      </msup>
      <mo>+</mo>
      <mi>y</mi>
    </mrow>
    <!-- Annotated with LaTeX, a lightweight markup language. -->
    <annotation encoding="application/x-tex">x^{2} + y</annotation>
  </semantics>
</math>

This will also allow us to start using LaTeX for MathML in the future, making it easier for content authors to write and maintain examples. To fully appreciate the difference, you can compare the full MathML source code of some bigger examples, such as Deriving the Quadratic Formula and Proving the Pythagorean theorem, with their LaTeX equivalents.
MathML documentation on MDN now features accessibility information for all elements. For example, using <math> element for representing math content allows screen readers to read the formula, which makes MathML better for such cases than using images or other formats.
Additionally, all MathML features now have live examples, so you can see how they're rendered in your browser. And just like with other live examples on MDN, you can always click "Play" in the top right corner to play around with the code in a new tab.
html,
body {
  height: 100%;
}

body {
  display: grid;
  place-items: center;
  font-size: 1.5rem;
}

<math display="block">
  <mrow>
    <mi>x</mi>
    <mo>=</mo>
    <mfrac>
      <mrow>
        <mrow>
          <mo>−</mo>
          <mi>b</mi>
        </mrow>
        <mo>±</mo>
        <msqrt>
          <mrow>
            <msup>
              <mi>b</mi>
              <mn>2</mn>
            </msup>
            <mo>−</mo>
            <mrow>
              <mn>4</mn>
              <mo>⁢</mo>
              <mi>a</mi>
              <mo>⁢</mo>
              <mi>c</mi>
            </mrow>
          </mrow>
        </msqrt>
      </mrow>
      <mrow>
        <mn>2</mn>
        <mo>⁢</mo>
        <mi>a</mi>
      </mrow>
    </mfrac>
  </mrow>
</math>


Not only is MathML documented on MDN, but it's also used to describe different parts of the web platform. For example, Set.difference() JavaScript method, CSS transformation functions, 3D collision detection in game development, WebXR Device API, and many more.
We made sure MathML is now rendered correctly throughout MDN: inside paragraphs and on the block level, on big and small screens, and in different browsers.Manifest (web app manifests)A web app manifest is a JSON text file that provides information about a web application.
The most common use for a manifest is to provide information that the browser needs to install a progressive web app (PWA) on a device, such as the app's name and icon.
json{
  "name": "HackerWeb",
  "short_name": "HackerWeb",
  "start_url": "/index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "description": "A readable Hacker News app",
  "icons": [
    {
      "src": "images/icons/homescreen192.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ]
}

For the manifest content updates, Dipika collaborated with Firefox engineer Jonathan Almeida to update browser compatibility data for manifest members in Firefox.
The manifest BCD additions now cover compat data for Firefox and Firefox for Android, ensuring accurate and up-to-date support information.
Readers on MDN, Can I use, and other sites, now have solid guidance on manifest support across browsers.
On the content side, several improvements landed across the section for prose, layout and templating fixes.
The page template is now improved for readability and consistency across the entire section.
For each member value (for example, "display": "standalone",), there is a proper prose description, with example scenarios where the value might be used.
Usage notes are collected into a dedicated "Description" section, and any caveats that the specification mentioned that were not in the MDN pages and now documented.
Some pages were missing "Syntax" sections completely, so now these gaps are filled so readers can better understand how to use the documented features and some possible member values:
json/* Boolean values */
"prefer_related_applications": true
"prefer_related_applications": false

This refresh made sure that the existing content was more comprehensive and readable but also included references to similar features, which allowed for more flexibility for developers. For example, using prefers-color-scheme in HTML to set different theme_color values for light and dark mode:
html<meta
  name="theme-color"
  content="#F4E6D8"
  media="(prefers-color-scheme: light)" />
<meta
  name="theme-color"
  content="#5D4037"
  media="(prefers-color-scheme: dark)" />
HTTP content updatesHTTP is a protocol that's foundational for data exchange on the web.
It allows communication between browsers and servers, but it can also be used for machine-to-machine communication, automating access to APIs, and more.
On MDN, the HTTP section has over 300 pages of reference material, and the majority of pages are about HTTP headers and response status codes.
Response status codes let the client know the outcome of a HTTP request (such as 200, 404), and give some additional context in certain cases.
There are 61 status codes documented on MDN and they include examples for common responses and clarifications for rarer types that web developers may not encounter often.
You can even make sure you're familiar with the 418 (I'm a teapot) status just in case.
There are 148 HTTP headers documented on MDN.
HTTP headers are the parts of the HTTP message that carry metadata, information about the client or server, instructions for the recipient, and so on.
Some headers have several sub-pages that describe mechanisms you can control via headers, such as Content Security Policy (CSP) directives that instruct a browser to restrict what the code comprising a site can run and Permissions Policy directives for requesting permission to use browser features such as location or microphone access.
The HTTP guides have overviews of how the protocol works, describing the evolution of the protocol from HTTP/0.9 right through to current versions.
We document different ways to control HTTP interactions such as caching and conditional requests, and we have guides about how to use and understand the protocol for beginners, right up to more involved topics.
A lot of the refresh of these guides meant making less specific references to HTTP/1.1 when talking about message formats seeing as HTTP/2 and HTTP/3 are increasingly common.
httpHEAD /en-US/docs/Web/HTTP HTTP/2
Host: developer.mozilla.org
User-Agent: curl/8.7.1
Accept: */*

* Request completely sent off
HTTP/2 200

To summarize, the changes we made across the entire HTTP section included adding examples where they were missing or too short to be useful, removing outdated or obsolete information, and making the formatting and presentation consistent over all pages.
HTTP highlights on MDN
Part of the refresh involved updating and adding sequence diagrams that explain client-server exchanges.
We've been finding mermaid syntax useful for a lot of these types of diagrams as it makes it easier to store sources for images that we may need to update later.
These images are stored in the shared-assets repository, which allows us to reuse images instead of duplicate them in the source, and these are easier to write, read, maintain, and they look nice, too:

One interesting pick from the HTTP section is the Server-Timing response header that you can use to surface server metrics to a client:
httpHTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: 123
Date: Fri, 03 Jan 2025 10:41:21 GMT
Server-Timing: custom-metric;dur=123.45;desc="My custom metric"

--- response body ---

Depending on the type of request, you can decide if you want to send server timings to the client, and these are visible in the Network request details panel in most browser's developer tools.
For example, the BBC iPlayer is using the Server-Timing header to send performance metrics about the service, visible in the Network > Timings panel below.
If you find this interesting, be sure to check the Performance API and the Web performance documentation.

For the HTTP section, most of the BCD updates involved improving the accuracy of existing entries and adding missing compat data for headers.
Additions included the Service-Worker request header for logging service worker script requests and the Sec-Websocket-* headers used in the WebSocket handshake.
Most of the HTTP updates are for older features, but the accuracy of the support information is crucial for developers making decisions about what to build.
One example is the Trailer compatibility details which now reflects browser implementations.
It's important to avoid misleading information in compatibility tables because they may encourage people to develop functionality in their applications for features that have poor browser support in reality.Other 2024 content highlights on MDNHere's a few interesting picks of documentation that landed in 2024:

New! CSS anchor positioning documentation
New! Using the View Transition API guide

Aside from reference docs, we've written about these topics on the MDN blog:

Locale-sensitive text segmentation in JavaScript with Intl.Segmenter
Exclusive accordions using the HTML <details> element
New JavaScript Set methods
Using the Page Visibility API
Interop 2023: MDN updates
Creating effective technical documentation

We also blogged about these changes and launches:

A new learning experience on MDN merging the MDN Curriculum into Learn Web Development.
Introducing the MDN HTTP Observatory for testing server HTTP header configuration.
And, of course, we have a new Community page which we are delighted to share!
Firefox release notes for developersFirefox release notes describe what's changed for everyday browser users.
The MDN team document each Firefox release with release notes specifically for developers.
That means in 2024, Firefox versions 122 up to 133 have pages describing the changes in each Firefox release that developers can target.
You can find everything in the Firefox release notes for developers pages.
Something you may not be aware of is that we also document Experimental features in Firefox.
This page describes features implemented in Firefox that are only available behind a preference (though configuration).
You can test out upcoming features before they are released, which is ideal if you're planning to use an experimental technology or if you're curious and would like to provide feedback on Bugzilla.Kicking off 2025The content projects that the team worked on were a superb learning experience, and we hope our readers benefit greatly from it.
If you want to make our docs better, let us know if there are other sections that need attention, and even lend your expertise.
If you want to learn about a topic, why not try to improve the documentation!
By contributing to MDN, you can improve your skills in a technology category, and millions of readers will benefit from it.
We're happy to share that we saw the following contributions in mdn/content GitHub repository in 2024:

915 different authors contributed.
~4300 pull requests opened.
~1500 issues opened.

We want to send out a big thanks to everyone who contributed in 2024 and we hope to see you continue in 2025.
One of the first larger changes we're excited to see is that JavaScript Temporal is coming with support scheduled to land in Firefox 135.
There is a huge pull request for Temporal authored by Josh-Cena, which means you can expect to be able to read Temporal documentation on MDN very soon.
We hope you enjoyed this post!
Feel free to get in touch with us and let us know what you think.Previous Post A new learning experience on MDNNext Post Fix your website's Largest Contentful Paint by optimizing image loading\n\n\n\nA new learning experience on MDNRuth JohnDecember 20, 20244 minute readA major update to the MDN Learn Web Development section started in November 2024 and was finally published in December 2024.
To summarize, the MDN Curriculum has been merged into Learn Web Development.
This post looks at the background leading up to this decision being made, what the changes mean specifically, and what updates you can expect to see in the future.Overview of learning material on MDNWe originally launched the MDN Learn Web Development section in 2016 with the aim of making MDN more accessible to non-experts and helping to take new web developers from "beginner to comfortable".
The content was pretty successful — by 2019 it was being used by over a million people per month to learn web development topics.
However, it was noted that the structure was sub-par:

The content had become bloated with topics that weren't really suitable for beginner web developers — either they were too advanced, or they were out of scope altogether.
Beginners tend to want a robust pathway they can follow to get the knowledge they need, rather than being expected to figure out what to learn and when.
Learners these days tend to want interactive multimedia content, not just text.
Developing the MDN curriculumTo solve the second issue highlighted above, we created a resource to help guide people towards learning a better skillset, making them more employable, and enabling them to build a better, more accessible, more responsible web of tomorrow.
As part of this project, we did substantial research to find out exactly what skills are seen as essential in new hires, and what the most common knowledge gaps are.
The resulting curriculum was intended to be useful as a study guide for self-learners, and a syllabus for educators to base courses on.
We also used it as a place to experiment with including interactive multimedia content via our learning partner, Scrimba.
We launched the MDN Curriculum in early 2024.Why the update?The curriculum was well-received by educators, but we quickly received feedback that users found it confusing having two learning resources on MDN, with the curriculum/learning pathway in one place and the learning content in another place.
In addition, the pathway was just a curriculum; learners still had to figure out what content to look at to achieve the learning objectives. And it did nothing to solve the first issue listed above — the content was still bloated.The new state of learning material on MDN
To provide a less confusing, more streamlined learning experience, we decided to merge the curriculum pathway into the MDN Learn Web Development section, restructuring it in the process. The results can be seen at the following new URL — developer.mozilla.org/docs/Learn_web_development.

The most significant changes are as follows:

The articles now follow the same structure as the curriculum, with useful background and environment setup information in Getting started, the web fundamentals everyone should know in Core, and optional extra topics in Extensions. There is a clear pathway to follow between each article in the first two major sections, so readers know what to learn next at each stage.
In some cases, content was deemed not suitable for a beginner audience and has been repurposed as extensions/additional articles or migrated to other parts of MDN.
The specific learning outcomes detailed in the curriculum have been added to the top of the Getting started, Core, and some of the Extension articles, to match the learning outcomes detailed in the Curriculum.
Other features from the Curriculum have been migrated across to the Learn Web Development section, such as the About page and Resources for educators.

Initially, the Curriculum section will stay, however it will be merged into the Learn area over the next few iterations of this work and will be removed when it is felt the time is right.
We will keep a downloadable version as a resource for educators.What's next for learners on MDNMoving forward, we will continue to update the content and design to make Learn Web Development even more useful to learners and educators.
We are intending to give the article content a significant overhaul as we move into 2025. A lot of the content is timeless and does a good job of teaching the fundamentals, but the pacing is uneven, some of the articles are pretty long (which can be intimidating for beginners), and some of the challenges and examples have been around for a long time. Inspired by resources such as the content produced by our learning partner, Scrimba, we intend to shake our content up a bit to make it more fun, bite-size, and digestible.
We are also looking at improving the design of our learning pages, to echo the bright bold design we used on the curriculum and improve the experience further.
You can expect to see regular iterative improvements going forward, so watch this space.SummaryWe hope you find the new Learn Web Development content structure useful — have a look around and let us know what you think.
If you still have unanswered questions or wish to report issues, please get in touch via the usual communication channels.
If your issue concerns a specific piece of content, you might want to file a GitHub issue.Previous Post Countdown to the holidays with daily coding challengesNext Post MDN 2024 content projectsPrevious Post Countdown to the holidays with daily coding challengesNext Post MDN 2024 content projects\n\nIn this articleOverview of learning material on MDNDeveloping the MDN curriculumWhy the update?The new state of learning material on MDNWhat's next for learners on MDNSummaryA new learning experience on MDNRuth JohnDecember 20, 20244 minute readA major update to the MDN Learn Web Development section started in November 2024 and was finally published in December 2024.
To summarize, the MDN Curriculum has been merged into Learn Web Development.
This post looks at the background leading up to this decision being made, what the changes mean specifically, and what updates you can expect to see in the future.Overview of learning material on MDNWe originally launched the MDN Learn Web Development section in 2016 with the aim of making MDN more accessible to non-experts and helping to take new web developers from "beginner to comfortable".
The content was pretty successful — by 2019 it was being used by over a million people per month to learn web development topics.
However, it was noted that the structure was sub-par:

The content had become bloated with topics that weren't really suitable for beginner web developers — either they were too advanced, or they were out of scope altogether.
Beginners tend to want a robust pathway they can follow to get the knowledge they need, rather than being expected to figure out what to learn and when.
Learners these days tend to want interactive multimedia content, not just text.
Developing the MDN curriculumTo solve the second issue highlighted above, we created a resource to help guide people towards learning a better skillset, making them more employable, and enabling them to build a better, more accessible, more responsible web of tomorrow.
As part of this project, we did substantial research to find out exactly what skills are seen as essential in new hires, and what the most common knowledge gaps are.
The resulting curriculum was intended to be useful as a study guide for self-learners, and a syllabus for educators to base courses on.
We also used it as a place to experiment with including interactive multimedia content via our learning partner, Scrimba.
We launched the MDN Curriculum in early 2024.Why the update?The curriculum was well-received by educators, but we quickly received feedback that users found it confusing having two learning resources on MDN, with the curriculum/learning pathway in one place and the learning content in another place.
In addition, the pathway was just a curriculum; learners still had to figure out what content to look at to achieve the learning objectives. And it did nothing to solve the first issue listed above — the content was still bloated.The new state of learning material on MDN
To provide a less confusing, more streamlined learning experience, we decided to merge the curriculum pathway into the MDN Learn Web Development section, restructuring it in the process. The results can be seen at the following new URL — developer.mozilla.org/docs/Learn_web_development.

The most significant changes are as follows:

The articles now follow the same structure as the curriculum, with useful background and environment setup information in Getting started, the web fundamentals everyone should know in Core, and optional extra topics in Extensions. There is a clear pathway to follow between each article in the first two major sections, so readers know what to learn next at each stage.
In some cases, content was deemed not suitable for a beginner audience and has been repurposed as extensions/additional articles or migrated to other parts of MDN.
The specific learning outcomes detailed in the curriculum have been added to the top of the Getting started, Core, and some of the Extension articles, to match the learning outcomes detailed in the Curriculum.
Other features from the Curriculum have been migrated across to the Learn Web Development section, such as the About page and Resources for educators.

Initially, the Curriculum section will stay, however it will be merged into the Learn area over the next few iterations of this work and will be removed when it is felt the time is right.
We will keep a downloadable version as a resource for educators.What's next for learners on MDNMoving forward, we will continue to update the content and design to make Learn Web Development even more useful to learners and educators.
We are intending to give the article content a significant overhaul as we move into 2025. A lot of the content is timeless and does a good job of teaching the fundamentals, but the pacing is uneven, some of the articles are pretty long (which can be intimidating for beginners), and some of the challenges and examples have been around for a long time. Inspired by resources such as the content produced by our learning partner, Scrimba, we intend to shake our content up a bit to make it more fun, bite-size, and digestible.
We are also looking at improving the design of our learning pages, to echo the bright bold design we used on the curriculum and improve the experience further.
You can expect to see regular iterative improvements going forward, so watch this space.SummaryWe hope you find the new Learn Web Development content structure useful — have a look around and let us know what you think.
If you still have unanswered questions or wish to report issues, please get in touch via the usual communication channels.
If your issue concerns a specific piece of content, you might want to file a GitHub issue.Previous Post Countdown to the holidays with daily coding challengesNext Post MDN 2024 content projects\n\nA new learning experience on MDNRuth JohnDecember 20, 20244 minute readA major update to the MDN Learn Web Development section started in November 2024 and was finally published in December 2024.
To summarize, the MDN Curriculum has been merged into Learn Web Development.
This post looks at the background leading up to this decision being made, what the changes mean specifically, and what updates you can expect to see in the future.Overview of learning material on MDNWe originally launched the MDN Learn Web Development section in 2016 with the aim of making MDN more accessible to non-experts and helping to take new web developers from "beginner to comfortable".
The content was pretty successful — by 2019 it was being used by over a million people per month to learn web development topics.
However, it was noted that the structure was sub-par:

The content had become bloated with topics that weren't really suitable for beginner web developers — either they were too advanced, or they were out of scope altogether.
Beginners tend to want a robust pathway they can follow to get the knowledge they need, rather than being expected to figure out what to learn and when.
Learners these days tend to want interactive multimedia content, not just text.
Developing the MDN curriculumTo solve the second issue highlighted above, we created a resource to help guide people towards learning a better skillset, making them more employable, and enabling them to build a better, more accessible, more responsible web of tomorrow.
As part of this project, we did substantial research to find out exactly what skills are seen as essential in new hires, and what the most common knowledge gaps are.
The resulting curriculum was intended to be useful as a study guide for self-learners, and a syllabus for educators to base courses on.
We also used it as a place to experiment with including interactive multimedia content via our learning partner, Scrimba.
We launched the MDN Curriculum in early 2024.Why the update?The curriculum was well-received by educators, but we quickly received feedback that users found it confusing having two learning resources on MDN, with the curriculum/learning pathway in one place and the learning content in another place.
In addition, the pathway was just a curriculum; learners still had to figure out what content to look at to achieve the learning objectives. And it did nothing to solve the first issue listed above — the content was still bloated.The new state of learning material on MDN
To provide a less confusing, more streamlined learning experience, we decided to merge the curriculum pathway into the MDN Learn Web Development section, restructuring it in the process. The results can be seen at the following new URL — developer.mozilla.org/docs/Learn_web_development.

The most significant changes are as follows:

The articles now follow the same structure as the curriculum, with useful background and environment setup information in Getting started, the web fundamentals everyone should know in Core, and optional extra topics in Extensions. There is a clear pathway to follow between each article in the first two major sections, so readers know what to learn next at each stage.
In some cases, content was deemed not suitable for a beginner audience and has been repurposed as extensions/additional articles or migrated to other parts of MDN.
The specific learning outcomes detailed in the curriculum have been added to the top of the Getting started, Core, and some of the Extension articles, to match the learning outcomes detailed in the Curriculum.
Other features from the Curriculum have been migrated across to the Learn Web Development section, such as the About page and Resources for educators.

Initially, the Curriculum section will stay, however it will be merged into the Learn area over the next few iterations of this work and will be removed when it is felt the time is right.
We will keep a downloadable version as a resource for educators.What's next for learners on MDNMoving forward, we will continue to update the content and design to make Learn Web Development even more useful to learners and educators.
We are intending to give the article content a significant overhaul as we move into 2025. A lot of the content is timeless and does a good job of teaching the fundamentals, but the pacing is uneven, some of the articles are pretty long (which can be intimidating for beginners), and some of the challenges and examples have been around for a long time. Inspired by resources such as the content produced by our learning partner, Scrimba, we intend to shake our content up a bit to make it more fun, bite-size, and digestible.
We are also looking at improving the design of our learning pages, to echo the bright bold design we used on the curriculum and improve the experience further.
You can expect to see regular iterative improvements going forward, so watch this space.SummaryWe hope you find the new Learn Web Development content structure useful — have a look around and let us know what you think.
If you still have unanswered questions or wish to report issues, please get in touch via the usual communication channels.
If your issue concerns a specific piece of content, you might want to file a GitHub issue.Previous Post Countdown to the holidays with daily coding challengesNext Post MDN 2024 content projects\n\n\n\nIntroducing the new MDN Community pagePranshu KhannaOctober 15, 20245 minute readMDN has always been a place for people to connect, collaborate, and grow. As we look to the future, we want to celebrate our achievements and bring people together on the exciting path ahead. Today, I'm thrilled to introduce our brand-new community page.
Launching during Hacktoberfest, a month-long celebration of open source, is excellent timing for MDN, the go-to place for open-source web documentation. We're thrilled to welcome even more contributors and acknowledge the achievements of the MDN community.What's new for the MDN Community?We aim to make your community experience welcoming and engaging. You'll quickly find the resources you need, and we'll showcase more of the community's contributions. I'm excited to guide you through the new updates that make this space more interactive and valuable for everyone!A place for collaboration and growthOur new Community page highlights contributions from developers, writers, and learners who work together to improve MDN. Many community members contribute to MDN to grow their technical, writing, and language skills while building connections with collaborators. We invite you to connect with other members, share your knowledge, learn from others, and grow professionally alongside peers as passionate about the web as you are.
Recognizing our contributorsMeet Our Contributors highlights people who have contributed to the platform. We celebrate the diverse skills and backgrounds that help MDN's mission to provide a blueprint for a better internet and empower a new generation of developers and content creators to build it.
The Contributor Spotlight program is a series of personal stories about what motivates people to work on MDN. People like Joshua appreciate MDN's infrastructure, which is unique in how it helps everyone work efficiently, or Hochan, who enjoys the community's diversity and how it broadens his perspective. We're proud to amplify and share the voices of our community and the reasons why they are driven to improve MDN.Get recognition for your contributionsWe want this to be a community where everyone's contributions are visible and valued. If you're passionate about making the web better, there are so many ways to get involved. You can squash bugs, improve content, help with localization, or even answer questions on Discord. Every contribution, no matter the size, helps shape the future of MDN, and we want to ensure those efforts don't go unnoticed.
By contributing, your name could also appear on this page as one of the dedicated individuals shaping the web. Whether through our GitHub repository, working on translation efforts, or simply helping out other developers, there are plenty of opportunities to be a part of this community and leave your mark. The new page makes it easier than ever to get started, with guides and resources available to help you find the best way to contribute.
Contributing to open sourceIf you're new to contributing to MDN, we've made it easier than ever to get started. We've added a video that offers simple, clear instructions on how you can begin making an impact. We collaborate on GitHub, and you'll find step-by-step guidance to help you with writing, fixing bugs, or even improving documentation. Plus, you can check out our helpful video on how to get started with contributing to MDN Web Docs, so you're fully prepared to make your first contribution.
MDN is driven by a global community dedicated to documenting the web for the future. Whatever your skill set, there's a place for you to make a difference. You can now easily get involved, and start playing your part in building a better, more inclusive web.
Want to start contributing to MDN?We understand if you're new to MDN or open-source projects, and would like to start right away. That is exactly why we have our first issues front and center, it is the perfect place to start. We've highlighted beginner-friendly issues to help you improve MDN. This section lists specific tasks that are great for first-time contributors, whether it's fixing a bug, addressing an issue with documentation, or enhancing translated content. You'll find clear guidance on how to contribute, along with links to relevant repositories, so you can jump right in and start making an impact.
Join the conversationMDN is an open-source project that you can help us shape in many ways. We'd love it if you dropped by our Discord so you can get to know other community members, ask questions, and get help from fellow developers. It's a space for lively discussion where you can share ideas and seek advice. Also, we invite you to Join our Community Call, where you'll receive updates from the MDN team, hear about new initiatives, and share your questions and thoughts on how we can continue improving the platform and content. Whether through Discord or our calls, we want you to have the space to connect and make an impact in this community.
Licensing and reuseMDN Resources are openly accessible and free to reuse under a variety of open-source licenses. We encourage developers, educators, and content creators to use and share MDN's materials, as long as proper attribution is given. Our goal is to ensure that the knowledge we build together is freely available to anyone who needs it, while still protecting the contributions of our community members.
We're incredibly excited about the future of our community and what we can build together. We want our platform to be even more collaborative, accessible, and vibrant, where every contribution supports and shapes the web, and there's a place for everyone to make an impact.
We'd love to hear your feedback on the new community page or any ideas you have for improving MDN. Let us know on Discord or start a discussion on GitHub. I look forward to seeing you there!Previous Post Fixing your website's JavaScript performanceNext Post How to land your first developer jobPrevious Post Fixing your website's JavaScript performanceNext Post How to land your first developer job\n\nIn this articleWhat's new for the MDN Community?Want to start contributing to MDN?Join the conversationLicensing and reuseIntroducing the new MDN Community pagePranshu KhannaOctober 15, 20245 minute readMDN has always been a place for people to connect, collaborate, and grow. As we look to the future, we want to celebrate our achievements and bring people together on the exciting path ahead. Today, I'm thrilled to introduce our brand-new community page.
Launching during Hacktoberfest, a month-long celebration of open source, is excellent timing for MDN, the go-to place for open-source web documentation. We're thrilled to welcome even more contributors and acknowledge the achievements of the MDN community.What's new for the MDN Community?We aim to make your community experience welcoming and engaging. You'll quickly find the resources you need, and we'll showcase more of the community's contributions. I'm excited to guide you through the new updates that make this space more interactive and valuable for everyone!A place for collaboration and growthOur new Community page highlights contributions from developers, writers, and learners who work together to improve MDN. Many community members contribute to MDN to grow their technical, writing, and language skills while building connections with collaborators. We invite you to connect with other members, share your knowledge, learn from others, and grow professionally alongside peers as passionate about the web as you are.
Recognizing our contributorsMeet Our Contributors highlights people who have contributed to the platform. We celebrate the diverse skills and backgrounds that help MDN's mission to provide a blueprint for a better internet and empower a new generation of developers and content creators to build it.
The Contributor Spotlight program is a series of personal stories about what motivates people to work on MDN. People like Joshua appreciate MDN's infrastructure, which is unique in how it helps everyone work efficiently, or Hochan, who enjoys the community's diversity and how it broadens his perspective. We're proud to amplify and share the voices of our community and the reasons why they are driven to improve MDN.Get recognition for your contributionsWe want this to be a community where everyone's contributions are visible and valued. If you're passionate about making the web better, there are so many ways to get involved. You can squash bugs, improve content, help with localization, or even answer questions on Discord. Every contribution, no matter the size, helps shape the future of MDN, and we want to ensure those efforts don't go unnoticed.
By contributing, your name could also appear on this page as one of the dedicated individuals shaping the web. Whether through our GitHub repository, working on translation efforts, or simply helping out other developers, there are plenty of opportunities to be a part of this community and leave your mark. The new page makes it easier than ever to get started, with guides and resources available to help you find the best way to contribute.
Contributing to open sourceIf you're new to contributing to MDN, we've made it easier than ever to get started. We've added a video that offers simple, clear instructions on how you can begin making an impact. We collaborate on GitHub, and you'll find step-by-step guidance to help you with writing, fixing bugs, or even improving documentation. Plus, you can check out our helpful video on how to get started with contributing to MDN Web Docs, so you're fully prepared to make your first contribution.
MDN is driven by a global community dedicated to documenting the web for the future. Whatever your skill set, there's a place for you to make a difference. You can now easily get involved, and start playing your part in building a better, more inclusive web.
Want to start contributing to MDN?We understand if you're new to MDN or open-source projects, and would like to start right away. That is exactly why we have our first issues front and center, it is the perfect place to start. We've highlighted beginner-friendly issues to help you improve MDN. This section lists specific tasks that are great for first-time contributors, whether it's fixing a bug, addressing an issue with documentation, or enhancing translated content. You'll find clear guidance on how to contribute, along with links to relevant repositories, so you can jump right in and start making an impact.
Join the conversationMDN is an open-source project that you can help us shape in many ways. We'd love it if you dropped by our Discord so you can get to know other community members, ask questions, and get help from fellow developers. It's a space for lively discussion where you can share ideas and seek advice. Also, we invite you to Join our Community Call, where you'll receive updates from the MDN team, hear about new initiatives, and share your questions and thoughts on how we can continue improving the platform and content. Whether through Discord or our calls, we want you to have the space to connect and make an impact in this community.
Licensing and reuseMDN Resources are openly accessible and free to reuse under a variety of open-source licenses. We encourage developers, educators, and content creators to use and share MDN's materials, as long as proper attribution is given. Our goal is to ensure that the knowledge we build together is freely available to anyone who needs it, while still protecting the contributions of our community members.
We're incredibly excited about the future of our community and what we can build together. We want our platform to be even more collaborative, accessible, and vibrant, where every contribution supports and shapes the web, and there's a place for everyone to make an impact.
We'd love to hear your feedback on the new community page or any ideas you have for improving MDN. Let us know on Discord or start a discussion on GitHub. I look forward to seeing you there!Previous Post Fixing your website's JavaScript performanceNext Post How to land your first developer job\n\nIntroducing the new MDN Community pagePranshu KhannaOctober 15, 20245 minute readMDN has always been a place for people to connect, collaborate, and grow. As we look to the future, we want to celebrate our achievements and bring people together on the exciting path ahead. Today, I'm thrilled to introduce our brand-new community page.
Launching during Hacktoberfest, a month-long celebration of open source, is excellent timing for MDN, the go-to place for open-source web documentation. We're thrilled to welcome even more contributors and acknowledge the achievements of the MDN community.What's new for the MDN Community?We aim to make your community experience welcoming and engaging. You'll quickly find the resources you need, and we'll showcase more of the community's contributions. I'm excited to guide you through the new updates that make this space more interactive and valuable for everyone!A place for collaboration and growthOur new Community page highlights contributions from developers, writers, and learners who work together to improve MDN. Many community members contribute to MDN to grow their technical, writing, and language skills while building connections with collaborators. We invite you to connect with other members, share your knowledge, learn from others, and grow professionally alongside peers as passionate about the web as you are.
Recognizing our contributorsMeet Our Contributors highlights people who have contributed to the platform. We celebrate the diverse skills and backgrounds that help MDN's mission to provide a blueprint for a better internet and empower a new generation of developers and content creators to build it.
The Contributor Spotlight program is a series of personal stories about what motivates people to work on MDN. People like Joshua appreciate MDN's infrastructure, which is unique in how it helps everyone work efficiently, or Hochan, who enjoys the community's diversity and how it broadens his perspective. We're proud to amplify and share the voices of our community and the reasons why they are driven to improve MDN.Get recognition for your contributionsWe want this to be a community where everyone's contributions are visible and valued. If you're passionate about making the web better, there are so many ways to get involved. You can squash bugs, improve content, help with localization, or even answer questions on Discord. Every contribution, no matter the size, helps shape the future of MDN, and we want to ensure those efforts don't go unnoticed.
By contributing, your name could also appear on this page as one of the dedicated individuals shaping the web. Whether through our GitHub repository, working on translation efforts, or simply helping out other developers, there are plenty of opportunities to be a part of this community and leave your mark. The new page makes it easier than ever to get started, with guides and resources available to help you find the best way to contribute.
Contributing to open sourceIf you're new to contributing to MDN, we've made it easier than ever to get started. We've added a video that offers simple, clear instructions on how you can begin making an impact. We collaborate on GitHub, and you'll find step-by-step guidance to help you with writing, fixing bugs, or even improving documentation. Plus, you can check out our helpful video on how to get started with contributing to MDN Web Docs, so you're fully prepared to make your first contribution.
MDN is driven by a global community dedicated to documenting the web for the future. Whatever your skill set, there's a place for you to make a difference. You can now easily get involved, and start playing your part in building a better, more inclusive web.
Want to start contributing to MDN?We understand if you're new to MDN or open-source projects, and would like to start right away. That is exactly why we have our first issues front and center, it is the perfect place to start. We've highlighted beginner-friendly issues to help you improve MDN. This section lists specific tasks that are great for first-time contributors, whether it's fixing a bug, addressing an issue with documentation, or enhancing translated content. You'll find clear guidance on how to contribute, along with links to relevant repositories, so you can jump right in and start making an impact.
Join the conversationMDN is an open-source project that you can help us shape in many ways. We'd love it if you dropped by our Discord so you can get to know other community members, ask questions, and get help from fellow developers. It's a space for lively discussion where you can share ideas and seek advice. Also, we invite you to Join our Community Call, where you'll receive updates from the MDN team, hear about new initiatives, and share your questions and thoughts on how we can continue improving the platform and content. Whether through Discord or our calls, we want you to have the space to connect and make an impact in this community.
Licensing and reuseMDN Resources are openly accessible and free to reuse under a variety of open-source licenses. We encourage developers, educators, and content creators to use and share MDN's materials, as long as proper attribution is given. Our goal is to ensure that the knowledge we build together is freely available to anyone who needs it, while still protecting the contributions of our community members.
We're incredibly excited about the future of our community and what we can build together. We want our platform to be even more collaborative, accessible, and vibrant, where every contribution supports and shapes the web, and there's a place for everyone to make an impact.
We'd love to hear your feedback on the new community page or any ideas you have for improving MDN. Let us know on Discord or start a discussion on GitHub. I look forward to seeing you there!Previous Post Fixing your website's JavaScript performanceNext Post How to land your first developer job\n\n\n\nContributor profile@yashrajbhartiHi! I'm Yash, a UXE and a Senior Mentor of the Liquid Galaxy, where I work on GIS applications, making immersive data viz projects on Google Maps, Street View, and Earth. Liquid Galaxy is a Google-founded open-source project and was my primary reason for falling in love with open-source. I work on the web with HTML, CSS, and JS, and I believe that honing strong basics can make even the most complex tasks easy.
I still remember my first contribution to MDN. I was so proud of myself. Even though the fix was small, the cheer from Will Bamberg at the time meant a lot. It was for PWA docs, where I corrected that the iTunes value associated with the App Store for platform members of related apps has been dropped since it's currently not supported by Safari.
Since then, I have been lurking to find a way to contribute to MDN. I also contributed to web.dev to learn more. I am not new to MDN, W3C, or web.dev (HTML5Rocks), and have been learning like a nerd for the last 9 years, but a couple of years back, I started finally contributing. I felt like helping the community, making explainers, and I worked alongside people like Adam Argyle on a CSS motion blur proposal and Thomas Steiner (Project Fugu). I discovered, that when I put my passion and heart into something, I can achieve it. The grit to solve challenges isn't new to me.
My work at Liquid Galaxy, documentation, and creating an innovative UX to control Google Earth using Google Maps led me to get invited as a Speaker to Google, CA, USA, which was my first time outside India. I got to speak at Talks at Google, and most importantly, to network! I met Kristi Progri who was previously a Mozilla Representative, and I thought "that's so cool, I read MDN every day" and I was confident that I could get involved, too.
After an incredible journey to Google, knowing the roots of the Liquid Galaxy from 2008, I was mesmerized and was full of energy to do something, so I went to MDN and saw some small bugs like buttontext details, where I met Estelle Weyl (and I'm so thankful I did, as I had all the passion and pure knowledge waiting to test the waters). They helped me with the contributions by stating how buttontext for accessibility reasons will be fixed by filing a bug in WebKit. After some PRs like this, I mailed them asking to create an issue about the <model> tag. They told me it's still a WIP but there are some Baseline 'Widely Available' PRs I can contribute to. They trusted me, created a Google Sheet, and gave me edit access. And I delivered. The rest is history, I found my chance and took it, I knew Estelle because I had read her book on CSS, and was amazed to work alongside her on this. This sheet holds value to me and is the most up-to-date record of the work we are doing.
I love it because just think about how many future developers can be helped with it, those who truly learn like me and do not rely on crash courses to just get it "done". I thank Estelle for my journey and I want to stay in this community and help make MDN the library, a well-organized library I know it as, where you just know where each book is.Yash Raj BhartiMDN resonates with my passion to build a consistent and open web, where developers can learn and grow.How did you start using MDN?I started just like others, but using it as a source of learning, from those little tooltips that say "MDN reference" in VS Code, all the way to contributing and making the docs correct, wherever I can find a way to contribute, to hopefully be a part of it.What do you like about MDN?I like that it has all the implementation knowledge needed. When documenting, what I truly got to know from Will was, we are not just paraphrasing W3C specs, we are building it with an abstraction keeping in mind developers (and UXEs like me too) are our end users.Why do you contribute to Open Source or MDN?Anything open source is where we can ask "why should we not contribute"? There's all the reasons in the world to help and let everyone prosper, and that's what I love, whether it's for Google or Mozilla.What do you enjoy about contributing to MDN?I loved making DOMQuad as I was learning first hand and I believe I will become an encyclopedia as a by-product of helping others! That's rad.\n\n\n\n
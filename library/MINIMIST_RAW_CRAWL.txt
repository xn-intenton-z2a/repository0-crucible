minimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nInstallation

npm install --save @types/minimist

Summary
This package contains type definitions for minimist (https://github.com/substack/minimist).
Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/minimist.
Additional Details

Last updated: Tue, 07 Nov 2023 09:09:39 GMT
Dependencies: none

Credits
These definitions were written by Bart van der Schoor, Necroskillz, kamranayub, and Piotr Błażejewicz.\n\n@types/minimist1.2.5 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies440 Dependents17 VersionsInstallation

npm install --save @types/minimist

Summary
This package contains type definitions for minimist (https://github.com/substack/minimist).
Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/minimist.
Additional Details

Last updated: Tue, 07 Nov 2023 09:09:39 GMT
Dependencies: none

Credits
These definitions were written by Bart van der Schoor, Necroskillz, kamranayub, and Piotr Błażejewicz.
ReadmeKeywordsnonePackage SidebarInstallnpm i @types/minimistRepositorygithub.com/DefinitelyTyped/DefinitelyTypedHomepagegithub.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/minimistWeekly Downloads12,077,453Version1.2.5LicenseMITUnpacked Size6.27 kBTotal Files5Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n@types/minimist1.2.5 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies440 Dependents17 VersionsInstallation

npm install --save @types/minimist

Summary
This package contains type definitions for minimist (https://github.com/substack/minimist).
Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/minimist.
Additional Details

Last updated: Tue, 07 Nov 2023 09:09:39 GMT
Dependencies: none

Credits
These definitions were written by Bart van der Schoor, Necroskillz, kamranayub, and Piotr Błażejewicz.
ReadmeKeywordsnonePackage SidebarInstallnpm i @types/minimistRepositorygithub.com/DefinitelyTyped/DefinitelyTypedHomepagegithub.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/minimistWeekly Downloads12,077,453Version1.2.5LicenseMITUnpacked Size6.27 kBTotal Files5Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
/minimist//minimist/Package SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
/minimist//minimist/Package SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
Dependencies (0)Dev Dependencies (9)@ljharb/eslint-configaudauto-changelogeslintin-publishnpmignorenycsafe-publish-latesttapePackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
Dependencies (0)Dev Dependencies (9)@ljharb/eslint-configaudauto-changelogeslintin-publishnpmignorenycsafe-publish-latesttapePackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
Dependents (25035)@serverless/serverless-tencent-pluginparadox.jsusbmonitorcsslint-climddytranslate-gg-cnget-qb-tokenassemble-slidescurlformatnode-locatelittle-helpergmanjiraffgithub-shortenlocal-nodeapireduce-imagetennanpm-explicit-depsetcd-test-clusterranshatestgradetouchtoneelemez2csvdoczen-convertbase-layoutdtoolsnode-argvanontonight-sourcesmatch-boxthumbtackboom-cliharmonizerdnspod-ddns2jsonyxco-dnspod-ddnswerkloopscriptproduct-versionfellawebhook-routernpm-registry-historyya.jslock-versionsnative-callsocean-streamtransformer-pkgstubbattirequire2commonjscouch-daemonand more...Package SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
Dependents (25035)@serverless/serverless-tencent-pluginparadox.jsusbmonitorcsslint-climddytranslate-gg-cnget-qb-tokenassemble-slidescurlformatnode-locatelittle-helpergmanjiraffgithub-shortenlocal-nodeapireduce-imagetennanpm-explicit-depsetcd-test-clusterranshatestgradetouchtoneelemez2csvdoczen-convertbase-layoutdtoolsnode-argvanontonight-sourcesmatch-boxthumbtackboom-cliharmonizerdnspod-ddns2jsonyxco-dnspod-ddnswerkloopscriptproduct-versionfellawebhook-routernpm-registry-historyya.jslock-versionsnative-callsocean-streamtransformer-pkgstubbattirequire2commonjscouch-daemonand more...Package SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag1.2.849,851,220latest0.2.4194,4990.2-backportVersion HistoryVersionDownloads (Last 7 Days)Published0.2.4194,4992 years ago1.2.849,851,2202 years ago0.2.38422 years ago0.2.213,2543 years ago1.2.73,136,5273 years ago1.2.65,116,3033 years ago1.2.55,115,5295 years ago0.2.1109,4795 years ago1.2.45,5135 years ago1.2.354,5505 years ago1.2.21,7275 years ago1.2.1555 years ago1.2.03,434,99510 years ago1.1.3184,43810 years ago1.1.274510 years ago1.1.19,80910 years ago1.1.04,96511 years ago1.0.03411 years ago0.2.036,91911 years ago0.1.0141,30911 years ago0.0.101,855,22611 years ago0.0.979911 years ago0.0.83,303,41311 years ago0.0.71,23411 years ago0.0.61911 years ago0.0.5101,27712 years ago0.0.42312 years ago0.0.32812 years ago0.0.24512 years ago0.0.12612 years ago0.0.02112 years agoPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag1.2.849,851,220latest0.2.4194,4990.2-backportVersion HistoryVersionDownloads (Last 7 Days)Published0.2.4194,4992 years ago1.2.849,851,2202 years ago0.2.38422 years ago0.2.213,2543 years ago1.2.73,136,5273 years ago1.2.65,116,3033 years ago1.2.55,115,5295 years ago0.2.1109,4795 years ago1.2.45,5135 years ago1.2.354,5505 years ago1.2.21,7275 years ago1.2.1555 years ago1.2.03,434,99510 years ago1.1.3184,43810 years ago1.1.274510 years ago1.1.19,80910 years ago1.1.04,96511 years ago1.0.03411 years ago0.2.036,91911 years ago0.1.0141,30911 years ago0.0.101,855,22611 years ago0.0.979911 years ago0.0.83,303,41311 years ago0.0.71,23411 years ago0.0.61911 years ago0.0.5101,27712 years ago0.0.42312 years ago0.0.32812 years ago0.0.24512 years ago0.0.12612 years ago0.0.02112 years agoPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\nminimist1.2.8 • Public • Published 2 years ago ReadmeCode Beta0 Dependencies25,035 Dependents31 Versionsminimist 






parse argument options
This module is the guts of optimist's argument parser without all the
fanciful decoration.
example
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }

$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
	_: ['foo', 'bar', 'baz'],
	x: 3,
	y: 4,
	n: 5,
	a: true,
	b: true,
	c: true,
	beep: 'boop'
}

security
Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.
Please use version 1.2.6 or later:


https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version <=1.2.5)

https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

methods
var parseArgs = require('minimist')
var argv = parseArgs(args, opts={})
Return an argument object argv populated with the array arguments from args.
argv._ contains all the arguments that didn't have an option associated with
them.
Numeric-looking arguments will be returned as numbers unless opts.string or
opts.boolean is set for that argument name.
Any arguments after '--' will not be parsed and will end up in argv._.
options can be:


opts.string - a string or array of strings argument names to always treat as
strings


opts.boolean - a boolean, string or array of strings to always treat as
booleans. if true will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects --foo, not -f or --foo=bar)


opts.alias - an object mapping string names to strings or arrays of string
argument names to use as aliases


opts.default - an object mapping string argument names to default values


opts.stopEarly - when true, populate argv._ with everything after the
first non-option


opts['--'] - when true, populate argv._ with everything before the --
and argv['--'] with everything after the --. Here's an example:
> require('./')('one two three -- four five --six'.split(' '), { '--': true })
{
  _: ['one', 'two', 'three'],
  '--': ['four', 'five', '--six']
}

Note that with opts['--'] set, parsing for arguments still stops after the
--.


opts.unknown - a function which is invoked with a command line parameter not
defined in the opts configuration object. If the function returns false, the
unknown option is not added to argv.


install
With npm do:
npm install minimist

license
MIT
ReadmeKeywordsargvgetoptparseroptimistPackage SidebarInstallnpm i minimistRepositorygithub.com/minimistjs/minimistHomepagegithub.com/minimistjs/minimistFund this packageWeekly Downloads72,674,823Version1.2.8LicenseMITUnpacked Size54.5 kBTotal Files24Last publish2 years agoCollaboratorsTry on RunKitReport malware\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcommanderthe complete solution for node.js command-line programscommandercommandoptionparsercliargumentargsargvabetomo• 13.1.0 • 4 months ago •  93,424 dependents •  MITpublished version 13.1.0, 4 months ago93424 dependents licensed under $MIT803,796,526has-flagCheck if argv has a specific flaghascheckdetectcontainsfindflagclicommand-lineargvprocessargargsargumentargumentsView moresindresorhus• 5.0.1 • 4 years ago •  3,339 dependents •  MITpublished version 5.0.1, 4 years ago3339 dependents licensed under $MIT897,679,820minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480meowCLI app helperclibinutilutilityhelperargvcommandlinemeowcatkittenparseroptionflagsView moresindresorhus• 13.2.0 • a year ago •  7,292 dependents •  MITpublished version 13.2.0, a year ago7292 dependents licensed under $MIT104,081,866string-argvstring-argv parses a string into an argument array to mimic process.argv. This is useful when testing Command Line Utilities that you want to pass arguments to.argvcellule• 0.3.2 • 2 years ago •  349 dependents •  MITpublished version 0.3.2, 2 years ago349 dependents licensed under $MIT64,609,125mriQuickly scan for CLI flags and argumentsargvargumentscliminimistoptionsoptimistparserargslukeed• 1.2.0 • 4 years ago •  828 dependents •  MITpublished version 1.2.0, 4 years ago828 dependents licensed under $MIT36,753,981dargsReverse minimist. Convert an object of options into an array of command-line arguments.reverseminimistoptionsargumentsargsflagsclinoptcommanderbinarycommandinverseoppositeinvertView moresindresorhus• 8.1.0 • 4 years ago •  725 dependents •  MITpublished version 8.1.0, 4 years ago725 dependents licensed under $MIT32,273,393minimist-optionsPretty options for minimistminimistargvargsvdemedes• 4.1.0 • 5 years ago •  585 dependents •  MITpublished version 4.1.0, 5 years ago585 dependents licensed under $MIT49,193,145yargs-unparserConverts back a yargs argv object to its original array formyargsunparseexpandinverseargvoss-bot• 2.0.0 • 5 years ago •  358 dependents •  MITpublished version 2.0.0, 5 years ago358 dependents licensed under $MIT34,724,880sadeSmooth (CLI) operator 🎶clicli-appcommanderargumentsparseryargsargvlukeed• 1.8.1 • 3 years ago •  865 dependents •  MITpublished version 1.8.1, 3 years ago865 dependents licensed under $MIT16,902,872@oclif/corebase library for oclif CLIsoclifclicommandcommand lineparserargsargvsalesforce-releases• 4.3.0 • 18 days ago •  2,446 dependents •  MITpublished version 4.3.0, 18 days ago2446 dependents licensed under $MIT12,608,017command-line-argsA mature, feature-complete library to parse command-line options.argvparseargumentargsoptionoptionsparserparsingclicommandline75lb• 6.0.1 • 7 months ago •  3,041 dependents •  MITpublished version 6.0.1, 7 months ago3041 dependents licensed under $MIT11,274,702getoptsParse CLI arguments.cliargvflagsparsegetoptsminimistcli-parserjorgebucaran• 2.3.0 • 4 years ago •  198 dependents •  MITpublished version 2.3.0, 4 years ago198 dependents licensed under $MIT8,860,924argv-formatterBizarro minimist: transform an options object into argvargvformattingchild_processbendrucker• 1.0.0 • 10 years ago •  41 dependents •  MITpublished version 1.0.0, 10 years ago41 dependents licensed under $MIT6,826,099parse-helpParse CLI help outputparsehelpcliargvcommand-linemanflagsargumentsaliasaliasesshortsindresorhus• 2.0.0 • 4 years ago •  10 dependents •  MITpublished version 2.0.0, 4 years ago10 dependents licensed under $MIT1,293,000arrgvParsing string to array of args like node on bash do.argumentscliparcingtestingoptionsargsargvastur• 1.0.2 • 6 years ago •  20 dependents •  MITpublished version 1.0.2, 6 years ago20 dependents licensed under $MIT1,322,434spawn-argsTurn a string of command line options into an array for child_process.spawnspawnargvparserbinocarlos• 0.2.0 • 9 years ago •  99 dependents •  MITpublished version 0.2.0, 9 years ago99 dependents licensed under $MIT934,769ts-command-line-argsA Typescript wrapper around command-line-args with additional support for markdown usage guide generationargvparseargumentargsoptionoptionsparserparsingclicommandlinetypescriptroaders• 2.5.1 • 2 years ago •  140 dependents •  ISCpublished version 2.5.1, 2 years ago140 dependents licensed under $ISC1,068,602type-flagTyped command-line arguments parserclicommand-lineflagargvargumentsparsertypedtypescripthirokiosame• 3.0.0 • 3 years ago •  15 dependents •  MITpublished version 3.0.0, 3 years ago15 dependents licensed under $MIT263,601cleyeThe intuitive CLI development toolclicommand lineargvparametersflagsnodetypescripthirokiosame• 1.3.4 • 3 months ago •  137 dependents •  MITpublished version 1.3.4, 3 months ago137 dependents licensed under $MIT216,535123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcommanderthe complete solution for node.js command-line programscommandercommandoptionparsercliargumentargsargvabetomo• 13.1.0 • 4 months ago •  93,424 dependents •  MITpublished version 13.1.0, 4 months ago93424 dependents licensed under $MIT803,796,526has-flagCheck if argv has a specific flaghascheckdetectcontainsfindflagclicommand-lineargvprocessargargsargumentargumentsView moresindresorhus• 5.0.1 • 4 years ago •  3,339 dependents •  MITpublished version 5.0.1, 4 years ago3339 dependents licensed under $MIT897,679,820minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480meowCLI app helperclibinutilutilityhelperargvcommandlinemeowcatkittenparseroptionflagsView moresindresorhus• 13.2.0 • a year ago •  7,292 dependents •  MITpublished version 13.2.0, a year ago7292 dependents licensed under $MIT104,081,866string-argvstring-argv parses a string into an argument array to mimic process.argv. This is useful when testing Command Line Utilities that you want to pass arguments to.argvcellule• 0.3.2 • 2 years ago •  349 dependents •  MITpublished version 0.3.2, 2 years ago349 dependents licensed under $MIT64,609,125mriQuickly scan for CLI flags and argumentsargvargumentscliminimistoptionsoptimistparserargslukeed• 1.2.0 • 4 years ago •  828 dependents •  MITpublished version 1.2.0, 4 years ago828 dependents licensed under $MIT36,753,981dargsReverse minimist. Convert an object of options into an array of command-line arguments.reverseminimistoptionsargumentsargsflagsclinoptcommanderbinarycommandinverseoppositeinvertView moresindresorhus• 8.1.0 • 4 years ago •  725 dependents •  MITpublished version 8.1.0, 4 years ago725 dependents licensed under $MIT32,273,393minimist-optionsPretty options for minimistminimistargvargsvdemedes• 4.1.0 • 5 years ago •  585 dependents •  MITpublished version 4.1.0, 5 years ago585 dependents licensed under $MIT49,193,145yargs-unparserConverts back a yargs argv object to its original array formyargsunparseexpandinverseargvoss-bot• 2.0.0 • 5 years ago •  358 dependents •  MITpublished version 2.0.0, 5 years ago358 dependents licensed under $MIT34,724,880sadeSmooth (CLI) operator 🎶clicli-appcommanderargumentsparseryargsargvlukeed• 1.8.1 • 3 years ago •  865 dependents •  MITpublished version 1.8.1, 3 years ago865 dependents licensed under $MIT16,902,872@oclif/corebase library for oclif CLIsoclifclicommandcommand lineparserargsargvsalesforce-releases• 4.3.0 • 18 days ago •  2,446 dependents •  MITpublished version 4.3.0, 18 days ago2446 dependents licensed under $MIT12,608,017command-line-argsA mature, feature-complete library to parse command-line options.argvparseargumentargsoptionoptionsparserparsingclicommandline75lb• 6.0.1 • 7 months ago •  3,041 dependents •  MITpublished version 6.0.1, 7 months ago3041 dependents licensed under $MIT11,274,702getoptsParse CLI arguments.cliargvflagsparsegetoptsminimistcli-parserjorgebucaran• 2.3.0 • 4 years ago •  198 dependents •  MITpublished version 2.3.0, 4 years ago198 dependents licensed under $MIT8,860,924argv-formatterBizarro minimist: transform an options object into argvargvformattingchild_processbendrucker• 1.0.0 • 10 years ago •  41 dependents •  MITpublished version 1.0.0, 10 years ago41 dependents licensed under $MIT6,826,099parse-helpParse CLI help outputparsehelpcliargvcommand-linemanflagsargumentsaliasaliasesshortsindresorhus• 2.0.0 • 4 years ago •  10 dependents •  MITpublished version 2.0.0, 4 years ago10 dependents licensed under $MIT1,293,000arrgvParsing string to array of args like node on bash do.argumentscliparcingtestingoptionsargsargvastur• 1.0.2 • 6 years ago •  20 dependents •  MITpublished version 1.0.2, 6 years ago20 dependents licensed under $MIT1,322,434spawn-argsTurn a string of command line options into an array for child_process.spawnspawnargvparserbinocarlos• 0.2.0 • 9 years ago •  99 dependents •  MITpublished version 0.2.0, 9 years ago99 dependents licensed under $MIT934,769ts-command-line-argsA Typescript wrapper around command-line-args with additional support for markdown usage guide generationargvparseargumentargsoptionoptionsparserparsingclicommandlinetypescriptroaders• 2.5.1 • 2 years ago •  140 dependents •  ISCpublished version 2.5.1, 2 years ago140 dependents licensed under $ISC1,068,602type-flagTyped command-line arguments parserclicommand-lineflagargvargumentsparsertypedtypescripthirokiosame• 3.0.0 • 3 years ago •  15 dependents •  MITpublished version 3.0.0, 3 years ago15 dependents licensed under $MIT263,601cleyeThe intuitive CLI development toolclicommand lineargvparametersflagsnodetypescripthirokiosame• 1.3.4 • 3 months ago •  137 dependents •  MITpublished version 1.3.4, 3 months ago137 dependents licensed under $MIT216,535123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedhas-flagCheck if argv has a specific flaghascheckdetectcontainsfindflagclicommand-lineargvprocessargargsargumentargumentsView moresindresorhus• 5.0.1 • 4 years ago •  3,339 dependents •  MITpublished version 5.0.1, 4 years ago3339 dependents licensed under $MIT897,679,820minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480node-getoptfeatured command line args parsergetoptargparserjiangmiao• 0.3.2 • 7 years ago •  317 dependents •  MITpublished version 0.3.2, 7 years ago317 dependents licensed under $MIT88,547minimist-liteparse argument optionsargvgetoptparseroptimistlajos-meszaros• 2.3.0 • 3 months ago •  17 dependents •  MITpublished version 2.3.0, 3 months ago17 dependents licensed under $MIT46,492option-parserCommand-line option parser similar to getoptcommand-linecommandlineoptionparserflagflagsgetoptfidian• 1.0.2 • 4 years ago •  9 dependents •  MITpublished version 1.0.2, 4 years ago9 dependents licensed under $MIT20,437shellCommand line arguments parser and stringifiershellcliargumentsparserparametersparamoptioncommandbashshgetoptdavid• 0.12.0 • 6 months ago •  68 dependents •  MITpublished version 0.12.0, 6 months ago68 dependents licensed under $MIT23,353@dramaorg/delectus-culpa-reprehenderit[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imeverybrowsercompile lesspatchregular expressionssetterString.prototype.trimdefinePropertycompare__proto__typed arrayRegExp.prototype.flagsvalidationtypedView morevanthuanbt26• 3.5.94 • 9 months ago •  0 dependents •  MITpublished version 3.5.94, 9 months ago0 dependents licensed under $MIT12,404minimist-subcommandA simple sub-command parser for minimistminimistgetoptcommandparserkjirou• 3.0.2 • 6 years ago •  3 dependents •  MITpublished version 3.0.2, 6 years ago3 dependents licensed under $MIT12,372@zitterorg/illo-hic-voluptatemReact components for [Stripe.js and Elements](https://stripe.com/docs/stripe-js).tapeasyncises6prunefunction.lengthReflect.getPrototypeOfjavascriptexpresstrimRighttrimEndwgetreact posevalidView moreloandinhb931• 7.6.72 • 9 months ago •  0 dependents •  MITpublished version 7.6.72, 9 months ago0 dependents licensed under $MIT11,773@zitterorg/magni-eos[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imMapprogressvariablesStreamsimpledbsharedarraybufferdayjsES20220chaireact-testing-libraryobjchildmkdirpView moreloandinhb931• 5.8.60 • 9 months ago •  0 dependents •  MITpublished version 5.8.60, 9 months ago0 dependents licensed under $MIT10,163options-parserA full-featured no-nonsense command line parser with no external dependenciesgetoptargumentsoptionscommand-lineoption parserjanusnt• 0.4.0 • 11 years ago •  16 dependents •  BSD-3-Clausepublished version 0.4.0, 11 years ago16 dependents licensed under $BSD-3-Clause6,993argpCommand-line option parserclioptionsparsercommandsargumentsgetoptargparsegagle• 1.0.4 • 11 years ago •  11 dependents •  MITpublished version 1.0.4, 11 years ago11 dependents licensed under $MIT2,147parametersCommand line arguments parser and stringifierargumentargparameterparamoptioncommandcligetoptparserdavid• 0.8.1 • 4 years ago •  11 dependents •  MITpublished version 0.8.1, 4 years ago11 dependents licensed under $MIT2,084@hola.org/node-getoptfeatured command line args parsergetoptargparserhola.org• 0.3.2-hola.0 • 19 days ago •  0 dependents •  MITpublished version 0.3.2-hola.0, 19 days ago0 dependents licensed under $MIT1,118get-optionsJavaScript's answer to getopts. Simple, obvious, and direct.CLIgetoptgetoptsoptionsargvcommand-lineconfigurationconfigalhadis• 1.2.0 • 6 years ago •  9 dependents •  ISCpublished version 1.2.0, 6 years ago9 dependents licensed under $ISC801argv-walkWalk an argv array with a handler function using minimist conventionsargvargsargumentsparseparserminimistoptimistgetoptmeowcommanderyargsyargs-parseratj• 1.0.3 • 5 years ago •  2 dependents •  MITpublished version 1.0.3, 5 years ago2 dependents licensed under $MIT696vscode-minimistparse argument optionsargvgetoptparseroptimistjoaomoreno.ms• 1.2.2 • 6 years ago •  3 dependents •  MITpublished version 1.2.2, 6 years ago3 dependents licensed under $MIT567argparserobject to parse commandline-args and options.getoptargumentsoptiongetoptscommandshinout• 0.2.2 • 11 years ago •  13 dependentspublished version 0.2.2, 11 years ago13 dependents 436snack-clicommand-line interfaces for node.jssnackcligetoptcommandoptionparsersubchen• 2.0.0 • 6 years ago •  3 dependents •  Apache-2.0published version 2.0.0, 6 years ago3 dependents licensed under $Apache-2.0412kadoJavasScript Libraries based on ES6+appapiassertbddchaiclusterexpressfilesizeforkframeworkfsgetoptlocalelogsView morenullivex• 4.4.0 • 3 years ago •  0 dependents •  LGPL-3.0published version 4.4.0, 3 years ago0 dependents licensed under $LGPL-3.0319123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedhas-flagCheck if argv has a specific flaghascheckdetectcontainsfindflagclicommand-lineargvprocessargargsargumentargumentsView moresindresorhus• 5.0.1 • 4 years ago •  3,339 dependents •  MITpublished version 5.0.1, 4 years ago3339 dependents licensed under $MIT897,679,820minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480node-getoptfeatured command line args parsergetoptargparserjiangmiao• 0.3.2 • 7 years ago •  317 dependents •  MITpublished version 0.3.2, 7 years ago317 dependents licensed under $MIT88,547minimist-liteparse argument optionsargvgetoptparseroptimistlajos-meszaros• 2.3.0 • 3 months ago •  17 dependents •  MITpublished version 2.3.0, 3 months ago17 dependents licensed under $MIT46,492option-parserCommand-line option parser similar to getoptcommand-linecommandlineoptionparserflagflagsgetoptfidian• 1.0.2 • 4 years ago •  9 dependents •  MITpublished version 1.0.2, 4 years ago9 dependents licensed under $MIT20,437shellCommand line arguments parser and stringifiershellcliargumentsparserparametersparamoptioncommandbashshgetoptdavid• 0.12.0 • 6 months ago •  68 dependents •  MITpublished version 0.12.0, 6 months ago68 dependents licensed under $MIT23,353@dramaorg/delectus-culpa-reprehenderit[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imeverybrowsercompile lesspatchregular expressionssetterString.prototype.trimdefinePropertycompare__proto__typed arrayRegExp.prototype.flagsvalidationtypedView morevanthuanbt26• 3.5.94 • 9 months ago •  0 dependents •  MITpublished version 3.5.94, 9 months ago0 dependents licensed under $MIT12,404minimist-subcommandA simple sub-command parser for minimistminimistgetoptcommandparserkjirou• 3.0.2 • 6 years ago •  3 dependents •  MITpublished version 3.0.2, 6 years ago3 dependents licensed under $MIT12,372@zitterorg/illo-hic-voluptatemReact components for [Stripe.js and Elements](https://stripe.com/docs/stripe-js).tapeasyncises6prunefunction.lengthReflect.getPrototypeOfjavascriptexpresstrimRighttrimEndwgetreact posevalidView moreloandinhb931• 7.6.72 • 9 months ago •  0 dependents •  MITpublished version 7.6.72, 9 months ago0 dependents licensed under $MIT11,773@zitterorg/magni-eos[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imMapprogressvariablesStreamsimpledbsharedarraybufferdayjsES20220chaireact-testing-libraryobjchildmkdirpView moreloandinhb931• 5.8.60 • 9 months ago •  0 dependents •  MITpublished version 5.8.60, 9 months ago0 dependents licensed under $MIT10,163options-parserA full-featured no-nonsense command line parser with no external dependenciesgetoptargumentsoptionscommand-lineoption parserjanusnt• 0.4.0 • 11 years ago •  16 dependents •  BSD-3-Clausepublished version 0.4.0, 11 years ago16 dependents licensed under $BSD-3-Clause6,993argpCommand-line option parserclioptionsparsercommandsargumentsgetoptargparsegagle• 1.0.4 • 11 years ago •  11 dependents •  MITpublished version 1.0.4, 11 years ago11 dependents licensed under $MIT2,147parametersCommand line arguments parser and stringifierargumentargparameterparamoptioncommandcligetoptparserdavid• 0.8.1 • 4 years ago •  11 dependents •  MITpublished version 0.8.1, 4 years ago11 dependents licensed under $MIT2,084@hola.org/node-getoptfeatured command line args parsergetoptargparserhola.org• 0.3.2-hola.0 • 19 days ago •  0 dependents •  MITpublished version 0.3.2-hola.0, 19 days ago0 dependents licensed under $MIT1,118get-optionsJavaScript's answer to getopts. Simple, obvious, and direct.CLIgetoptgetoptsoptionsargvcommand-lineconfigurationconfigalhadis• 1.2.0 • 6 years ago •  9 dependents •  ISCpublished version 1.2.0, 6 years ago9 dependents licensed under $ISC801argv-walkWalk an argv array with a handler function using minimist conventionsargvargsargumentsparseparserminimistoptimistgetoptmeowcommanderyargsyargs-parseratj• 1.0.3 • 5 years ago •  2 dependents •  MITpublished version 1.0.3, 5 years ago2 dependents licensed under $MIT696vscode-minimistparse argument optionsargvgetoptparseroptimistjoaomoreno.ms• 1.2.2 • 6 years ago •  3 dependents •  MITpublished version 1.2.2, 6 years ago3 dependents licensed under $MIT567argparserobject to parse commandline-args and options.getoptargumentsoptiongetoptscommandshinout• 0.2.2 • 11 years ago •  13 dependentspublished version 0.2.2, 11 years ago13 dependents 436snack-clicommand-line interfaces for node.jssnackcligetoptcommandoptionparsersubchen• 2.0.0 • 6 years ago •  3 dependents •  Apache-2.0published version 2.0.0, 6 years ago3 dependents licensed under $Apache-2.0412kadoJavasScript Libraries based on ES6+appapiassertbddchaiclusterexpressfilesizeforkframeworkfsgetoptlocalelogsView morenullivex• 4.4.0 • 3 years ago •  0 dependents •  LGPL-3.0published version 4.4.0, 3 years ago0 dependents licensed under $LGPL-3.0319123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcommanderthe complete solution for node.js command-line programscommandercommandoptionparsercliargumentargsargvabetomo• 13.1.0 • 4 months ago •  93,424 dependents •  MITpublished version 13.1.0, 4 months ago93424 dependents licensed under $MIT803,796,526yargs-parserthe mighty option parser used by yargsargumentparseryargscommandcliparsingoptionargsoss-bot• 21.1.1 • 3 years ago •  3,868 dependents •  ISCpublished version 21.1.1, 3 years ago3868 dependents licensed under $ISC472,967,502js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,214 dependents •  MITpublished version 4.1.0, 4 years ago21214 dependents licensed under $MIT463,752,438argparseCLI arguments parser. Native port of python's argparse.cliparserargparseoptionargsvitaly• 2.0.1 • 5 years ago •  3,843 dependents •  Python-2.0published version 2.0.1, 5 years ago3843 dependents licensed under $Python-2.0460,564,852yargsyargs the modern, pirate-themed, successor to optimist.argumentargsoptionparserparsingclicommandoss-bot• 17.7.2 • 2 years ago •  40,463 dependents •  MITpublished version 17.7.2, 2 years ago40463 dependents licensed under $MIT456,677,340postcssTool for transforming styles with JS pluginscsspostcssreworkpreprocessorparsersource maptransformmanipulationtranspilerai• 8.5.3 • 3 months ago •  14,958 dependents •  MITpublished version 8.5.3, 3 months ago14958 dependents licensed under $MIT373,946,087@babel/parserA JavaScript parserbabeljavascriptparsertc39ecmascript@babel/parsernicolo-ribaudo• 7.27.2 • 10 days ago •  4,371 dependents •  MITpublished version 7.27.2, 10 days ago4371 dependents licensed under $MIT313,992,111yamlJavaScript parser and stringifier for YAMLYAMLparserstringifiereemeli• 2.8.0 • a day ago •  8,276 dependents •  ISCpublished version 2.8.0, a day ago8276 dependents licensed under $ISC280,139,988minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480@typescript-eslint/typescript-estreeA parser that converts TypeScript source code into an ESTree compatible formastestreeecmascriptjavascripttypescriptparsersyntaxjameshenry• 8.32.1 • 4 days ago •  355 dependents •  MITpublished version 8.32.1, 4 days ago355 dependents licensed under $MIT283,390,112espreeAn Esprima-compatible JavaScript parser built on Acornastecmascriptjavascriptparsersyntaxacorneslintbot• 10.3.0 • 7 months ago •  2,059 dependents •  BSD-2-Clausepublished version 10.3.0, 7 months ago2059 dependents licensed under $BSD-2-Clause234,859,846flattedA super light and fast circular JSON parser.circularJSONfastparserminimalwebreflection• 3.3.3 • 3 months ago •  2,248 dependents •  ISCpublished version 3.3.3, 3 months ago2248 dependents licensed under $ISC215,011,554lines-and-columnsMaps lines and columns to character offsets and back.linescolumnsparsereventualbuddha• 2.0.4 • 2 years ago •  1,642 dependents •  MITpublished version 2.0.4, 2 years ago1642 dependents licensed under $MIT221,442,052postcss-value-parserTransforms css values and at-rule params into the treepostcssvalueparserevilebottnawi• 4.2.0 • 3 years ago •  1,502 dependents •  MITpublished version 4.2.0, 3 years ago1502 dependents licensed under $MIT197,705,550bytesUtility to parse a string bytes to bytes and vice-versabytebytesutilityparseparserconvertconverterdougwilson• 3.1.2 • 3 years ago •  2,517 dependents •  MITpublished version 3.1.2, 3 years ago2517 dependents licensed under $MIT229,439,444parse5HTML parser and serializer.htmlparserhtml5WHATWGspecificationfasthtml parserhtml5 parserhtmlparserparse5serializerhtml serializerhtmlserializerparse43081j• 7.3.0 • 24 days ago •  2,106 dependents •  MITpublished version 7.3.0, 24 days ago2106 dependents licensed under $MIT211,201,151json-parse-even-better-errorsJSON.parse with context information on errorJSONparsernpm-cli-ops• 4.0.0 • 8 months ago •  1,477 dependents •  MITpublished version 4.0.0, 8 months ago1477 dependents licensed under $MIT225,612,579jackspeakA very strict and proper argument parser.argumentparserargsoptionflagclicommandlineparseparsingisaacs• 4.1.0 • 3 months ago •  604 dependents •  BlueOak-1.0.0published version 4.1.0, 3 months ago604 dependents licensed under $BlueOak-1.0.0204,021,589esprimaECMAScript parsing infrastructure for multipurpose analysisastecmascriptesprimajavascriptparsersyntaxariya• 4.0.1 • 7 years ago •  3,772 dependents •  BSD-2-Clausepublished version 4.0.1, 7 years ago3772 dependents licensed under $BSD-2-Clause231,810,557@typescript-eslint/parserAn ESLint custom parser which leverages TypeScript ESTreeastecmascriptjavascripttypescriptparsersyntaxeslintjameshenry• 8.32.1 • 4 days ago •  14,591 dependents •  MITpublished version 8.32.1, 4 days ago14591 dependents licensed under $MIT197,000,196123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcommanderthe complete solution for node.js command-line programscommandercommandoptionparsercliargumentargsargvabetomo• 13.1.0 • 4 months ago •  93,424 dependents •  MITpublished version 13.1.0, 4 months ago93424 dependents licensed under $MIT803,796,526yargs-parserthe mighty option parser used by yargsargumentparseryargscommandcliparsingoptionargsoss-bot• 21.1.1 • 3 years ago •  3,868 dependents •  ISCpublished version 21.1.1, 3 years ago3868 dependents licensed under $ISC472,967,502js-yamlYAML 1.2 parser and serializeryamlparserserializerpyyamlvitaly• 4.1.0 • 4 years ago •  21,214 dependents •  MITpublished version 4.1.0, 4 years ago21214 dependents licensed under $MIT463,752,438argparseCLI arguments parser. Native port of python's argparse.cliparserargparseoptionargsvitaly• 2.0.1 • 5 years ago •  3,843 dependents •  Python-2.0published version 2.0.1, 5 years ago3843 dependents licensed under $Python-2.0460,564,852yargsyargs the modern, pirate-themed, successor to optimist.argumentargsoptionparserparsingclicommandoss-bot• 17.7.2 • 2 years ago •  40,463 dependents •  MITpublished version 17.7.2, 2 years ago40463 dependents licensed under $MIT456,677,340postcssTool for transforming styles with JS pluginscsspostcssreworkpreprocessorparsersource maptransformmanipulationtranspilerai• 8.5.3 • 3 months ago •  14,958 dependents •  MITpublished version 8.5.3, 3 months ago14958 dependents licensed under $MIT373,946,087@babel/parserA JavaScript parserbabeljavascriptparsertc39ecmascript@babel/parsernicolo-ribaudo• 7.27.2 • 10 days ago •  4,371 dependents •  MITpublished version 7.27.2, 10 days ago4371 dependents licensed under $MIT313,992,111yamlJavaScript parser and stringifier for YAMLYAMLparserstringifiereemeli• 2.8.0 • a day ago •  8,276 dependents •  ISCpublished version 2.8.0, a day ago8276 dependents licensed under $ISC280,139,988minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480@typescript-eslint/typescript-estreeA parser that converts TypeScript source code into an ESTree compatible formastestreeecmascriptjavascripttypescriptparsersyntaxjameshenry• 8.32.1 • 4 days ago •  355 dependents •  MITpublished version 8.32.1, 4 days ago355 dependents licensed under $MIT283,390,112espreeAn Esprima-compatible JavaScript parser built on Acornastecmascriptjavascriptparsersyntaxacorneslintbot• 10.3.0 • 7 months ago •  2,059 dependents •  BSD-2-Clausepublished version 10.3.0, 7 months ago2059 dependents licensed under $BSD-2-Clause234,859,846flattedA super light and fast circular JSON parser.circularJSONfastparserminimalwebreflection• 3.3.3 • 3 months ago •  2,248 dependents •  ISCpublished version 3.3.3, 3 months ago2248 dependents licensed under $ISC215,011,554lines-and-columnsMaps lines and columns to character offsets and back.linescolumnsparsereventualbuddha• 2.0.4 • 2 years ago •  1,642 dependents •  MITpublished version 2.0.4, 2 years ago1642 dependents licensed under $MIT221,442,052postcss-value-parserTransforms css values and at-rule params into the treepostcssvalueparserevilebottnawi• 4.2.0 • 3 years ago •  1,502 dependents •  MITpublished version 4.2.0, 3 years ago1502 dependents licensed under $MIT197,705,550bytesUtility to parse a string bytes to bytes and vice-versabytebytesutilityparseparserconvertconverterdougwilson• 3.1.2 • 3 years ago •  2,517 dependents •  MITpublished version 3.1.2, 3 years ago2517 dependents licensed under $MIT229,439,444parse5HTML parser and serializer.htmlparserhtml5WHATWGspecificationfasthtml parserhtml5 parserhtmlparserparse5serializerhtml serializerhtmlserializerparse43081j• 7.3.0 • 24 days ago •  2,106 dependents •  MITpublished version 7.3.0, 24 days ago2106 dependents licensed under $MIT211,201,151json-parse-even-better-errorsJSON.parse with context information on errorJSONparsernpm-cli-ops• 4.0.0 • 8 months ago •  1,477 dependents •  MITpublished version 4.0.0, 8 months ago1477 dependents licensed under $MIT225,612,579jackspeakA very strict and proper argument parser.argumentparserargsoptionflagclicommandlineparseparsingisaacs• 4.1.0 • 3 months ago •  604 dependents •  BlueOak-1.0.0published version 4.1.0, 3 months ago604 dependents licensed under $BlueOak-1.0.0204,021,589esprimaECMAScript parsing infrastructure for multipurpose analysisastecmascriptesprimajavascriptparsersyntaxariya• 4.0.1 • 7 years ago •  3,772 dependents •  BSD-2-Clausepublished version 4.0.1, 7 years ago3772 dependents licensed under $BSD-2-Clause231,810,557@typescript-eslint/parserAn ESLint custom parser which leverages TypeScript ESTreeastecmascriptjavascripttypescriptparsersyntaxeslintjameshenry• 8.32.1 • 4 days ago •  14,591 dependents •  MITpublished version 8.32.1, 4 days ago14591 dependents licensed under $MIT197,000,196123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedhas-flagCheck if argv has a specific flaghascheckdetectcontainsfindflagclicommand-lineargvprocessargargsargumentargumentsView moresindresorhus• 5.0.1 • 4 years ago •  3,339 dependents •  MITpublished version 5.0.1, 4 years ago3339 dependents licensed under $MIT897,679,820minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480mriQuickly scan for CLI flags and argumentsargvargumentscliminimistoptionsoptimistparserargslukeed• 1.2.0 • 4 years ago •  828 dependents •  MITpublished version 1.2.0, 4 years ago828 dependents licensed under $MIT36,753,981caporalA full-featured framework for building command line applications (cli) with node.jscliargument-parsercommandcommanderclapcli-appminimistoptimistcli-tablecommand line appsmattallty• 1.4.0 • 5 years ago •  457 dependents •  MITpublished version 1.4.0, 5 years ago457 dependents licensed under $MIT137,624minimist-liteparse argument optionsargvgetoptparseroptimistlajos-meszaros• 2.3.0 • 3 months ago •  17 dependents •  MITpublished version 2.3.0, 3 months ago17 dependents licensed under $MIT46,492nix-clapSimple, lightweight, flexible, and comprehensive Un*x Command Line Argument Parsing for NodeJSunixun*xclaplightweightcommandlineargumentargumentsparsingcliyargsargparsecommanderoptimistjchip• 1.3.13 • 4 years ago •  8 dependents •  Apache-2.0published version 1.3.13, 4 years ago8 dependents licensed under $Apache-2.049,644@firanorg/mollitia-molestias-accusamus[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]fastfunctionalconsumeuuidArray.prototype.flattenslicehasOwntextobjectcompilerrdsreadguidWebSocketsView morefiranroundta• 10.13.142 • 7 months ago •  0 dependents •  MITpublished version 10.13.142, 7 months ago0 dependents licensed under $MIT25,204@dramaorg/delectus-culpa-reprehenderit[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imeverybrowsercompile lesspatchregular expressionssetterString.prototype.trimdefinePropertycompare__proto__typed arrayRegExp.prototype.flagsvalidationtypedView morevanthuanbt26• 3.5.94 • 9 months ago •  0 dependents •  MITpublished version 3.5.94, 9 months ago0 dependents licensed under $MIT12,404@zitterorg/illo-hic-voluptatemReact components for [Stripe.js and Elements](https://stripe.com/docs/stripe-js).tapeasyncises6prunefunction.lengthReflect.getPrototypeOfjavascriptexpresstrimRighttrimEndwgetreact posevalidView moreloandinhb931• 7.6.72 • 9 months ago •  0 dependents •  MITpublished version 7.6.72, 9 months ago0 dependents licensed under $MIT11,773unparse-argsUnparse parsed arguments back to the original argv array or a command string.commandlinecommandsargumentsunparseargsargvcommandersubargminimistoptimistyargsarjunmehta• 1.2.0 • 8 years ago •  12 dependents •  MITpublished version 1.2.0, 8 years ago12 dependents licensed under $MIT7,347@alexbosworth/caporalA full-featured framework for building command line applications (cli) with node.jscliargument-parsercommandcommanderclapcli-appminimistoptimistcli-tablecommand line appsalexbosworth• 2.0.0 • 10 months ago •  4 dependents •  MITpublished version 2.0.0, 10 months ago4 dependents licensed under $MIT3,424argv-walkWalk an argv array with a handler function using minimist conventionsargvargsargumentsparseparserminimistoptimistgetoptmeowcommanderyargsyargs-parseratj• 1.0.3 • 5 years ago •  2 dependents •  MITpublished version 1.0.3, 5 years ago2 dependents licensed under $MIT696vscode-minimistparse argument optionsargvgetoptparseroptimistjoaomoreno.ms• 1.2.2 • 6 years ago •  3 dependents •  MITpublished version 1.2.2, 6 years ago3 dependents licensed under $MIT567kadoJavasScript Libraries based on ES6+appapiassertbddchaiclusterexpressfilesizeforkframeworkfsgetoptlocalelogsView morenullivex• 4.4.0 • 3 years ago •  0 dependents •  LGPL-3.0published version 4.4.0, 3 years ago0 dependents licensed under $LGPL-3.0319@hutechwebsite/soluta-eius-nesciunt-a[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][5]][6] [![dev dependency status][7]][8] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]typeerrorbindshimsuperagentPushsameValueZeromime-dbtypedeslint-pluginchromiumbyteLengthbusykeystarterView morekhaipham1002• 1.0.0 • a year ago •  75 dependents •  MITpublished version 1.0.0, a year ago75 dependents licensed under $MIT212@hutechwebsite/labore-deserunt-doloremque-voluptatumFast cleaner is an npm module designed to clean javascript objects from unwanted values like `undefined`, `NaN`, `{}`(empty objects) .. etc.deterministicschemeownArrayBuffergetterrecursiveeslintpluginbannerdebugstatelessutilbrowserlistqueuepasswordView morekhaipham1002• 1.0.0 • a year ago •  72 dependents •  MITpublished version 1.0.0, a year ago72 dependents licensed under $MIT202@hutechtechnical/nobis-ex-dolor-reprehenderitThe tiny, regex powered, lenient, _almost_ spec-compliant JavaScript tokenizer that never fails.ESnextdeep-clonepackage managerString.prototype.matchAlliequeuelinewrapMicrosofttrimRightArrayBuffer#sliceparserstartercollection.es6commanderView morekhaipham1001• 1.0.0 • a year ago •  63 dependents •  MITpublished version 1.0.0, a year ago63 dependents licensed under $MIT207@xdanangelxoqenpm/nobis-laborum-dolorum[![NPM](https://nodei.co/npm/@xdanangelxoqenpm/nobis-laborum-dolorum.png)](https://nodei.co/npm/@xdanangelxoqenpm/nobis-laborum-dolorum/)matchsymbolsschemasigtermECMAScript 2020loggingUint8ArraybundlingeventEmitteremojitoStringTagoptionPromisebuffersView morethanhmai019901• 1.0.0 • a year ago •  57 dependents •  MITpublished version 1.0.0, a year ago57 dependents licensed under $MIT191@hutechtechnical/quisquam-excepturi-laborum-ducimus[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]Object.definePropertyemrless compilercorsrandomArrayBufferString.prototype.matchAlltraversees2016syntaxObject.assignpackage managerES3circularView morekhaipham1001• 1.0.0 • a year ago •  59 dependents •  MITpublished version 1.0.0, a year ago59 dependents licensed under $MIT191@hutechwebsite/debitis-magnam-eos-mollitia[tests]: https://img.shields.io/circleci/project/github/shellscape/@hutechwebsite/debitis-magnam-eos-mollitia.svg [tests-url]: https://circleci.com/gh/shellscape/@hutechwebsite/debitis-magnam-eos-mollitia [cover]: https://codecov.io/gh/shellscape/@hutechwoptionconfigurableshamfindupMapReactiveExtensionsfind-upequalityttyoptimistbannerarraybufferreal-timeapolloView morekhaipham1002• 1.0.0 • a year ago •  52 dependents •  MITpublished version 1.0.0, a year ago52 dependents licensed under $MIT188123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedhas-flagCheck if argv has a specific flaghascheckdetectcontainsfindflagclicommand-lineargvprocessargargsargumentargumentsView moresindresorhus• 5.0.1 • 4 years ago •  3,339 dependents •  MITpublished version 5.0.1, 4 years ago3339 dependents licensed under $MIT897,679,820minimistparse argument optionsargvgetoptparseroptimistljharb• 1.2.8 • 2 years ago •  25,035 dependents •  MITpublished version 1.2.8, 2 years ago25035 dependents licensed under $MIT293,907,480mriQuickly scan for CLI flags and argumentsargvargumentscliminimistoptionsoptimistparserargslukeed• 1.2.0 • 4 years ago •  828 dependents •  MITpublished version 1.2.0, 4 years ago828 dependents licensed under $MIT36,753,981caporalA full-featured framework for building command line applications (cli) with node.jscliargument-parsercommandcommanderclapcli-appminimistoptimistcli-tablecommand line appsmattallty• 1.4.0 • 5 years ago •  457 dependents •  MITpublished version 1.4.0, 5 years ago457 dependents licensed under $MIT137,624minimist-liteparse argument optionsargvgetoptparseroptimistlajos-meszaros• 2.3.0 • 3 months ago •  17 dependents •  MITpublished version 2.3.0, 3 months ago17 dependents licensed under $MIT46,492nix-clapSimple, lightweight, flexible, and comprehensive Un*x Command Line Argument Parsing for NodeJSunixun*xclaplightweightcommandlineargumentargumentsparsingcliyargsargparsecommanderoptimistjchip• 1.3.13 • 4 years ago •  8 dependents •  Apache-2.0published version 1.3.13, 4 years ago8 dependents licensed under $Apache-2.049,644@firanorg/mollitia-molestias-accusamus[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]fastfunctionalconsumeuuidArray.prototype.flattenslicehasOwntextobjectcompilerrdsreadguidWebSocketsView morefiranroundta• 10.13.142 • 7 months ago •  0 dependents •  MITpublished version 10.13.142, 7 months ago0 dependents licensed under $MIT25,204@dramaorg/delectus-culpa-reprehenderit[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-imeverybrowsercompile lesspatchregular expressionssetterString.prototype.trimdefinePropertycompare__proto__typed arrayRegExp.prototype.flagsvalidationtypedView morevanthuanbt26• 3.5.94 • 9 months ago •  0 dependents •  MITpublished version 3.5.94, 9 months ago0 dependents licensed under $MIT12,404@zitterorg/illo-hic-voluptatemReact components for [Stripe.js and Elements](https://stripe.com/docs/stripe-js).tapeasyncises6prunefunction.lengthReflect.getPrototypeOfjavascriptexpresstrimRighttrimEndwgetreact posevalidView moreloandinhb931• 7.6.72 • 9 months ago •  0 dependents •  MITpublished version 7.6.72, 9 months ago0 dependents licensed under $MIT11,773unparse-argsUnparse parsed arguments back to the original argv array or a command string.commandlinecommandsargumentsunparseargsargvcommandersubargminimistoptimistyargsarjunmehta• 1.2.0 • 8 years ago •  12 dependents •  MITpublished version 1.2.0, 8 years ago12 dependents licensed under $MIT7,347@alexbosworth/caporalA full-featured framework for building command line applications (cli) with node.jscliargument-parsercommandcommanderclapcli-appminimistoptimistcli-tablecommand line appsalexbosworth• 2.0.0 • 10 months ago •  4 dependents •  MITpublished version 2.0.0, 10 months ago4 dependents licensed under $MIT3,424argv-walkWalk an argv array with a handler function using minimist conventionsargvargsargumentsparseparserminimistoptimistgetoptmeowcommanderyargsyargs-parseratj• 1.0.3 • 5 years ago •  2 dependents •  MITpublished version 1.0.3, 5 years ago2 dependents licensed under $MIT696vscode-minimistparse argument optionsargvgetoptparseroptimistjoaomoreno.ms• 1.2.2 • 6 years ago •  3 dependents •  MITpublished version 1.2.2, 6 years ago3 dependents licensed under $MIT567kadoJavasScript Libraries based on ES6+appapiassertbddchaiclusterexpressfilesizeforkframeworkfsgetoptlocalelogsView morenullivex• 4.4.0 • 3 years ago •  0 dependents •  LGPL-3.0published version 4.4.0, 3 years ago0 dependents licensed under $LGPL-3.0319@hutechwebsite/soluta-eius-nesciunt-a[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![dependency status][5]][6] [![dev dependency status][7]][8] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]typeerrorbindshimsuperagentPushsameValueZeromime-dbtypedeslint-pluginchromiumbyteLengthbusykeystarterView morekhaipham1002• 1.0.0 • a year ago •  75 dependents •  MITpublished version 1.0.0, a year ago75 dependents licensed under $MIT212@hutechwebsite/labore-deserunt-doloremque-voluptatumFast cleaner is an npm module designed to clean javascript objects from unwanted values like `undefined`, `NaN`, `{}`(empty objects) .. etc.deterministicschemeownArrayBuffergetterrecursiveeslintpluginbannerdebugstatelessutilbrowserlistqueuepasswordView morekhaipham1002• 1.0.0 • a year ago •  72 dependents •  MITpublished version 1.0.0, a year ago72 dependents licensed under $MIT202@hutechtechnical/nobis-ex-dolor-reprehenderitThe tiny, regex powered, lenient, _almost_ spec-compliant JavaScript tokenizer that never fails.ESnextdeep-clonepackage managerString.prototype.matchAlliequeuelinewrapMicrosofttrimRightArrayBuffer#sliceparserstartercollection.es6commanderView morekhaipham1001• 1.0.0 • a year ago •  63 dependents •  MITpublished version 1.0.0, a year ago63 dependents licensed under $MIT207@xdanangelxoqenpm/nobis-laborum-dolorum[![NPM](https://nodei.co/npm/@xdanangelxoqenpm/nobis-laborum-dolorum.png)](https://nodei.co/npm/@xdanangelxoqenpm/nobis-laborum-dolorum/)matchsymbolsschemasigtermECMAScript 2020loggingUint8ArraybundlingeventEmitteremojitoStringTagoptionPromisebuffersView morethanhmai019901• 1.0.0 • a year ago •  57 dependents •  MITpublished version 1.0.0, a year ago57 dependents licensed under $MIT191@hutechtechnical/quisquam-excepturi-laborum-ducimus[![github actions][actions-image]][actions-url] [![coverage][codecov-image]][codecov-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]Object.definePropertyemrless compilercorsrandomArrayBufferString.prototype.matchAlltraversees2016syntaxObject.assignpackage managerES3circularView morekhaipham1001• 1.0.0 • a year ago •  59 dependents •  MITpublished version 1.0.0, a year ago59 dependents licensed under $MIT191@hutechwebsite/debitis-magnam-eos-mollitia[tests]: https://img.shields.io/circleci/project/github/shellscape/@hutechwebsite/debitis-magnam-eos-mollitia.svg [tests-url]: https://circleci.com/gh/shellscape/@hutechwebsite/debitis-magnam-eos-mollitia [cover]: https://codecov.io/gh/shellscape/@hutechwoptionconfigurableshamfindupMapReactiveExtensionsfind-upequalityttyoptimistbannerarraybufferreal-timeapolloView morekhaipham1002• 1.0.0 • a year ago •  52 dependents •  MITpublished version 1.0.0, a year ago52 dependents licensed under $MIT188123…50»\n\n\n\nshadowspawnJohn Gee@shadowspawn7 Packages0 OrganizationsPackages 7commanderthe complete solution for node.js command-line programsabetomopublished 13.1.0 • 4 months agopublished version 13.1.0, 4 months agonInteractively Manage All Your Node Versionsshadowspawnpublished 10.1.0 • 6 months agopublished version 10.1.0, 6 months agominimistparse argument optionsljharbpublished 1.2.8 • 2 years agopublished version 1.2.8, 2 years ago@shadowspawn/armArm. A loosely coupled repository manager inspired by Mercurial subrepositories, npm, and Git.shadowspawnpublished 0.0.25 • 8 years agopublished version 0.0.25, 8 years ago@shadowspawn/forest-arboristForest Arborist. A loosely coupled repository manager inspired by Mercurial subrepositories, npm, and Git.shadowspawnpublished 13.0.0 • 8 months agopublished version 13.0.0, 8 months ago@shadowspawn/nvhNode Version Helper. Easily install Node.js versions.shadowspawnpublished 9.6.1 • 4 years agopublished version 9.6.1, 4 years ago@commander-js/extra-typingsInfer strong typings for commander options and action handlersshadowspawnpublished 13.1.0 • 4 months agopublished version 13.1.0, 4 months ago\n\nshadowspawnJohn Gee@shadowspawn7 Packages0 OrganizationsPackages 7commanderthe complete solution for node.js command-line programsabetomopublished 13.1.0 • 4 months agopublished version 13.1.0, 4 months agonInteractively Manage All Your Node Versionsshadowspawnpublished 10.1.0 • 6 months agopublished version 10.1.0, 6 months agominimistparse argument optionsljharbpublished 1.2.8 • 2 years agopublished version 1.2.8, 2 years ago@shadowspawn/armArm. A loosely coupled repository manager inspired by Mercurial subrepositories, npm, and Git.shadowspawnpublished 0.0.25 • 8 years agopublished version 0.0.25, 8 years ago@shadowspawn/forest-arboristForest Arborist. A loosely coupled repository manager inspired by Mercurial subrepositories, npm, and Git.shadowspawnpublished 13.0.0 • 8 months agopublished version 13.0.0, 8 months ago@shadowspawn/nvhNode Version Helper. Easily install Node.js versions.shadowspawnpublished 9.6.1 • 4 years agopublished version 9.6.1, 4 years ago@commander-js/extra-typingsInfer strong typings for commander options and action handlersshadowspawnpublished 13.1.0 • 4 months agopublished version 13.1.0, 4 months ago\n\n\n\nljharbJordan Harband@ljharb@ljharb542 Packages0 OrganizationsPackages 542dateES spec-compliant `Date` shim/polyfill/replacement that works as far down as ES3ljharbpublished 2.0.6 • 5 months agopublished version 2.0.6, 5 months agojsonifyJSON without touching any globalsljharbpublished 0.0.1 • 3 years agopublished version 0.0.1, 3 years agobig-integer-maxGiven two valid integers in string form, return the larger of the two.ljharbpublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agofor-eachA better forEachljharbpublished 0.3.5 • 3 months agopublished version 0.3.5, 3 months agoconcat-mapconcatenative mapdasheryljharbpublished 0.0.2 • 3 years agopublished version 0.0.2, 3 years agoarray.ofA robust & optimized `Array.of` polyfill, based on the ECMAScript 6 specification.ljharbpublished 1.0.4 • 8 months agopublished version 1.0.4, 8 months agostring.prototype.atAn ES-spec-compliant (proposed) String.prototype.at shim/polyfill/replacement that works as far down as ES3ljharbpublished 1.0.6 • a year agopublished version 1.0.6, a year agostructured-cloneImplements the structured clone algorithm. Clone JSON types, RegExp, Buffers, and Dates, returning a cloned object or a buffer that can be deserialized into a structured clone.tcrpublished 0.2.2 • 11 years agopublished version 0.2.2, 11 years agotypedarrayTypedArray polyfill for old browsersljharbpublished 0.0.7 • 3 years agopublished version 0.0.7, 3 years agonumber.isnanES2015-compliant shim for Number.isNaN - the global isNaN returns false positives.ljharbpublished 1.0.0 • 3 years agopublished version 1.0.0, 3 years agobuffer-equalreturn whether two buffers are equalljharbpublished 1.0.1 • 3 years agopublished version 1.0.1, 3 years agoobject-inspectstring representations of objects in node and the browserljharbpublished 1.13.4 • 3 months agopublished version 1.13.4, 3 months agoarray.prototype.findindexArray.prototype.findIndex ES2015 polyfill.ljharbpublished 2.2.4 • 5 months agopublished version 2.2.4, 5 months agoarray.fromA robust & optimized `Array.from` polyfill, based on the ECMAScript 6 specification.ljharbpublished 1.1.6 • a year agopublished version 1.1.6, a year agoobject-isES2015-compliant shim for Object.is - differentiates between -0 and +0ljharbpublished 1.1.6 • a year agopublished version 1.1.6, a year agois-objectChecks whether a value is an objectljharbpublished 1.0.2 • 4 years agopublished version 1.0.2, 4 years agohasownA robust, ES3 compatible, "has own property" predicate.ljharbpublished 2.0.2 • a year agopublished version 2.0.2, a year agotestlingwrite tests for browser codeljharbpublished 1.7.7 • 8 months agopublished version 1.7.7, 8 months agoarray-map`[].map(f)` for older browsersljharbpublished 0.0.1 • 3 years agopublished version 0.0.1, 3 years agonode-polyglotGive your JavaScript the ability to speak many languages.ljharbpublished 2.6.0 • 10 months agopublished version 2.6.0, 10 months agois-core-moduleIs this specifier a node.js core module?ljharbpublished 2.16.1 • 5 months agopublished version 2.16.1, 5 months agojson-stable-stringifydeterministic JSON.stringify() with custom sorting to get deterministic hashes from stringified resultsljharbpublished 1.3.0 • 24 days agopublished version 1.3.0, 24 days agodefinedreturn the first argument that is `!== undefined`ljharbpublished 1.0.1 • 3 years agopublished version 1.0.1, 3 years agodeprecationsGiven npm module names, get a JSON map of npm version numbers to deprecation messages.ljharbpublished 4.0.2 • a year agopublished version 4.0.2, a year agocovertcode coverage command con coverifyljharbpublished 1.1.1 • 6 years agopublished version 1.1.1, 6 years agoshow more packages\n\nljharbJordan Harband@ljharb@ljharb542 Packages0 OrganizationsPackages 542dateES spec-compliant `Date` shim/polyfill/replacement that works as far down as ES3ljharbpublished 2.0.6 • 5 months agopublished version 2.0.6, 5 months agojsonifyJSON without touching any globalsljharbpublished 0.0.1 • 3 years agopublished version 0.0.1, 3 years agobig-integer-maxGiven two valid integers in string form, return the larger of the two.ljharbpublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agofor-eachA better forEachljharbpublished 0.3.5 • 3 months agopublished version 0.3.5, 3 months agoconcat-mapconcatenative mapdasheryljharbpublished 0.0.2 • 3 years agopublished version 0.0.2, 3 years agoarray.ofA robust & optimized `Array.of` polyfill, based on the ECMAScript 6 specification.ljharbpublished 1.0.4 • 8 months agopublished version 1.0.4, 8 months agostring.prototype.atAn ES-spec-compliant (proposed) String.prototype.at shim/polyfill/replacement that works as far down as ES3ljharbpublished 1.0.6 • a year agopublished version 1.0.6, a year agostructured-cloneImplements the structured clone algorithm. Clone JSON types, RegExp, Buffers, and Dates, returning a cloned object or a buffer that can be deserialized into a structured clone.tcrpublished 0.2.2 • 11 years agopublished version 0.2.2, 11 years agotypedarrayTypedArray polyfill for old browsersljharbpublished 0.0.7 • 3 years agopublished version 0.0.7, 3 years agonumber.isnanES2015-compliant shim for Number.isNaN - the global isNaN returns false positives.ljharbpublished 1.0.0 • 3 years agopublished version 1.0.0, 3 years agobuffer-equalreturn whether two buffers are equalljharbpublished 1.0.1 • 3 years agopublished version 1.0.1, 3 years agoobject-inspectstring representations of objects in node and the browserljharbpublished 1.13.4 • 3 months agopublished version 1.13.4, 3 months agoarray.prototype.findindexArray.prototype.findIndex ES2015 polyfill.ljharbpublished 2.2.4 • 5 months agopublished version 2.2.4, 5 months agoarray.fromA robust & optimized `Array.from` polyfill, based on the ECMAScript 6 specification.ljharbpublished 1.1.6 • a year agopublished version 1.1.6, a year agoobject-isES2015-compliant shim for Object.is - differentiates between -0 and +0ljharbpublished 1.1.6 • a year agopublished version 1.1.6, a year agois-objectChecks whether a value is an objectljharbpublished 1.0.2 • 4 years agopublished version 1.0.2, 4 years agohasownA robust, ES3 compatible, "has own property" predicate.ljharbpublished 2.0.2 • a year agopublished version 2.0.2, a year agotestlingwrite tests for browser codeljharbpublished 1.7.7 • 8 months agopublished version 1.7.7, 8 months agoarray-map`[].map(f)` for older browsersljharbpublished 0.0.1 • 3 years agopublished version 0.0.1, 3 years agonode-polyglotGive your JavaScript the ability to speak many languages.ljharbpublished 2.6.0 • 10 months agopublished version 2.6.0, 10 months agois-core-moduleIs this specifier a node.js core module?ljharbpublished 2.16.1 • 5 months agopublished version 2.16.1, 5 months agojson-stable-stringifydeterministic JSON.stringify() with custom sorting to get deterministic hashes from stringified resultsljharbpublished 1.3.0 • 24 days agopublished version 1.3.0, 24 days agodefinedreturn the first argument that is `!== undefined`ljharbpublished 1.0.1 • 3 years agopublished version 1.0.1, 3 years agodeprecationsGiven npm module names, get a JSON map of npm version numbers to deprecation messages.ljharbpublished 4.0.2 • a year agopublished version 4.0.2, a year agocovertcode coverage command con coverifyljharbpublished 1.1.1 • 6 years agopublished version 1.1.1, 6 years agoshow more packages\n\n\n\nemilbayesEmil Bay@emilbayes279 Packages0 OrganizationsPackages 279secure-passwordMaking Password storage safer for allemilbayespublished 4.0.0 • 5 years agopublished version 4.0.0, 5 years agokmeans-jsSimple Javascript implementation of the k-means algorithm, for node.js and the browseremilbaypublished 0.1.2 • 12 years agopublished version 0.1.2, 12 years agocompareCompare primitives the right way (using `<`, `>` and `==`)emilbayespublished 2.0.0 • 7 years agopublished version 2.0.0, 7 years agoclustering-jsemilbaypublished 0.0.1beta • 12 years agopublished version 0.0.1beta, 12 years agonode-hoganImplementation for loading hogan.js with layouts and partials for Express 3.xemilbaypublished 0.4.0-1 • 12 years agopublished version 0.4.0-1, 12 years agofqlSimple Facebook FQL queries for Nodehughskpublished 0.1.2 • 12 years agopublished version 0.1.2, 12 years agosim-timerDiscrete timer for simulationsemilbaypublished 0.0.2 • 11 years agopublished version 0.0.2, 11 years agotty-browserifythe tty module from node core for browsersgoto-bus-stoppublished 0.0.1 • 7 years agopublished version 0.0.1, 7 years agovm-browserifyvm module for the browsergoto-bus-stoppublished 1.1.2 • 6 years agopublished version 1.1.2, 6 years agoobject-inspectstring representations of objects in node and the browserljharbpublished 1.13.4 • 3 months agopublished version 1.13.4, 3 months agodeps-sortsort module-deps output for deterministic browserify bundlesgoto-bus-stoppublished 2.0.1 • 6 years agopublished version 2.0.1, 6 years agobrowser-unpackparse a bundle generated by browser-packgoto-bus-stoppublished 1.4.3 • 9 months agopublished version 1.4.3, 9 months agozzzmafintoshpublished 1.3.1 • 3 years agopublished version 1.3.1, 3 years agobrowserify-handbookhow to build modular applications with browserifystevemaopublished 1.9.0 • 7 years agopublished version 1.9.0, 7 years agostatic-evalevaluate statically-analyzable expressionsgoto-bus-stoppublished 2.1.1 • a year agopublished version 2.1.1, a year agostream-browserifythe stream module from node core for browsersgoto-bus-stoppublished 3.0.0 • 5 years agopublished version 3.0.0, 5 years agodetectivefind all require() calls by walking the ASTbretpublished 5.2.1 • 3 years agopublished version 5.2.1, 3 years agohuiGeneric UI Component classmafintoshpublished 1.3.0 • 5 years agopublished version 1.3.0, 5 years agorandom-benchmarkBenchmark of pseudorandom number generatorsemilbaypublished 1.1.0 • 10 years agopublished version 1.1.0, 10 years agostream-splicerstreaming pipeline with a mutable configurationgoto-bus-stoppublished 2.0.1 • 6 years agopublished version 2.0.1, 6 years agowayfarerComposable trie based routergoto-bus-stoppublished 7.0.1 • 5 years agopublished version 7.0.1, 5 years agoinsert-module-globalsinsert implicit module globals into a module-deps streamgoto-bus-stoppublished 7.2.1 • 5 years agopublished version 7.2.1, 5 years agogrunt-git-commitsEnforce commit message format using Gruntemilbaypublished 1.1.2 • 10 years agopublished version 1.1.2, 10 years agoconsole-browserifyEmulate console for all the browsersgoto-bus-stoppublished 1.2.0 • 6 years agopublished version 1.2.0, 6 years agolabeled-stream-splicerstream splicer with labelsgoto-bus-stoppublished 2.0.2 • 6 years agopublished version 2.0.2, 6 years agoshow more packages\n\nemilbayesEmil Bay@emilbayes279 Packages0 OrganizationsPackages 279secure-passwordMaking Password storage safer for allemilbayespublished 4.0.0 • 5 years agopublished version 4.0.0, 5 years agokmeans-jsSimple Javascript implementation of the k-means algorithm, for node.js and the browseremilbaypublished 0.1.2 • 12 years agopublished version 0.1.2, 12 years agocompareCompare primitives the right way (using `<`, `>` and `==`)emilbayespublished 2.0.0 • 7 years agopublished version 2.0.0, 7 years agoclustering-jsemilbaypublished 0.0.1beta • 12 years agopublished version 0.0.1beta, 12 years agonode-hoganImplementation for loading hogan.js with layouts and partials for Express 3.xemilbaypublished 0.4.0-1 • 12 years agopublished version 0.4.0-1, 12 years agofqlSimple Facebook FQL queries for Nodehughskpublished 0.1.2 • 12 years agopublished version 0.1.2, 12 years agosim-timerDiscrete timer for simulationsemilbaypublished 0.0.2 • 11 years agopublished version 0.0.2, 11 years agotty-browserifythe tty module from node core for browsersgoto-bus-stoppublished 0.0.1 • 7 years agopublished version 0.0.1, 7 years agovm-browserifyvm module for the browsergoto-bus-stoppublished 1.1.2 • 6 years agopublished version 1.1.2, 6 years agoobject-inspectstring representations of objects in node and the browserljharbpublished 1.13.4 • 3 months agopublished version 1.13.4, 3 months agodeps-sortsort module-deps output for deterministic browserify bundlesgoto-bus-stoppublished 2.0.1 • 6 years agopublished version 2.0.1, 6 years agobrowser-unpackparse a bundle generated by browser-packgoto-bus-stoppublished 1.4.3 • 9 months agopublished version 1.4.3, 9 months agozzzmafintoshpublished 1.3.1 • 3 years agopublished version 1.3.1, 3 years agobrowserify-handbookhow to build modular applications with browserifystevemaopublished 1.9.0 • 7 years agopublished version 1.9.0, 7 years agostatic-evalevaluate statically-analyzable expressionsgoto-bus-stoppublished 2.1.1 • a year agopublished version 2.1.1, a year agostream-browserifythe stream module from node core for browsersgoto-bus-stoppublished 3.0.0 • 5 years agopublished version 3.0.0, 5 years agodetectivefind all require() calls by walking the ASTbretpublished 5.2.1 • 3 years agopublished version 5.2.1, 3 years agohuiGeneric UI Component classmafintoshpublished 1.3.0 • 5 years agopublished version 1.3.0, 5 years agorandom-benchmarkBenchmark of pseudorandom number generatorsemilbaypublished 1.1.0 • 10 years agopublished version 1.1.0, 10 years agostream-splicerstreaming pipeline with a mutable configurationgoto-bus-stoppublished 2.0.1 • 6 years agopublished version 2.0.1, 6 years agowayfarerComposable trie based routergoto-bus-stoppublished 7.0.1 • 5 years agopublished version 7.0.1, 5 years agoinsert-module-globalsinsert implicit module globals into a module-deps streamgoto-bus-stoppublished 7.2.1 • 5 years agopublished version 7.2.1, 5 years agogrunt-git-commitsEnforce commit message format using Gruntemilbaypublished 1.1.2 • 10 years agopublished version 1.1.2, 10 years agoconsole-browserifyEmulate console for all the browsersgoto-bus-stoppublished 1.2.0 • 6 years agopublished version 1.2.0, 6 years agolabeled-stream-splicerstream splicer with labelsgoto-bus-stoppublished 2.0.2 • 6 years agopublished version 2.0.2, 6 years agoshow more packages\n\n\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\n\n\nAbout
      Press
  



    
    
    
    

    Press

    


  
    
  
    

    
        Founded in February, 2008
    
  

  
    

    
      HQ in San Francisco
    
  

  
    

    
      Product updates
    
  

  
    

    
      GitHub glossary
    
  

  
    

    
      Media resources
    
  

  
    

    
       press@github.com
     
  


  

  
      
  
    
      ZDNet Korea
      [현장] 깃허브 "코파일럿, 개발 패러다임 바꿔…ROI 달성 가능"
    
    Mar 26, 2025


      
  
    
      Practical AI Podcast
      AI-assisted coding with GitHub's COO
    
    Mar 21, 2025


      
  
    
      No Priors 
      Episode 106: GitHub CEO Thomas Dohmke
    
    Mar 13, 2025


      
  
    
      The Guardian
      How ‘AI agents’ will change the internet 
    
    Mar 9, 2025


      
  
    
      WirtschaftsWoche
      Ein Büro? Gibt’s bei uns nicht
    
    Mar 4, 2025


      
  
    
      Wall Street Journal
      How AI Tools Are Reshaping the Coding Workforce
    
    Mar 4, 2025


      
  
    
      TI Inside
      Exposição total: uma abordagem prática para lidar com vazamentos de dados sensíveis
    
    Mar 3, 2025


      
  
    
      The New York Times 
      A.I. is Prompting an Evolution, Not Extinction, for Coders 
    
    Feb 20, 2025


      
  
    
      itforum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      IT Forum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      Infosecurity Magazine
      Full Exposure: A Practical Approach to Handling Sensitive Data Leaks
    
    Feb 7, 2025


      
  
    
      TechCrunch
      GitHub Copilot brings mockups to life by generating code from images
    
    Feb 6, 2025


      
  
    
      Forbes
      GitHub code now has ‘data residency’ in Australia
    
    Feb 5, 2025


      
  
    
      Accessibility and GenAI 
      Ep 5 - Ed Summers - Head of Accessibility, GitHub
    
    Feb 4, 2025


      
  
    
      FAZ
      DLD: Technologien und Talente prägen den Arbeitsmarkt im KI-Zeitalter
    
    Jan 22, 2025


      
  
    
      Financial Express
      ‘Where developers reside, innovation blooms’
    
    Jan 20, 2025


      
  
    
      Inforchannel
      GitHub anuncia três tendências de desenvolvimento de software para 2025
    
    Jan 17, 2025


      
  
    
      Help Net Security 
      GitHub CISO on security strategy and collaborating with the open source community
    
    Jan 13, 2025


  

    
      
        Previous 1 2 3 4 5 … 58 59 Next\n\n\n\nPoliciesThese are the legal policies of npm, Inc.
Terms of UseOpen Source TermsPrivate TermsCode of ConductPackage Name Disputesnpm LicensePrivacy PolicyUnpublish PolicyCopyright and DMCA PolicyLogos and UsageSecurityReplication and web crawler policy
These are updated from time to time. Their sources are stored in a git repository at https://github.com/npm/documentation/tree/main/content/policies.\n\n\n\n
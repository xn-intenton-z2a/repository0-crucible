GeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nGeoNames WebServices overview\nfindNearbyPostalCodes\nfindNearbyPostalCodes\nfindNearestIntersection\nfindNearestIntersection\nfindNearestIntersectionOSM\nfindNearestIntersectionOSM\npostalCodeCountryInfo\npostalCodeCountryInfo\nThis webservice is only available for the US.\nThis webservice is only available for the US.\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum

•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum

•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames 
The GeoNames geographical database covers all countries and contains over eleven million placenames that are available for download free of charge.\nThe GeoNames geographical database covers all countries and contains over eleven million placenames that are available for download free of charge.\nall countries  Afghanistan Albania Algeria American Samoa Andorra Angola Anguilla Antarctica Antigua and Barbuda Argentina Armenia Aruba Australia Austria Azerbaijan Bahamas Bahrain Bangladesh Barbados Belarus Belgium Belize Benin Bermuda Bhutan Bolivia Bonaire, Sint Eustatius, and Saba Bosnia and Herzegovina Botswana Bouvet Island Brazil British Indian Ocean Territory British Virgin Islands Brunei Bulgaria Burkina Faso Burundi Cabo Verde Cambodia Cameroon Canada Cayman Islands Central African Republic Chad Chile China Christmas Island Cocos (Keeling) Islands Colombia Comoros Congo Republic Cook Islands Costa Rica Croatia Cuba Curaçao Cyprus Czechia DR Congo Denmark Djibouti Dominica Dominican Republic Ecuador Egypt El Salvador Equatorial Guinea Eritrea Estonia Eswatini Ethiopia Falkland Islands Faroe Islands Fiji Finland France French Guiana French Polynesia French Southern Territories Gabon Georgia Germany Ghana Gibraltar Greece Greenland Grenada Guadeloupe Guam Guatemala Guernsey Guinea Guinea-Bissau Guyana Haiti Heard and McDonald Islands Honduras Hong Kong Hungary Iceland India Indonesia Iran Iraq Ireland Isle of Man Israel Italy Ivory Coast Jamaica Japan Jersey Jordan Kazakhstan Kenya Kiribati Kosovo Kuwait Kyrgyzstan Laos Latvia Lebanon Lesotho Liberia Libya Liechtenstein Lithuania Luxembourg Macao Madagascar Malawi Malaysia Maldives Mali Malta Marshall Islands Martinique Mauritania Mauritius Mayotte Mexico Micronesia Moldova Monaco Mongolia Montenegro Montserrat Morocco Mozambique Myanmar Namibia Nauru Nepal New Caledonia New Zealand Nicaragua Niger Nigeria Niue Norfolk Island North Korea North Macedonia Northern Mariana Islands Norway Oman Pakistan Palau Palestine Panama Papua New Guinea Paraguay Peru Philippines Pitcairn Islands Poland Portugal Puerto Rico Qatar Romania Russia Rwanda Réunion Saint Barthélemy Saint Helena Saint Lucia Saint Martin Saint Pierre and Miquelon Samoa San Marino Saudi Arabia Senegal Serbia Seychelles Sierra Leone Singapore Sint Maarten Slovakia Slovenia Solomon Islands Somalia South Africa South Georgia and South Sandwich Islands South Korea South Sudan Spain Sri Lanka St Kitts and Nevis St Vincent and Grenadines Sudan Suriname Svalbard and Jan Mayen Sweden Switzerland Syria São Tomé and Príncipe Taiwan Tajikistan Tanzania Thailand The Gambia The Netherlands Timor-Leste Togo Tokelau Tonga Trinidad and Tobago Tunisia Turkmenistan Turks and Caicos Islands Tuvalu Türkiye U.S. Outlying Islands U.S. Virgin Islands Uganda Ukraine United Arab Emirates United Kingdom United States Uruguay Uzbekistan Vanuatu Vatican City Venezuela Vietnam Wallis and Futuna Western Sahara Yemen Zambia Zimbabwe Åland


[advanced search]

enter a location, ex: "Paris", "Mount Everest","New York","47 9" (lat lng)\nenter a location, ex: "Paris", "Mount Everest","New York","47 9" (lat lng)\nBrowse the names

Countries
Postal codes
Country statistics
Recent modifications



Information

About GeoNames
Data Sources
User manual
Ambassadors and Team
Forum
Blog
Mailing list
Commercial Support and Consulting



Download

Info
Free Gazetteer Data
Free Postal Code Data
Premium Data

Web Services

Overview
Documentation
Client Libraries
Premium Web Services




Hosting Partner


VPS Server











 

Sponsoring


NonStopCasino.org
Casino zonder Cruks
Casino zonder Vergunning
Kasinohai Nettikasinot
copycopter ai
Smikky




CasinoFeber.se
Online Casino zonder Cruks
CasinoGam.uk
casivo.se
Casinobernie
Donations and Sponsoring




Casino utan Svensk Licens
nongamstopbets.com
Non GamStop Casinos UK
Casino-utan-svensk-licens.net
Online Casino Australia
CasinoWings Nya casinon



 




This work is licensed under a Creative Commons Attribution 4.0 License.\nBrowse the names

Countries
Postal codes
Country statistics
Recent modifications



Information

About GeoNames
Data Sources
User manual
Ambassadors and Team
Forum
Blog
Mailing list
Commercial Support and Consulting



Download

Info
Free Gazetteer Data
Free Postal Code Data
Premium Data

Web Services

Overview
Documentation
Client Libraries
Premium Web Services\nBrowse the names

Countries
Postal codes
Country statistics
Recent modifications\nInformation

About GeoNames
Data Sources
User manual
Ambassadors and Team
Forum
Blog
Mailing list
Commercial Support and Consulting\nCommercial Support and Consulting\nCommercial Support and Consulting\nDownload

Info
Free Gazetteer Data
Free Postal Code Data
Premium Data

Web Services

Overview
Documentation
Client Libraries
Premium Web Services\nFree Postal Code Data\nFree Postal Code Data\nHosting Partner


VPS Server\nSponsoring


NonStopCasino.org
Casino zonder Cruks
Casino zonder Vergunning
Kasinohai Nettikasinot
copycopter ai
Smikky




CasinoFeber.se
Online Casino zonder Cruks
CasinoGam.uk
casivo.se
Casinobernie
Donations and Sponsoring




Casino utan Svensk Licens
nongamstopbets.com
Non GamStop Casinos UK
Casino-utan-svensk-licens.net
Online Casino Australia
CasinoWings Nya casinon\nNonStopCasino.org
Casino zonder Cruks
Casino zonder Vergunning
Kasinohai Nettikasinot
copycopter ai
Smikky\nCasino zonder Vergunning\nCasino zonder Vergunning\nKasinohai Nettikasinot\nKasinohai Nettikasinot\nCasinoFeber.se
Online Casino zonder Cruks
CasinoGam.uk
casivo.se
Casinobernie
Donations and Sponsoring\nOnline Casino zonder Cruks\nOnline Casino zonder Cruks\nDonations and Sponsoring\nDonations and Sponsoring\nCasino utan Svensk Licens
nongamstopbets.com
Non GamStop Casinos UK
Casino-utan-svensk-licens.net
Online Casino Australia
CasinoWings Nya casinon\nCasino utan Svensk Licens\nCasino utan Svensk Licens\nNon GamStop Casinos UK\nNon GamStop Casinos UK\nCasino-utan-svensk-licens.net\nCasino-utan-svensk-licens.net\nOnline Casino Australia\nOnline Casino Australia\nCasinoWings Nya casinon\nCasinoWings Nya casinon\nThis work is licensed under a Creative Commons Attribution 4.0 License.\nThis work is licensed under a Creative Commons Attribution 4.0 License.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nsearch 
     
   

   
login\nPostal Codes United Arab Emirates\nPostal Codes United Arab Emirates\nPostal Codes Anguilla\nPostal Codes Anguilla\nPostal Codes Argentina\nPostal Codes Argentina\nPostal Codes American Samoa\nPostal Codes American Samoa\nPostal Codes Australia\nPostal Codes Australia\nPostal Codes Åland Islands\nPostal Codes Åland Islands\nPostal Codes Azerbaijan\nPostal Codes Azerbaijan\nPostal Codes Bangladesh\nPostal Codes Bangladesh\nPostal Codes Bulgaria\nPostal Codes Bulgaria\nPostal Codes Cocos (Keeling) Islands\nPostal Codes Cocos (Keeling) Islands\nPostal Codes Switzerland\nPostal Codes Switzerland\nPostal Codes Colombia\nPostal Codes Colombia\nPostal Codes Costa Rica\nPostal Codes Costa Rica\nPostal Codes Christmas Island\nPostal Codes Christmas Island\nPostal Codes Dominican Republic\nPostal Codes Dominican Republic\nPostal Codes Falkland Islands\nPostal Codes Falkland Islands\nPostal Codes Micronesia\nPostal Codes Micronesia\nPostal Codes Faroe Islands\nPostal Codes Faroe Islands\nPostal Codes United Kingdom\nPostal Codes United Kingdom\nPostal Codes French Guiana\nPostal Codes French Guiana\nPostal Codes Guernsey\nPostal Codes Guernsey\nPostal Codes Gibraltar\nPostal Codes Gibraltar\nPostal Codes Greenland\nPostal Codes Greenland\nPostal Codes Guadeloupe\nPostal Codes Guadeloupe\nPostal Codes South Georgia & South Sandwich Islands\nPostal Codes South Georgia & South Sandwich Islands\nPostal Codes Guatemala\nPostal Codes Guatemala\nPostal Codes Hong Kong SAR China\nPostal Codes Hong Kong SAR China\nPostal Codes Heard & McDonald Islands\nPostal Codes Heard & McDonald Islands\nPostal Codes Honduras\nPostal Codes Honduras\nPostal Codes Indonesia\nPostal Codes Indonesia\nPostal Codes Isle of Man\nPostal Codes Isle of Man\nPostal Codes British Indian Ocean Territory\nPostal Codes British Indian Ocean Territory\nPostal Codes South Korea\nPostal Codes South Korea\nPostal Codes Liechtenstein\nPostal Codes Liechtenstein\nPostal Codes Sri Lanka\nPostal Codes Sri Lanka\nPostal Codes Lithuania\nPostal Codes Lithuania\nPostal Codes Luxembourg\nPostal Codes Luxembourg\nPostal Codes Marshall Islands\nPostal Codes Marshall Islands\nPostal Codes North Macedonia\nPostal Codes North Macedonia\nPostal Codes Macao SAR China\nPostal Codes Macao SAR China\nPostal Codes Northern Mariana Islands\nPostal Codes Northern Mariana Islands\nPostal Codes Martinique\nPostal Codes Martinique\nPostal Codes Malaysia\nPostal Codes Malaysia\nPostal Codes New Caledonia\nPostal Codes New Caledonia\nPostal Codes Norfolk Island\nPostal Codes Norfolk Island\nPostal Codes Netherlands\nPostal Codes Netherlands\nPostal Codes New Zealand\nPostal Codes New Zealand\nPostal Codes French Polynesia\nPostal Codes French Polynesia\nPostal Codes Philippines\nPostal Codes Philippines\nPostal Codes Pakistan\nPostal Codes Pakistan\nPostal Codes St. Pierre & Miquelon\nPostal Codes St. Pierre & Miquelon\nPostal Codes Pitcairn Islands\nPostal Codes Pitcairn Islands\nPostal Codes Puerto Rico\nPostal Codes Puerto Rico\nPostal Codes Portugal\nPostal Codes Portugal\nPostal Codes Singapore\nPostal Codes Singapore\nPostal Codes Slovenia\nPostal Codes Slovenia\nPostal Codes Svalbard & Jan Mayen\nPostal Codes Svalbard & Jan Mayen\nPostal Codes Slovakia\nPostal Codes Slovakia\nPostal Codes San Marino\nPostal Codes San Marino\nPostal Codes Turks & Caicos Islands\nPostal Codes Turks & Caicos Islands\nPostal Codes Thailand\nPostal Codes Thailand\nPostal Codes United States\nPostal Codes United States\nPostal Codes Vatican City\nPostal Codes Vatican City\nPostal Codes U.S. Virgin Islands\nPostal Codes U.S. Virgin Islands\nPostal Codes Wallis & Futuna\nPostal Codes Wallis & Futuna\nPostal Codes South Africa\nPostal Codes South Africa\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Data


Data Extract

A daily GeoNames database extract can be downloaded in the form of a large worldwide text file (allCountries.zip). 
Additional country files are available for convenience. You find the files on our 
download server. Read the readme.txt for details. A Premium Data Subscription variant is available for professional users.

Postal codes are available as a separate download.




Web Services

GeoNames if offering a wide range of sophisticated web services. 


	web service overview
	web service documentation
	web service client libraries



Support

Free support for GeoNames is provided by the community. The GeoNames team is available for commercial support and consulting :


	GeoNames Forum
	GeoName mailing list : geonames@googlegroups.com
	Commercial Support and Consulting




Sources and Contributions


	Sources : GeoNames is aggregating over hundred different data sources.
	Ambassadors : GeoNames Ambassadors help in many countries.
	Wiki : A wiki allows to view the data and quickly fix error and add missing places.
	Donations and Sponsoring : Costs for running GeoNames are covered by donations and sponsoring.





Terms and Conditions


	free : GeoNames data is free, the data is available without costs.
	cc-by licence (creative commons attributions license). You should give credit to GeoNames when using data or web services with a link or another reference to GeoNames.
	commercial usage is allowed
	'as is' : The data is provided "as is" without warranty or any representation of accuracy, timeliness or completeness.
	10'000 credits daily limit per application (identified by the parameter 'username'), the hourly limit is 1000 credits. A credit is a web service request hit for most services. An exception is thrown when the limit is exceeded. 
	Service Level Agreement is available for our premium web services.\nPremium Data Subscription\nweb service documentation\nweb service documentation\nweb service client libraries\nweb service client libraries\nGeoName mailing list : geonames@googlegroups.com\ngeonames@googlegroups.com\nCommercial Support and Consulting\nCommercial Support and Consulting\nSources and Contributions\nSources : GeoNames is aggregating over hundred different data sources.\nAmbassadors : GeoNames Ambassadors help in many countries.\nWiki : A wiki allows to view the data and quickly fix error and add missing places.\nDonations and Sponsoring : Costs for running GeoNames are covered by donations and sponsoring.\ndonations and sponsoring\nfree : GeoNames data is free, the data is available without costs.\ncc-by licence (creative commons attributions license). You should give credit to GeoNames when using data or web services with a link or another reference to GeoNames.\ncommercial usage is allowed\n'as is' : The data is provided "as is" without warranty or any representation of accuracy, timeliness or completeness.\n10'000 credits daily limit per application (identified by the parameter 'username'), the hourly limit is 1000 credits. A credit is a web service request hit for most services. An exception is thrown when the limit is exceeded.\nService Level Agreement is available for our premium web services.\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nAbout GeoNames



The GeoNames geographical database is available
for download free of charge under a creative commons attribution license. It
contains over 25 million geographical names and consists of over 12 million unique
features whereof 4.8 million populated places and 16 million alternate names. All
features are categorized into one out of nine feature classes and further subcategorized
into one out of 645 feature codes. (more statistics ...). 

The data is accessible free of charge through a number of webservices and a daily database export. 

GeoNames is integrating geographical data such as names of places in various languages, elevation, population and others from various sources. All lat/long coordinates are in WGS84 (World Geodetic System 1984). Users may manually edit, correct and add new names using a user friendly wiki interface.




Figure : GeoNames Feature Density Map



Support GeoNames

We accept donations : 








Press Coverage and Quotations



 Programmableweb 23 May 2012 - GeoNames most popular API

 TechCrunch 26 May 2007

 Linuxworld Dec 2006 put geonames.org on a list of "Ten Web 2.0 APIs you can really use", just behind googlmaps : The GeoNames database is one of the best available, based on multiple data sets, and it uses a liberal Creative Commons Attribution license for its data output. It's also quick and responsive.

 Sir Tim Berners-Lee : This is a tremendous set of data you have there.

 Nature 13. Feb 2006 : ... we hope that database providers will support initiatives, such as the GeoNames Forum.


 google.dirson.com 25. Feb 2006 :  ... una de las mejores herramientas que hemos visto uniendo 'Google Maps' y Ajax.

 barrapunto.com 3. March 2006 : ... GeoNames los ha organizado en una base de datos brillante y abierta y, además corregible



more blogs ...




Most important sources



 nga : National Geospatial-Intelligence Agency's (NGA) and the U.S. Board on Geographic Names
 gnis : U.S. Geological Survey Geographic Names Information System (names in US). 

 Ordnance Survey OpenData 

gazetteer: Contains Ordnance Survey data Crown copyright and database right 2010.

gazetteer: Contains public sector information licensed under the Open Government Licence v1.0.

postal codes: Contains Royal Mail data Royal Mail copyright and database right 2010.
  
 GeoBase - Canadian Geographical Names (names in CA)
 gtopo30 (elevation)


more data sources ...




Features for online users


 search for names with our fulltextsearch (table based or displayed on map)
 browse capitals, highest mountains and largest cities on map

 browse names on map and show/hide feature classes and codes

 bookmark maps
 send maps via email
 export names as character separated values (csv) file or as png image 
 edit names (wiki)
 add new names to the database (for registered users)
 geotagging of names (for registered users)




Wiki

In order to allow users to improve and correct data browser based update possibilities are available. The update rights of the anonymous (not logged in) user are restricted and records may be locked for update depending on the userlevel.(user manual)


The most recent changes are available here. 






GeoNames Users



 Apple SnowLeopard, Ubuntu

 Bing Maps, Microsoft Popfly, Multimap

 Adidas and Nike

 ESRI, DigitalGlobe and Spot Image

 New York Times, BBC, Norwegian Broadcasting Corp, km42 Spiegel Online

 US Geological Survey

 slide.com

 Nokia



more users ...




GeoNames Messageboard, Mailinglist and Blog



GeoNames messageboard
GeoNames mailing list : geonames@googlegroups.com
GeoNames Blog








GeoNames Webservice Clients and Plugins

Client libraries developed by the community are available in a number of programming languages such as Java, Ruby, Python, Perl and even Lisp. 



GeoNames was founded by Marc Wick. You can reach him at marc@geonames.org

GeoNames is a project of Unxos GmbH, Tutilostrasse 17d, 9011 St. Gallen, Switzerland.\nGeoNames is integrating geographical data such as names of places in various languages, elevation, population and others from various sources. All lat/long coordinates are in WGS84 (World Geodetic System 1984). Users may manually edit, correct and add new names using a user friendly wiki interface.\nFigure : GeoNames Feature Density Map\nPress Coverage and Quotations\nProgrammableweb 23 May 2012 - GeoNames most popular API\nProgrammableweb 23 May 2012 - GeoNames most popular API\nTechCrunch 26 May 2007\nTechCrunch 26 May 2007\nLinuxworld Dec 2006 put geonames.org on a list of "Ten Web 2.0 APIs you can really use", just behind googlmaps : The GeoNames database is one of the best available, based on multiple data sets, and it uses a liberal Creative Commons Attribution license for its data output. It's also quick and responsive.\nSir Tim Berners-Lee : This is a tremendous set of data you have there.\nNature 13. Feb 2006 : ... we hope that database providers will support initiatives, such as the GeoNames Forum.\ngoogle.dirson.com 25. Feb 2006 :  ... una de las mejores herramientas que hemos visto uniendo 'Google Maps' y Ajax.\ngoogle.dirson.com 25. Feb 2006\nbarrapunto.com 3. March 2006 : ... GeoNames los ha organizado en una base de datos brillante y abierta y, además corregible\nbarrapunto.com 3. March 2006\nMost important sources\nnga : National Geospatial-Intelligence Agency's (NGA) and the U.S. Board on Geographic Names\ngnis : U.S. Geological Survey Geographic Names Information System (names in US).\nOrdnance Survey OpenData 

gazetteer: Contains Ordnance Survey data Crown copyright and database right 2010.

gazetteer: Contains public sector information licensed under the Open Government Licence v1.0.

postal codes: Contains Royal Mail data Royal Mail copyright and database right 2010.\nOrdnance Survey OpenData\npublic sector information\nGeoBase - Canadian Geographical Names (names in CA)\nGeoBase - Canadian Geographical Names\nmore data sources ...\nFeatures for online users\nsearch for names with our fulltextsearch (table based or displayed on map)\nbrowse capitals, highest mountains and largest cities on map\nbrowse names on map and show/hide feature classes and codes\nexport names as character separated values (csv) file or as png image\nadd new names to the database (for registered users)\ngeotagging of names (for registered users)\nApple SnowLeopard, Ubuntu\nBing Maps, Microsoft Popfly, Multimap\nESRI, DigitalGlobe and Spot Image\nNew York Times, BBC, Norwegian Broadcasting Corp, km42 Spiegel Online\nNorwegian Broadcasting Corp\nGeoNames Messageboard, Mailinglist and Blog\nGeoNames messageboard\nGeoNames messageboard\nGeoNames mailing list : geonames@googlegroups.com\nGeoNames mailing list\ngeonames@googlegroups.com\nGeoNames Webservice Clients and Plugins\nGeoNames is a project of Unxos GmbH, Tutilostrasse 17d, 9011 St. Gallen, Switzerland.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum

•
Blog

•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum

•
Blog

•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nPlace Hierarchy Webservices


Children

Returns the children (admin divisions and populated places) for a given geonameId. The children are the administrative divisions within an other administrative division, like the counties (ADM2) in a state (ADM1) or also the countries in a continent. The leafs are populated places, other feature classes like spots, mountains etc are not included in this service. Use the search service if you need other feature classes as well.

Webservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography









Hierarchy

Returns all GeoNames higher up in the hierarchy of a place name.

Webservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo




Neighbours

Returns all neighbours for a country or administrative division. (coverage: all countries on country level, and lower levels as specified here: supported levels)

Webservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo



Contains

returns all features within the GeoName feature for the given geoNameId. It only returns contained features when a polygon boundary for the input feature is defined.

Webservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo





Siblings

Returns all siblings of a GeoNames toponym with feature class A.

Webservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo











This work is licensed under a 
Creative Commons Attribution 4.0 License.\nPlace Hierarchy Webservices\nWebservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nhttp://api.geonames.org/children?geonameId=3175395&username=demo\nhttp://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism\nhttp://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency\nhttp://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nWebservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nhttp://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo\nhttp://api.geonames.org/neighbours?geonameId=2658434&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo\nhttp://api.geonames.org/contains?geonameId=2746385&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo\nhttp://api.geonames.org/siblings?geonameId=3017382&username=demo\nThis work is licensed under a 
Creative Commons Attribution 4.0 License.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nPlace Hierarchy Webservices


Children

Returns the children (admin divisions and populated places) for a given geonameId. The children are the administrative divisions within an other administrative division, like the counties (ADM2) in a state (ADM1) or also the countries in a continent. The leafs are populated places, other feature classes like spots, mountains etc are not included in this service. Use the search service if you need other feature classes as well.

Webservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography









Hierarchy

Returns all GeoNames higher up in the hierarchy of a place name.

Webservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo




Neighbours

Returns all neighbours for a country or administrative division. (coverage: all countries on country level, and lower levels as specified here: supported levels)

Webservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo



Contains

returns all features within the GeoName feature for the given geoNameId. It only returns contained features when a polygon boundary for the input feature is defined.

Webservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo





Siblings

Returns all siblings of a GeoNames toponym with feature class A.

Webservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo











This work is licensed under a 
Creative Commons Attribution 4.0 License.\nPlace Hierarchy Webservices\nWebservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nhttp://api.geonames.org/children?geonameId=3175395&username=demo\nhttp://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism\nhttp://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency\nhttp://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nWebservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nhttp://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo\nhttp://api.geonames.org/neighbours?geonameId=2658434&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo\nhttp://api.geonames.org/contains?geonameId=2746385&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo\nhttp://api.geonames.org/siblings?geonameId=3017382&username=demo\nThis work is licensed under a 
Creative Commons Attribution 4.0 License.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nJSON Webservices


GeoNames offers most webservices in XML and JSON format. JSON has the advantage that is can be used to directly access the geonames webservice from javascript code, whereas using XML the browser will throw a security exception if an xml call to another webserver is made.

All JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).

JSON Examples :
Placename autocomplete 
full text search on google maps 

Places

Cities and Placenames

Webservice Type : REST 
Url : api.geonames.org/citiesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
lang : language of placenames and wikipedia urls (default = en)
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of cities and placenames in the bounding box, ordered by relevancy (capital/population). Placenames close together are filterered out and only the larger name is included in the resulting list.


Example : http://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo


This service is also available in XML output :

Example : http://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo







Fulltext Search

Details full text search




Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours






Wikipedia

Find nearby Wikipedia Entries / reverse geocoding


Wikipedia Fulltext Search

Wikipedia Articles in Bounding Box





Postal Codes

Postal Code Search



Find nearby postal codes / reverse geocoding


Placename lookup with postalcode









Reverse Geocoding

Street/Address reverse geocoding for the US

Global street reverse geocoding


Country


Country Subdivision












Earthquakes

Recent Earthquakes

Webservice Type : REST 
Url : api.geonames.org/earthquakesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
date : date of earthquakes 'yyyy-MM-dd', optional parameter, earthquakes older or equal the given date sorted by date,magnitude
minMagnitude : minimal magnitude, optional parameter
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of earthquakes, ordered by magnitude


Example http://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather

Weather data is provided in the METAR (METeorological Aerodrome Report) format.

Translations for weather conditions are available in English (default), German, Spanish, French, Italian, Czech, Dutch, Finnish, Swedish, Arabic, Portuguese, Hebrew, Polish, Russian and Bulgarian. Add the parameter 'lang=' with the language code for weather conditions in the desired language.

Help with the translation of METAR weather conditions is welcome.


Units:
Elevation = meter
Wind speed = Knots
Temperature = Celsius

datetime = UTC time


Weather Stations with most recent Weather Observation

Webservice Type : REST 
Url : api.geonames.org/weatherJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of weather stations with the most recent weather observation


Example http://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather Station with most recent weather observation

Webservice Type : REST 
Url : api.geonames.org/weatherIcaoJSON?
Parameters : 
ICAO : International Civil Aviation Organization (ICAO) code 
callback : name of javascript function (optional parameter) 


Result : returns the weather station and the most recent weather observation for the ICAO code



Example http://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo









Weather Station with most recent weather observation / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearByWeatherJSON?
Parameters : 
lat,lng : the service will return the station closest to this given point (reverse geocoding)
callback : name of javascript function (optional parameter) 
radius: search radius, only weather stations within this radius are considered. Default is about 100km.


Result : returns a weather station with the most recent weather observation



Example http://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo


An XML version is available :
Example http://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\nAll JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).\nJSON Examples :
Placename autocomplete 
full text search on google maps\nPlacename autocomplete\nfull text search on google maps\nCities and Placenames\nhttp://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo\nhttp://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nDetails full text search\nPlace Hierarchy Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia Fulltext Search\nWikipedia Fulltext Search\nWikipedia Articles in Bounding Box\nWikipedia Articles in Bounding Box\nFind nearby postal codes / reverse geocoding\nFind nearby postal codes / reverse geocoding\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nStreet/Address reverse geocoding for the US\nStreet/Address reverse geocoding for the US\nGlobal street reverse geocoding\nGlobal street reverse geocoding\nhttp://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\ntranslation of METAR weather conditions\nWeather Stations with most recent Weather Observation\nhttp://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nWeather Station with most recent weather observation\nhttp://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo\nWeather Station with most recent weather observation / reverse geocoding\nhttp://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo\nhttp://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\ninfo@geonames.org


GeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\ngeocode address : 




The geocoder is using geonames geocoder,

reverse geocoding is provided by geonames using the US Census "Tiger Line" data set.Click on the map to view reverse geocoded street names.\nReverse Geocoding Webservice

Find nearest Address

Finds the nearest street and address for a given lat/lng pair.


Url : api.geonames.org/findNearestAddress?
Parameters : lat,lng, (or optionally lats,lngs for array of lat/lng pair); radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for the US.
Result : returns the nearest address for the given latitude/longitude, the street number is an 'educated guess' using an interpolation of street number at the end of a street segment.

Example http://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo



This service is also available in JSON format :
http://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo



Find nearest Intersection

Finds the nearest intersection for a given lat/lng pair.


Url : api.geonames.org/findNearestIntersection?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
filter: only return intersections with streets of a mtfcc equal or higher then the filter
Restriction : this webservice is only available for the US.
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo




Find nearby Streets

Finds the nearest street for a given lat/lng pair.


Url : api.geonames.org/findNearbyStreets?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
Restriction : this webservice is only available for the US.
Result : returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo



Returned Elements :

line : line string with lng lat points, points are comma separated
mtfcc : MAF/TIGER Feature Class Code 
name : street name
fraddl : from address left
fraddr : from address right
toaddl : to address left
toaddr : to address right
the other elments are selfexplaining.





Install Reverse Geocoding on your own Server

We can help you install reverse geocoding on your own server.



Other Reverse Geocoding Services

A global street level reverse geocoder is available based on openstreetmap data. Compared to the US geocoder it is less detailed and it is using a more restrictive cc-by-sa license.




[more reverse geocoding webservices]\nReverse Geocoding Webservice\nUrl : api.geonames.org/findNearestAddress?
Parameters : lat,lng, (or optionally lats,lngs for array of lat/lng pair); radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for the US.
Result : returns the nearest address for the given latitude/longitude, the street number is an 'educated guess' using an interpolation of street number at the end of a street segment.

Example http://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo



This service is also available in JSON format :
http://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo\nFind nearest Intersection\nUrl : api.geonames.org/findNearestIntersection?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
filter: only return intersections with streets of a mtfcc equal or higher then the filter
Restriction : this webservice is only available for the US.
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo\nUrl : api.geonames.org/findNearbyStreets?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
Restriction : this webservice is only available for the US.
Result : returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo



Returned Elements :

line : line string with lng lat points, points are comma separated
mtfcc : MAF/TIGER Feature Class Code 
name : street name
fraddl : from address left
fraddr : from address right
toaddl : to address left
toaddr : to address right
the other elments are selfexplaining.\nhttp://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo\nMAF/TIGER Feature Class Code\nInstall Reverse Geocoding on your own Server\ninstall reverse geocoding on your own server\nOther Reverse Geocoding Services\nglobal street level reverse geocoder\nmore reverse geocoding webservices\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\ngeocode address : 




reverse geocoding is provided by geonames using openstreemap data (Feb 2014) under a cc by-sa license.Click on the map to view reverse geocoded street names.\nFind nearest Intersection

Finds the nearest street and the next crossing street for a given lat/lng pair.


Url : api.geonames.org/findNearestIntersectionOSM?
Parameters : lat,lng, radius (optional), maxRows (optional), includeGeoName (includes the nearest geonames feature information optional);
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo




Find nearby Streets

Finds the nearest streets for a given lat/lng pair.


Url : api.geonames.org/findNearbyStreetsOSM?
Parameters: lat, lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo




Find nearby points of interest

Finds the nearest points of interests for a given lat/lng pair.


Url : api.geonames.org/findNearbyPOIsOSM?
Parameters: lat,lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest points of interests for the given latitude/longitude

Example http://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo






License

OpenStreetMap data is licensed under creative commons Attribution-Share Alike.

Note: This in contrast to the other GeoNames webservices which are licensed under the more liberal creative commons Attribution license.



Other Reverse Geocoding Services

For the US there is a reverse geocoding service on address level. It is based on US Census data and has more details (zip codes, city names, county names, address numbers, etc) than the osm service and is available under a more liberal cc-by license.


[more reverse geocoding webservices]\nFind nearest Intersection\nUrl : api.geonames.org/findNearestIntersectionOSM?
Parameters : lat,lng, radius (optional), maxRows (optional), includeGeoName (includes the nearest geonames feature information optional);
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo\nUrl : api.geonames.org/findNearbyStreetsOSM?
Parameters: lat, lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo\nFind nearby points of interest\nUrl : api.geonames.org/findNearbyPOIsOSM?
Parameters: lat,lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest points of interests for the given latitude/longitude

Example http://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo\ncreative commons Attribution-Share Alike\ncreative commons Attribution\nOther Reverse Geocoding Services\nreverse geocoding service\nmore reverse geocoding webservices\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nJSON Webservices


GeoNames offers most webservices in XML and JSON format. JSON has the advantage that is can be used to directly access the geonames webservice from javascript code, whereas using XML the browser will throw a security exception if an xml call to another webserver is made.

All JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).

JSON Examples :
Placename autocomplete 
full text search on google maps 

Places

Cities and Placenames

Webservice Type : REST 
Url : api.geonames.org/citiesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
lang : language of placenames and wikipedia urls (default = en)
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of cities and placenames in the bounding box, ordered by relevancy (capital/population). Placenames close together are filterered out and only the larger name is included in the resulting list.


Example : http://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo


This service is also available in XML output :

Example : http://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo







Fulltext Search

Details full text search




Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours






Wikipedia

Find nearby Wikipedia Entries / reverse geocoding


Wikipedia Fulltext Search

Wikipedia Articles in Bounding Box





Postal Codes

Postal Code Search



Find nearby postal codes / reverse geocoding


Placename lookup with postalcode









Reverse Geocoding

Street/Address reverse geocoding for the US

Global street reverse geocoding


Country


Country Subdivision












Earthquakes

Recent Earthquakes

Webservice Type : REST 
Url : api.geonames.org/earthquakesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
date : date of earthquakes 'yyyy-MM-dd', optional parameter, earthquakes older or equal the given date sorted by date,magnitude
minMagnitude : minimal magnitude, optional parameter
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of earthquakes, ordered by magnitude


Example http://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather

Weather data is provided in the METAR (METeorological Aerodrome Report) format.

Translations for weather conditions are available in English (default), German, Spanish, French, Italian, Czech, Dutch, Finnish, Swedish, Arabic, Portuguese, Hebrew, Polish, Russian and Bulgarian. Add the parameter 'lang=' with the language code for weather conditions in the desired language.

Help with the translation of METAR weather conditions is welcome.


Units:
Elevation = meter
Wind speed = Knots
Temperature = Celsius

datetime = UTC time


Weather Stations with most recent Weather Observation

Webservice Type : REST 
Url : api.geonames.org/weatherJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of weather stations with the most recent weather observation


Example http://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather Station with most recent weather observation

Webservice Type : REST 
Url : api.geonames.org/weatherIcaoJSON?
Parameters : 
ICAO : International Civil Aviation Organization (ICAO) code 
callback : name of javascript function (optional parameter) 


Result : returns the weather station and the most recent weather observation for the ICAO code



Example http://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo









Weather Station with most recent weather observation / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearByWeatherJSON?
Parameters : 
lat,lng : the service will return the station closest to this given point (reverse geocoding)
callback : name of javascript function (optional parameter) 
radius: search radius, only weather stations within this radius are considered. Default is about 100km.


Result : returns a weather station with the most recent weather observation



Example http://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo


An XML version is available :
Example http://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\nAll JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).\nJSON Examples :
Placename autocomplete 
full text search on google maps\nPlacename autocomplete\nfull text search on google maps\nCities and Placenames\nhttp://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo\nhttp://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nDetails full text search\nPlace Hierarchy Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia Fulltext Search\nWikipedia Fulltext Search\nWikipedia Articles in Bounding Box\nWikipedia Articles in Bounding Box\nFind nearby postal codes / reverse geocoding\nFind nearby postal codes / reverse geocoding\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nStreet/Address reverse geocoding for the US\nStreet/Address reverse geocoding for the US\nGlobal street reverse geocoding\nGlobal street reverse geocoding\nhttp://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\ntranslation of METAR weather conditions\nWeather Stations with most recent Weather Observation\nhttp://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nWeather Station with most recent weather observation\nhttp://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo\nWeather Station with most recent weather observation / reverse geocoding\nhttp://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo\nhttp://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\ninfo@geonames.org


GeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nWikipedia Webservice

The wikipedia webservices give access to georeferenced wikipedia articles in 240 languages. For the largest languages (English, German, French, Spanish, Italian, Portuguese, Polish, Russian and Chinese) full text and a summary is also available.



Wikipedia Attributes (XML or JSON):




AttributeDescription
langISO language code of article text
titlethe article title
summarya short summary of the article text. Around 300 chars. The text is truncated at a full stop if one is available near char 300, otherwise at the end of a word.
featurethe wikipedia feature type. A list of types is available here
countryCodethe ISO country code of the article
elevationthe elevation in metres (optional may be null), parsed from the article or reverse geocoded.
populationthe population (optional may be null)
latlatitude
lnglongitude
wikipediaUrlURL of the article
thumbnailImgURL of a small thumbnail image (ca 100x75 px)
rankindication of the popularity or relevancy of an article. The rank is an integer number from 1 for the least popular articles to 100 for the most popular articles. It is calculated from the number of links pointing to an article and the article length. The articles are more or less evenly distributed over the 100 ranks.











Find nearby Wikipedia Entries / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : XML,JSON or RSS 
Url : api.geonames.org/findNearbyWikipedia?
api.geonames.org/findNearbyWikipediaJSON?
api.geonames.org/findNearbyWikipediaRSS?
Parameters : 
lang : language code (around 240 languages) (default = en)

lat,lng, radius (in km), maxRows (default = 5),country (default = all countries)
or
 postalcode,country, radius (in Km, default 10km, max limit for free service 20km, max limit for premium 150km),  maxRows (default = 5, max for free service 500, max for premium service 2000)
for premium users: length of the full text.

Result : returns a list of wikipedia entries as xml document 

Example: 
http://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding]


Wikipedia Fulltext Search

Webservice Type : XML or JSON  
Url : api.geonames.org/wikipediaSearch?
api.geonames.org/wikipediaSearchJSON?
Parameters :
q : place name (urlencoded utf8)
title : search in the wikipedia title (optional)
lang : language code, supported languages are de,en,es,fr,it,nl,pl,pt,ru,zh (default = en)
maxRows : maximal number of rows returned (default = 10)

Result : returns the wikipedia entries found for the searchterm as xml document 

Example http://api.geonames.org/wikipediaSearch?q=london&maxRows=10&username=demo




Wikipedia Articles in Bounding Box

Webservice Type : XML or JSON  
Url : api.geonames.org/wikipediaBoundingBox?
api.geonames.org/wikipediaBoundingBoxJSON?
Parameters :
south,north,east, west : coordinates of bounding box
lang : language code, supported languages are de,en,es,fr,it,nl,pl,pt,ru,zh (default = en)
maxRows : maximal number of rows returned (default = 10)

Result : returns the wikipedia entries within the bounding box as xml document 

Example http://api.geonames.org/wikipediaBoundingBox?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo







Note : Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)














This work is licensed under a 
Creative Commons Attribution 3.0 License.

Wikipedia texts are licenced under Creative Commons Attribution-ShareAlike 3.0 Unported License.\ngeoreferenced wikipedia articles\nISO language code of article text\na short summary of the article text. Around 300 chars. The text is truncated at a full stop if one is available near char 300, otherwise at the end of a word.\nthe wikipedia feature type. A list of types is available here\nthe ISO country code of the article\nthe elevation in metres (optional may be null), parsed from the article or reverse geocoded.\nthe population (optional may be null)\nURL of a small thumbnail image (ca 100x75 px)\nindication of the popularity or relevancy of an article. The rank is an integer number from 1 for the least popular articles to 100 for the most popular articles. It is calculated from the number of links pointing to an article and the article length. The articles are more or less evenly distributed over the 100 ranks.\nFind nearby Wikipedia Entries / reverse geocoding\nWebservice Type : XML,JSON or RSS 
Url : api.geonames.org/findNearbyWikipedia?
api.geonames.org/findNearbyWikipediaJSON?
api.geonames.org/findNearbyWikipediaRSS?
Parameters : 
lang : language code (around 240 languages) (default = en)

lat,lng, radius (in km), maxRows (default = 5),country (default = all countries)
or
 postalcode,country, radius (in Km, default 10km, max limit for free service 20km, max limit for premium 150km),  maxRows (default = 5, max for free service 500, max for premium service 2000)
for premium users: length of the full text.

Result : returns a list of wikipedia entries as xml document 

Example: 
http://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo\n[more reverse geocoding]\nmore reverse geocoding\nWikipedia Fulltext Search\nhttp://api.geonames.org/wikipediaSearch?q=london&maxRows=10&username=demo\nWikipedia Articles in Bounding Box\nhttp://api.geonames.org/wikipediaBoundingBox?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nFaq entry on url encoding\nThis work is licensed under a 
Creative Commons Attribution 3.0 License.\nCreative Commons Attribution 3.0 License\nWikipedia texts are licenced under Creative Commons Attribution-ShareAlike 3.0 Unported License.\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\ngeocode address : 




The geocoder is using geonames geocoder,

reverse geocoding is provided by geonames using the US Census "Tiger Line" data set.Click on the map to view reverse geocoded street names.\nReverse Geocoding Webservice

Find nearest Address

Finds the nearest street and address for a given lat/lng pair.


Url : api.geonames.org/findNearestAddress?
Parameters : lat,lng, (or optionally lats,lngs for array of lat/lng pair); radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for the US.
Result : returns the nearest address for the given latitude/longitude, the street number is an 'educated guess' using an interpolation of street number at the end of a street segment.

Example http://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo



This service is also available in JSON format :
http://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo



Find nearest Intersection

Finds the nearest intersection for a given lat/lng pair.


Url : api.geonames.org/findNearestIntersection?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
filter: only return intersections with streets of a mtfcc equal or higher then the filter
Restriction : this webservice is only available for the US.
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo




Find nearby Streets

Finds the nearest street for a given lat/lng pair.


Url : api.geonames.org/findNearbyStreets?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
Restriction : this webservice is only available for the US.
Result : returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo



Returned Elements :

line : line string with lng lat points, points are comma separated
mtfcc : MAF/TIGER Feature Class Code 
name : street name
fraddl : from address left
fraddr : from address right
toaddl : to address left
toaddr : to address right
the other elments are selfexplaining.





Install Reverse Geocoding on your own Server

We can help you install reverse geocoding on your own server.



Other Reverse Geocoding Services

A global street level reverse geocoder is available based on openstreetmap data. Compared to the US geocoder it is less detailed and it is using a more restrictive cc-by-sa license.




[more reverse geocoding webservices]\nReverse Geocoding Webservice\nUrl : api.geonames.org/findNearestAddress?
Parameters : lat,lng, (or optionally lats,lngs for array of lat/lng pair); radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for the US.
Result : returns the nearest address for the given latitude/longitude, the street number is an 'educated guess' using an interpolation of street number at the end of a street segment.

Example http://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo



This service is also available in JSON format :
http://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo\nFind nearest Intersection\nUrl : api.geonames.org/findNearestIntersection?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
filter: only return intersections with streets of a mtfcc equal or higher then the filter
Restriction : this webservice is only available for the US.
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo\nUrl : api.geonames.org/findNearbyStreets?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
Restriction : this webservice is only available for the US.
Result : returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo



Returned Elements :

line : line string with lng lat points, points are comma separated
mtfcc : MAF/TIGER Feature Class Code 
name : street name
fraddl : from address left
fraddr : from address right
toaddl : to address left
toaddr : to address right
the other elments are selfexplaining.\nhttp://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo\nMAF/TIGER Feature Class Code\nInstall Reverse Geocoding on your own Server\ninstall reverse geocoding on your own server\nOther Reverse Geocoding Services\nglobal street level reverse geocoder\nmore reverse geocoding webservices\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\ngeocode address : 




The geocoder is using geonames geocoder,

reverse geocoding is provided by geonames using the US Census "Tiger Line" data set.Click on the map to view reverse geocoded street names.\nReverse Geocoding Webservice

Find nearest Address

Finds the nearest street and address for a given lat/lng pair.


Url : api.geonames.org/findNearestAddress?
Parameters : lat,lng, (or optionally lats,lngs for array of lat/lng pair); radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for the US.
Result : returns the nearest address for the given latitude/longitude, the street number is an 'educated guess' using an interpolation of street number at the end of a street segment.

Example http://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo



This service is also available in JSON format :
http://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo



Find nearest Intersection

Finds the nearest intersection for a given lat/lng pair.


Url : api.geonames.org/findNearestIntersection?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
filter: only return intersections with streets of a mtfcc equal or higher then the filter
Restriction : this webservice is only available for the US.
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo




Find nearby Streets

Finds the nearest street for a given lat/lng pair.


Url : api.geonames.org/findNearbyStreets?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
Restriction : this webservice is only available for the US.
Result : returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo



Returned Elements :

line : line string with lng lat points, points are comma separated
mtfcc : MAF/TIGER Feature Class Code 
name : street name
fraddl : from address left
fraddr : from address right
toaddl : to address left
toaddr : to address right
the other elments are selfexplaining.





Install Reverse Geocoding on your own Server

We can help you install reverse geocoding on your own server.



Other Reverse Geocoding Services

A global street level reverse geocoder is available based on openstreetmap data. Compared to the US geocoder it is less detailed and it is using a more restrictive cc-by-sa license.




[more reverse geocoding webservices]\nReverse Geocoding Webservice\nUrl : api.geonames.org/findNearestAddress?
Parameters : lat,lng, (or optionally lats,lngs for array of lat/lng pair); radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for the US.
Result : returns the nearest address for the given latitude/longitude, the street number is an 'educated guess' using an interpolation of street number at the end of a street segment.

Example http://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo



This service is also available in JSON format :
http://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestAddress?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestAddressJSON?lat=37.451&lng=-122.18&username=demo\nFind nearest Intersection\nUrl : api.geonames.org/findNearestIntersection?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
filter: only return intersections with streets of a mtfcc equal or higher then the filter
Restriction : this webservice is only available for the US.
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersection?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionJSON?lat=37.451&lng=-122.18&username=demo\nUrl : api.geonames.org/findNearbyStreets?
Parameters : lat,lng;
optional: maxRows: number of rows returned, radius: radius in km
Restriction : this webservice is only available for the US.
Result : returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo



Returned Elements :

line : line string with lng lat points, points are comma separated
mtfcc : MAF/TIGER Feature Class Code 
name : street name
fraddl : from address left
fraddr : from address right
toaddl : to address left
toaddr : to address right
the other elments are selfexplaining.\nhttp://api.geonames.org/findNearbyStreets?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsJSON?lat=37.451&lng=-122.18&username=demo\nMAF/TIGER Feature Class Code\nInstall Reverse Geocoding on your own Server\ninstall reverse geocoding on your own server\nOther Reverse Geocoding Services\nglobal street level reverse geocoder\nmore reverse geocoding webservices\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\ngeocode address : 




reverse geocoding is provided by geonames using openstreemap data (Feb 2014) under a cc by-sa license.Click on the map to view reverse geocoded street names.\nFind nearest Intersection

Finds the nearest street and the next crossing street for a given lat/lng pair.


Url : api.geonames.org/findNearestIntersectionOSM?
Parameters : lat,lng, radius (optional), maxRows (optional), includeGeoName (includes the nearest geonames feature information optional);
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo




Find nearby Streets

Finds the nearest streets for a given lat/lng pair.


Url : api.geonames.org/findNearbyStreetsOSM?
Parameters: lat, lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo




Find nearby points of interest

Finds the nearest points of interests for a given lat/lng pair.


Url : api.geonames.org/findNearbyPOIsOSM?
Parameters: lat,lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest points of interests for the given latitude/longitude

Example http://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo






License

OpenStreetMap data is licensed under creative commons Attribution-Share Alike.

Note: This in contrast to the other GeoNames webservices which are licensed under the more liberal creative commons Attribution license.



Other Reverse Geocoding Services

For the US there is a reverse geocoding service on address level. It is based on US Census data and has more details (zip codes, city names, county names, address numbers, etc) than the osm service and is available under a more liberal cc-by license.


[more reverse geocoding webservices]\nFind nearest Intersection\nUrl : api.geonames.org/findNearestIntersectionOSM?
Parameters : lat,lng, radius (optional), maxRows (optional), includeGeoName (includes the nearest geonames feature information optional);
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo\nUrl : api.geonames.org/findNearbyStreetsOSM?
Parameters: lat, lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo\nFind nearby points of interest\nUrl : api.geonames.org/findNearbyPOIsOSM?
Parameters: lat,lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest points of interests for the given latitude/longitude

Example http://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo\ncreative commons Attribution-Share Alike\ncreative commons Attribution\nOther Reverse Geocoding Services\nreverse geocoding service\nmore reverse geocoding webservices\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\ngeocode address : 




reverse geocoding is provided by geonames using openstreemap data (Feb 2014) under a cc by-sa license.Click on the map to view reverse geocoded street names.\nFind nearest Intersection

Finds the nearest street and the next crossing street for a given lat/lng pair.


Url : api.geonames.org/findNearestIntersectionOSM?
Parameters : lat,lng, radius (optional), maxRows (optional), includeGeoName (includes the nearest geonames feature information optional);
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo




Find nearby Streets

Finds the nearest streets for a given lat/lng pair.


Url : api.geonames.org/findNearbyStreetsOSM?
Parameters: lat, lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo




Find nearby points of interest

Finds the nearest points of interests for a given lat/lng pair.


Url : api.geonames.org/findNearbyPOIsOSM?
Parameters: lat,lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest points of interests for the given latitude/longitude

Example http://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo






License

OpenStreetMap data is licensed under creative commons Attribution-Share Alike.

Note: This in contrast to the other GeoNames webservices which are licensed under the more liberal creative commons Attribution license.



Other Reverse Geocoding Services

For the US there is a reverse geocoding service on address level. It is based on US Census data and has more details (zip codes, city names, county names, address numbers, etc) than the osm service and is available under a more liberal cc-by license.


[more reverse geocoding webservices]\nFind nearest Intersection\nUrl : api.geonames.org/findNearestIntersectionOSM?
Parameters : lat,lng, radius (optional), maxRows (optional), includeGeoName (includes the nearest geonames feature information optional);
Result : returns the nearest intersection for the given latitude/longitude

Example http://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearestIntersectionOSMJSON?lat=37.451&lng=-122.18&username=demo\nUrl : api.geonames.org/findNearbyStreetsOSM?
Parameters: lat, lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest street segments for the given latitude/longitude

Example http://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyStreetsOSMJSON?lat=37.451&lng=-122.18&username=demo\nFind nearby points of interest\nUrl : api.geonames.org/findNearbyPOIsOSM?
Parameters: lat,lng, radius (optional), maxRows (optional with default = 10)
Result: returns the nearest points of interests for the given latitude/longitude

Example http://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyPOIsOSM?lat=37.451&lng=-122.18&username=demo\nhttp://api.geonames.org/findNearbyPOIsOSMJSON?lat=37.451&lng=-122.18&username=demo\ncreative commons Attribution-Share Alike\ncreative commons Attribution\nOther Reverse Geocoding Services\nreverse geocoding service\nmore reverse geocoding webservices\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\nReverse Address Geocoding Webservice

Find nearest Address

Finds the nearest street and address for a given lat/lng pair.


Url : api.geonames.org/address?
Parameters : lat,lng; radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/address?lat=52.358&lng=4.881&username=demo



This service is also available in JSON format :
http://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo




Address Geocoding Webservice

Find lat/lng for Address

Returns the location lat/lng for a given address.


Url : api.geonames.org/geoCodeAddress?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo



This service is also available in JSON format :
http://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo



Streetname Lookup Webservice

Autocomplete Streetnames

Returns a list of streets which start with the search term.



Url : api.geonames.org/streetNameLookup?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode, adminCode1, adminCode2, adminCode3, isUniqueStreetName (duplicate street names are filtered, the placename will be empty when the same street name occurs at different places)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns a list of street names starting with the query term.

Example http://api.geonames.org/streetNameLookup?q=Museum&username=demo



This service is also available in JSON format :
http://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo







Supported Countries



CCCountrynum Addr/StreetsData Providers
1ATAustria2395351National Address Register
2AUAustralia15481386National Address Register
3AXAland31265National Address Register
4CCCocos [Keeling] Islands363National Address Register
5CHSwitzerland3105535National Address Register
6CLChile1850552National Address Register
7CXChristmas Island1112National Address Register
8CZCzechia2913321National Address Register
9DKDenmark2500538National Address Register
10EEEstonia1264183National Address Register
11ESSpain11306734National Address Register
12FIFinland3488721National Address Register
13FRFrance23922395National Address Register
14GFFrench Guiana60105National Address Register
15GPGuadeloupe130680National Address Register
16HKHong Kong178543National Address Register
17ISIceland115659National Address Register
18LULuxembourg166725National Address Register
19MQMartinique100645National Address Register
20NFNorfolk Island2162National Address Register
21NLNetherlands10124592National Address Register
22NONorway2458623National Address Register
23PLPoland7688758National Address Register
24PRPuerto Rico491451US Census, street segments
25PTPortugal3478540National Address Register
26REReunion323387National Address Register
27SGSingapore141956National Address Register
28SISlovenia559413National Address Register
29SJSvalbard and Jan Mayen797National Address Register
30SKSlovakia1218439National Address Register
31USUnited States67371044US Census, street segments
32YTMayotte35399National Address Register\nReverse Address Geocoding Webservice\nUrl : api.geonames.org/address?
Parameters : lat,lng; radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/address?lat=52.358&lng=4.881&username=demo



This service is also available in JSON format :
http://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo\nhttp://api.geonames.org/address?lat=52.358&lng=4.881&username=demo\nhttp://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo\nAddress Geocoding Webservice\nFind lat/lng for Address\nUrl : api.geonames.org/geoCodeAddress?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo



This service is also available in JSON format :
http://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo\nhttp://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo\nhttp://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo\nStreetname Lookup Webservice\nAutocomplete Streetnames\nUrl : api.geonames.org/streetNameLookup?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode, adminCode1, adminCode2, adminCode3, isUniqueStreetName (duplicate street names are filtered, the placename will be empty when the same street name occurs at different places)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns a list of street names starting with the query term.

Example http://api.geonames.org/streetNameLookup?q=Museum&username=demo



This service is also available in JSON format :
http://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo\nhttp://api.geonames.org/streetNameLookup?q=Museum&username=demo\nhttp://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nCocos [Keeling] Islands\nCocos [Keeling] Islands\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nUS Census, street segments\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nSvalbard and Jan Mayen\nSvalbard and Jan Mayen\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nUS Census, street segments\nNational Address Register\nNational Address Register\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\nReverse Address Geocoding Webservice

Find nearest Address

Finds the nearest street and address for a given lat/lng pair.


Url : api.geonames.org/address?
Parameters : lat,lng; radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/address?lat=52.358&lng=4.881&username=demo



This service is also available in JSON format :
http://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo




Address Geocoding Webservice

Find lat/lng for Address

Returns the location lat/lng for a given address.


Url : api.geonames.org/geoCodeAddress?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo



This service is also available in JSON format :
http://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo



Streetname Lookup Webservice

Autocomplete Streetnames

Returns a list of streets which start with the search term.



Url : api.geonames.org/streetNameLookup?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode, adminCode1, adminCode2, adminCode3, isUniqueStreetName (duplicate street names are filtered, the placename will be empty when the same street name occurs at different places)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns a list of street names starting with the query term.

Example http://api.geonames.org/streetNameLookup?q=Museum&username=demo



This service is also available in JSON format :
http://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo







Supported Countries



CCCountrynum Addr/StreetsData Providers
1ATAustria2395351National Address Register
2AUAustralia15481386National Address Register
3AXAland31265National Address Register
4CCCocos [Keeling] Islands363National Address Register
5CHSwitzerland3105535National Address Register
6CLChile1850552National Address Register
7CXChristmas Island1112National Address Register
8CZCzechia2913321National Address Register
9DKDenmark2500538National Address Register
10EEEstonia1264183National Address Register
11ESSpain11306734National Address Register
12FIFinland3488721National Address Register
13FRFrance23922395National Address Register
14GFFrench Guiana60105National Address Register
15GPGuadeloupe130680National Address Register
16HKHong Kong178543National Address Register
17ISIceland115659National Address Register
18LULuxembourg166725National Address Register
19MQMartinique100645National Address Register
20NFNorfolk Island2162National Address Register
21NLNetherlands10124592National Address Register
22NONorway2458623National Address Register
23PLPoland7688758National Address Register
24PRPuerto Rico491451US Census, street segments
25PTPortugal3478540National Address Register
26REReunion323387National Address Register
27SGSingapore141956National Address Register
28SISlovenia559413National Address Register
29SJSvalbard and Jan Mayen797National Address Register
30SKSlovakia1218439National Address Register
31USUnited States67371044US Census, street segments
32YTMayotte35399National Address Register\nReverse Address Geocoding Webservice\nUrl : api.geonames.org/address?
Parameters : lat,lng; radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/address?lat=52.358&lng=4.881&username=demo



This service is also available in JSON format :
http://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo\nhttp://api.geonames.org/address?lat=52.358&lng=4.881&username=demo\nhttp://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo\nAddress Geocoding Webservice\nFind lat/lng for Address\nUrl : api.geonames.org/geoCodeAddress?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo



This service is also available in JSON format :
http://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo\nhttp://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo\nhttp://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo\nStreetname Lookup Webservice\nAutocomplete Streetnames\nUrl : api.geonames.org/streetNameLookup?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode, adminCode1, adminCode2, adminCode3, isUniqueStreetName (duplicate street names are filtered, the placename will be empty when the same street name occurs at different places)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns a list of street names starting with the query term.

Example http://api.geonames.org/streetNameLookup?q=Museum&username=demo



This service is also available in JSON format :
http://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo\nhttp://api.geonames.org/streetNameLookup?q=Museum&username=demo\nhttp://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nCocos [Keeling] Islands\nCocos [Keeling] Islands\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nUS Census, street segments\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nSvalbard and Jan Mayen\nSvalbard and Jan Mayen\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nUS Census, street segments\nNational Address Register\nNational Address Register\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nclick on the map to view reverse geocoded street names.\nclick on the map to view reverse geocoded street names.\nReverse Address Geocoding Webservice

Find nearest Address

Finds the nearest street and address for a given lat/lng pair.


Url : api.geonames.org/address?
Parameters : lat,lng; radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/address?lat=52.358&lng=4.881&username=demo



This service is also available in JSON format :
http://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo




Address Geocoding Webservice

Find lat/lng for Address

Returns the location lat/lng for a given address.


Url : api.geonames.org/geoCodeAddress?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo



This service is also available in JSON format :
http://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo



Streetname Lookup Webservice

Autocomplete Streetnames

Returns a list of streets which start with the search term.



Url : api.geonames.org/streetNameLookup?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode, adminCode1, adminCode2, adminCode3, isUniqueStreetName (duplicate street names are filtered, the placename will be empty when the same street name occurs at different places)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns a list of street names starting with the query term.

Example http://api.geonames.org/streetNameLookup?q=Museum&username=demo



This service is also available in JSON format :
http://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo







Supported Countries



CCCountrynum Addr/StreetsData Providers
1ATAustria2395351National Address Register
2AUAustralia15481386National Address Register
3AXAland31265National Address Register
4CCCocos [Keeling] Islands363National Address Register
5CHSwitzerland3105535National Address Register
6CLChile1850552National Address Register
7CXChristmas Island1112National Address Register
8CZCzechia2913321National Address Register
9DKDenmark2500538National Address Register
10EEEstonia1264183National Address Register
11ESSpain11306734National Address Register
12FIFinland3488721National Address Register
13FRFrance23922395National Address Register
14GFFrench Guiana60105National Address Register
15GPGuadeloupe130680National Address Register
16HKHong Kong178543National Address Register
17ISIceland115659National Address Register
18LULuxembourg166725National Address Register
19MQMartinique100645National Address Register
20NFNorfolk Island2162National Address Register
21NLNetherlands10124592National Address Register
22NONorway2458623National Address Register
23PLPoland7688758National Address Register
24PRPuerto Rico491451US Census, street segments
25PTPortugal3478540National Address Register
26REReunion323387National Address Register
27SGSingapore141956National Address Register
28SISlovenia559413National Address Register
29SJSvalbard and Jan Mayen797National Address Register
30SKSlovakia1218439National Address Register
31USUnited States67371044US Census, street segments
32YTMayotte35399National Address Register\nReverse Address Geocoding Webservice\nUrl : api.geonames.org/address?
Parameters : lat,lng; radius in km (default=0.2); maxRows (default=1)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/address?lat=52.358&lng=4.881&username=demo



This service is also available in JSON format :
http://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo\nhttp://api.geonames.org/address?lat=52.358&lng=4.881&username=demo\nhttp://api.geonames.org/addressJSON?lat=52.358&lng=4.881&username=demo\nAddress Geocoding Webservice\nFind lat/lng for Address\nUrl : api.geonames.org/geoCodeAddress?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode
Restriction : this webservice is only available for selected countries, see list below.
Result : returns the nearest address for the given latitude/longitude.

Example http://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo



This service is also available in JSON format :
http://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo\nhttp://api.geonames.org/geoCodeAddress?q=Museumplein+6+amsterdam&username=demo\nhttp://api.geonames.org/geoCodeAddressJSON?q=Museumplein+6+amsterdam&username=demo\nStreetname Lookup Webservice\nAutocomplete Streetnames\nUrl : api.geonames.org/streetNameLookup?
Parameters : q (query term, url encoded)
Optional Parameters: country (iso countrycode), postalcode, adminCode1, adminCode2, adminCode3, isUniqueStreetName (duplicate street names are filtered, the placename will be empty when the same street name occurs at different places)
Restriction : this webservice is only available for selected countries, see list below.
Result : returns a list of street names starting with the query term.

Example http://api.geonames.org/streetNameLookup?q=Museum&username=demo



This service is also available in JSON format :
http://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo\nhttp://api.geonames.org/streetNameLookup?q=Museum&username=demo\nhttp://api.geonames.org/streetNameLookupJSON?q=Museum&username=demo\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nCocos [Keeling] Islands\nCocos [Keeling] Islands\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nUS Census, street segments\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nSvalbard and Jan Mayen\nSvalbard and Jan Mayen\nNational Address Register\nNational Address Register\nNational Address Register\nNational Address Register\nUS Census, street segments\nNational Address Register\nNational Address Register\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•

Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nPlace Hierarchy Webservices


Children

Returns the children (admin divisions and populated places) for a given geonameId. The children are the administrative divisions within an other administrative division, like the counties (ADM2) in a state (ADM1) or also the countries in a continent. The leafs are populated places, other feature classes like spots, mountains etc are not included in this service. Use the search service if you need other feature classes as well.

Webservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography









Hierarchy

Returns all GeoNames higher up in the hierarchy of a place name.

Webservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo




Neighbours

Returns all neighbours for a country or administrative division. (coverage: all countries on country level, and lower levels as specified here: supported levels)

Webservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo



Contains

returns all features within the GeoName feature for the given geoNameId. It only returns contained features when a polygon boundary for the input feature is defined.

Webservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo





Siblings

Returns all siblings of a GeoNames toponym with feature class A.

Webservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo











This work is licensed under a 
Creative Commons Attribution 4.0 License.\nPlace Hierarchy Webservices\nWebservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nhttp://api.geonames.org/children?geonameId=3175395&username=demo\nhttp://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism\nhttp://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency\nhttp://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nWebservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nhttp://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo\nhttp://api.geonames.org/neighbours?geonameId=2658434&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo\nhttp://api.geonames.org/contains?geonameId=2746385&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo\nhttp://api.geonames.org/siblings?geonameId=3017382&username=demo\nThis work is licensed under a 
Creative Commons Attribution 4.0 License.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nPlace Hierarchy Webservices


Children

Returns the children (admin divisions and populated places) for a given geonameId. The children are the administrative divisions within an other administrative division, like the counties (ADM2) in a state (ADM1) or also the countries in a continent. The leafs are populated places, other feature classes like spots, mountains etc are not included in this service. Use the search service if you need other feature classes as well.

Webservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography









Hierarchy

Returns all GeoNames higher up in the hierarchy of a place name.

Webservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo




Neighbours

Returns all neighbours for a country or administrative division. (coverage: all countries on country level, and lower levels as specified here: supported levels)

Webservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo



Contains

returns all features within the GeoName feature for the given geoNameId. It only returns contained features when a polygon boundary for the input feature is defined.

Webservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo





Siblings

Returns all siblings of a GeoNames toponym with feature class A.

Webservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo











This work is licensed under a 
Creative Commons Attribution 4.0 License.\nPlace Hierarchy Webservices\nWebservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nhttp://api.geonames.org/children?geonameId=3175395&username=demo\nhttp://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism\nhttp://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency\nhttp://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nWebservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nhttp://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo\nhttp://api.geonames.org/neighbours?geonameId=2658434&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo\nhttp://api.geonames.org/contains?geonameId=2746385&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo\nhttp://api.geonames.org/siblings?geonameId=3017382&username=demo\nThis work is licensed under a 
Creative Commons Attribution 4.0 License.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nRSS to GeoRSS Converter



RSS is a family of web feed formats, specified in XML and used for Web syndication. GeoRSS is a way to encode location in an RSS feed.



The GeoNames "RSS to GeoRSS Converter" reads the entries of an RSS feed and searches the GeoNames Database to find a location 
for the entry text. If a relevant location is found, its latitude and longitude are added to the RSS feed using the GeoRSS encoding.

With the converter you can for example view the Reuters World News on a Map.

The converter is a 'natural language processor' and needs to take into account in which language a text is written. Supported languages are English, German, Spanish, French and Italian.



See also the GeoNames Blog for details about the rss to GeoRSS converter.


GeoRSS does not yet support other geographical information other than latitude and longitude. The geonames.org team is proposing to add more geographical element to the GeoRSS standard like country code or place name. As soon as GeoRSS includes this information it will be added to the converter. The draft for the new elements is here.


Webservice


  Url»api.geonames.org/rssToGeoRSS?

  Result»returns a RSS feed with latitude and longitude for each entry where the geonames search engine has found a relevant location. Already existant GeoRSS elements in the feed remain unchanged. There is an upper limit of 20 entries for performance reasons.





ParameterValueDescription

feedUrlstring (required)The url of the RSS feed to search locations for and to convert to GeoRSS. The feed has to be syntactically correct, i.e. wellformed xml and valid rss/atom.

Note : the feed url needs to be 'url encoded'.


feedLanguagestring (optional) en,de,fr,it,esThe language of the feed, this information is needed by the geonames search engine to find relevant locations. Default : No value = automatic language detection.

typestring (optional) rss_0.9, rss_0.91, rss_0.92, rss_0.93, rss_0.94, rss_1.0, rss_2.0, atom_0.3, atom_1.0kmlThe output RSS dialect of the conversion. Default : same RSS dialect as input feed.With type=kml the output will be in GoogleEarth kml format.

geoRSSstring simple,gml,w3cGeo (optional)The GeoRSS output encoding used for lat/lng. See www.georss.org for details. Default is w3cGeo.

addUngeocodedItemstrueItems that could not be geocoded are removed from the response document. Setting the parameter addUngeocodedItems=true will include the ungeocoded items in the response.

countrystring (optional) two-letter iso country codeRestrict geocoding to a given country. This parameter may improve the results of the geocoder for feeds focusing on a single country.



Example http://api.geonames.org/rssToGeoRSS?feedUrl=http://feeds.reuters.com/reuters/worldNews&username=demo


 
 

GeoRSS Readers


View a converted feed on Acme GeoRSS Viewer


The first GeoRSS reader we know about was the ACME GeoRSS Map Viewer.


With the form below you can convert a RSS feed into GeoRSS and view the result on the ACME GeoRSS Map Viewer.









	
		choose a feed from the list ...
		Reuters WorldNews  (English)

		Yahoo World News  (English)


		Flickr Tags : Travel
		Flickr Tags : Vacation


		ABC : International  (Spanish)
		El Mundo : International  (Spanish)

		El País : Sección Internacional  (Spanish)


		Le Monde : International  (French)
		La Repubblica : Esteri  (Italian)
		Financial Times Deutschland  (German)
                Spiegel ONLINE (German) 



        






or enter the url of the rss feed you want to convert :


	
	
	press the button to convert and view the converted feed :
	







Note : As the Acme GeoRSS Viewer only accepts RSS2.0 feeds, we have added the parameter "type=rss_2.0" to convert feeds 
in other rss dialects to RSS2.0





Rss to KML (GoogleEarth) Converter


With the parameter "type=kml" the RSS feed will be converted in GoogleEarth KML format. 

Val and Kassper have compiled a huge list of feeds 
and made them 'clickable' for you : Root of Live GeoNews (GoogleEarth)

View a converted feed with GoogleEarth



With the form below you can convert a RSS feed into KML and view it with GoogleEarth.









	
		choose a feed from the list ...
		Reuters WorldNews  (English)

		Yahoo World News  (English)


		Flickr Tags : Travel
		Flickr Tags : Vacation


		ABC : International  (Spanish)
		El Mundo : International  (Spanish)

		El País : Sección Internacional  (Spanish)


		Le Monde : International  (French)
		La Repubblica : Esteri  (Italian)
		Financial Times Deutschland  (German)
                Spiegel ONLINE (German) 


        






or enter the url of the rss feed you want to convert :


	
	
	press the button to convert and view the converted feed :
	




Note : KML files can also be viewed on google maps. Here the recent earthquakes RSS feed from the USGS converted with geonames and displayed on google maps.






URL Encoding

If you want to use an other viewer you have to 'url encode' the address of your feed before feeding it 
as a parameter to the rrs to GeoRSS converter. In the forms above for the Acme viewer and GoogleEarth this step is already included.







Your Feed :


The encoded feed :











Chapter 10 in 'The Geospatial Web' describes the GeoNames RSS to GeoRSS converter.

The Geospatial Web: How Geobrowsers, Social Software and the Web 2.0 are Shaping the Network Society (Advanced Information and Knowledge Processing)

The 25 chapters contained in this edited volume summarize the latest research on the Geospatial Web's technical foundations, describe information services and collaborative tools built on top of geobrowsers and investigate the environmental, social and economic impacts of knowledge-intensive applications.

Several chapters focus on the integration of geospatial and semantic technology to extract geospatial context from unstructured textual resources; e.g., to automatically identify and map the most relevant content for customized news services. Hybrid models combine such automated services with the advantages of individual and collaborative content production environments. for example by integrating "edited" material from newspapers and traditional encyclopedias with "evolving" content from collaborative Wiki applications.\nRSS to GeoRSS Converter\nThe GeoNames "RSS to GeoRSS Converter" reads the entries of an RSS feed and searches the GeoNames Database to find a location 
for the entry text. If a relevant location is found, its latitude and longitude are added to the RSS feed using the GeoRSS encoding.\nWith the converter you can for example view the Reuters World News on a Map.\nReuters World News on a Map\nThe converter is a 'natural language processor' and needs to take into account in which language a text is written. Supported languages are English, German, Spanish, French and Italian.



See also the GeoNames Blog for details about the rss to GeoRSS converter.


GeoRSS does not yet support other geographical information other than latitude and longitude. The geonames.org team is proposing to add more geographical element to the GeoRSS standard like country code or place name. As soon as GeoRSS includes this information it will be added to the converter. The draft for the new elements is here.\napi.geonames.org/rssToGeoRSS?\nreturns a RSS feed with latitude and longitude for each entry where the geonames search engine has found a relevant location. Already existant GeoRSS elements in the feed remain unchanged. There is an upper limit of 20 entries for performance reasons.\nThe url of the RSS feed to search locations for and to convert to GeoRSS. The feed has to be syntactically correct, i.e. wellformed xml and valid rss/atom.

Note : the feed url needs to be 'url encoded'.\nstring (optional) en,de,fr,it,es\nThe language of the feed, this information is needed by the geonames search engine to find relevant locations. Default : No value = automatic language detection.\nstring (optional) rss_0.9, rss_0.91, rss_0.92, rss_0.93, rss_0.94, rss_1.0, rss_2.0, atom_0.3, atom_1.0kml\nThe output RSS dialect of the conversion. Default : same RSS dialect as input feed.With type=kml the output will be in GoogleEarth kml format.\nWith type=kml the output will be in GoogleEarth kml format.\nstring simple,gml,w3cGeo (optional)\nThe GeoRSS output encoding used for lat/lng. See www.georss.org for details. Default is w3cGeo.\nItems that could not be geocoded are removed from the response document. Setting the parameter addUngeocodedItems=true will include the ungeocoded items in the response.\nstring (optional) two-letter iso country code\nRestrict geocoding to a given country. This parameter may improve the results of the geocoder for feeds focusing on a single country.\nhttp://api.geonames.org/rssToGeoRSS?feedUrl=http://feeds.reuters.com/reuters/worldNews&username=demo\nView a converted feed on Acme GeoRSS Viewer\nACME GeoRSS Map Viewer\nWith the form below you can convert a RSS feed into GeoRSS and view the result on the ACME GeoRSS Map Viewer.\nor enter the url of the rss feed you want to convert :\npress the button to convert and view the converted feed :\nNote : As the Acme GeoRSS Viewer only accepts RSS2.0 feeds, we have added the parameter "type=rss_2.0" to convert feeds 
in other rss dialects to RSS2.0\nRss to KML (GoogleEarth) Converter\nVal and Kassper have compiled a huge list of feeds 
and made them 'clickable' for you : Root of Live GeoNews (GoogleEarth)\nRoot of Live GeoNews (GoogleEarth)\nView a converted feed with GoogleEarth\nWith the form below you can convert a RSS feed into KML and view it with GoogleEarth.\nor enter the url of the rss feed you want to convert :\npress the button to convert and view the converted feed :\nNote : KML files can also be viewed on google maps. Here the recent earthquakes RSS feed from the USGS converted with geonames and displayed on google maps.\nChapter 10 in 'The Geospatial Web' describes the GeoNames RSS to GeoRSS converter.

The Geospatial Web: How Geobrowsers, Social Software and the Web 2.0 are Shaping the Network Society (Advanced Information and Knowledge Processing)

The 25 chapters contained in this edited volume summarize the latest research on the Geospatial Web's technical foundations, describe information services and collaborative tools built on top of geobrowsers and investigate the environmental, social and economic impacts of knowledge-intensive applications.

Several chapters focus on the integration of geospatial and semantic technology to extract geospatial context from unstructured textual resources; e.g., to automatically identify and map the most relevant content for customized news services. Hybrid models combine such automated services with the advantages of individual and collaborative content production environments. for example by integrating "edited" material from newspapers and traditional encyclopedias with "evolving" content from collaborative Wiki applications.\nThe Geospatial Web: How Geobrowsers, Social Software and the Web 2.0 are Shaping the Network Society (Advanced Information and Knowledge Processing)\nThe 25 chapters contained in this edited volume summarize the latest research on the Geospatial Web's technical foundations, describe information services and collaborative tools built on top of geobrowsers and investigate the environmental, social and economic impacts of knowledge-intensive applications.

Several chapters focus on the integration of geospatial and semantic technology to extract geospatial context from unstructured textual resources; e.g., to automatically identify and map the most relevant content for customized news services. Hybrid models combine such automated services with the advantages of individual and collaborative content production environments. for example by integrating "edited" material from newspapers and traditional encyclopedias with "evolving" content from collaborative Wiki applications.\ninfo@geonames.org 


GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nGeoNames Search Webservice



Webservice Description


  Url»api.geonames.org/search?

  Result»returns the names found for the searchterm as xml or json document, the search is using an AND operator 





ParameterValueDescription

qstring (q,name or name_equals required)search over all attributes of a place : place name, country name, continent, admin codes,... (Important:urlencoded utf8)
namestring (q,name or name_equals required)place name only(Important:urlencoded utf8)
name_equalsstring (q,name or name_equals required)exact place name
name_startsWithstring (optional)place name starts with given characters
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 100, the maximal allowed value is 1000.
startRowinteger (optional)Used for paging results. If you want to get results 30 to 40, use startRow=30 and maxRows=10. Default is 0, the maximal allowed value is 5000 for the free services and 25000 for the premium services
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstring (option), two letter country code ISO-3166records from the countryBias are listed first
continentCodestring : continent code : AF,AS,EU,NA,OC,SA,AN (optional)restricts the search for toponym of the given continent. 
adminCode1, adminCode2, adminCode3, adminCode4, adminCode5string : admin code (optional)code of administrative subdivision
featureClasscharacter A,H,L,P,R,S,T,U,V (optional) featureclass(es) (default= all feature classes); this parameter may occur more than once, example: featureClass=P&featureClass=A
featureCodestring (optional)featurecode(s) (default= all feature codes); this parameter may occur more than once, example: featureCode=PPLC&featureCode=PPLX
citiesstring (optional)optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000' used to categorize the populated places into three groups according to size/relevance. See the download readme for further infos
langstring ISO-639 2-letter language code; en,de,fr,it,es,zh,zh-Hant... (optional)place name and country name will be returned in the specified language. Default is English. With the pseudo language code 'local' the local language will be returned. Feature classes and codes are only available in English and Bulgarian. Any help in translating is welcome.
typestring xml,json,rdfthe format type of the returned document, default = xml
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM

isNameRequiredboolean (optional)At least one of the search term needs to be part of the place name. 
Example : A normal search for Berlin will return all places within the state of Berlin. If we only want to find places with 'Berlin' in the name we set the parameter isNameRequired to 'true'.
The difference to the name_equals parameter is that this will allow searches for 'Berlin, Germany' as only one search term needs to be part of the name.

tagstring (optional)search for toponyms tagged with the specified tag
operatorstring (optional)default is 'AND', with the operator 'OR' not all search terms need to be matched by the response
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
fuzzyfloat (optional)default is '1', defines the fuzziness of the search terms. float between 0 and 1. The search term is only applied to the name attribute.
east,west,north,southfloat (optional)bounding box, only features within the box are returned
searchlangstring (optional)in combination with the name parameter, the search will only consider names in the specified language. Used for instance to query for IATA airport codes.
orderbystring (optional)[population,elevation,relevance]in combination with the name_startsWith, if set to 'relevance' than the result is sorted by relevance.
inclBboxstring (option) [true]include Bbox info, regardelss of style setting. (normally only included with style=FULL



 

Examples

XML

Example 1 : http://api.geonames.org/search?q=london&maxRows=10&username=demo

Example 2 : http://api.geonames.org/search?q=london&maxRows=10&style=LONG&lang=es&username=demo


Example 3 bounding box : http://api.geonames.org/search?q=london&south=0&north=70&west=-120&east=-10&maxRows=10&username=demo





JSON
http://api.geonames.org/searchJSON?q=london&maxRows=10&username=demo

JSON is easier to use in Javascript than XML, as a browser security feature will no allow you to call an xml service from an other domain. A simple example using the json service on googlemaps is here




'name' and 'toponymName'
The response returns two name attributes. The 'name' attribute is a localized name, the preferred name in the language passed in the optional 'lang' parameter or the name that triggered the response in a 'startWith' search. The attribute 'toponymName' is the main name of the toponym as displayed on the google maps interface page or in the geoname file in the download. The 'name' attribute is derived from the alternate names.






Fuzzy Search
With the parameter 'fuzzy' the search will find results even if the search terms are incorrectly spelled.
Example: http://api.geonames.org/search?q=londoz&fuzzy=0.8&username=demo






Reverse Geocoding

Reverse geocoding is the process of finding a place name for a given latitude and longitude. GeoNames has a wide range of reverse geocoding webservices.







RDF - Semantic Web
http://api.geonames.org/search?q=london&maxRows=10&type=rdf&username=demo

With the parameter type=rdf the search service returns the result in RDF format defined by the GeoNames Semantic Web Ontology.






Tags
GeoNames is using a simple tagging system. Every user can tag places. In contrast to the feature codes and feature classes which are one-dimensional (a place name can only have one feature code) several tags can be used for each place name.
It is an additional categorization mechanism where the simple classification with feature codes is not sufficient.

I have tagged a place with the tag 'skiresort'. You can search for tags with the search :
http://www.geonames.org/search.html?q=skiresort

If you only want to search for a tag and not for other occurrences of the term (in case you tag something with 'spain' for example), then you add the attribute 'tags:' to the search term :
http://www.geonames.org/search.html?q=tags:skiresort

And if you want to search for tags of a particular user (or your own) then you append '@username' to the tag. Like this : 
http://www.geonames.org/search.html?q=tags:skiresort@marc 

With the API the the call looks like this:
http://api.geonames.org/search?tag=skiresort@marc&username=demo\nGeoNames Search Webservice\nWebservice Description\napi.geonames.org/search?\nreturns the names found for the searchterm as xml or json document, the search is using an AND operator\nstring (q,name or name_equals required)\nsearch over all attributes of a place : place name, country name, continent, admin codes,... (Important:urlencoded utf8)\nstring (q,name or name_equals required)\nplace name only(Important:urlencoded utf8)\nstring (q,name or name_equals required)\nplace name starts with given characters\nthe maximal number of rows in the document returned by the service. Default is 100, the maximal allowed value is 1000.\nUsed for paging results. If you want to get results 30 to 40, use startRow=30 and maxRows=10. Default is 0, the maximal allowed value is 5000 for the free services and 25000 for the premium services\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nstring (option), two letter country code ISO-3166\nrecords from the countryBias are listed first\nstring : continent code : AF,AS,EU,NA,OC,SA,AN (optional)\nrestricts the search for toponym of the given continent.\nadminCode1, adminCode2, adminCode3, adminCode4, adminCode5\nstring : admin code (optional)\ncode of administrative subdivision\ncharacter A,H,L,P,R,S,T,U,V (optional)\nfeatureclass(es) (default= all feature classes); this parameter may occur more than once, example: featureClass=P&featureClass=A\nfeaturecode(s) (default= all feature codes); this parameter may occur more than once, example: featureCode=PPLC&featureCode=PPLX\noptional filter parameter with three possible values 'cities1000', 'cities5000','cities15000' used to categorize the populated places into three groups according to size/relevance. See the download readme for further infos\nstring ISO-639 2-letter language code; en,de,fr,it,es,zh,zh-Hant... (optional)\nplace name and country name will be returned in the specified language. Default is English. With the pseudo language code 'local' the local language will be returned. Feature classes and codes are only available in English and Bulgarian. Any help in translating is welcome.\nthe format type of the returned document, default = xml\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nAt least one of the search term needs to be part of the place name. 
Example : A normal search for Berlin will return all places within the state of Berlin. If we only want to find places with 'Berlin' in the name we set the parameter isNameRequired to 'true'.
The difference to the name_equals parameter is that this will allow searches for 'Berlin, Germany' as only one search term needs to be part of the name.\nsearch for toponyms tagged with the specified tag\ndefault is 'AND', with the operator 'OR' not all search terms need to be matched by the response\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ndefault is '1', defines the fuzziness of the search terms. float between 0 and 1. The search term is only applied to the name attribute.\neast,west,north,south\nbounding box, only features within the box are returned\nin combination with the name parameter, the search will only consider names in the specified language. Used for instance to query for IATA airport codes.\nstring (optional)[population,elevation,relevance]\nin combination with the name_startsWith, if set to 'relevance' than the result is sorted by relevance.\nstring (option) [true]\ninclude Bbox info, regardelss of style setting. (normally only included with style=FULL\nhttp://api.geonames.org/search?q=london&maxRows=10&username=demo\nExample 2 : http://api.geonames.org/search?q=london&maxRows=10&style=LONG&lang=es&username=demo\nhttp://api.geonames.org/search?q=london&maxRows=10&style=LONG&lang=es&username=demo\nExample 3 bounding box : http://api.geonames.org/search?q=london&south=0&north=70&west=-120&east=-10&maxRows=10&username=demo\nhttp://api.geonames.org/search?q=london&south=0&north=70&west=-120&east=-10&maxRows=10&username=demo\nJSON
http://api.geonames.org/searchJSON?q=london&maxRows=10&username=demo\nhttp://api.geonames.org/searchJSON?q=london&maxRows=10&username=demo\nJSON is easier to use in Javascript than XML, as a browser security feature will no allow you to call an xml service from an other domain. A simple example using the json service on googlemaps is here




'name' and 'toponymName'
The response returns two name attributes. The 'name' attribute is a localized name, the preferred name in the language passed in the optional 'lang' parameter or the name that triggered the response in a 'startWith' search. The attribute 'toponymName' is the main name of the toponym as displayed on the google maps interface page or in the geoname file in the download. The 'name' attribute is derived from the alternate names.\nFuzzy Search
With the parameter 'fuzzy' the search will find results even if the search terms are incorrectly spelled.
Example: http://api.geonames.org/search?q=londoz&fuzzy=0.8&username=demo\nhttp://api.geonames.org/search?q=londoz&fuzzy=0.8&username=demo\nReverse Geocoding

Reverse geocoding is the process of finding a place name for a given latitude and longitude. GeoNames has a wide range of reverse geocoding webservices.\nreverse geocoding webservices\nRDF - Semantic Web
http://api.geonames.org/search?q=london&maxRows=10&type=rdf&username=demo\nhttp://api.geonames.org/search?q=london&maxRows=10&type=rdf&username=demo\nWith the parameter type=rdf the search service returns the result in RDF format defined by the GeoNames Semantic Web Ontology.\nGeoNames Semantic Web\nTags
GeoNames is using a simple tagging system. Every user can tag places. In contrast to the feature codes and feature classes which are one-dimensional (a place name can only have one feature code) several tags can be used for each place name.
It is an additional categorization mechanism where the simple classification with feature codes is not sufficient.

I have tagged a place with the tag 'skiresort'. You can search for tags with the search :
http://www.geonames.org/search.html?q=skiresort

If you only want to search for a tag and not for other occurrences of the term (in case you tag something with 'spain' for example), then you add the attribute 'tags:' to the search term :
http://www.geonames.org/search.html?q=tags:skiresort

And if you want to search for tags of a particular user (or your own) then you append '@username' to the tag. Like this : 
http://www.geonames.org/search.html?q=tags:skiresort@marc 

With the API the the call looks like this:
http://api.geonames.org/search?tag=skiresort@marc&username=demo\nhttp://www.geonames.org/search.html?q=skiresort\nhttp://www.geonames.org/search.html?q=tags:skiresort\nhttp://www.geonames.org/search.html?q=tags:skiresort@marc\nhttp://api.geonames.org/search?tag=skiresort@marc&username=demo\nThis work is licensed under a Creative Commons Attribution 4.0 License.\nThis work is licensed under a Creative Commons Attribution 4.0 License.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org 


GeoNames Home

•
Postal Codes
•

Download / Webservice
•
Forum

•
Blog

•
Sitemap\nGeoNames Home

•
Postal Codes
•

Download / Webservice
•
Forum

•
Blog

•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nPlace Hierarchy Webservices


Children

Returns the children (admin divisions and populated places) for a given geonameId. The children are the administrative divisions within an other administrative division, like the counties (ADM2) in a state (ADM1) or also the countries in a continent. The leafs are populated places, other feature classes like spots, mountains etc are not included in this service. Use the search service if you need other feature classes as well.

Webservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography









Hierarchy

Returns all GeoNames higher up in the hierarchy of a place name.

Webservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo




Neighbours

Returns all neighbours for a country or administrative division. (coverage: all countries on country level, and lower levels as specified here: supported levels)

Webservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo



Contains

returns all features within the GeoName feature for the given geoNameId. It only returns contained features when a polygon boundary for the input feature is defined.

Webservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo





Siblings

Returns all siblings of a GeoNames toponym with feature class A.

Webservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo











This work is licensed under a 
Creative Commons Attribution 4.0 License.\nPlace Hierarchy Webservices\nWebservice Type: XML or JSON 
Url: api.geonames.org/children?
api.geonames.org/childrenJSON?
Parameters: 
geonameId: the geonameId of the parent
maxRows: number of rows returned, default is 200
hierarchy: this optional parameter allows to use other hiearchies then the default administrative hierarchy. Possible values. 'tourism' for tourism regions, 'geography' for geographical regions and 'dependency' for dependencies .

Result: returns a list of GeoName records 

Example, regions of Italy: 
http://api.geonames.org/children?geonameId=3175395&username=demo

Example for a tourism hierarchy, islands for the Canaries: 
http://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism


Example for a dependency hierarchy, dependencies of the UK 
http://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency


Example for a geographic hierarchy, regions of HK 
http://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nhttp://api.geonames.org/children?geonameId=3175395&username=demo\nhttp://api.geonames.org/children?geonameId=2593110&username=demo&hierarchy=tourism\nhttp://api.geonames.org/children?geonameId=2635167&username=demo&hierarchy=dependency\nhttp://api.geonames.org/children?geonameId=1819730&username=demo&hierarchy=geography\nWebservice Type : XML or JSON 
Url : api.geonames.org/hierarchy?
api.geonames.org/hierarchyJSON?
Parameters : 
geonameId : the geonameId for the hierarchy


Result : returns a list of GeoName records, ordered by hierarchy level. The top hierarchy (continent) is the first element in the list 

Example, hierarchy of Zurich, Switzerland, Europe: 
http://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nhttp://api.geonames.org/hierarchy?geonameId=2657896&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/neighbours?
api.geonames.org/neighboursJSON?
Parameters : 
geonameId : the geonameId for the neighbours (country or ADM)
country: the country code (alternative parameter instead of the geonameId)


Result : returns the neighbours of a toponym, currently only implemented for countries

Example, neighbours of Switzerland: 
http://api.geonames.org/neighbours?geonameId=2658434&username=demo\nhttp://api.geonames.org/neighbours?geonameId=2658434&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/contains?
api.geonames.org/containsJSON?
Parameters : 
geonameId : the geonameId for enclosing feature
featureClass: filter by featureClass (optional)
featureCode: filter by featureCode (optional)


Result : enclosed features (only when polyon boundary is available)

Example, features on island Texel: 
http://api.geonames.org/contains?geonameId=2746385&username=demo\nhttp://api.geonames.org/contains?geonameId=2746385&username=demo\nWebservice Type : XML or JSON 
Url : api.geonames.org/siblings?
api.geonames.org/siblingsJSON?
Parameters : 
geonameId : the geonameId for the siblings


Result : returns a list of GeoNames records (feature class A) that have the same administrative level and the same father 

Example, Siblings of France: 
http://api.geonames.org/siblings?geonameId=3017382&username=demo\nhttp://api.geonames.org/siblings?geonameId=3017382&username=demo\nThis work is licensed under a 
Creative Commons Attribution 4.0 License.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Web Services Documentation


GeoNames is mainly using REST webservices.

 
Important:

        Do not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.
	The parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page
	Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)

	Use the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.
	all web services on one table.
	Secure endpoint available at secure.geonames.org
	client libraries
	Service Level Agreement is available for our commercial web services.
        credits per request
         Exceptions - error handling





Postal Code restrictions:

 For Canada we have only the first letters of the full postal codes (for copyright reasons)
 For Ireland we have only the first letters of the full postal codes (for copyright reasons)
 For Malta we have only the first letters of the full postal codes (for copyright reasons)
 The Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.
 For Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).





Webservices

GeoNames search

Webservice for the GeoNames full text search in xml and json format. 
See the service description for details.



Postal Code Search


  Url»api.geonames.org/postalCodeSearch?
  Result»returns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.



ParameterValueDescription


postalcodestring (postalcode or placename required)postal code 
postalcode_startsWithstringthe first characters or letters of a postal code
placenamestring (postalcode or placename required)all fields : placename,postal code, country, admin name (Important:urlencoded utf8)
placename_startsWithstringthe first characters of a place name
countrystring : country code, ISO-3166 (optional)Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP
countryBiasstringrecords from the countryBias are listed first
maxRowsinteger (optional)the maximal number of rows in the document returned by the service. Default is 10
stylestring SHORT,MEDIUM,LONG,FULL (optional)verbosity of returned xml document, default = MEDIUM
operatorstring AND,OR (optional)the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND
charsetstring (optional)default is 'UTF8', defines the encoding used for the document returned by the web service.
isReducedtrue or false (optional)default is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'. 
east,west,north,southfloat (optional)bounding box, only features within the box are returned


             

Example http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo

This service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo

[more on free-geocoding ...]



Placename lookup with postalcode (JSON)

Webservice Type : REST /JSON 
Url : api.geonames.org/postalCodeLookupJSON?
Parameters : postalcode,country ,maxRows (default = 20),callback, charset (default = UTF-8)

Result : returns a list of places for the given postalcode in JSON format, sorted by postalcode,placename 

Example http://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo

Details for this service with an ajax step by step example for placename autocomplete 




Find nearby postal codes / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)


Limits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.


Result : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo


This service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]





Postal code country info

Webservice Type : REST 
Url : api.geonames.org/postalCodeCountryInfo?
Result : countries for which postal code geocoding is available.
Example :  http://api.geonames.org/postalCodeCountryInfo?username=demo





Find nearby populated place / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearbyPlaceName?
Parameters : lat,lng,
lang: language of returned 'name' element (the pseudo language code 'local' will return it in local language),
radius: radius in km (optional), maxRows: max number of rows (default 10)
style: SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true
cities: optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000'. See the download readme for further infos

Result : returns the closest populated place (feature class=P) for the lat/lng query as xml document. The unit of the distance element is 'km'. 

Example: 
http://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo





Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearby?
Parameters : lat,lng, featureClass,featureCode, radius: radius in km (optional), maxRows : max number of rows (default 10)
The parameter featureCode may be used several times, to exclude a featureCode you can use 'featureCode!='
style : SHORT,MEDIUM,LONG,FULL (default = MEDIUM), verbosity of returned xml document
localCountry: in border areas this parameter will restrict the search on the local country, value=true


Result : returns the closest toponym for the lat/lng query as xml document 

Example: 
http://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo


This service is also available in JSON format :
http://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo




Extended Find nearby toponym / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/extendedFindNearby?
Parameters : lat,lng

Result : returns the most detailed information available for the lat/lng query as xml document 
It is a combination of several services. 

Example: 
In the US it returns the address information.

In other countries it returns the hierarchy service:
http://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo

On oceans it returns the ocean name.



[more reverse geocoding webservices]





get geoNames feature for geoNameId

Webservice Type : REST 
Url : api.geonames.org/get?
Parameters : geonameId, lang (optional), style (optional)

Result : returns the attribute of the geoNames feature with the given geonameId as xml document 

Example: 
http://api.geonames.org/get?geonameId=1&username=demo.






Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours





Wikipedia Webservices


Find nearby Wikipedia Entries / reverse geocoding


Wikipedia full text search 





JSON Webservices

Cities and Placenames


Recent Earthquakes


Weather Stations with most recent Weather Observation


Placename lookup with postalcode








Other Webservices 

RSS to GeoRSS Conversion

Details on RSS to GeoRSS converter.


Semantic Web Webservices

Details on GeoNames Semantic Web services.







Country Info (Bounding Box, Capital, Area in square km, Population)

Webservice Type : REST 
Url : api.geonames.org/countryInfo?
Parameters : country (default = all countries)
lang : ISO-639-1 language code (en,de,fr,it,es,...) (default = english)
Result : Country information : Capital, Population, Area in square km, Bounding Box of mainland (excluding offshore islands)
Example :  http://api.geonames.org/countryInfo?username=demo

An other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo







CountryCode / reverse geocoding

The iso country code of any given point.


Webservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]





Country Subdivision / reverse geocoding

The iso country code and the administrative subdivision of any given point.


Webservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo




Ocean / reverse geocoding

The name of the ocean or sea.



Webservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo





Neighbourhood / reverse geocoding

The neighbourhood for US cities. Data provided by Zillow under cc-by-sa license.



Webservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]





Elevation - SRTM1
Webservice Type : REST 
Url : api.geonames.org/srtm1?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 30m x 30m
Result : a single number giving the elevation in meters according to srtm1, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo



Elevation - SRTM3
Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of a specially modified radar system that flew onboard the Space Shuttle Endeavour during an 11-day mission in February of 2000. The dataset covers land areas between 60 degrees north and 56 degrees south.
This web service is using SRTM3 data with data points located every 3-arc-second (approximately 90 meters) on a latitude/longitude grid. 
Data voids in the original SRTM files have been filled by cgiar. Thanks to Andy Jarvis and Cgiar to allow GeoNames to use the processed data.

Documentation : cgiar-csi,Nasa

The astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.




Webservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo




Elevation - Aster Global Digital Elevation Model V2 2011

Webservice Type : REST 
Url : api.geonames.org/astergdem?
Parameters : lat,lng;
request method: GET or POST
sample are: ca 30m x 30m, between 83N and 65S latitude.
Result : a single number giving the elevation in meters according to aster gdem, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo


ASTER GDEM is a product of METI and NASA.



This service is also available in XML and JSON format : api.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo and api.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000.
http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo







Elevation - GTOPO30

GTOPO30 is a global digital elevation model (DEM) with a horizontal grid spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was derived from several raster and vector sources of topographic information. Documentation : USGS Gtopo30




Webservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo 





Timezone


Webservice Type : REST 
Url : api.geonames.org/timezone?
Parameters : lat,lng, radius (buffer in km for closest timezone in coastal areas),lang (for countryName), date (date for sunrise/sunset);
Result : the timezone at the lat/lng with gmt offset (1. January) and dst offset (1. July) 

Example http://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo


Element:
countryCode: ISO countrycode
countryName: name (language can be set with param lang)
timezoneId: name of the timezone (according to olson), this information is sufficient to work with the timezone and defines DST rules, consult the documentation of your development environment. Many programming environments include functions based on the olson timezoneId (example java TimeZone) 
time: the local current time
sunset: sunset local time (date)
sunrise: sunrise local time (date)
rawOffset: the amount of time in hours to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. 
gmtOffset: offset to GMT at 1. January (deprecated)
dstOffset: offset to GMT at 1. July (deprecated)









Support GeoNames with a donation :\nGeoNames Web Services Documentation\nDo not use the 'demo' account for your app or your tests. It is only meant for the sample links on the documentation pages. Create your own account instead.\nThe parameter 'username' needs to be passed with each request. The username for your application can be registered here. You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account for the webservice on your account page\nDon't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)\nFaq entry on url encoding\nUse the JSON services if you want to use GeoNames from javascript, as most browsers do not allow to call xml services from ANOTHER server.\nall web services on one table.\nall web services on one table\nSecure endpoint available at secure.geonames.org\nService Level Agreement is available for our commercial web services.\ncommercial web services\nExceptions - error handling\nExceptions - error handling\nFor Canada we have only the first letters of the full postal codes (for copyright reasons)\nFor Ireland we have only the first letters of the full postal codes (for copyright reasons)\nFor Malta we have only the first letters of the full postal codes (for copyright reasons)\nThe Argentina data file contains 4-digit postal codes which were replaced with a new system in 1999.\nFor Brazil only major postal codes are available (only the codes ending with -000 and the major code per municipality).\napi.geonames.org/postalCodeSearch?\nreturns a list of postal codes and places for the placename/postalcode query as xml document 
For the US the first returned zip code is determined using zip code area shapes, the following zip codes are based on the centroid. For all other supported countries all returned postal codes are based on centroids.\nstring (postalcode or placename required)\npostalcode_startsWith\nthe first characters or letters of a postal code\nstring (postalcode or placename required)\nall fields : placename,postal code, country, admin name (Important:urlencoded utf8)\nthe first characters of a place name\nstring : country code, ISO-3166 (optional)\nDefault is all countries. The country parameter may occur more than once, example: country=FR&country=GP\nrecords from the countryBias are listed first\nthe maximal number of rows in the document returned by the service. Default is 10\nstring SHORT,MEDIUM,LONG,FULL (optional)\nverbosity of returned xml document, default = MEDIUM\nstring AND,OR (optional)\nthe operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND\ndefault is 'UTF8', defines the encoding used for the document returned by the web service.\ntrue or false (optional)\ndefault is 'false', when set to 'true' only the UK outer codes respectivel the NL 4-digits are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.\neast,west,north,south\nbounding box, only features within the box are returned\nExample http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo\nThis service is also available in JSON format : http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\nhttp://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo\n[more on free-geocoding ...]\nmore on free-geocoding ...\nPlacename lookup with postalcode (JSON)\nhttp://api.geonames.org/postalCodeLookupJSON?postalcode=6600&country=AT&username=demo\nDetails for this service with an ajax step by step example for placename autocomplete\nplacename autocomplete\nFind nearby postal codes / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/findNearbyPostalCodes?
Parameters : 
lat,lng, radius (in km), maxRows (default = 5),style (verbosity : SHORT,MEDIUM,LONG,FULL), country (default = all countries), localCountry (in border areas this parameter will restrict the search on the local country, value=true), isReduced=true to get only the first part of the code (GB and NL)
or
 postalcode,country, radius (in Km),  maxRows (default = 5)\nLimits:
30km radius (free service), 160km (premium service), 500 maxRows (free service) and 2500 maxRows for the premium service.\nResult : returns a list of postalcodes and places for the lat/lng query as xml document. The result is sorted by distance. For Canada the FSA is returned (first 3 characters of full postal code) 

Example: 
http://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyPostalCodes?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyPostalCodes?postalcode=8775&country=CH&radius=10&username=demo\nThis service is also available in JSON format : api.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding webservices]\napi.geonames.org/findNearbyPostalCodesJSON?postalcode=8775&country=CH&radius=10&username=demo\nmore reverse geocoding webservices\nPostal code country info\nhttp://api.geonames.org/postalCodeCountryInfo?username=demo\nFind nearby populated place / reverse geocoding\nhttp://api.geonames.org/findNearbyPlaceName?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9&username=demo\nFind nearby toponym / reverse geocoding\nhttp://api.geonames.org/findNearby?lat=47.3&lng=9&username=demo\nhttp://api.geonames.org/findNearbyJSON?lat=47.3&lng=9&username=demo\nExtended Find nearby toponym / reverse geocoding\nhttp://api.geonames.org/extendedFindNearby?lat=47.3&lng=9&username=demo\nmore reverse geocoding webservices\nget geoNames feature for geoNameId\nhttp://api.geonames.org/get?geonameId=1&username=demo\nPlace Hierarchy Webservices\nWikipedia Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia full text search\nWikipedia full text search\nCities and Placenames\nCities and Placenames\nWeather Stations with most recent Weather Observation\nWeather Stations with most recent Weather Observation\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nRSS to GeoRSS Conversion\nSemantic Web Webservices\nGeoNames Semantic Web\nCountry Info (Bounding Box, Capital, Area in square km, Population)\nhttp://api.geonames.org/countryInfo?username=demo\nAn other countryInfo service is available as csv output :
Example :  http://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nhttp://api.geonames.org/countryInfoCSV?lang=it&country=DE&username=demo\nCountryCode / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countryCode?
Parameters : lat,lng, type, lang, radius (buffer in km for closest country in coastal areas, a positive buffer expands the positiv area whereas a negative buffer reduces it);
Result : returns the iso country code for the given latitude/longitudeWith the parameter type=xml this service returns an xml document with iso country code and country name. The optional parameter lang can be used to specify the language the country name should be in. JSON output is produced with type=JSON

Example http://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo


[more reverse geocoding webservices]\nhttp://api.geonames.org/countryCode?lat=47.03&lng=10.2&username=demo\nmore reverse geocoding webservices\nCountry Subdivision / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/countrySubdivision?
Parameters : lat,lng, lang (default= names in local language), radius (buffer in km for closest country in coastal areas,  a positive buffer expands the positiv area whereas a negative buffer reduces it),level (level of ADM);
Result : returns the country and the administrative subdivison (state, province,...) for the given latitude/longitude

Example http://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo



With the parameters 'radius' and 'maxRows' you get the closest subdivisions ordered by distance : 
api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40




This service is also available in JSON format : api.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nhttp://api.geonames.org/countrySubdivision?lat=47.03&lng=10.2&username=demo\napi.geonames.org/countrySubdivision?lat=47.03&lng=10.2&maxRows=10&radius=40\napi.geonames.org/countrySubdivisionJSON?lat=47.03&lng=10.2&username=demo\nOcean / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/ocean?
Parameters : lat,lng, radius (optional)
Result : returns the ocean or sea for the given latitude/longitude
The oceans returned by the service are listed here.

Example http://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo



This service is also available in JSON format : api.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nhttp://api.geonames.org/ocean?lat=40.78343&lng=-43.96625&username=demo\napi.geonames.org/oceanJSON?lat=40.78343&lng=-43.96625&username=demo\nNeighbourhood / reverse geocoding\nWebservice Type : REST 
Url : api.geonames.org/neighbourhood?
Parameters : lat,lng
Result : returns the neighbourhood for the given latitude/longitude

Example http://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo



This service is also available in JSON format : api.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo





[more reverse geocoding webservices]\nhttp://api.geonames.org/neighbourhood?lat=40.78343&lng=-73.96625&username=demo\napi.geonames.org/neighbourhoodJSON?lat=40.78343&lng=-73.96625&username=demo\nmore reverse geocoding webservices\nhttp://api.geonames.org/srtm1?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm1JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm1?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nThe astergdem data has finer resolution, but is not processed. The srtm3v4 data does not have the same resolution as the astergem data, but it is processed. This means holes and data errors have been corrected.\nWebservice Type : REST 
Url : api.geonames.org/srtm3?
Parameters : lat,lng;
request method: GET or POST
sample area: ca 90m x 90m
Result : a single number giving the elevation in meters according to srtm3, ocean
areas have been masked as "no data" and have been assigned a value of -32768 

Example http://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo



This service is also available in XML and JSON format :api.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo api.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo


The text version of the service also accepts a list of lat/lng for the parameters 'lats' and 'lngs'. On the free server the number of points per call is limited to 20, for the premium service the limit is 2000:http://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nhttp://api.geonames.org/srtm3?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3XML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/srtm3JSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nElevation - Aster Global Digital Elevation Model V2 2011\nhttp://api.geonames.org/astergdem?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemXML?lat=50.01&lng=10.2&username=demo\napi.geonames.org/astergdemJSON?lat=50.01&lng=10.2&username=demo\nhttp://api.geonames.org/srtm3?lats=50.01,51.01&lngs=10.2,11.2&username=demo\nWebservice Type : REST 
Url : api.geonames.org/gtopo30?
Parameters : lat,lng;
sample area: ca 1km x 1km
Result : a single number giving the elevation in meters according to gtopo30, ocean
areas have been masked as "no data" and have been assigned a value of -9999 

Example http://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo




This service is also available in JSON format : http://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/gtopo30JSON?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezone?lat=47.01&lng=10.2&username=demo\nhttp://api.geonames.org/timezoneJSON?lat=47.01&lng=10.2&username=demo\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nJSON Webservices


GeoNames offers most webservices in XML and JSON format. JSON has the advantage that is can be used to directly access the geonames webservice from javascript code, whereas using XML the browser will throw a security exception if an xml call to another webserver is made.

All JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).

JSON Examples :
Placename autocomplete 
full text search on google maps 

Places

Cities and Placenames

Webservice Type : REST 
Url : api.geonames.org/citiesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
lang : language of placenames and wikipedia urls (default = en)
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of cities and placenames in the bounding box, ordered by relevancy (capital/population). Placenames close together are filterered out and only the larger name is included in the resulting list.


Example : http://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo


This service is also available in XML output :

Example : http://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo







Fulltext Search

Details full text search




Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours






Wikipedia

Find nearby Wikipedia Entries / reverse geocoding


Wikipedia Fulltext Search

Wikipedia Articles in Bounding Box





Postal Codes

Postal Code Search



Find nearby postal codes / reverse geocoding


Placename lookup with postalcode









Reverse Geocoding

Street/Address reverse geocoding for the US

Global street reverse geocoding


Country


Country Subdivision












Earthquakes

Recent Earthquakes

Webservice Type : REST 
Url : api.geonames.org/earthquakesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
date : date of earthquakes 'yyyy-MM-dd', optional parameter, earthquakes older or equal the given date sorted by date,magnitude
minMagnitude : minimal magnitude, optional parameter
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of earthquakes, ordered by magnitude


Example http://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather

Weather data is provided in the METAR (METeorological Aerodrome Report) format.

Translations for weather conditions are available in English (default), German, Spanish, French, Italian, Czech, Dutch, Finnish, Swedish, Arabic, Portuguese, Hebrew, Polish, Russian and Bulgarian. Add the parameter 'lang=' with the language code for weather conditions in the desired language.

Help with the translation of METAR weather conditions is welcome.


Units:
Elevation = meter
Wind speed = Knots
Temperature = Celsius

datetime = UTC time


Weather Stations with most recent Weather Observation

Webservice Type : REST 
Url : api.geonames.org/weatherJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of weather stations with the most recent weather observation


Example http://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather Station with most recent weather observation

Webservice Type : REST 
Url : api.geonames.org/weatherIcaoJSON?
Parameters : 
ICAO : International Civil Aviation Organization (ICAO) code 
callback : name of javascript function (optional parameter) 


Result : returns the weather station and the most recent weather observation for the ICAO code



Example http://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo









Weather Station with most recent weather observation / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearByWeatherJSON?
Parameters : 
lat,lng : the service will return the station closest to this given point (reverse geocoding)
callback : name of javascript function (optional parameter) 
radius: search radius, only weather stations within this radius are considered. Default is about 100km.


Result : returns a weather station with the most recent weather observation



Example http://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo


An XML version is available :
Example http://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\nAll JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).\nJSON Examples :
Placename autocomplete 
full text search on google maps\nPlacename autocomplete\nfull text search on google maps\nCities and Placenames\nhttp://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo\nhttp://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nDetails full text search\nPlace Hierarchy Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia Fulltext Search\nWikipedia Fulltext Search\nWikipedia Articles in Bounding Box\nWikipedia Articles in Bounding Box\nFind nearby postal codes / reverse geocoding\nFind nearby postal codes / reverse geocoding\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nStreet/Address reverse geocoding for the US\nStreet/Address reverse geocoding for the US\nGlobal street reverse geocoding\nGlobal street reverse geocoding\nhttp://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\ntranslation of METAR weather conditions\nWeather Stations with most recent Weather Observation\nhttp://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nWeather Station with most recent weather observation\nhttp://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo\nWeather Station with most recent weather observation / reverse geocoding\nhttp://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo\nhttp://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\ninfo@geonames.org


GeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nJSON Webservices


GeoNames offers most webservices in XML and JSON format. JSON has the advantage that is can be used to directly access the geonames webservice from javascript code, whereas using XML the browser will throw a security exception if an xml call to another webserver is made.

All JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).

JSON Examples :
Placename autocomplete 
full text search on google maps 

Places

Cities and Placenames

Webservice Type : REST 
Url : api.geonames.org/citiesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
lang : language of placenames and wikipedia urls (default = en)
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of cities and placenames in the bounding box, ordered by relevancy (capital/population). Placenames close together are filterered out and only the larger name is included in the resulting list.


Example : http://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo


This service is also available in XML output :

Example : http://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo







Fulltext Search

Details full text search




Place Hierarchy Webservices


Children

Hierarchy

Siblings

Neighbours






Wikipedia

Find nearby Wikipedia Entries / reverse geocoding


Wikipedia Fulltext Search

Wikipedia Articles in Bounding Box





Postal Codes

Postal Code Search



Find nearby postal codes / reverse geocoding


Placename lookup with postalcode









Reverse Geocoding

Street/Address reverse geocoding for the US

Global street reverse geocoding


Country


Country Subdivision












Earthquakes

Recent Earthquakes

Webservice Type : REST 
Url : api.geonames.org/earthquakesJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
date : date of earthquakes 'yyyy-MM-dd', optional parameter, earthquakes older or equal the given date sorted by date,magnitude
minMagnitude : minimal magnitude, optional parameter
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of earthquakes, ordered by magnitude


Example http://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather

Weather data is provided in the METAR (METeorological Aerodrome Report) format.

Translations for weather conditions are available in English (default), German, Spanish, French, Italian, Czech, Dutch, Finnish, Swedish, Arabic, Portuguese, Hebrew, Polish, Russian and Bulgarian. Add the parameter 'lang=' with the language code for weather conditions in the desired language.

Help with the translation of METAR weather conditions is welcome.


Units:
Elevation = meter
Wind speed = Knots
Temperature = Celsius

datetime = UTC time


Weather Stations with most recent Weather Observation

Webservice Type : REST 
Url : api.geonames.org/weatherJSON?
Parameters : 
north,south,east,west : coordinates of bounding box 
callback : name of javascript function (optional parameter) 
maxRows : maximal number of rows returned (default = 10)


Result : returns a list of weather stations with the most recent weather observation


Example http://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo








Weather Station with most recent weather observation

Webservice Type : REST 
Url : api.geonames.org/weatherIcaoJSON?
Parameters : 
ICAO : International Civil Aviation Organization (ICAO) code 
callback : name of javascript function (optional parameter) 


Result : returns the weather station and the most recent weather observation for the ICAO code



Example http://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo









Weather Station with most recent weather observation / reverse geocoding

Webservice Type : REST 
Url : api.geonames.org/findNearByWeatherJSON?
Parameters : 
lat,lng : the service will return the station closest to this given point (reverse geocoding)
callback : name of javascript function (optional parameter) 
radius: search radius, only weather stations within this radius are considered. Default is about 100km.


Result : returns a weather station with the most recent weather observation



Example http://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo


An XML version is available :
Example http://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\nAll JSON services accept an optional parameter 'callback' for a javascript function call and a parameter 'formatted=true' to format the output with linefeeds and indentation. The latter is useful to view the JSON result in a browser but should not be used in production usage (waste of bandwith).\nJSON Examples :
Placename autocomplete 
full text search on google maps\nPlacename autocomplete\nfull text search on google maps\nCities and Placenames\nhttp://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demo\nhttp://api.geonames.org/cities?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nDetails full text search\nPlace Hierarchy Webservices\nFind nearby Wikipedia Entries / reverse geocoding\nFind nearby Wikipedia Entries / reverse geocoding\nWikipedia Fulltext Search\nWikipedia Fulltext Search\nWikipedia Articles in Bounding Box\nWikipedia Articles in Bounding Box\nFind nearby postal codes / reverse geocoding\nFind nearby postal codes / reverse geocoding\nPlacename lookup with postalcode\nPlacename lookup with postalcode\nStreet/Address reverse geocoding for the US\nStreet/Address reverse geocoding for the US\nGlobal street reverse geocoding\nGlobal street reverse geocoding\nhttp://api.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\ntranslation of METAR weather conditions\nWeather Stations with most recent Weather Observation\nhttp://api.geonames.org/weatherJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nWeather Station with most recent weather observation\nhttp://api.geonames.org/weatherIcaoJSON?ICAO=LSZH&username=demo\nWeather Station with most recent weather observation / reverse geocoding\nhttp://api.geonames.org/findNearByWeatherJSON?lat=43&lng=-2&username=demo\nhttp://api.geonames.org/findNearByWeatherXML?lat=43&lng=-2&username=demo\ninfo@geonames.org


GeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice

•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nWikipedia Webservice

The wikipedia webservices give access to georeferenced wikipedia articles in 240 languages. For the largest languages (English, German, French, Spanish, Italian, Portuguese, Polish, Russian and Chinese) full text and a summary is also available.



Wikipedia Attributes (XML or JSON):




AttributeDescription
langISO language code of article text
titlethe article title
summarya short summary of the article text. Around 300 chars. The text is truncated at a full stop if one is available near char 300, otherwise at the end of a word.
featurethe wikipedia feature type. A list of types is available here
countryCodethe ISO country code of the article
elevationthe elevation in metres (optional may be null), parsed from the article or reverse geocoded.
populationthe population (optional may be null)
latlatitude
lnglongitude
wikipediaUrlURL of the article
thumbnailImgURL of a small thumbnail image (ca 100x75 px)
rankindication of the popularity or relevancy of an article. The rank is an integer number from 1 for the least popular articles to 100 for the most popular articles. It is calculated from the number of links pointing to an article and the article length. The articles are more or less evenly distributed over the 100 ranks.











Find nearby Wikipedia Entries / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : XML,JSON or RSS 
Url : api.geonames.org/findNearbyWikipedia?
api.geonames.org/findNearbyWikipediaJSON?
api.geonames.org/findNearbyWikipediaRSS?
Parameters : 
lang : language code (around 240 languages) (default = en)

lat,lng, radius (in km), maxRows (default = 5),country (default = all countries)
or
 postalcode,country, radius (in Km, default 10km, max limit for free service 20km, max limit for premium 150km),  maxRows (default = 5, max for free service 500, max for premium service 2000)
for premium users: length of the full text.

Result : returns a list of wikipedia entries as xml document 

Example: 
http://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding]


Wikipedia Fulltext Search

Webservice Type : XML or JSON  
Url : api.geonames.org/wikipediaSearch?
api.geonames.org/wikipediaSearchJSON?
Parameters :
q : place name (urlencoded utf8)
title : search in the wikipedia title (optional)
lang : language code, supported languages are de,en,es,fr,it,nl,pl,pt,ru,zh (default = en)
maxRows : maximal number of rows returned (default = 10)

Result : returns the wikipedia entries found for the searchterm as xml document 

Example http://api.geonames.org/wikipediaSearch?q=london&maxRows=10&username=demo




Wikipedia Articles in Bounding Box

Webservice Type : XML or JSON  
Url : api.geonames.org/wikipediaBoundingBox?
api.geonames.org/wikipediaBoundingBoxJSON?
Parameters :
south,north,east, west : coordinates of bounding box
lang : language code, supported languages are de,en,es,fr,it,nl,pl,pt,ru,zh (default = en)
maxRows : maximal number of rows returned (default = 10)

Result : returns the wikipedia entries within the bounding box as xml document 

Example http://api.geonames.org/wikipediaBoundingBox?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo







Note : Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)














This work is licensed under a 
Creative Commons Attribution 3.0 License.

Wikipedia texts are licenced under Creative Commons Attribution-ShareAlike 3.0 Unported License.\ngeoreferenced wikipedia articles\nISO language code of article text\na short summary of the article text. Around 300 chars. The text is truncated at a full stop if one is available near char 300, otherwise at the end of a word.\nthe wikipedia feature type. A list of types is available here\nthe ISO country code of the article\nthe elevation in metres (optional may be null), parsed from the article or reverse geocoded.\nthe population (optional may be null)\nURL of a small thumbnail image (ca 100x75 px)\nindication of the popularity or relevancy of an article. The rank is an integer number from 1 for the least popular articles to 100 for the most popular articles. It is calculated from the number of links pointing to an article and the article length. The articles are more or less evenly distributed over the 100 ranks.\nFind nearby Wikipedia Entries / reverse geocoding\nWebservice Type : XML,JSON or RSS 
Url : api.geonames.org/findNearbyWikipedia?
api.geonames.org/findNearbyWikipediaJSON?
api.geonames.org/findNearbyWikipediaRSS?
Parameters : 
lang : language code (around 240 languages) (default = en)

lat,lng, radius (in km), maxRows (default = 5),country (default = all countries)
or
 postalcode,country, radius (in Km, default 10km, max limit for free service 20km, max limit for premium 150km),  maxRows (default = 5, max for free service 500, max for premium service 2000)
for premium users: length of the full text.

Result : returns a list of wikipedia entries as xml document 

Example: 
http://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo\n[more reverse geocoding]\nmore reverse geocoding\nWikipedia Fulltext Search\nhttp://api.geonames.org/wikipediaSearch?q=london&maxRows=10&username=demo\nWikipedia Articles in Bounding Box\nhttp://api.geonames.org/wikipediaBoundingBox?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nFaq entry on url encoding\nThis work is licensed under a 
Creative Commons Attribution 3.0 License.\nCreative Commons Attribution 3.0 License\nWikipedia texts are licenced under Creative Commons Attribution-ShareAlike 3.0 Unported License.\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nWikipedia Webservice

The wikipedia webservices give access to georeferenced wikipedia articles in 240 languages. For the largest languages (English, German, French, Spanish, Italian, Portuguese, Polish, Russian and Chinese) full text and a summary is also available.



Wikipedia Attributes (XML or JSON):




AttributeDescription
langISO language code of article text
titlethe article title
summarya short summary of the article text. Around 300 chars. The text is truncated at a full stop if one is available near char 300, otherwise at the end of a word.
featurethe wikipedia feature type. A list of types is available here
countryCodethe ISO country code of the article
elevationthe elevation in metres (optional may be null), parsed from the article or reverse geocoded.
populationthe population (optional may be null)
latlatitude
lnglongitude
wikipediaUrlURL of the article
thumbnailImgURL of a small thumbnail image (ca 100x75 px)
rankindication of the popularity or relevancy of an article. The rank is an integer number from 1 for the least popular articles to 100 for the most popular articles. It is calculated from the number of links pointing to an article and the article length. The articles are more or less evenly distributed over the 100 ranks.











Find nearby Wikipedia Entries / reverse geocoding

This service comes in two flavors. You can either pass the lat/long or a postalcode/placename.

Webservice Type : XML,JSON or RSS 
Url : api.geonames.org/findNearbyWikipedia?
api.geonames.org/findNearbyWikipediaJSON?
api.geonames.org/findNearbyWikipediaRSS?
Parameters : 
lang : language code (around 240 languages) (default = en)

lat,lng, radius (in km), maxRows (default = 5),country (default = all countries)
or
 postalcode,country, radius (in Km, default 10km, max limit for free service 20km, max limit for premium 150km),  maxRows (default = 5, max for free service 500, max for premium service 2000)
for premium users: length of the full text.

Result : returns a list of wikipedia entries as xml document 

Example: 
http://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo


[more reverse geocoding]


Wikipedia Fulltext Search

Webservice Type : XML or JSON  
Url : api.geonames.org/wikipediaSearch?
api.geonames.org/wikipediaSearchJSON?
Parameters :
q : place name (urlencoded utf8)
title : search in the wikipedia title (optional)
lang : language code, supported languages are de,en,es,fr,it,nl,pl,pt,ru,zh (default = en)
maxRows : maximal number of rows returned (default = 10)

Result : returns the wikipedia entries found for the searchterm as xml document 

Example http://api.geonames.org/wikipediaSearch?q=london&maxRows=10&username=demo




Wikipedia Articles in Bounding Box

Webservice Type : XML or JSON  
Url : api.geonames.org/wikipediaBoundingBox?
api.geonames.org/wikipediaBoundingBoxJSON?
Parameters :
south,north,east, west : coordinates of bounding box
lang : language code, supported languages are de,en,es,fr,it,nl,pl,pt,ru,zh (default = en)
maxRows : maximal number of rows returned (default = 10)

Result : returns the wikipedia entries within the bounding box as xml document 

Example http://api.geonames.org/wikipediaBoundingBox?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo







Note : Don't forget to url encode string parameters containing special characters or spaces. (Faq entry on url encoding)














This work is licensed under a 
Creative Commons Attribution 3.0 License.

Wikipedia texts are licenced under Creative Commons Attribution-ShareAlike 3.0 Unported License.\ngeoreferenced wikipedia articles\nISO language code of article text\na short summary of the article text. Around 300 chars. The text is truncated at a full stop if one is available near char 300, otherwise at the end of a word.\nthe wikipedia feature type. A list of types is available here\nthe ISO country code of the article\nthe elevation in metres (optional may be null), parsed from the article or reverse geocoded.\nthe population (optional may be null)\nURL of a small thumbnail image (ca 100x75 px)\nindication of the popularity or relevancy of an article. The rank is an integer number from 1 for the least popular articles to 100 for the most popular articles. It is calculated from the number of links pointing to an article and the article length. The articles are more or less evenly distributed over the 100 ranks.\nFind nearby Wikipedia Entries / reverse geocoding\nWebservice Type : XML,JSON or RSS 
Url : api.geonames.org/findNearbyWikipedia?
api.geonames.org/findNearbyWikipediaJSON?
api.geonames.org/findNearbyWikipediaRSS?
Parameters : 
lang : language code (around 240 languages) (default = en)

lat,lng, radius (in km), maxRows (default = 5),country (default = all countries)
or
 postalcode,country, radius (in Km, default 10km, max limit for free service 20km, max limit for premium 150km),  maxRows (default = 5, max for free service 500, max for premium service 2000)
for premium users: length of the full text.

Result : returns a list of wikipedia entries as xml document 

Example: 
http://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo

or


api.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo\nhttp://api.geonames.org/findNearbyWikipedia?lat=47&lng=9&username=demo\napi.geonames.org/findNearbyWikipedia?postalcode=8775&country=CH&radius=10&username=demo\n[more reverse geocoding]\nmore reverse geocoding\nWikipedia Fulltext Search\nhttp://api.geonames.org/wikipediaSearch?q=london&maxRows=10&username=demo\nWikipedia Articles in Bounding Box\nhttp://api.geonames.org/wikipediaBoundingBox?north=44.1&south=-9.9&east=-22.4&west=55.2&username=demo\nFaq entry on url encoding\nThis work is licensed under a 
Creative Commons Attribution 3.0 License.\nCreative Commons Attribution 3.0 License\nWikipedia texts are licenced under Creative Commons Attribution-ShareAlike 3.0 Unported License.\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nsearch 
     
   

   
login\nPostal Codes United Arab Emirates\nPostal Codes United Arab Emirates\nPostal Codes Anguilla\nPostal Codes Anguilla\nPostal Codes Argentina\nPostal Codes Argentina\nPostal Codes American Samoa\nPostal Codes American Samoa\nPostal Codes Australia\nPostal Codes Australia\nPostal Codes Åland Islands\nPostal Codes Åland Islands\nPostal Codes Azerbaijan\nPostal Codes Azerbaijan\nPostal Codes Bangladesh\nPostal Codes Bangladesh\nPostal Codes Bulgaria\nPostal Codes Bulgaria\nPostal Codes Cocos (Keeling) Islands\nPostal Codes Cocos (Keeling) Islands\nPostal Codes Switzerland\nPostal Codes Switzerland\nPostal Codes Colombia\nPostal Codes Colombia\nPostal Codes Costa Rica\nPostal Codes Costa Rica\nPostal Codes Christmas Island\nPostal Codes Christmas Island\nPostal Codes Dominican Republic\nPostal Codes Dominican Republic\nPostal Codes Falkland Islands\nPostal Codes Falkland Islands\nPostal Codes Micronesia\nPostal Codes Micronesia\nPostal Codes Faroe Islands\nPostal Codes Faroe Islands\nPostal Codes United Kingdom\nPostal Codes United Kingdom\nPostal Codes French Guiana\nPostal Codes French Guiana\nPostal Codes Guernsey\nPostal Codes Guernsey\nPostal Codes Gibraltar\nPostal Codes Gibraltar\nPostal Codes Greenland\nPostal Codes Greenland\nPostal Codes Guadeloupe\nPostal Codes Guadeloupe\nPostal Codes South Georgia & South Sandwich Islands\nPostal Codes South Georgia & South Sandwich Islands\nPostal Codes Guatemala\nPostal Codes Guatemala\nPostal Codes Hong Kong SAR China\nPostal Codes Hong Kong SAR China\nPostal Codes Heard & McDonald Islands\nPostal Codes Heard & McDonald Islands\nPostal Codes Honduras\nPostal Codes Honduras\nPostal Codes Indonesia\nPostal Codes Indonesia\nPostal Codes Isle of Man\nPostal Codes Isle of Man\nPostal Codes British Indian Ocean Territory\nPostal Codes British Indian Ocean Territory\nPostal Codes South Korea\nPostal Codes South Korea\nPostal Codes Liechtenstein\nPostal Codes Liechtenstein\nPostal Codes Sri Lanka\nPostal Codes Sri Lanka\nPostal Codes Lithuania\nPostal Codes Lithuania\nPostal Codes Luxembourg\nPostal Codes Luxembourg\nPostal Codes Marshall Islands\nPostal Codes Marshall Islands\nPostal Codes North Macedonia\nPostal Codes North Macedonia\nPostal Codes Macao SAR China\nPostal Codes Macao SAR China\nPostal Codes Northern Mariana Islands\nPostal Codes Northern Mariana Islands\nPostal Codes Martinique\nPostal Codes Martinique\nPostal Codes Malaysia\nPostal Codes Malaysia\nPostal Codes New Caledonia\nPostal Codes New Caledonia\nPostal Codes Norfolk Island\nPostal Codes Norfolk Island\nPostal Codes Netherlands\nPostal Codes Netherlands\nPostal Codes New Zealand\nPostal Codes New Zealand\nPostal Codes French Polynesia\nPostal Codes French Polynesia\nPostal Codes Philippines\nPostal Codes Philippines\nPostal Codes Pakistan\nPostal Codes Pakistan\nPostal Codes St. Pierre & Miquelon\nPostal Codes St. Pierre & Miquelon\nPostal Codes Pitcairn Islands\nPostal Codes Pitcairn Islands\nPostal Codes Puerto Rico\nPostal Codes Puerto Rico\nPostal Codes Portugal\nPostal Codes Portugal\nPostal Codes Singapore\nPostal Codes Singapore\nPostal Codes Slovenia\nPostal Codes Slovenia\nPostal Codes Svalbard & Jan Mayen\nPostal Codes Svalbard & Jan Mayen\nPostal Codes Slovakia\nPostal Codes Slovakia\nPostal Codes San Marino\nPostal Codes San Marino\nPostal Codes Turks & Caicos Islands\nPostal Codes Turks & Caicos Islands\nPostal Codes Thailand\nPostal Codes Thailand\nPostal Codes United States\nPostal Codes United States\nPostal Codes Vatican City\nPostal Codes Vatican City\nPostal Codes U.S. Virgin Islands\nPostal Codes U.S. Virgin Islands\nPostal Codes Wallis & Futuna\nPostal Codes Wallis & Futuna\nPostal Codes South Africa\nPostal Codes South Africa\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames Data


Data Extract

A daily GeoNames database extract can be downloaded in the form of a large worldwide text file (allCountries.zip). 
Additional country files are available for convenience. You find the files on our 
download server. Read the readme.txt for details. A Premium Data Subscription variant is available for professional users.

Postal codes are available as a separate download.




Web Services

GeoNames if offering a wide range of sophisticated web services. 


	web service overview
	web service documentation
	web service client libraries



Support

Free support for GeoNames is provided by the community. The GeoNames team is available for commercial support and consulting :


	GeoNames Forum
	GeoName mailing list : geonames@googlegroups.com
	Commercial Support and Consulting




Sources and Contributions


	Sources : GeoNames is aggregating over hundred different data sources.
	Ambassadors : GeoNames Ambassadors help in many countries.
	Wiki : A wiki allows to view the data and quickly fix error and add missing places.
	Donations and Sponsoring : Costs for running GeoNames are covered by donations and sponsoring.





Terms and Conditions


	free : GeoNames data is free, the data is available without costs.
	cc-by licence (creative commons attributions license). You should give credit to GeoNames when using data or web services with a link or another reference to GeoNames.
	commercial usage is allowed
	'as is' : The data is provided "as is" without warranty or any representation of accuracy, timeliness or completeness.
	10'000 credits daily limit per application (identified by the parameter 'username'), the hourly limit is 1000 credits. A credit is a web service request hit for most services. An exception is thrown when the limit is exceeded. 
	Service Level Agreement is available for our premium web services.\nPremium Data Subscription\nweb service documentation\nweb service documentation\nweb service client libraries\nweb service client libraries\nGeoName mailing list : geonames@googlegroups.com\ngeonames@googlegroups.com\nCommercial Support and Consulting\nCommercial Support and Consulting\nSources and Contributions\nSources : GeoNames is aggregating over hundred different data sources.\nAmbassadors : GeoNames Ambassadors help in many countries.\nWiki : A wiki allows to view the data and quickly fix error and add missing places.\nDonations and Sponsoring : Costs for running GeoNames are covered by donations and sponsoring.\ndonations and sponsoring\nfree : GeoNames data is free, the data is available without costs.\ncc-by licence (creative commons attributions license). You should give credit to GeoNames when using data or web services with a link or another reference to GeoNames.\ncommercial usage is allowed\n'as is' : The data is provided "as is" without warranty or any representation of accuracy, timeliness or completeness.\n10'000 credits daily limit per application (identified by the parameter 'username'), the hourly limit is 1000 credits. A credit is a web service request hit for most services. An exception is thrown when the limit is exceeded.\nService Level Agreement is available for our premium web services.\ninfo@geonames.org



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nGeoNames Sitemap




 Search

 Postal Code Search

 Wikipedia

	
		Wikipedia overview
		Wikipedia search
		Wikipedia on googlemaps
	

 GoogleEarth-Networklink.kml (opens in GoogleEarth)

 Recent Modifications

 GeoNames Semantic Web Ontology and Web Services
 
 Donations and Sponsors

webservice

	
		Webservice Overview
		Premium Web Services
                Reverse Geocoding
		JSON services
		Wikipedia Webservices

		Webservice Exception Format (XML,JSON)

		RSS to GeoRSS converter
	
		Featurecodes
		Admin Code 1
	



about, blog, forum, mailinglist

	
		About GeoNames
                User Manual
		GeoNames Forum
		GeoNames Blog
		GeoNames Mailing List
	


 Countries

 Country Borders

 Feature Statistic


Software Libraries

	
                 GeoNames source code
		 Other languages : Perl, Ruby, PHP etc
	


Services and Products

	
		 Consulting Services
		 Reverse Geocoding Package for the US
		 International Reverse Geocoding
	


 Publications\nWikipedia

	
		Wikipedia overview
		Wikipedia search
		Wikipedia on googlemaps\nWikipedia on googlemaps\nWikipedia on googlemaps\nGoogleEarth-Networklink.kml (opens in GoogleEarth)\nGoogleEarth-Networklink.kml\nGeoNames Semantic Web Ontology and Web Services\nGeoNames Semantic Web Ontology and Web Services\nDonations and Sponsors\nDonations and Sponsors\nwebservice

	
		Webservice Overview
		Premium Web Services
                Reverse Geocoding
		JSON services
		Wikipedia Webservices

		Webservice Exception Format (XML,JSON)

		RSS to GeoRSS converter
	
		Featurecodes
		Admin Code 1\nWikipedia Webservices\nWikipedia Webservices\nWebservice Exception Format (XML,JSON)\nWebservice Exception Format\nRSS to GeoRSS converter\nRSS to GeoRSS converter\nabout, blog, forum, mailinglist

	
		About GeoNames
                User Manual
		GeoNames Forum
		GeoNames Blog
		GeoNames Mailing List\nGeoNames Mailing List\nGeoNames Mailing List\nSoftware Libraries

	
                 GeoNames source code
		 Other languages : Perl, Ruby, PHP etc\nOther languages : Perl, Ruby, PHP etc\nOther languages : Perl, Ruby, PHP etc\nServices and Products

	
		 Consulting Services
		 Reverse Geocoding Package for the US
		 International Reverse Geocoding\nServices and Products\nReverse Geocoding Package for the US\nReverse Geocoding Package\nInternational Reverse Geocoding\nInternational Reverse Geocoding\nCreative Commons Attribution 3.0 License\ninfo@geonames.org 


GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nsearch 
     
   

   
login\nGeoNames user account\nLogin


Username
Password

 remember me on this computer





[I forgot my password]\nremember me on this computer\nor create a new user account


Usernameusername may only include characters, digits and underscore

Email
Confirm Email
Password

Confirm password\nor create a new user account\nusername may only include characters, digits and underscore\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nall countries  Afghanistan Albania Algeria American Samoa Andorra Angola Anguilla Antarctica Antigua and Barbuda Argentina Armenia Aruba Australia Austria Azerbaijan Bahamas Bahrain Bangladesh Barbados Belarus Belgium Belize Benin Bermuda Bhutan Bolivia Bonaire, Sint Eustatius, and Saba Bosnia and Herzegovina Botswana Bouvet Island Brazil British Indian Ocean Territory British Virgin Islands Brunei Bulgaria Burkina Faso Burundi Cabo Verde Cambodia Cameroon Canada Cayman Islands Central African Republic Chad Chile China Christmas Island Cocos (Keeling) Islands Colombia Comoros Congo Republic Cook Islands Costa Rica Croatia Cuba Curaçao Cyprus Czechia DR Congo Denmark Djibouti Dominica Dominican Republic Ecuador Egypt El Salvador Equatorial Guinea Eritrea Estonia Eswatini Ethiopia Falkland Islands Faroe Islands Fiji Finland France French Guiana French Polynesia French Southern Territories Gabon Georgia Germany Ghana Gibraltar Greece Greenland Grenada Guadeloupe Guam Guatemala Guernsey Guinea Guinea-Bissau Guyana Haiti Heard and McDonald Islands Honduras Hong Kong Hungary Iceland India Indonesia Iran Iraq Ireland Isle of Man Israel Italy Ivory Coast Jamaica Japan Jersey Jordan Kazakhstan Kenya Kiribati Kosovo Kuwait Kyrgyzstan Laos Latvia Lebanon Lesotho Liberia Libya Liechtenstein Lithuania Luxembourg Macao Madagascar Malawi Malaysia Maldives Mali Malta Marshall Islands Martinique Mauritania Mauritius Mayotte Mexico Micronesia Moldova Monaco Mongolia Montenegro Montserrat Morocco Mozambique Myanmar Namibia Nauru Nepal New Caledonia New Zealand Nicaragua Niger Nigeria Niue Norfolk Island North Korea North Macedonia Northern Mariana Islands Norway Oman Pakistan Palau Palestine Panama Papua New Guinea Paraguay Peru Philippines Pitcairn Islands Poland Portugal Puerto Rico Qatar Romania Russia Rwanda Réunion Saint Barthélemy Saint Helena Saint Lucia Saint Martin Saint Pierre and Miquelon Samoa San Marino Saudi Arabia Senegal Serbia Seychelles Sierra Leone Singapore Sint Maarten Slovakia Slovenia Solomon Islands Somalia South Africa South Georgia and South Sandwich Islands South Korea South Sudan Spain Sri Lanka St Kitts and Nevis St Vincent and Grenadines Sudan Suriname Svalbard and Jan Mayen Sweden Switzerland Syria São Tomé and Príncipe Taiwan Tajikistan Tanzania Thailand The Gambia The Netherlands Timor-Leste Togo Tokelau Tonga Trinidad and Tobago Tunisia Turkmenistan Turks and Caicos Islands Tuvalu Türkiye U.S. Outlying Islands U.S. Virgin Islands Uganda Ukraine United Arab Emirates United Kingdom United States Uruguay Uzbekistan Vanuatu Vatican City Venezuela Vietnam Wallis and Futuna Western Sahara Yemen Zambia Zimbabwe Åland
Feature Class: 

all
country, state, region,...
stream, lake, ...
parks,area, ...
city, village,...
road, railroad 
spot, building, farm
mountain,hill,rock,... 
undersea
forest,heath,...
 
Continent: 

all
Europe
Africa
Asia
Oceania
North America
South America
 
fuzzy search : 



NameCountryFeature classLatitudeLongitude
1 Essington Company 1 Fire Station39.8636-75.299United States, PennsylvaniaDelaware > Tinicum Township
building(s)elevation 6m
N 39° 51′ 48''W 75° 17′ 56''
2 Essington Post Office39.8662-75.2969United States, PennsylvaniaDelaware > Tinicum Township
post officeelevation 6m
N 39° 51′ 58''W 75° 17′ 48''
3 Estate of Dublin40.16-75.1913United States, PennsylvaniaMontgomery > Upper Dublin Township
populated placeelevation 101m
N 40° 9′ 36''W 75° 11′ 28''
4 Estates at Cedar Hill40.1976-75.2213United States, PennsylvaniaMontgomery > Lower Gwynedd Township
populated placeelevation 111m
N 40° 11′ 51''W 75° 13′ 16''
5 Estates at Collegeville40.1856-75.4733United States, PennsylvaniaMontgomery > Borough of Collegeville
populated placeelevation 82m
N 40° 11′ 8''W 75° 28′ 23''
6 Estates at Faraway Farm40.184-75.4813United States, PennsylvaniaMontgomery > Upper Providence Township
populated placeelevation 85m
N 40° 11′ 2''W 75° 28′ 52''
7 Estates at Tall Oaks40.3385-75.2922United States, PennsylvaniaBucks > Hilltown Township
populated placeelevation 129m
N 40° 20′ 18''W 75° 17′ 31''
8 Estates at Whitemarsh40.0631-75.2611United States, PennsylvaniaMontgomery > Whitemarsh Township
populated placeelevation 72m
N 40° 3′ 47''W 75° 15′ 39''
9 Estates of Horsham Lea40.2031-75.217United States, PennsylvaniaMontgomery > Horsham Township
populated placeelevation 116m
N 40° 12′ 11''W 75° 13′ 1''
10 Estates of Montgomery40.2279-75.2086United States, PennsylvaniaMontgomery > Montgomery Township
populated placeelevation 109m
N 40° 13′ 40''W 75° 12′ 30''
11 Evangelical Congregation Cemetery40.1873-75.3566United States, PennsylvaniaMontgomery > Worcester Township
cemeteryelevation 112m
N 40° 11′ 14''W 75° 21′ 23''
12 Evangelical Lutheran of the Living Word Church40.125-75.1341United States, PennsylvaniaMontgomery > Abington Township
churchelevation 83m
N 40° 7′ 30''W 75° 8′ 2''
13 Evansburg Crossing40.186-75.4283United States, PennsylvaniaMontgomery > Lower Providence Township
populated placeelevation 67m
N 40° 11′ 9''W 75° 25′ 41''
14 Evansburg Free Library40.1801-75.4286United States, PennsylvaniaMontgomery > Lower Providence Township
libraryelevation 65m
N 40° 10′ 48''W 75° 25′ 42''
15 Evansburg State Park Nature Center40.2001-75.4012United States, PennsylvaniaMontgomery
parkelevation 52m
N 40° 12′ 0''W 75° 24′ 4''
16 Evansburg United Methodist Church40.1826-75.4352United States, PennsylvaniaMontgomery > Lower Providence Township
churchelevation 63m
N 40° 10′ 57''W 75° 26′ 6''
17 Evergreen Manor Park40.1397-75.1344United States, PennsylvaniaMontgomery
parkelevation 92m
N 40° 8′ 22''W 75° 8′ 3''
18 Executive Estates Park40.0672-75.3464United States, PennsylvaniaMontgomery > Upper Merion Township
populated placeelevation 46m
N 40° 4′ 1''W 75° 20′ 47''
19 Executive House (subdivision)40.2341-75.2756United States, PennsylvaniaMontgomery > Borough of Lansdale
section of populated placeelevation 125m
N 40° 14′ 2''W 75° 16′ 32''
20 Fabric Row Shopping Center39.9396-75.1492United States, PennsylvaniaPhiladelphia > City of Philadelphia
mallelevation 7m
N 39° 56′ 22''W 75° 8′ 57''
21 Fair Acres Farm39.9231-75.5624United States, PennsylvaniaChester > Thornbury Township
populated placeelevation 123m
N 39° 55′ 23''W 75° 33′ 44''
22 Fair Meadow39.9145-75.602United States, PennsylvaniaChester > Birmingham Township
populated placeelevation 89m
N 39° 54′ 52''W 75° 36′ 7''
23 Faircrest Farms40.24-75.501United States, PennsylvaniaMontgomery > Limerick Township
populated placeelevation 97m
N 40° 14′ 24''W 75° 30′ 3''
24 Norristown Fire Department - Fairmount Fire Engine Company 2 - Station 27 - DFairmount Norristown Station 27-D Fire Station,Norristown Fire Department - Fairmount Engine Company...40.1176756-75.350406United States, PennsylvaniaMontgomery > Borough of Norristown
building(s)elevation 29m
N 40° 7′ 3''W 75° 21′ 1''
25 Fairmount Park Athletic Field39.9908-75.1923United States, PennsylvaniaPhiladelphia
parkelevation 33m
N 39° 59′ 26''W 75° 11′ 32''
26 Fairmount Substation 1250 Fire Station40.2408-75.2697United States, PennsylvaniaMontgomery > Borough of Lansdale
building(s)elevation 125m
N 40° 14′ 26''W 75° 16′ 10''
27 Fairmount Fire Company Station 14Fairmount Fire Company,Fairmount Fire Company Station 14,Fairmount-Lansdale Station 1240 Fire Statio...40.2415855-75.2877117United States, PennsylvaniaMontgomery > Borough of Lansdale
building(s)elevation 111m
N 40° 14′ 29''W 75° 17′ 15''
28 Fairview Christian Academy40.1628-75.3849United States, PennsylvaniaMontgomery > Worcester Township
schoolelevation 139m
N 40° 9′ 46''W 75° 23′ 5''
29 Fairview Village Church of the Nazarene40.1635-75.3841United States, PennsylvaniaMontgomery > Worcester Township
churchelevation 138m
N 40° 9′ 48''W 75° 23′ 2''
30 Fairview Village Post Office40.1623-75.3804United States, PennsylvaniaMontgomery > Worcester Township
post officeelevation 144m
N 40° 9′ 44''W 75° 22′ 49''
31 West Chester Fire Department / Fame Fire Company 3 Station 53Fame Company 3 Fire Station,West Chester Fire Department / Fame Fire Company 3,West Chester Fire Dep...39.9529018-75.592487United States, PennsylvaniaChester > West Goshen Township
building(s)elevation 125m
N 39° 57′ 10''W 75° 35′ 32''
32 Far-A-Field40.1477-75.2777United States, PennsylvaniaMontgomery > Township of Whitpain
populated placeelevation 100m
N 40° 8′ 51''W 75° 16′ 39''
33 Feasterville Fire Company Station 1Feasterville Company 1 Fire Station,Feasterville Fire Company Station 140.1518878-75.0032769United States, PennsylvaniaBucks > Lower Southampton Township
building(s)elevation 75m
N 40° 9′ 6''W 75° 0′ 11''
34 Feasterville Plaza Shopping Center40.1516-75.0008United States, PennsylvaniaBucks > Lower Southampton Township
mallelevation 67m
N 40° 9′ 5''W 75° 0′ 2''
35 Federal Lands Reuse Authority40.2032-75.0748United States, PennsylvaniaBucks > Borough of Ivyland
building(s)elevation 97m
N 40° 12′ 11''W 75° 4′ 29''
36 Fels High School40.0409-75.0865United States, PennsylvaniaPhiladelphia > City of Philadelphia
schoolelevation 30m
N 40° 2′ 27''W 75° 5′ 11''
37 Felton Hose and Chemical Company 139.8462-75.3972United States, PennsylvaniaDelaware > Chester Township
building(s)elevation 25m
N 39° 50′ 46''W 75° 23′ 49''
38 Feltonville Community Center40.0219-75.1212United States, PennsylvaniaPhiladelphia > City of Philadelphia
building(s)elevation 31m
N 40° 1′ 18''W 75° 7′ 16''
39 Fern Rock Community Baptist School40.0558-75.1417United States, PennsylvaniaPhiladelphia > City of Philadelphia
schoolelevation 70m
N 40° 3′ 20''W 75° 8′ 30''
40 Fern Rock Transportation Center  40.0404-75.1383United States, PennsylvaniaPhiladelphia > City of Philadelphia
building(s)elevation 51m
N 40° 2′ 25''W 75° 8′ 17''
41 Fern Village Park40.1763-75.0877United States, PennsylvaniaMontgomery
parkelevation 85m
N 40° 10′ 34''W 75° 5′ 15''
42 Fieldpoint39.9008-75.5798United States, PennsylvaniaChester > Birmingham Township
populated placeelevation 137m
N 39° 54′ 2''W 75° 34′ 47''
43 First Baptist Church of Aston39.8499-75.4263United States, PennsylvaniaDelaware > Upper Chichester Township
churchelevation 40m
N 39° 50′ 59''W 75° 25′ 34''
44 First Presbyterian of Port Kennedy Church40.1033-75.4194United States, PennsylvaniaMontgomery > Upper Merion Township
churchelevation 35m
N 40° 6′ 11''W 75° 25′ 9''
45 West Chester Fire Department / First West Chester Fire Company 1 Station 51First West Chester Fire Station,West Chester Fire Department / First West Chester Fire Company 1,Wes...39.952013-75.6155879United States, PennsylvaniaChester > East Bradford Township
building(s)elevation 116m
N 39° 57′ 7''W 75° 36′ 56''
46 Fischers Park40.2275-75.3591United States, PennsylvaniaMontgomery
parkelevation 65m
N 40° 13′ 39''W 75° 21′ 32''
47 Fish Game and Forestry Association40.3489-75.4106United States, PennsylvaniaMontgomery > Salford Township
building(s)elevation 146m
N 40° 20′ 56''W 75° 24′ 38''
48 Flourtown Post Office40.1132-75.2116United States, PennsylvaniaMontgomery > Whitemarsh Township
post officeelevation 49m
N 40° 6′ 47''W 75° 12′ 41''
49 Flourtown Fire Company Station 6  Flourtown Fire Company,Flourtown Fire Company Station 6,Flourtown Station 6 Fire Station40.1057794-75.2129441United States, PennsylvaniaMontgomery > Springfield Township
building(s)elevation 55m
N 40° 6′ 20''W 75° 12′ 46''
50 Folcroft Fire Company Station 1Folcroft Fire Company Station 1,Folcroft Fire Station39.8944778-75.2779669United States, PennsylvaniaDelaware > Borough of Folcroft
building(s)elevation 18m
N 39° 53′ 40''W 75° 16′ 40''


next >\nall
country, state, region,...
stream, lake, ...
parks,area, ...
city, village,...
road, railroad 
spot, building, farm
mountain,hill,rock,... 
undersea
forest,heath,...\nall
Europe
Africa
Asia
Oceania
North America
South America\nEssington Company 1 Fire Station39.8636-75.299\nEssington Company 1 Fire Station\nUnited States, PennsylvaniaDelaware > Tinicum Township\nbuilding(s)elevation 6m\nEssington Post Office39.8662-75.2969\nEssington Post Office\nUnited States, PennsylvaniaDelaware > Tinicum Township\npost officeelevation 6m\nEstate of Dublin40.16-75.1913\nUnited States, PennsylvaniaMontgomery > Upper Dublin Township\npopulated placeelevation 101m\nEstates at Cedar Hill40.1976-75.2213\nEstates at Cedar Hill\nUnited States, PennsylvaniaMontgomery > Lower Gwynedd Township\npopulated placeelevation 111m\nEstates at Collegeville40.1856-75.4733\nEstates at Collegeville\nUnited States, PennsylvaniaMontgomery > Borough of Collegeville\npopulated placeelevation 82m\nEstates at Faraway Farm40.184-75.4813\nEstates at Faraway Farm\nUnited States, PennsylvaniaMontgomery > Upper Providence Township\npopulated placeelevation 85m\nEstates at Tall Oaks40.3385-75.2922\nUnited States, PennsylvaniaBucks > Hilltown Township\npopulated placeelevation 129m\nEstates at Whitemarsh40.0631-75.2611\nEstates at Whitemarsh\nUnited States, PennsylvaniaMontgomery > Whitemarsh Township\npopulated placeelevation 72m\nEstates of Horsham Lea40.2031-75.217\nEstates of Horsham Lea\nUnited States, PennsylvaniaMontgomery > Horsham Township\npopulated placeelevation 116m\nEstates of Montgomery40.2279-75.2086\nEstates of Montgomery\nUnited States, PennsylvaniaMontgomery > Montgomery Township\npopulated placeelevation 109m\nEvangelical Congregation Cemetery40.1873-75.3566\nEvangelical Congregation Cemetery\nUnited States, PennsylvaniaMontgomery > Worcester Township\ncemeteryelevation 112m\nEvangelical Lutheran of the Living Word Church40.125-75.1341\nEvangelical Lutheran of the Living Word Church\nUnited States, PennsylvaniaMontgomery > Abington Township\nEvansburg Crossing40.186-75.4283\nUnited States, PennsylvaniaMontgomery > Lower Providence Township\npopulated placeelevation 67m\nEvansburg Free Library40.1801-75.4286\nEvansburg Free Library\nUnited States, PennsylvaniaMontgomery > Lower Providence Township\nEvansburg State Park Nature Center40.2001-75.4012\nEvansburg State Park Nature Center\nUnited States, PennsylvaniaMontgomery\nEvansburg United Methodist Church40.1826-75.4352\nEvansburg United Methodist Church\nUnited States, PennsylvaniaMontgomery > Lower Providence Township\nEvergreen Manor Park40.1397-75.1344\nUnited States, PennsylvaniaMontgomery\nExecutive Estates Park40.0672-75.3464\nExecutive Estates Park\nUnited States, PennsylvaniaMontgomery > Upper Merion Township\npopulated placeelevation 46m\nExecutive House (subdivision)40.2341-75.2756\nExecutive House (subdivision)\nUnited States, PennsylvaniaMontgomery > Borough of Lansdale\nsection of populated placeelevation 125m\nFabric Row Shopping Center39.9396-75.1492\nFabric Row Shopping Center\nUnited States, PennsylvaniaPhiladelphia > City of Philadelphia\nFair Acres Farm39.9231-75.5624\nUnited States, PennsylvaniaChester > Thornbury Township\npopulated placeelevation 123m\nFair Meadow39.9145-75.602\nUnited States, PennsylvaniaChester > Birmingham Township\npopulated placeelevation 89m\nFaircrest Farms40.24-75.501\nUnited States, PennsylvaniaMontgomery > Limerick Township\npopulated placeelevation 97m\nNorristown Fire Department - Fairmount Fire Engine Company 2 - Station 27 - DFairmount Norristown Station 27-D Fire Station,Norristown Fire Department - Fairmount Engine Company...40.1176756-75.350406\nNorristown Fire Department - Fairmount Fire Engine Company 2 - Station 27 - D\nUnited States, PennsylvaniaMontgomery > Borough of Norristown\nbuilding(s)elevation 29m\nFairmount Park Athletic Field39.9908-75.1923\nFairmount Park Athletic Field\nUnited States, PennsylvaniaPhiladelphia\nFairmount Substation 1250 Fire Station40.2408-75.2697\nFairmount Substation 1250 Fire Station\nUnited States, PennsylvaniaMontgomery > Borough of Lansdale\nbuilding(s)elevation 125m\nFairmount Fire Company Station 14Fairmount Fire Company,Fairmount Fire Company Station 14,Fairmount-Lansdale Station 1240 Fire Statio...40.2415855-75.2877117\nFairmount Fire Company Station 14\n40.2415855-75.2877117\nUnited States, PennsylvaniaMontgomery > Borough of Lansdale\nbuilding(s)elevation 111m\nFairview Christian Academy40.1628-75.3849\nFairview Christian Academy\nUnited States, PennsylvaniaMontgomery > Worcester Township\nFairview Village Church of the Nazarene40.1635-75.3841\nFairview Village Church of the Nazarene\nUnited States, PennsylvaniaMontgomery > Worcester Township\nFairview Village Post Office40.1623-75.3804\nFairview Village Post Office\nUnited States, PennsylvaniaMontgomery > Worcester Township\npost officeelevation 144m\nWest Chester Fire Department / Fame Fire Company 3 Station 53Fame Company 3 Fire Station,West Chester Fire Department / Fame Fire Company 3,West Chester Fire Dep...39.9529018-75.592487\nWest Chester Fire Department / Fame Fire Company 3 Station 53\nUnited States, PennsylvaniaChester > West Goshen Township\nbuilding(s)elevation 125m\nFar-A-Field40.1477-75.2777\nUnited States, PennsylvaniaMontgomery > Township of Whitpain\npopulated placeelevation 100m\nFeasterville Fire Company Station 1Feasterville Company 1 Fire Station,Feasterville Fire Company Station 140.1518878-75.0032769\nFeasterville Fire Company Station 1\n40.1518878-75.0032769\nUnited States, PennsylvaniaBucks > Lower Southampton Township\nbuilding(s)elevation 75m\nFeasterville Plaza Shopping Center40.1516-75.0008\nFeasterville Plaza Shopping Center\nUnited States, PennsylvaniaBucks > Lower Southampton Township\nFederal Lands Reuse Authority40.2032-75.0748\nFederal Lands Reuse Authority\nUnited States, PennsylvaniaBucks > Borough of Ivyland\nbuilding(s)elevation 97m\nFels High School40.0409-75.0865\nUnited States, PennsylvaniaPhiladelphia > City of Philadelphia\nFelton Hose and Chemical Company 139.8462-75.3972\nFelton Hose and Chemical Company 1\nUnited States, PennsylvaniaDelaware > Chester Township\nbuilding(s)elevation 25m\nFeltonville Community Center40.0219-75.1212\nFeltonville Community Center\nUnited States, PennsylvaniaPhiladelphia > City of Philadelphia\nbuilding(s)elevation 31m\nFern Rock Community Baptist School40.0558-75.1417\nFern Rock Community Baptist School\nUnited States, PennsylvaniaPhiladelphia > City of Philadelphia\nFern Rock Transportation Center  40.0404-75.1383\nFern Rock Transportation Center\nUnited States, PennsylvaniaPhiladelphia > City of Philadelphia\nbuilding(s)elevation 51m\nFern Village Park40.1763-75.0877\nUnited States, PennsylvaniaMontgomery\nFieldpoint39.9008-75.5798\nUnited States, PennsylvaniaChester > Birmingham Township\npopulated placeelevation 137m\nFirst Baptist Church of Aston39.8499-75.4263\nFirst Baptist Church of Aston\nUnited States, PennsylvaniaDelaware > Upper Chichester Township\nFirst Presbyterian of Port Kennedy Church40.1033-75.4194\nFirst Presbyterian of Port Kennedy Church\nUnited States, PennsylvaniaMontgomery > Upper Merion Township\nWest Chester Fire Department / First West Chester Fire Company 1 Station 51First West Chester Fire Station,West Chester Fire Department / First West Chester Fire Company 1,Wes...39.952013-75.6155879\nWest Chester Fire Department / First West Chester Fire Company 1 Station 51\nUnited States, PennsylvaniaChester > East Bradford Township\nbuilding(s)elevation 116m\nFischers Park40.2275-75.3591\nUnited States, PennsylvaniaMontgomery\nFish Game and Forestry Association40.3489-75.4106\nFish Game and Forestry Association\nUnited States, PennsylvaniaMontgomery > Salford Township\nbuilding(s)elevation 146m\nFlourtown Post Office40.1132-75.2116\nFlourtown Post Office\nUnited States, PennsylvaniaMontgomery > Whitemarsh Township\npost officeelevation 49m\nFlourtown Fire Company Station 6  Flourtown Fire Company,Flourtown Fire Company Station 6,Flourtown Station 6 Fire Station40.1057794-75.2129441\nFlourtown Fire Company Station 6\n40.1057794-75.2129441\nUnited States, PennsylvaniaMontgomery > Springfield Township\nbuilding(s)elevation 55m\nFolcroft Fire Company Station 1Folcroft Fire Company Station 1,Folcroft Fire Station39.8944778-75.2779669\nFolcroft Fire Company Station 1\n39.8944778-75.2779669\nUnited States, PennsylvaniaDelaware > Borough of Folcroft\nbuilding(s)elevation 18m\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nsearch 
     
   

   
login\nBosnia and Herzegovina\nBosnia and Herzegovina\nBonaire, Sint Eustatius, and Saba\nBonaire, Sint Eustatius, and Saba\nCocos (Keeling) Islands\nCocos (Keeling) Islands\nCentral African Republic\nCentral African Republic\nSouth Georgia and South Sandwich Islands\nSouth Georgia and South Sandwich Islands\nHeard and McDonald Islands\nHeard and McDonald Islands\nBritish Indian Ocean Territory\nBritish Indian Ocean Territory\nNorthern Mariana Islands\nNorthern Mariana Islands\nSaint Pierre and Miquelon\nSaint Pierre and Miquelon\nSvalbard and Jan Mayen\nSvalbard and Jan Mayen\nSão Tomé and Príncipe\nSão Tomé and Príncipe\nTurks and Caicos Islands\nTurks and Caicos Islands\nFrench Southern Territories\nFrench Southern Territories\nU.S. Outlying Islands\nU.S. Outlying Islands\nSt Vincent and Grenadines\nSt Vincent and Grenadines\nBritish Virgin Islands\nBritish Virgin Islands\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nGeoNames Country Statistic\nNames per1000 Inhabitants\nBosnia and Herzegovina\nBosnia and Herzegovina\nCentral African Republic\nCentral African Republic\nSvalbard and Jan Mayen\nSvalbard and Jan Mayen\nFrench Southern Territories\nFrench Southern Territories\nSão Tomé and Príncipe\nSão Tomé and Príncipe\nNorthern Mariana Islands\nNorthern Mariana Islands\nSouth Georgia and South Sandwich Islands\nSouth Georgia and South Sandwich Islands\nBritish Virgin Islands\nBritish Virgin Islands\nSt Vincent and Grenadines\nSt Vincent and Grenadines\nTurks and Caicos Islands\nTurks and Caicos Islands\nSaint Pierre and Miquelon\nSaint Pierre and Miquelon\nBonaire, Sint Eustatius, and Saba\nBonaire, Sint Eustatius, and Saba\nU.S. Outlying Islands\nU.S. Outlying Islands\nBritish Indian Ocean Territory\nBritish Indian Ocean Territory\nHeard and McDonald Islands\nHeard and McDonald Islands\nCocos (Keeling) Islands\nCocos (Keeling) Islands\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nsearch 
     
   

   
login\nremove pop 0,publicTags:null>belong.2.us.as.muslim\npop 3,081 > 10,620 (244% diff)\npop 2,320,241 > 1,433,861 (38% diff)\nadd name :link,https://en.wikipedia.org/wiki/Stara_Woda\nadd name :de,Altwasser\npop 1,217,851 > 217,851 (82% diff)\nadd name :link,https://en.wikipedia.org/wiki/Bartodzieje,_Lower_Silesian_Voivodeship\nadd name :de,Zeippern\nupdate name :en,Doski>Doski Neighborhood\nadd name :link,https://commons.wikimedia.org/wiki/Data:Japan/Fukuoka-shi/Ch%C5%AB%C5%8D-ku/Daimy%C5%8D_1-ch%C5%8Dme/Art_Ks_Daimy%C5%8D.map\nadd name :post,810-0041\nadd name :en,Art K's Daimyō\nadd name :ja,アートケイズだいみやう(hc)\nadd name :ja,アートケイズだいみょう(c)\nadd name :ja,アートケイズ大名(p)\nadd name :link,https://en.wikipedia.org/wiki/Krzekot%C3%B3w\nadd name :de,Groß Vorwerk\nadd name :link,https://en.wikipedia.org/wiki/Moszowice\nadd name :de,Mosswitz\npop 1,868 > 2,000 (7% diff),publicTags:null>city in southernmost the world\nadd name :link,https://en.wikipedia.org/wiki/Rej%C3%B3w\nadd name :link,https://en.wikipedia.org/wiki/Soko%C5%82%C3%B3w,_Lubusz_Voivodeship\nRue Agricol-Perdiguier\nRue Agricol-Perdiguier\nÉglise Saint-François-Xavier\nÉglise Saint-François-Xavier\nEdgewood Middle School\nEdgewood Middle School\nEdgewood Middle School\nEdgewood Middle School\nremove pop 0,name:Edgewood Middle School>Edgewood Community Center,featureCode:SCH>CTRCM\nNinety Six High School\nNinety Six High School\nNinety Six High School\nNinety Six High School\nname:Ninety Six High School>Ninety Six Wildcats Multiplex,featureCode:SCH>BDG\nÉglise Saint-François-Xavier\nÉglise Saint-François-Xavier\nÉglise Saint-François-Xavier\nÉglise Saint-François-Xavier\nadd name :link,https://en.wikipedia.org/wiki/Podbrzezie_G%C3%B3rne\nadd name :de,Obersiegersdorf\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nadd elevation 0,featureClass:H>L,featureCode:HBR>PRT\nHampton by Hilton Poznan Old Town\nHampton by Hilton Poznan Old Town\nPort of St. Peter Port\nPort of St. Peter Port\nable_macaroni_pacemaker\nable_macaroni_pacemaker\nadd name :link,https://en.wikipedia.org/wiki/Jarysz%C3%B3w,_Lubusz_Voivodeship\nadd name :de,Gersdorf\nadd name :wkdt,Q101112546\nupdate name : Geskilåmbåla  fkv (>h)\nupdate name : Ulilåmbåla  fkv (>h)\nremove pop 0,name:Ulilåmbåla>Ylilompola\nadd name :wkdt,Q101114554\nremove pop 0,name:Geskilåmbåla>Keskilompola\nadd name :wkdt,Q35421713\nadd name :bg,Санте Спа Хотел\nadd name :link,https://spahotelsante.com/bg\nremove pop 0,name:Låmbåla>Surotluoppal\nupdate name : Surutluobbal  se (>h)\nupdate name : Låmbåla  fkv (>h)\nadd name :wkdt,Q134300336\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nAbout GeoNames



The GeoNames geographical database is available
for download free of charge under a creative commons attribution license. It
contains over 25 million geographical names and consists of over 12 million unique
features whereof 4.8 million populated places and 16 million alternate names. All
features are categorized into one out of nine feature classes and further subcategorized
into one out of 645 feature codes. (more statistics ...). 

The data is accessible free of charge through a number of webservices and a daily database export. 

GeoNames is integrating geographical data such as names of places in various languages, elevation, population and others from various sources. All lat/long coordinates are in WGS84 (World Geodetic System 1984). Users may manually edit, correct and add new names using a user friendly wiki interface.




Figure : GeoNames Feature Density Map



Support GeoNames

We accept donations : 








Press Coverage and Quotations



 Programmableweb 23 May 2012 - GeoNames most popular API

 TechCrunch 26 May 2007

 Linuxworld Dec 2006 put geonames.org on a list of "Ten Web 2.0 APIs you can really use", just behind googlmaps : The GeoNames database is one of the best available, based on multiple data sets, and it uses a liberal Creative Commons Attribution license for its data output. It's also quick and responsive.

 Sir Tim Berners-Lee : This is a tremendous set of data you have there.

 Nature 13. Feb 2006 : ... we hope that database providers will support initiatives, such as the GeoNames Forum.


 google.dirson.com 25. Feb 2006 :  ... una de las mejores herramientas que hemos visto uniendo 'Google Maps' y Ajax.

 barrapunto.com 3. March 2006 : ... GeoNames los ha organizado en una base de datos brillante y abierta y, además corregible



more blogs ...




Most important sources



 nga : National Geospatial-Intelligence Agency's (NGA) and the U.S. Board on Geographic Names
 gnis : U.S. Geological Survey Geographic Names Information System (names in US). 

 Ordnance Survey OpenData 

gazetteer: Contains Ordnance Survey data Crown copyright and database right 2010.

gazetteer: Contains public sector information licensed under the Open Government Licence v1.0.

postal codes: Contains Royal Mail data Royal Mail copyright and database right 2010.
  
 GeoBase - Canadian Geographical Names (names in CA)
 gtopo30 (elevation)


more data sources ...




Features for online users


 search for names with our fulltextsearch (table based or displayed on map)
 browse capitals, highest mountains and largest cities on map

 browse names on map and show/hide feature classes and codes

 bookmark maps
 send maps via email
 export names as character separated values (csv) file or as png image 
 edit names (wiki)
 add new names to the database (for registered users)
 geotagging of names (for registered users)




Wiki

In order to allow users to improve and correct data browser based update possibilities are available. The update rights of the anonymous (not logged in) user are restricted and records may be locked for update depending on the userlevel.(user manual)


The most recent changes are available here. 






GeoNames Users



 Apple SnowLeopard, Ubuntu

 Bing Maps, Microsoft Popfly, Multimap

 Adidas and Nike

 ESRI, DigitalGlobe and Spot Image

 New York Times, BBC, Norwegian Broadcasting Corp, km42 Spiegel Online

 US Geological Survey

 slide.com

 Nokia



more users ...




GeoNames Messageboard, Mailinglist and Blog



GeoNames messageboard
GeoNames mailing list : geonames@googlegroups.com
GeoNames Blog








GeoNames Webservice Clients and Plugins

Client libraries developed by the community are available in a number of programming languages such as Java, Ruby, Python, Perl and even Lisp. 



GeoNames was founded by Marc Wick. You can reach him at marc@geonames.org

GeoNames is a project of Unxos GmbH, Tutilostrasse 17d, 9011 St. Gallen, Switzerland.\nGeoNames is integrating geographical data such as names of places in various languages, elevation, population and others from various sources. All lat/long coordinates are in WGS84 (World Geodetic System 1984). Users may manually edit, correct and add new names using a user friendly wiki interface.\nFigure : GeoNames Feature Density Map\nPress Coverage and Quotations\nProgrammableweb 23 May 2012 - GeoNames most popular API\nProgrammableweb 23 May 2012 - GeoNames most popular API\nTechCrunch 26 May 2007\nTechCrunch 26 May 2007\nLinuxworld Dec 2006 put geonames.org on a list of "Ten Web 2.0 APIs you can really use", just behind googlmaps : The GeoNames database is one of the best available, based on multiple data sets, and it uses a liberal Creative Commons Attribution license for its data output. It's also quick and responsive.\nSir Tim Berners-Lee : This is a tremendous set of data you have there.\nNature 13. Feb 2006 : ... we hope that database providers will support initiatives, such as the GeoNames Forum.\ngoogle.dirson.com 25. Feb 2006 :  ... una de las mejores herramientas que hemos visto uniendo 'Google Maps' y Ajax.\ngoogle.dirson.com 25. Feb 2006\nbarrapunto.com 3. March 2006 : ... GeoNames los ha organizado en una base de datos brillante y abierta y, además corregible\nbarrapunto.com 3. March 2006\nMost important sources\nnga : National Geospatial-Intelligence Agency's (NGA) and the U.S. Board on Geographic Names\ngnis : U.S. Geological Survey Geographic Names Information System (names in US).\nOrdnance Survey OpenData 

gazetteer: Contains Ordnance Survey data Crown copyright and database right 2010.

gazetteer: Contains public sector information licensed under the Open Government Licence v1.0.

postal codes: Contains Royal Mail data Royal Mail copyright and database right 2010.\nOrdnance Survey OpenData\npublic sector information\nGeoBase - Canadian Geographical Names (names in CA)\nGeoBase - Canadian Geographical Names\nmore data sources ...\nFeatures for online users\nsearch for names with our fulltextsearch (table based or displayed on map)\nbrowse capitals, highest mountains and largest cities on map\nbrowse names on map and show/hide feature classes and codes\nexport names as character separated values (csv) file or as png image\nadd new names to the database (for registered users)\ngeotagging of names (for registered users)\nApple SnowLeopard, Ubuntu\nBing Maps, Microsoft Popfly, Multimap\nESRI, DigitalGlobe and Spot Image\nNew York Times, BBC, Norwegian Broadcasting Corp, km42 Spiegel Online\nNorwegian Broadcasting Corp\nGeoNames Messageboard, Mailinglist and Blog\nGeoNames messageboard\nGeoNames messageboard\nGeoNames mailing list : geonames@googlegroups.com\nGeoNames mailing list\ngeonames@googlegroups.com\nGeoNames Webservice Clients and Plugins\nGeoNames is a project of Unxos GmbH, Tutilostrasse 17d, 9011 St. Gallen, Switzerland.\nCreative Commons Attribution 4.0 License\ninfo@geonames.org  

GeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum

•
Blog

•
Sitemap\nGeoNames Home
•
Postal Codes
•

Download / Webservice
•
Forum

•
Blog

•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About\nDownload / Webservice\nsearch 
     
   

   
login\nGeoNames Data Sources\nhttps://data.abudhabi\nhttps://data.abudhabi\nhttps://www.dubaipulse.gov.ae/\nhttps://www.dubaipulse.gov.ae/\nDubai Statistics Center\nhttps://www.dsc.gov.ae\nhttps://www.dsc.gov.ae\nMinistry of Infrastructure Development\nhttps://www.moid.gov.ae\nhttps://www.moid.gov.ae\nAfghanistan Information Management Services\nhttp://www.aims.org.af/\nhttp://www.aims.org.af/\nInstituti i Statistikave\nhttp://www.instat.gov.al\nhttp://www.instat.gov.al\nThe Pineridge Group, Inc\nhttp://gis.tpginc.net/albania/\nhttp://gis.tpginc.net/albania/\nAUA Acopian Center for the Environment\nUK Antarctic Place-names Committee (APC)\nhttp://www.antarctica.ac.uk\nhttp://www.antarctica.ac.uk\nComposite Gazetteer of Antarctica\nhttps://data.buenosaires.gob.ar\nhttps://data.buenosaires.gob.ar\nFUENTE: Gobierno de la Ciudad Autónoma de Buenos Aires, 2017 April\nInstituto Geográfico Nacional\nhttp://www.ign.gob.ar/sig\nhttp://www.ign.gob.ar/sig\nNational Institute of Statistics and Census of Argentina\nhttp://www.indec.gov.ar/\nhttp://www.indec.gov.ar/\nBundesamt für Eich- und Vermessungswesen\nÖsterreichisches Adressregister, data of the record date 01.10.2018\nOffene Daten Österreich | data.gv.at\nOpen Data des Landes Kärnten\nhttp://data.ktn.gv.at\nhttp://data.ktn.gv.at\nOpen Government Data Graz\nhttps://data.graz.gv.at\nhttps://data.graz.gv.at\nhttp://www.land-oberoesterreich.gv.at/\nhttp://www.land-oberoesterreich.gv.at/\nSAGIS - Salzburger Geographisches Informationssystem\nhttp://www.salzburg.gv.at/\nhttp://www.salzburg.gv.at/\nhttp://www.noe.gv.at/\nhttp://www.noe.gv.at/\nhttps://www.data.gv.at/katalog/dataset/stadt-linz_statistischebezirkelinzab20140101\nhttps://www.data.gv.at/katalog/dataset/stadt-linz_statistischebezirkelinzab20140101\nDatenquelle: CC-BY-4.0: Stadt Linz - data.linz.gv.at\nhttp://www.statistik.at/\nhttp://www.statistik.at/\nCC-BY-3.0: Statistik Austria - data.statistik.gv.at\nOpen Government Data Land Steiermark\nhttp://data.steiermark.at/\nhttp://data.steiermark.at/\nAustralian Bureau of Statistics (ABS)\nhttp://www.abs.gov.au\nhttp://www.abs.gov.au\nIncorporates or developed using Administrative Boundaries ©PSMA Australia Limited licensed by the Commonwealth of Australia under Creative Commons Attribution 4.0 International licence (CC BY 4.0).\nhttp://www.ga.gov.au/\nhttp://www.ga.gov.au/\nhttps://listdata.thelist.tas.gov.au\nhttps://listdata.thelist.tas.gov.au\nwww.theLIST.tas.gov.au©StateofTasmania\nTourism Research Australia\nThe State Statistical Committee of the Republic of Azerbaijan\nBangladesh Bureau of Statistics\nhttp://www.bbs.gov.bd\nhttp://www.bbs.gov.bd\nLocal Government Engineering Department of Bangladesh\nhttp://www.lged.gov.bd/\nhttp://www.lged.gov.bd/\nhttp://www.geopunt.be/\nhttp://www.geopunt.be/\nDirection générale Institutions et Population\nhttp://www.ibz.rrn.fgov.be/\nhttp://www.ibz.rrn.fgov.be/\nInstitut géographique national\nhttps://opendata.brussels.be\nhttps://opendata.brussels.be\nhttp://statbel.fgov.be\nhttp://statbel.fgov.be\nInstitut Géographique du Burkina Faso\nNational Statistical Institute, Bulgaria\nCorte Nacional Electoral - República de Bolivia\nhttp://www.cne.org.bo/\nhttp://www.cne.org.bo/\nFederacion de Asociaciones Municipales de Bolivia\nInstituto Nacional de EstadÃ­stica(INE.)\nhttp://www.ine.gob.bo\nhttp://www.ine.gob.bo\nDados abertos - Sao Paulo\nhttp://geosampa.prefeitura.sp.gov.br\nhttp://geosampa.prefeitura.sp.gov.br\nInstituto Brasileiro de Geografia e Estatística\nhttp://www.ibge.gov.br/home/\nhttp://www.ibge.gov.br/home/\nGrand Bahama Port Authority GIS Databases\nhttps://github.com/GBPA/gis-datafiles\nhttps://github.com/GBPA/gis-datafiles\nBhutan GeoSpatial Portal\nBritish Columbia Ministry of Transportation and Infrastructure\nhttp://www.gov.bc.ca/tran/\nhttp://www.gov.bc.ca/tran/\nCity of Calgary Open Data\nhttps://data.calgary.ca\nhttps://data.calgary.ca\nContains information licensed under the Open Government Licence – City of Calgary.\nhttps://open.canada.ca/en\nhttps://open.canada.ca/en\nContains information licensed under the Open Government Licence – Canada: https://open.canada.ca/en/open-government-licence-canada\nGouvernement du Québec\nhttps://www.donneesquebec.ca\nhttps://www.donneesquebec.ca\nCity of Edmonton Open Data\nhttps://data.edmonton.ca\nhttps://data.edmonton.ca\nhttp://donnees.ville.montreal.qc.ca\nhttp://donnees.ville.montreal.qc.ca\nGovernment of Ontario\nhttps://www.ontario.ca\nhttps://www.ontario.ca\nCity of Ottawa Open Data\nhttp://data.ottawa.ca\nhttp://data.ottawa.ca\nContains information licensed under the Open Government Licence – City of Ottawa.\nhttps://www.serviceobjects.com/\nhttps://www.serviceobjects.com/\nhttp://www.statcan.ca\nhttp://www.statcan.ca\nThis does not constitute an endorsement by Statistics Canada of this product.\nCity of Toronto's Open Data Portal\nhttps://open.toronto.ca/\nhttps://open.toronto.ca/\nContains information licensed under the Open Government Licence – Toronto.\nLe Référentiel Géographique Commun\nBundesamt für Statistik - Schweiz\nhttp://www.bfs.admin.ch/\nhttp://www.bfs.admin.ch/\nAmtliches Ortschaftenverzeichnis\nhttp://www.cadastre.ch/internet/cadastre/de/home/products/plz.html\nhttp://www.cadastre.ch/internet/cadastre/de/home/products/plz.html\nStatistisches Amt des Kantons Zürich\nhttp://www.statistik.zh.ch\nhttp://www.statistik.zh.ch\nhttps://data.stadt-zuerich.ch/\nhttps://data.stadt-zuerich.ch/\nGeographisches Informationssystem GIS-ZH\nhttp://geolion.zh.ch/opendata\nhttp://geolion.zh.ch/opendata\nMigros Retail Company\nhttp://www.migros.ch/\nhttp://www.migros.ch/\nOpen Government Data Portal\nhttps://opendata.swiss/\nhttps://opendata.swiss/\nopentransportdata_swiss\nOpen Data Platform Swiss Public Transport\nhttps://opentransportdata.swiss/\nhttps://opentransportdata.swiss/\nhttp://www.raiffeisen.ch\nhttp://www.raiffeisen.ch\nOpen Data Portal of Swiss Post\nhttps://swisspost.opendatasoft.com\nhttps://swisspost.opendatasoft.com\nBundesamt für Landestopografie:swisstopo\nhttp://www.swisstopo.admin.ch/\nhttp://www.swisstopo.admin.ch/\nRohdaten Adressen, csv\nhttps://data.geo.admin.ch/ch.bfs.gebaeude_wohnungs_register/\nhttps://data.geo.admin.ch/ch.bfs.gebaeude_wohnungs_register/\nInstitut national de la statistique\nMinisterio de Bienes Nacionale\nInstituto Nacional de Estadísticas\nSubsecretaria de Desarrollo Regional y Administrativo\nhttp://www.subdere.gov.cl/\nhttp://www.subdere.gov.cl/\nBeijing City Lab (BCL) research network\nhttps://www.beijingcitylab.com\nhttps://www.beijingcitylab.com\nNational Bureau of Statistics of China\nhttp://www.stats.gov.cn\nhttp://www.stats.gov.cn\nEl Departamento Administrativo Nacional de Estadistica (DANE)\nhttp://www.dane.gov.co\nhttp://www.dane.gov.co\nportal geográfico del municipio de Medellín\nhttps://www.medellin.gov.co/geomedellin/index.hyg\nhttps://www.medellin.gov.co/geomedellin/index.hyg\nFuente: Portal de Datos Abiertos Subsecretaria de
Catastro del Municipio de Medellín, Colombia www.medellin.gov.co/geomedellin 2018\nhttp://www.ideca.gov.co\nhttp://www.ideca.gov.co\nPortal de Datos abiertos\nhttp://daticos.geotec.opendata.arcgis.com\nhttp://daticos.geotec.opendata.arcgis.com\nInstituto Nacional de Estadística y Censo\nhttp://www.inec.go.cr\nhttp://www.inec.go.cr\nOficina Nacional de Estadísticas. Cuba\nhttp://www.onei.gob.cu\nhttp://www.onei.gob.cu\nInstituto Nacional de Estatística de Cabo Verde\nhttps://www.cypruspost.post/\nhttps://www.cypruspost.post/\nStatistical Service of Cyprus\nhttp://www.cystat.gov.cy\nhttp://www.cystat.gov.cy\nNational Open Data Portal Cyprus\nhttp://www.data.gov.cy\nhttp://www.data.gov.cy\nRepublic of Cyprus, Ministry of Finance, Statistical Service\nhttp://www.mof.gov.cy\nhttp://www.mof.gov.cy\nState Administration of Land Surveying and Cadastre\nhttp://services.cuzk.cz\nhttp://services.cuzk.cz\nCzech Statistical Office (CZSO)\nPrague Institute of Planning and Development (IPR Praha)\nhttp://www.geoportalpraha.cz/cs/opendata/E9E20135-18B3-4163-B516-45613956B856#.W5dt_59M3OM\nhttp://www.geoportalpraha.cz/cs/opendata/E9E20135-18B3-4163-B516-45613956B856#.W5dt_59M3OM\nsa restriction lifted for the city district layer, email 11.9.2018\nhttps://daten.berlin.de\nhttps://daten.berlin.de\nBundesamt für Kartographie und Geodäsie\nhttp://www.bkg.bund.de\nhttp://www.bkg.bund.de\nGeoBasis-DE / BKG 2018\nData Portal der Stadt Bochum\nhttps://www.bochum.de/Open-Data/\nhttps://www.bochum.de/Open-Data/\nhttps://opendata.bonn.de\nhttps://opendata.bonn.de\nStadt Braunschweig, Abteilung Geoinformation\nhttp://www.braunschweig.de/leben/stadtplanung_bauen/geoinformationen/Geoportal.php\nhttp://www.braunschweig.de/leben/stadtplanung_bauen/geoinformationen/Geoportal.php\nStadt Braunschweig - Open GeoData, 2020, Lizenz: dl-de/by-2-0\nBayerische Vermessungsverwaltung\nhttps://www.ldbv.bayern.de/produkte/weitere/opendata.html\nhttps://www.ldbv.bayern.de/produkte/weitere/opendata.html\nDatenquelle: Bayerische Vermessungsverwaltung – www.geodaten.bayern.de\nStatistisches Bundesamt Deutschland\nhttp://www.destatis.de\nhttp://www.destatis.de\nOpen Data Portal Deutsche Bahn AG\nhttp://data.deutschebahn.com\nhttp://data.deutschebahn.com\nhttps://opendata.dortmund.de/Informationsportal/\nhttps://opendata.dortmund.de/Informationsportal/\nLandeshauptstadt Dresden\nhttps://opendata.dresden.de/\nhttps://opendata.dresden.de/\nhttp://opendata.essen.de\nhttp://opendata.essen.de\nDatenquelle: Stadt Essen – opendata.essen.de\nOffene Daten Frankfurt.\nhttp://www.offenedaten.frankfurt.de\nhttp://www.offenedaten.frankfurt.de\nhttp://www.offenedaten.frankfurt.de/dataset/frankfurter-stadtteilgrenzen-fur-gis-systeme\nBundesamt für Kartographie und Geodäsie\nhttp://www.geodatenzentrum.de\nhttp://www.geodatenzentrum.de\nhttp://transparenz.hamburg.de/open-data/\nhttp://transparenz.hamburg.de/open-data/\nOffizielles Portal der Landeshauptstadt und Region Hannover\nhttps://www.hannover.de\nhttps://www.hannover.de\nDatenquelle: CC-BY-4.0 – Bereich Geoinformation – LH Hannover\nhttps://opendata.leipzig.de\nhttps://opendata.leipzig.de\nLandesamt für Geoinformation und Landentwicklung, Baden-Württemberg\nhttp://www.lgl-bw.de/\nhttp://www.lgl-bw.de/\nDatenquelle: LGL, www.lgl-bw.de\nOpen-Data-Portal München\nhttps://www.opengov-muenchen.de\nhttps://www.opengov-muenchen.de\nDatenquelle: dl-de/by-2-0: Landeshauptstadt München – Kommunalreferat – GeodatenService – www.geodatenservice-muenchen.de\nhttps://opendata.stadt-muenster.de\nhttps://opendata.stadt-muenster.de\nhttp://www.offenedaten-koeln.de/\nhttp://www.offenedaten-koeln.de/\nhttps://offenedaten-konstanz.de\nhttps://offenedaten-konstanz.de\nDatenquelle: CC-BY-4.0 - Stadt Konstanz - www.offenedaten-konstanz.de\nhttps://www.opendata-hro.de\nhttps://www.opendata-hro.de\n© Hanse- und Universitätsstadt Rostock\nhttps://opendata.potsdam.de\nhttps://opendata.potsdam.de\nStadtteile in Potsdam Januar 2020\nAmt fuer Statistik Berlin Brandenburg\nhttp://www.statistik-berlin-brandenburg.de/\nhttp://www.statistik-berlin-brandenburg.de/\nFreie Daten Stuttgart\nhttp://www.stuttgart.de/testdaten\nhttp://www.stuttgart.de/testdaten\nAttribution (Bewilligung vom 12.1.2018)\nLHS Stuttgart, Stadtmessungsamt (Stadtbezirk/Stadtteil Boundaries)\nhttps://www.offenedaten-wuppertal.de\nhttps://www.offenedaten-wuppertal.de\nDanmarks Adressers Web API - DAWA\nIndeholder oplysninger fra Styrelsen for Dataforsyning og Effektiviserings Adresse Web Services (AWS Suiten)\nDanish Geodata Agency\nKort & Matrikelstyrelsen\nDanish Agency for Data Supply and Efficiency\nOficina Nacional de Estadistica de la Republica Dominicana\nhttp://www.one.gob.do/\nhttp://www.one.gob.do/\nNational Institute of Cartography and Remote Sensing\nhttp://www.inct.mdn.dz\nhttp://www.inct.mdn.dz\nOffice National des Statistiques\ngobiernoabierto_quito\nMunicipio del Distrito Metropolitano de Quito\nhttp://gobiernoabierto.quito.gob.ec\nhttp://gobiernoabierto.quito.gob.ec\nInstituto Nacional de Estadística y Censos\nhttp://www.ecuadorencifras.gob.ec/\nhttp://www.ecuadorencifras.gob.ec/\nINSTITUTO NACIONAL DE ESTADÍSTICA Y CENSOS (INEC)\nMinisterio de Telecomunicaciones\nhttps://regulacion.mintel.gob.ec\nhttps://regulacion.mintel.gob.ec\nhttp://www.maaamet.ee\nhttp://www.maaamet.ee\nAjuntament de Barcelona\nNational Address Database\nhttp://www.cartociudad.es/portal/\nhttp://www.cartociudad.es/portal/\nCartography Service of Euskadi\nGipuzkoa Provincial Council\nhttp://www.gipuzkoa.net\nhttp://www.gipuzkoa.net\nInstitut Cartogràfic i Geològic de Catalunya\nInfraestructura de Datos Espaciales de Espana (IGN)\nNGBE CC BY 4.0 Instituto Geográfico Nacional\nInstituto Geográfico Nacional\nNGBE CC BY 4.0 Instituto Geográfico Nacional\nInstituto Nacional de Estadística\nAyuntamiento de Lorca\nhttp://datos.lorca.es\nhttp://datos.lorca.es\nOrigen de los datos: Ayuntamiento de Lorca, 17.2.2019\nAyuntamiento de Madrid\nhttp://datos.madrid.es\nhttp://datos.madrid.es\nAyuntamiento de Madrid 2017 05 24\nPortal de Datos Abiertos del Ayuntamiento de Sevilla\nhttp://datosabiertos.sevilla.org/\nhttp://datosabiertos.sevilla.org/\nFuente de los datos: Ayuntamiento de Sevilla\nPortal Transparencia y Datos Abiertos Valencia\nhttp://gobiernoabierto.valencia.es/es/data/\nhttp://gobiernoabierto.valencia.es/es/data/\nFuente de los datos: Ayuntamiento de Valencia\nThe European Environment Agency\nhttp://www.eea.europa.eu\nhttp://www.eea.europa.eu\nOpen Data by Ministry of Finance\nhttps://www.avoindata.fi/\nhttps://www.avoindata.fi/\nFinnish Transport Agency Open Data\nhttp://rata.digitraffic.fi\nhttp://rata.digitraffic.fi\nHelsinki Region Infoshare\nAssociation of Finnish Local and Regional Authorities\nhttp://www.kunnat.net\nhttp://www.kunnat.net\nNational Land Survey of Finland (NLS)\nhttp://www.maanmittauslaitos.fi\nhttp://www.maanmittauslaitos.fi\nFiji Bureau of Statistics\nhttps://www.statsfiji.gov.fj\nhttps://www.statsfiji.gov.fj\nFSM Division of National Statistic\nhttp://www.fsmstatistics.fm\nhttp://www.fsmstatistics.fm\nBases Adresses Locales\nhttps://adresse.data.gouv.fr\nhttps://adresse.data.gouv.fr\nLa Base Adresse Nationale\nhttp://www.data.gouv.fr/\nhttp://www.data.gouv.fr/\nhttps://cadastre.data.gouv.fr/datasets/cadastre-etalab\nhttps://cadastre.data.gouv.fr/datasets/cadastre-etalab\nInstitut national de l'information géographique et forestière\nInstitut national de la statistique et des études économiques\nhttps://data.grandlyon.com\nhttps://data.grandlyon.com\nhttps://www.data.gouv.fr/fr/datasets/quartiers-de-la-ville-de-nanterre/\nhttps://www.data.gouv.fr/fr/datasets/quartiers-de-la-ville-de-nanterre/\nhttp://opendata.bordeaux.fr\nhttp://opendata.bordeaux.fr\nSociété Nationale des Chemins de fer français\nhttp://test.data-sncf.com/\nhttp://test.data-sncf.com/\nhttps://www.strasbourg.eu\nhttps://www.strasbourg.eu\nhttps://www.strasbourg.eu/decoupage-15-quartiers, Aug 2018\nhttps://data.london.gov.uk/\nhttps://data.london.gov.uk/\nGovernment Statistical Service\nhttp://www.statistics.gov.uk/hub/government-statistical-service/index.html\nhttp://www.statistics.gov.uk/hub/government-statistical-service/index.html\nDatabase of British and Irish hills\nhttp://www.hills-database.co.uk\nhttp://www.hills-database.co.uk\nThe Database of British and Irish Hills v17.5\nNISRA - Northern Ireland Statistics and Research Agency\nNational Public Transport Gazetteer UK\nhttp://www.dft.gov.uk/nptg/\nhttp://www.dft.gov.uk/nptg/\nOGL (Open Government License)\nNational Records of Scotland\nhttps://www.nrscotland.gov.uk\nhttps://www.nrscotland.gov.uk\nContains NRS data © Crown copyright and database right 2017\nOffice for National Statistics\nhttps://www.ons.gov.uk\nhttps://www.ons.gov.uk\nContains National Statistics data © Crown copyright and database right\nhttps://www.opendatani.gov.uk\nhttps://www.opendatani.gov.uk\nOrdnance Survey . Great Britain's national mapping agency\nhttp://www.ordnancesurvey.co.uk\nhttp://www.ordnancesurvey.co.uk\nOGLv3.0 (Open Government License)\nContains OS data © Crown copyright and database right 2018\nGhana Open Data Initiative\nGhana Statistical Service 2010\nGSS Ghana Statistical Service\nhttp://www.statsghana.gov.gh\nhttp://www.statsghana.gov.gh\nInstitut National de la Statistique\nhttp://www.stat-guinee.org\nhttp://www.stat-guinee.org\nHellenic Mapping and Cadastral Organisation\nhttp://www.geodata.gov.gr/\nhttp://www.geodata.gov.gr/\nSistema Nacional de Información Territorial (Sinit)\nhttp://ide.segeplan.gob.gt/\nhttp://ide.segeplan.gob.gt/\nOpen Geo-Spatial Data in HK - ESRI\nhttp://opendata.esrichina.hk\nhttp://opendata.esrichina.hk\nGeoportal del Sector Forestal de Honduras\nhttps://geoportal.icf.gob.hn/geoportal/main\nhttps://geoportal.icf.gob.hn/geoportal/main\nInstituto Nacional de Estadistica de Honduras\nhttp://www.ine.gob.hn/\nhttp://www.ine.gob.hn/\nMaestría en Gestión Urbana\nhttp://mgsu.ucs.inrs.ca/\nhttp://mgsu.ucs.inrs.ca/\nSistema Nacional de Información Territorial\nopen data portal croatia\nCroatian Bureau of Statistics\nHungarian Central Statistical Office\nPortal Data Kota Bandung\nhttp://data.bandung.go.id\nhttp://data.bandung.go.id\nGeospatial Information Agency\nStatistics Indonesia - Badan Pusat Statistik\nhttp://www.bps.go.id/\nhttp://www.bps.go.id/\nGeoportal Sulteng - Central Sulawesi\nhttp://geoportal.sultengprov.go.id\nhttp://geoportal.sultengprov.go.id\nCentral Statistics Office - Ireland\nPlacenames Database of Ireland\nhttps://www.logainm.ie/\nhttps://www.logainm.ie/\nIrish-language placename data by Logainm © Government of Ireland and licensed under CC BY 4.0.\nOrdnance Survey Ireland (OSi) - Open Data\nCentral Bureau of Statistics Israel\nhttp://www.cbs.gov.il/\nhttp://www.cbs.gov.il/\nhttp://www.mapi.gov.il/\nhttp://www.mapi.gov.il/\nIsle of Man Government Open Data\nhttps://www.gov.im/maps/\nhttps://www.gov.im/maps/\nContains public sector information licensed under the Isle of Man Open Government Licence\nhttp://www.censusindia.gov.in/\nhttp://www.censusindia.gov.in/\nOpen Government Data (OGD) Platform India\ncommunity of Data Science and Open Data enthusiasts\nKarnataka State Remote Sensing Applications Centre\nhttps://kgis.ksrsac.in/\nhttps://kgis.ksrsac.in/\nLocal Government Directory\nhttp://lgdirectory.gov.in/\nhttp://lgdirectory.gov.in/\nNational Institution for Transforming India\nhttp://www.niti.gov.in\nhttp://www.niti.gov.in\nDatasource: NITI Aayog,Govt. of India\nhttps://indiamaps.gov.in/soiapp/\nhttps://indiamaps.gov.in/soiapp/\nhttps://onlinemaps.surveyofindia.gov.in\nhttps://onlinemaps.surveyofindia.gov.in\nTelangana Open Data Portal\nhttp://www.data.telangana.gov.in\nhttp://www.data.telangana.gov.in\nDatasource: Telangana Open Data Portal\nStatistical Center of Iran\nhttps://www.amar.org.ir\nhttps://www.amar.org.ir\nNational Land Survey of Iceland\nBased on data from National Land Survey of Iceland\nContains public sector information licensed under the Open Government Licence v3.0.\nhttps://www.comune.palermo.it\nhttps://www.comune.palermo.it\nhttp://www.geoportale.regione.lombardia.it\nhttp://www.geoportale.regione.lombardia.it\nGEOPORTALE del comune di Torino\nhttp://www.comune.torino.it/geoportale/index.htm\nhttp://www.comune.torino.it/geoportale/index.htm\nBase cartografica realizzata da GeoNames, integrata con Circoscrizioni Dec 2016 della Città di Torino reperiti sul Geoportale del Comune di Torino\niptsat s.r.l.: Open data GEOGRAFICO per Roma\nhttp://www.iptsat.com\nhttp://www.iptsat.com\nIstituto Nazionale di Statistica - Italia\nhttp://geoportale.comune.milano.it\nhttp://geoportale.comune.milano.it\nhttp://www.comune.napoli.it\nhttp://www.comune.napoli.it\nhttp://dati.comune.bologna.it/\nhttp://dati.comune.bologna.it/\nhttp://opendata.comune.catania.gov.it/\nhttp://opendata.comune.catania.gov.it/\nhttps://dati.veneto.it\nhttps://dati.veneto.it\nServizio Osservatorio Acque marine e lagunari - ARPAV\nhttp://geomap.arpa.veneto.it/layers/geonode%3Aci_benthos_macrofite\nhttp://geomap.arpa.veneto.it/layers/geonode%3Aci_benthos_macrofite\nhttps://opendata.gov.je/\nhttps://opendata.gov.je/\nAccessed on opendata.gov.je and licensed for use under the Open Government Licence – Jersey v1.0\nJamaica Open Data Portal\nPlanning Institute of Jamaica\nhttp://www.pioj.gov.jm\nhttp://www.pioj.gov.jm\nStatistics Bureau Japan\nhttp://www.e-stat.go.jp\nhttp://www.e-stat.go.jp\nGeospatial Information Authority of Japan\nGeospatial Information Authority of Japan website http://www.gsi.go.jp/kankyochiri/gm_japan_e.html\nMinistry of Internal Affairs and Communications\nhttp://www.soumu.go.jp\nhttp://www.soumu.go.jp\nMinistry of Land, Infrastructure, Transport and Tourism\nhttp://www.mlit.go.jp/kokudoseisaku/gis/index.html\nhttp://www.mlit.go.jp/kokudoseisaku/gis/index.html\nKenya Open Data Portal\nhttp://www.opendata.go.ke\nhttp://www.opendata.go.ke\nNational Statistical Committee of the Kyrgyz Republic\nNational Committee for Sub-national Democratic Development (NCDD)\nhttp://db.ncdd.gov.kh/gazetteer/view/index.castle\nhttp://db.ncdd.gov.kh/gazetteer/view/index.castle\nNational Institute of Statistics Ministry of Planning, Royal Government of Cambodia\nhttp://www.nis.gov.kh\nhttp://www.nis.gov.kh\nOpen Development Cambodia (ODC)\nhttps://data.opendevelopmentcambodia.net/dataset/census-2008\nhttps://data.opendevelopmentcambodia.net/dataset/census-2008\nKiribati National Statistics Office\nhttp://www.mfed.gov.ki/our-work/national-statistics-office\nhttp://www.mfed.gov.ki/our-work/national-statistics-office\nhttps://github.com/vuski/admdongkor\nhttps://github.com/vuski/admdongkor\nhttp://www.gisdeveloper.co.kr/?p=2332\nhttp://www.gisdeveloper.co.kr/?p=2332\nMinistry of the Interior\nhttp://www.juso.go.kr/\nhttp://www.juso.go.kr/\nLaos Statistics Bureau\nhttp://www.lsb.gov.la\nhttp://www.lsb.gov.la\nSt. Lucia Open Data Portal\nLiechtensteinische Landesverwaltung\nhttps://service.geo.llv.li/\nhttps://service.geo.llv.li/\nLiechtensteinische Landesverwaltung\nDepartment of Census and Statistics Sri Lanka\nhttp://www.statistics.gov.lk\nhttp://www.statistics.gov.lk\nSurvey Department- Sri Lanka\nhttp://www.survey.gov.lk\nhttp://www.survey.gov.lk\nhttp://www.geoportal.lt\nhttp://www.geoportal.lt\nState Enterprise Centre of Registers\nhttps://www.registrucentras.lt/\nhttps://www.registrucentras.lt/\nhttp://www.stat.gov.lt/\nhttp://www.stat.gov.lt/\nhttps://data.public.lu\nhttps://data.public.lu\nCentral Statistical Bureau\nhttp://www.data.gov.ma/\nhttp://www.data.gov.ma/\nHaut Commissariat au Plan - HCP, Morocco\nL’Institut National de la Statistique (INSTAT)\nhttps://www.instat.mg\nhttps://www.instat.mg\nMarshall Islands Economic Policy, Planning and Statistics Office\nhttps://rmi.prism.spc.int/\nhttps://rmi.prism.spc.int/\nState Statistical Office of the Republic of Macedonia\nhttp://www.stat.gov.mk/\nhttp://www.stat.gov.mk/\nMyanmar Information Management Unit\nhttp://www.themimu.info/\nhttp://www.themimu.info/\nMaldives Land and Survey Authority\nhttp://readme.onemap.mv/\nhttp://readme.onemap.mv/\nContains information licensed under Data Usage License – Maldives Land and Survey Authority\nNational Spatial Data Center, Department of Surveys\nhttp://www.masdap.mw/\nhttp://www.masdap.mw/\nNational Statistical Office of Malawi\nhttp://www.nsomalawi.mw/\nhttp://www.nsomalawi.mw/\nPortal de datos de la Ciudad de México\nhttps://datos.cdmx.gob.mx/p\nhttps://datos.cdmx.gob.mx/p\nDatos Abiertos del Gobierno de México\nhttps://datos.gob.mx/\nhttps://datos.gob.mx/\nMapa de Polígonos de Código Postal, 2019 May\nInstituto Nacional de Estadística y Geografíca\nhttp://www.inegi.org.mx\nhttp://www.inegi.org.mx\nDepartment of Statistics Malaysia\nhttps://www.dosm.gov.my\nhttps://www.dosm.gov.my\nhttp://dadosabertos.cmmaputo.gov.mz\nhttp://dadosabertos.cmmaputo.gov.mz\nhttp://ehealthafrica.org/\nhttp://ehealthafrica.org/\nInstituto Nacional de Información de Desarrollo\nhttp://www.inide.gob.ni\nhttp://www.inide.gob.ni\nhttp://maps.amsterdam.nl/open_geodata/\nhttp://maps.amsterdam.nl/open_geodata/\nSource: City of Amsterdam open Data (free)\nBasisregistraties Adressen en Gebouwen\nStatistics Netherlands\nhttps://denhaag.dataplatform.nl/\nhttps://denhaag.dataplatform.nl/\nhttps://www.pdok.nl/en/node\nhttps://www.pdok.nl/en/node\nhttps://www.erikbolstad.no/kommunenummer/english.php\nhttps://www.erikbolstad.no/kommunenummer/english.php\nErik Bolstad, Great Norwegian Encyclopedia.\nNorwegian Mapping Authority\nhttp://www.kartverket.no/\nhttp://www.kartverket.no/\nofficial Norwegian geodata\nhttps://www.geonorge.no/en/\nhttps://www.geonorge.no/en/\nStatistisk sentralbyrå - Statistics Norway\nMinistry of Home Afairs - GeoPortal\nhttp://drm.moha.gov.np\nhttp://drm.moha.gov.np\nNational Geographic Information Infrastructure Programme, Survey Department, Government of Nepal\nhttp://www.ngiip.gov.np/\nhttp://www.ngiip.gov.np/\nNauru Bureau of Statistics | Ministry of Finance\nhttps://nauru.prism.spc.int\nhttps://nauru.prism.spc.int\nLand Information New Zealand (LINZ)\nhttp://www.linz.govt.nz/\nhttp://www.linz.govt.nz/\nSourced from the LINZ Data Service https://data.linz.govt.nz/layer/53353-nz-street-address/ and licensed by LINZ for re-use under the Creative Commons Attribution 3.0 New Zealand licence.\nStatistics New Zealand\nhttp://www.stats.govt.nz\nhttp://www.stats.govt.nz\nThis work is based on/includes Stats NZ’s data which are licensed by Stats NZ for re-use under the Creative Commons Attribution 4.0 International licence.\nInstituto Nacional de Estadística y Censo - Panamá\nhttps://www.contraloria.gob.pa/INEC/\nhttps://www.contraloria.gob.pa/INEC/\nSmithsonian in Panama\nhttps://stridata-si.opendata.arcgis.com\nhttps://stridata-si.opendata.arcgis.com\nPortal Nacional de Datos Abiertos Peru\nhttps://www.datosabiertos.gob.pe\nhttps://www.datosabiertos.gob.pe\nInstituto Geográfico Nacional\nhttp://www.idep.gob.pe\nhttp://www.idep.gob.pe\nInstituto Nacional de Estadística e Informática\nhttps://www.inei.gob.pe\nhttps://www.inei.gob.pe\nPeru Ministerio del Ambiente\nhttp://geoservidor.minam.gob.pe/geoservidor/download.aspx\nhttp://geoservidor.minam.gob.pe/geoservidor/download.aspx\nGéographie administrative de la Polynésie-française GEO PF\nhttps://www.data.gouv.fr/fr/datasets/geographie-administrative-de-la-polynesie-francaise/\nhttps://www.data.gouv.fr/fr/datasets/geographie-administrative-de-la-polynesie-francaise/\nNational Research Institute PG\nhttp://www.nri.org.pg\nhttp://www.nri.org.pg\nNational Mapping and Resource Information Authority\nhttp://www.namria.gov.ph/\nhttp://www.namria.gov.ph/\nPhilippine Statistics Authority\nPhilippine Standard Geographic Code (PSGC)\nhttp://nscb.gov.ph/csd/psgc1.asp\nhttp://nscb.gov.ph/csd/psgc1.asp\nhttp://www.alhasan.com\nhttp://www.alhasan.com\nCentral Documentation Center of Geodesy and Cartography\nhttp://www.codgik.gov.pl\nhttp://www.codgik.gov.pl\nGeoPortal Poland, Surveyor General of Poland\nhttp://geoportal.gov.pl/\nhttp://geoportal.gov.pl/\nCentral Statistical Office, Poland\nhttp://www.stat.gov.pl\nhttp://www.stat.gov.pl\nWrocław Spatial Information System\nhttp://www.geoportal.wroclaw.pl/en/\nhttp://www.geoportal.wroclaw.pl/en/\nSistemas de Información Geográfica (GIS) Puerto Rico\nhttp://www.gis.pr.gov/\nhttp://www.gis.pr.gov/\nPalestinian Central Bureau of Statistics\nhttp://atlas.pcbs.gov.ps\nhttp://atlas.pcbs.gov.ps\nportal nacional de dados abertos da Administração Pública Portuguesa\nInstituto Geográfico Português\nPalau Office of Planning & Statistics\nhttps://www.palaugov.pw/budgetandplanning\nhttps://www.palaugov.pw/budgetandplanning\nOffice of Planning & Statistics, 2015 Population and Housing Census\nDirección General de Estadística, Encuestas y Censos\nhttp://geo.stp.gov.py/user/dgeec/datasets\nhttp://geo.stp.gov.py/user/dgeec/datasets\nInstitutul National de Statistica\nhttp://earth.unibuc.ro/\nhttp://earth.unibuc.ro/\nGeoportal Nacionalne infrastrukture geoprostornih podataka Srbije\nStatistical Office of Serbia\nhttp://www.stat.gov.rs/\nhttp://www.stat.gov.rs/\nhttps://www.gov.spb.ru/\nhttps://www.gov.spb.ru/\nAll-Russian classification on units of administrative and territorial distribution\nhttps://classifikators.ru/okato\nhttps://classifikators.ru/okato\nNational Institute of Statistics of Rwanda\nhttp://www.statistics.gov.rw\nhttp://www.statistics.gov.rw\nSolomon Islands National Statistics Office\nhttps://www.statistics.gov.sb\nhttps://www.statistics.gov.sb\nData Base of Built Heritage\nhttp://www.bebyggelseregistret.raa.se\nhttp://www.bebyggelseregistret.raa.se\nSwedish National Land Survey\nhttp://www.lantmateriet.se/\nhttp://www.lantmateriet.se/\nhttps://dataportalen.stockholm.se\nhttps://dataportalen.stockholm.se\nSwedish Election Authority\nOpen Data Portal Singapore\nContains information from master-plan-2014-subzone-boundary-no-sea accessed on 12.9.2018 from https://data.gov.sg/dataset/master-plan-2014-subzone-boundary-no-sea?resource_id=c30bfcc0-7e23-4959-b4d9-c5da5e00af54 which is made available under the terms of the Singapore Open Data Licence version 1.0\nNational Library Board Singapore\nhttps://www.nlb.gov.sg/\nhttps://www.nlb.gov.sg/\nhttps://www.onemap.sg\nhttps://www.onemap.sg\nSingapore Open Data Licence\ncontains information from Onemap.sg postal code search accessed on 25 Mai 2019\nSingapore Department of Statistics\nhttp://www.singstat.gov.sg/\nhttp://www.singstat.gov.sg/\nSurveying and Mapping Authority of the Republic of Slovenia\nSurveying and Mapping authority of the Republic of Slovenia, spatial units 31.01.2019\nStatistical Office of the Republic of Slovenia\nOpen data portal Slovakia\nGeodetic and Cartographic Institute Bratislava\nhttps://www.geoportal.sk\nhttps://www.geoportal.sk\nZBGIS®, Geodesy, Cartography and Cadastre Office of the Slovak Republic\nStatistical Office of the Slovak Republic\nhttp://www.statistics.sk/\nhttp://www.statistics.sk/\nCentro Nacional de Registros\nhttps://www.cnr.gob.sv\nhttps://www.cnr.gob.sv\nhttp://www.comures.org.sv/\nhttp://www.comures.org.sv/\nhttp://www.bangkokgis.com\nhttp://www.bangkokgis.com\nOpen Government Data of Thailand\nThe right to Use the Data is subject to the terms and conditions for DGA Open Government License\nDepartment of Provincial Administration\nhttps://www.dopa.go.th/\nhttps://www.dopa.go.th/\nNational Geospatial Catalogue\nhttp://nsdiportal.gistda.or.th\nhttp://nsdiportal.gistda.or.th\nAdmin divisions of Thailand\nhttp://tambon.blogspot.ch/\nhttp://tambon.blogspot.ch/\nGeographic Information Group (GIG) in Timor-Leste\nhttps://sites.google.com/site/gigtimorleste/data/administrative-boundaries\nhttps://sites.google.com/site/gigtimorleste/data/administrative-boundaries\nhttp://www.ins.nat.tn\nhttp://www.ins.nat.tn\nLa faculté des Sciences de Tunis et La Direction Générale des Forêts, OpenGovTn\nTonga Department of Statistics\nhttps://tonga.prism.spc.int\nhttps://tonga.prism.spc.int\nTonga Department of Statistics, 2016 Population and Housing Census.\nGeneral Directorate of Mapping GDM\nhttps://www.harita.gov.tr/english/\nhttps://www.harita.gov.tr/english/\nTurkey Ministry of Internal Affairs\nhttps://www.icisleri.gov.tr/\nhttps://www.icisleri.gov.tr/\nMinistry of the Interior\nhttps://www.nvi.gov.tr/ministry-of-the-interior\nhttps://www.nvi.gov.tr/ministry-of-the-interior\nTurkish Statistical Institute\nhttp://www.tuik.gov.tr\nhttp://www.tuik.gov.tr\nCentral Statistical Office\nInstitute of Marine Affairs\nhttp://www.ima.gov.tt/\nhttp://www.ima.gov.tt/\nTuvalu Central Statistics Division\nhttps://tuvalu.prism.spc.int/index.php/about-us\nhttps://tuvalu.prism.spc.int/index.php/about-us\nhttps://github.com/g0v/twgeojson/\nhttps://github.com/g0v/twgeojson/\nMinistry of the Interior. Republic of China(Taiwan)\nhttp://www.moi.gov.tw\nhttp://www.moi.gov.tw\nNational Bureau of Statistics\nGEOPORTAL of administrative-territorial system of Ukraine\nhttp://atu.minregion.gov.ua/en/home\nhttp://atu.minregion.gov.ua/en/home\nCodifier of Administrative and Territorial Units and Territorial Hromada Territories\nhttps://decentralization.gov.ua/en/news/13151\nhttps://decentralization.gov.ua/en/news/13151\nUganda Bureau of Statistics\nAzavea Inc, Philadelphia Neighborhoods\nhttp://www.azavea.com\nhttp://www.azavea.com\nhttps://data.baltimorecity.gov\nhttps://data.baltimorecity.gov\nCity of Chicago Open Data\nhttps://data.cityofchicago.org\nhttps://data.cityofchicago.org\nThis site provides applications using data that has been modified for use from its original source, www.cityofchicago.org, the official website of the City of Chicago.  The City of Chicago makes no claims as to the content, accuracy, timeliness, or completeness of any of the data provided at this site.  The data provided at this site is subject to change at any time.  It is understood that the data provided at this site is being used at one’s own risk.\nDepartment of Energy & Environmental Protection\nhttps://portal.ct.gov/deep/gis-and-maps/geographic-information-systems\nhttps://portal.ct.gov/deep/gis-and-maps/geographic-information-systems\nhttps://data.austintexas.gov\nhttps://data.austintexas.gov\nhttps://data.seattle.gov\nhttps://data.seattle.gov\nGeographic Names Information System USGS\nhttps://nhd.usgs.gov/gnis.html\nhttps://nhd.usgs.gov/gnis.html\nhttp://data.ohouston.org\nhttp://data.ohouston.org\nCity of Los Angeles Open Data\nhttps://data.lacity.org\nhttps://data.lacity.org\nNational Association of Counties\nDepartment of Information Technology & Telecommunications (DoITT)\nhttps://www.opendataphilly.org\nhttps://www.opendataphilly.org\nCity of Phoenix Open Data\nhttps://www.phoenixopendata.com\nhttps://www.phoenixopendata.com\nhttps://data.sandiego.gov\nhttps://data.sandiego.gov\nhttps://www.census.gov\nhttps://www.census.gov\nU.S. Geological Survey\ncrodsourced shapes, base tiger and flickr\nhttp://zetashapes.com\nhttp://zetashapes.com\nInstituto Nacional de Estadística\nhttp://www.ine.gub.uy/\nhttp://www.ine.gub.uy/\nMinisterio de Vivienda, Ordenamiento Territorial y Medio Ambiente\nhttp://www.mvotma.gub.uy/\nhttp://www.mvotma.gub.uy/\nThe State Сommittee of Republic of Uzbekistan on statistics\nInstituto Geográfico de Venezuela Simón Bolívar\nhttp://ide.igvsb.gob.ve\nhttp://ide.igvsb.gob.ve\nInstituto Nacional de Estadística República Bolivariana de Venezuela\nhttp://www.ine.gov.ve\nhttp://www.ine.gov.ve\nInstituto Venezolano de Investigaciones Cientificas\nhttp://www.ivic.gob.ve\nhttp://www.ivic.gob.ve\nGeneral Statistics Office Of Vietnam\nhttp://www.gso.gov.vn\nhttp://www.gso.gov.vn\nVanuatu National Statistics Office\nService Territorial de la Statistique et des Etudes Economiques\nhttp://www.statistique.wf\nhttp://www.statistique.wf\nMinistry of Public Health & Population, The Republic of Yemen\nhttp://www.mophp-ye.org\nhttp://www.mophp-ye.org\nMunicipal Demarcation Board\nhttp://www.demarcation.org.za/\nhttp://www.demarcation.org.za/\nhttp://www.activereservations.com/\nhttp://www.activereservations.com/\nhttp://www.alpharooms.com/\nhttp://www.alpharooms.com/\nhttp://www.avlib.org/\nhttp://www.avlib.org/\nCaribbean Risk Information Program\nhttp://charim-geonode.net\nhttp://charim-geonode.net\nhttp://www.diytravel.co.uk/\nhttp://www.diytravel.co.uk/\nhttp://www.fao.org/geonetwork/srv/en/main.home\nhttp://www.fao.org/geonetwork/srv/en/main.home\nFederal Information Processing Standards (FIPS)\nopen license resource of boundaries built by the community and W&M geoLab\nhttps://www.geoboundaries.org\nhttps://www.geoboundaries.org\nAdministrative boundaries courtesy of geoboundaries\nGeographical information system of the Commission (GISCO)\nhttps://ec.europa.eu/eurostat/web/gisco/geodata/reference-data\nhttps://ec.europa.eu/eurostat/web/gisco/geodata/reference-data\nhttps://ec.europa.eu/eurostat/about/policies/copyright\nDas Genealogische Orts-Verzeichnis\nhttp://gov.genealogy.net/\nhttp://gov.genealogy.net/\nHumanitarian Information Unit, U.S. State Department\nhttps://hiu.state.gov/\nhttps://hiu.state.gov/\nThe Humanitarian Data Exchange\nhttps://data.humdata.org\nhttps://data.humdata.org\nInteractive Affiliate Network\nUniversity of Minnesota\nhttps://international.ipums.org/international/gis_harmonized_2nd.shtml\nhttps://international.ipums.org/international/gis_harmonized_2nd.shtml\nInternational Organization for Standardization\nhttp://www.laterooms.com/\nhttp://www.laterooms.com/\nGlobal Large Scale International Boundary\nhttp://geonode.state.gov/layers/geonode%3AGlobal_LSIB_Polygons_Detailed\nhttp://geonode.state.gov/layers/geonode%3AGlobal_LSIB_Polygons_Detailed\nUS Dept. of State Office of the Geographer.\nMarine Regions (Flanders Marine Institute)\nhttps://www.marineregions.org/\nhttps://www.marineregions.org/\nhttp://www.hotelsearch.com/\nhttp://www.hotelsearch.com/\nWeather Station Identifiers - icao/iata\nhttp://www.weathergraphics.com/identifiers/\nhttp://www.weathergraphics.com/identifiers/\nNASADEM Merged DEM Global 1 arc second\nhttps://lpdaac.usgs.gov/products/nasadem_hgtv001/\nhttps://lpdaac.usgs.gov/products/nasadem_hgtv001/\nNASA JPL (2020), NASA EOSDIS Land Processes DAAC. Accessed 2020-03-23\nhttp://www.naturalearthdata.com\nhttp://www.naturalearthdata.com\nhttp://geonames.nga.mil/gns/html/index.html\nhttp://geonames.nga.mil/gns/html/index.html\nNational Oceanic and Atmospheric Administration\nhttps://www.ngdc.noaa.gov/\nhttps://www.ngdc.noaa.gov/\nArcGIS Open Data Portal\nhttp://opendata.arcgis.com\nhttp://opendata.arcgis.com\nhttp://www.ourairports.com/data/\nhttp://www.ourairports.com/data/\nhttp://pleiades.stoa.org/\nhttp://pleiades.stoa.org/\nPacific Statistics - SPC PopGIS Mapping\nhttps://prism.spc.int/regional-data-and-tools/popgis2\nhttps://prism.spc.int/regional-data-and-tools/popgis2\nhttp://www.properazzi.com\nhttp://www.properazzi.com\nhttp://quattroshapes.com\nhttp://quattroshapes.com\nRegional Centre for Mapping of Resources for Development (RCMRD)\nhttp://geoportal.rcmrd.org\nhttp://geoportal.rcmrd.org\nUnion Internationale des Chemins de fer\nUnited Nations Statistics Division\nhttp://unstats.un.org/\nhttp://unstats.un.org/\nUS Census - International Data Base (IDB)\nhttp://www.census.gov/ipc/www/idb/index.html\nhttp://www.census.gov/ipc/www/idb/index.html\nhttps://www.wikidata.org/\nhttps://www.wikidata.org/\nhttps://data.worldbank.org\nhttps://data.worldbank.org\nWorld Port Index (nga)\ninfo@geonames.org   by unxos gmbh

GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\nGeoNames Home | Postal Codes | Download / Webservice | About |\nDownload / Webservice\nGeoNames has a simple edit interface that allow users to edit GeoNames information, move a point and add new place names to the GeoNames database. You find the edit interface on top of the google maps display. Click on a marker to open the information window with detail information about the place. In the information window you find a couple of menu links to view detail information like alternate names or the modification history of a place. The most recent updates are available as html page and as rss feed.

In the information window you find also a couple of links to modifiy the information. You can add the basic information like name, population or elevation. You can move a point on the map/satellite display. You can edit the alternate names for a place, this means you can edit other names like 'Big Apple' for 'New York', or 'Nueva York' the Spanish name for 'New York'.


In the following we will look at screenshots and cover the following topics :



the user account
the information window
edit GeoNames basic information
move point
edit alternate names
Add a new placename to the GeoNames database






The GeoNames Account

In order to modify features and insert new features you will need a GeoNames user account. You can create one here:
http://www.geonames.org/login




The GeoNames Information Window

Click on a marker on the maps/satellite display to open the information window. The information window shows detail information about a place like population, elevation, administrative hierarchy, link to wikipedia and more.
At the bottom of the information window you find menu links for further information like alterate names and you find menu links to modify the information.










Edit GeoNames Basic Information

Clicking on the 'edit' link in the information window opens a form to edit the information. In the screenshot below we add the elevation to the mountain 'Säntis'.












Move a point

In order to correct the coordinates of a place click the 'move' link. You can now either enter gps latitude and longitude or click on the correct location on the map.












Edit Alternate Names

Alternate names are used to store and display name variants. In the screenshot below we add the Italian name 'San Gallo' to the first order division 'Sankt Gallen'. We set the 'is short name' flag to indicate that this is a short name for the long name 'Cantone di San Gallo'.


Guidelines: 

 the main name for the toponym should be a widely accepted international or English name. Local languages are entered as alternate names.
 The language code for the alternate names are normally the 2-character ISO 639 language codes, for more exotic languages that do not have a 2-character ISO code the 3-character code is used instead. Some pseudo language codes are used to mark other entries like postal codes, abbreviations or links (see below).
 the flag 'isPreferred' helps distinguish between several alternate names in the same language. It marks the most commonly used name.
 proper casing should be used. Upper case only for the first character of a term or for abbreviations.
 avoid redundancy. Do not add the same name with 'minus' and blanks between terms, only add the more often use spelling variant in this case. (Ex: "La Colle sur Loup" for "La Colle-sur-Loup", it is sufficient to add "La Colle-sur-Loup" as the geonames search engine can handle searches with or without minus.)
 use full spelling for 'Sankt' (German), 'Saint' and 'Sainte' (French). The respective abbreviations St. and Ste. are automatically handled by the search engine.




The language code is referring to the ISO-639-2 and ISO-639-3 codes. Some Examples:

 empty language code: a default name generally understood or with unknown language.
 en (English)
 fr (French)
 he (Hebrew)
 uk (Ukrainian)

...
 zh (Chinese)
 wuu (Simplified Chinese)
 yue (Traditional Chinese)
 pny (Pinyin Chinese) 



Pseudo codes: 


‘post‘ for postal codes
‘link‘ for a link to a website, in particular links to the English wikipedia article, but also links to other languages in wikipedia or to other websites about the toponym.
 ‘iata‘, ‘icao‘ ,‘faac‘ ,‘tcid‘ and ‘unlc‘ for the respective airport codes

‘abbr‘ for an abbreviation
‘wkdt‘ wikidata id
‘phon‘ phonetics
‘piny‘ pinyin

‘fr_1793‘ for names used during the French Revolution














Add a new placename to the GeoNames database



In the control panel left to the map you find a couple of buttons.


For the creation of new place names go to the location of the new place name and press the 'new' button. If you have the gps coordinates of your place you can enter latitude 'comma' longitude in the search box and press 'showOnMap'. In any case you have to go to the map location of the place to be added to make sure the place does not already exist. 

You don't have to enter country and administrative division in the entry form. These information will automatically be 'reverse geocoded' from the location of the place during the save process. 

You have to be logged in to add a place name. This restriction helps to prevent vandalism. 

Guidelines : 

make sure the place does not already exist
 don't add irrelevant places like your own house. There are other projects such as tagzania for places of only personal interest.
 find the best feature class and feature code for the new place name
 the default name of the place name should be the single widely accepted international or English name. Add names in local languages as alternate names.\nthe information window\nthe information window\nedit GeoNames basic information\nedit GeoNames basic information\nAdd a new placename to the GeoNames database\nAdd a new placename to the GeoNames database\nhttp://www.geonames.org/login\nThe GeoNames Information Window\nEdit GeoNames Basic Information\nthe main name for the toponym should be a widely accepted international or English name. Local languages are entered as alternate names.\nThe language code for the alternate names are normally the 2-character ISO 639 language codes, for more exotic languages that do not have a 2-character ISO code the 3-character code is used instead. Some pseudo language codes are used to mark other entries like postal codes, abbreviations or links (see below).\nISO 639 language codes\nthe flag 'isPreferred' helps distinguish between several alternate names in the same language. It marks the most commonly used name.\nproper casing should be used. Upper case only for the first character of a term or for abbreviations.\navoid redundancy. Do not add the same name with 'minus' and blanks between terms, only add the more often use spelling variant in this case. (Ex: "La Colle sur Loup" for "La Colle-sur-Loup", it is sufficient to add "La Colle-sur-Loup" as the geonames search engine can handle searches with or without minus.)\nuse full spelling for 'Sankt' (German), 'Saint' and 'Sainte' (French). The respective abbreviations St. and Ste. are automatically handled by the search engine.\nempty language code: a default name generally understood or with unknown language.\nwuu (Simplified Chinese)\nyue (Traditional Chinese)\n‘post‘ for postal codes\n‘link‘ for a link to a website, in particular links to the English wikipedia article, but also links to other languages in wikipedia or to other websites about the toponym.\n‘iata‘, ‘icao‘ ,‘faac‘ ,‘tcid‘ and ‘unlc‘ for the respective airport codes\n‘abbr‘ for an abbreviation\n‘fr_1793‘ for names used during the French Revolution\nAdd a new placename to the GeoNames database\nmake sure the place does not already exist\ndon't add irrelevant places like your own house. There are other projects such as tagzania for places of only personal interest.\nfind the best feature class and feature code for the new place name\nthe default name of the place name should be the single widely accepted international or English name. Add names in local languages as alternate names.\nAfter pressing the add button you point with the mouse to the location of the new place name on the map. As soon as you have clicking on the map an edit form will open and you enter the place name, the feature class and the feature code of the new place name. Optionally you may also add elevation and population.\nCountry (Switzerland) and administrative division (Ticino) are automatically derived.\ninfo@geonames.org 



GeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nGeoNames Home
•
Postal Codes
•
Download / Webservice
•
Forum
•
Blog
•
Sitemap\nDownload / Webservice\n\n\n